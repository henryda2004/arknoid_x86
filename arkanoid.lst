     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  sys_read: equ 0	
     7                                  sys_write:	equ 1
     8                                  sys_nanosleep:	equ 35
     9                                  sys_time:	equ 201
    10                                  sys_fcntl:	equ 72
    11                                  
    12                                  
    13                                  STDIN_FILENO: equ 0
    14                                  
    15                                  F_SETFL:	equ 0x0004
    16                                  O_NONBLOCK: equ 0x0004
    17                                  
    18                                  ;screen clean definition
    19                                  row_cells:	equ 32	; set to any (reasonable) value you wish
    20                                  column_cells: 	equ 80 ; set to any (reasonable) value you wish
    21                                  array_length:	equ row_cells * column_cells + row_cells ; cells are mapped to bytes in the array and a new line char ends each row
    22                                  
    23                                  ;This is regarding the sleep time
    24                                  timespec:
    25 00000000 0000000000000000            tv_sec  dq 0
    26 00000008 00C2EB0B00000000            tv_nsec dq 200000000
    27                                  
    28                                  
    29                                  ;This is for cleaning up the screen
    30 00000010 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"
    31                                  clear_length:	equ $-clear
    32                                  	
    33                                  	
    34                                  
    35                                  ; Start Message
    36 00000017 202020202020202054-     msg1: db "        TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    36 00000020 45434E4F4C4F474943-
    36 00000029 4F20444520434F5354-
    36 00000032 412052494341202020-
    36 0000003B 20202020200A0D     
    37 00000042 202020202020202041-     msg2: db "        ARQUITECTURA DE COMPUTADORAS I        ", 0xA, 0xD
    37 0000004B 525155495445435455-
    37 00000054 524120444520434F4D-
    37 0000005D 50555441444F524153-
    37 00000066 204920202020202020-
    37 0000006F 200A0D             
    38 00000072 202020202020202045-     msg3: db "        ESTUDIANTE: HENRY NUNEZ PEREZ        ", 0xA, 0xD
    38 0000007B 5354554449414E5445-
    38 00000084 3A2048454E5259204E-
    38 0000008D 554E455A2050455245-
    38 00000096 5A2020202020202020-
    38 0000009F 0A0D               
    39 000000A1 202020202020202050-     msg4: db "        PROFESOR: ERNESTO RIVERA ALVARADO        ", 0xA, 0xD
    39 000000AA 524F4645534F523A20-
    39 000000B3 45524E4553544F2052-
    39 000000BC 495645524120414C56-
    39 000000C5 415241444F20202020-
    39 000000CE 202020200A0D       
    40 000000D4 202020202020202041-     msg5: db "        ARKANOID RETRO        ", 0xA, 0xD
    40 000000DD 524B414E4F49442052-
    40 000000E6 4554524F2020202020-
    40 000000EF 2020200A0D         
    41 000000F4 202020202020202050-     msg6: db "        PRESIONE CUALQUIER TECLA PARA INICIAR        ", 0xA, 0xD
    41 000000FD 524553494F4E452043-
    41 00000106 55414C515549455220-
    41 0000010F 5445434C4120504152-
    41 00000118 4120494E4943494152-
    41 00000121 20202020202020200A-
    41 0000012A 0D                 
    42                                  msg1_length: equ $-msg1
    43                                  msg2_length: equ $-msg2
    44                                  msg3_length: equ $-msg3
    45                                  msg4_length: equ $-msg4
    46                                  msg5_length: equ $-msg5
    47                                  msg6_length: equ $-msg6
    48                                  
    49                                  ; Usefull macros
    50                                  
    51                                  
    52                                  
    53                                  %macro setnonblocking 0
    54                                  	mov rax, sys_fcntl
    55                                      mov rdi, STDIN_FILENO
    56                                      mov rsi, F_SETFL
    57                                      mov rdx, O_NONBLOCK
    58                                      syscall
    59                                  %endmacro
    60                                  
    61                                  %macro unsetnonblocking 0
    62                                  	mov rax, sys_fcntl
    63                                      mov rdi, STDIN_FILENO
    64                                      mov rsi, F_SETFL
    65                                      mov rdx, 0
    66                                      syscall
    67                                  %endmacro
    68                                  
    69                                  %macro full_line 0
    70                                      times column_cells db "X"
    71                                      db 0x0a, 0xD
    72                                  %endmacro
    73                                  
    74                                  %macro hollow_line 0
    75                                      db "X"
    76                                      times column_cells-2 db " "
    77                                      db "X", 0x0a, 0xD
    78                                  %endmacro
    79                                  
    80                                  
    81                                  %macro print 2
    82                                  	mov eax, sys_write
    83                                  	mov edi, 1 	; stdout
    84                                  	mov rsi, %1
    85                                  	mov edx, %2
    86                                  	syscall
    87                                  %endmacro
    88                                  
    89                                  %macro getchar 0
    90                                  	mov     rax, sys_read
    91                                      mov     rdi, STDIN_FILENO
    92                                      mov     rsi, input_char
    93                                      mov     rdx, 1 ; number of bytes
    94                                      syscall         ;read text input from keyboard
    95                                  %endmacro
    96                                  
    97                                  %macro sleeptime 0
    98                                  	mov eax, sys_nanosleep
    99                                  	mov rdi, timespec
   100                                  	xor esi, esi		; ignore remaining time in case of call interruption
   101                                  	syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   102                                  %endmacro
   103                                  
   104                                  
   105                                  
   106                                  global _start
   107                                  
   108                                  section .bss
   109                                  
   110 00000000 ??                      input_char: resb 1
   111                                  
   112                                  section .data
   113                                  
   114                                  	; Guardamos la plantilla del tablero (32 filas)
   115                                      board_template:
   116                                          full_line
    70 00000000 58<rep 50h>         <1>  times column_cells db "X"
    71 00000050 0A0D                <1>  db 0x0a, 0xD
   117                                          %rep 30
   118                                          hollow_line
   119                                          %endrep
   118                              <1>  hollow_line
    75 00000052 58                  <2>  db "X"
    76 00000053 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000A1 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000A4 58                  <2>  db "X"
    76 000000A5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000F3 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000F6 58                  <2>  db "X"
    76 000000F7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000145 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000148 58                  <2>  db "X"
    76 00000149 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000197 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000019A 58                  <2>  db "X"
    76 0000019B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000001E9 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000001EC 58                  <2>  db "X"
    76 000001ED 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000023B 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000023E 58                  <2>  db "X"
    76 0000023F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000028D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000290 58                  <2>  db "X"
    76 00000291 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000002DF 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000002E2 58                  <2>  db "X"
    76 000002E3 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000331 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000334 58                  <2>  db "X"
    76 00000335 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000383 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000386 58                  <2>  db "X"
    76 00000387 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000003D5 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000003D8 58                  <2>  db "X"
    76 000003D9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000427 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000042A 58                  <2>  db "X"
    76 0000042B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000479 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000047C 58                  <2>  db "X"
    76 0000047D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000004CB 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000004CE 58                  <2>  db "X"
    76 000004CF 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000051D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000520 58                  <2>  db "X"
    76 00000521 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000056F 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000572 58                  <2>  db "X"
    76 00000573 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000005C1 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005C4 58                  <2>  db "X"
    76 000005C5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000613 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000616 58                  <2>  db "X"
    76 00000617 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000665 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000668 58                  <2>  db "X"
    76 00000669 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000006B7 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000006BA 58                  <2>  db "X"
    76 000006BB 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000709 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000070C 58                  <2>  db "X"
    76 0000070D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000075B 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000075E 58                  <2>  db "X"
    76 0000075F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007AD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000007B0 58                  <2>  db "X"
    76 000007B1 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007FF 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000802 58                  <2>  db "X"
    76 00000803 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000851 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000854 58                  <2>  db "X"
    76 00000855 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008A3 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008A6 58                  <2>  db "X"
    76 000008A7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008F5 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008F8 58                  <2>  db "X"
    76 000008F9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000947 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000094A 58                  <2>  db "X"
    76 0000094B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000999 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000099C 58                  <2>  db "X"
    76 0000099D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000009EB 580A0D              <2>  db "X", 0x0a, 0xD
   120                                          full_line
    70 000009EE 58<rep 50h>         <1>  times column_cells db "X"
    71 00000A3E 0A0D                <1>  db 0x0a, 0xD
   121                                      board_template_size: equ $ - board_template
   122                                  
   123                                      ; Espacio real que se usará en la ejecución
   124 00000A40 00<rep A40h>                board: times board_template_size db 0
   125                                      board_size: equ board_template_size
   126                                  
   127                                  	; Added for the terminal issue
   128 00001480 00<rep 24h>             	termios:        times 36 db 0
   129                                  	stdin:          equ 0
   130                                  	ICANON:         equ 1<<1
   131                                  	ECHO:           equ 1<<3
   132                                  	VTIME: 			equ 5
   133                                  	VMIN:			equ 6
   134                                  	CC_C:			equ 18
   135                                  
   136                                  section .text
   137                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   138                                  canonical_off:
   139 0000012B E86F000000                      call read_stdin_termios
   140                                  
   141                                          ; clear canonical bit in local mode flags
   142 00000130 50                              push rax
   143 00000131 B802000000                      mov eax, ICANON
   144 00000136 F7D0                            not eax
   145 00000138 2105(8C140000)                  and [termios+12], eax
   146 0000013E C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   147 00000145 C605(98140000)00        		mov byte[termios+CC_C+VMIN], 0
   148 0000014C 58                              pop rax
   149                                  
   150 0000014D E86C000000                      call write_stdin_termios
   151 00000152 C3                              ret
   152                                  
   153                                  echo_off:
   154 00000153 E847000000                      call read_stdin_termios
   155                                  
   156                                          ; clear echo bit in local mode flags
   157 00000158 50                              push rax
   158 00000159 B808000000                      mov eax, ECHO
   159 0000015E F7D0                            not eax
   160 00000160 2105(8C140000)                  and [termios+12], eax
   161 00000166 58                              pop rax
   162                                  
   163 00000167 E852000000                      call write_stdin_termios
   164 0000016C C3                              ret
   165                                  
   166                                  canonical_on:
   167 0000016D E82D000000                      call read_stdin_termios
   168                                  
   169                                          ; set canonical bit in local mode flags
   170 00000172 830D(8C140000)02                or dword [termios+12], ICANON
   171 00000179 C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   172 00000180 C605(98140000)01        		mov byte[termios+CC_C+VMIN], 1
   173 00000187 E832000000                      call write_stdin_termios
   174 0000018C C3                              ret
   175                                  
   176                                  echo_on:
   177 0000018D E80D000000                      call read_stdin_termios
   178                                  
   179                                          ; set echo bit in local mode flags
   180 00000192 830D(8C140000)08                or dword [termios+12], ECHO
   181                                  
   182 00000199 E820000000                      call write_stdin_termios
   183 0000019E C3                              ret
   184                                  
   185                                  read_stdin_termios:
   186 0000019F 50                              push rax
   187 000001A0 53                              push rbx
   188 000001A1 51                              push rcx
   189 000001A2 52                              push rdx
   190                                  
   191 000001A3 B836000000                      mov eax, 36h
   192 000001A8 BB00000000                      mov ebx, stdin
   193 000001AD B901540000                      mov ecx, 5401h
   194 000001B2 BA[80140000]                    mov edx, termios
   195 000001B7 CD80                            int 80h
   196                                  
   197 000001B9 5A                              pop rdx
   198 000001BA 59                              pop rcx
   199 000001BB 5B                              pop rbx
   200 000001BC 58                              pop rax
   201 000001BD C3                              ret
   202                                  
   203                                  write_stdin_termios:
   204 000001BE 50                              push rax
   205 000001BF 53                              push rbx
   206 000001C0 51                              push rcx
   207 000001C1 52                              push rdx
   208                                  
   209 000001C2 B836000000                      mov eax, 36h
   210 000001C7 BB00000000                      mov ebx, stdin
   211 000001CC B902540000                      mov ecx, 5402h
   212 000001D1 BA[80140000]                    mov edx, termios
   213 000001D6 CD80                            int 80h
   214                                  
   215 000001D8 5A                              pop rdx
   216 000001D9 59                              pop rcx
   217 000001DA 5B                              pop rbx
   218 000001DB 58                              pop rax
   219 000001DC C3                              ret
   220                                  
   221                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   222                                  
   223                                  char_equal: equ 61
   224                                  char_space: equ 32
   225                                  char_O: equ 79
   226                                  left_direction: equ -1
   227                                  right_direction: equ 1
   228                                  
   229                                  
   230                                  section .data
   231                                  
   232                                  ; Mensajes para los niveles
   233 000014A4 4E4956454C20                level_msg: db "NIVEL "
   234                                      level_msg_len: equ $ - level_msg
   235 000014AA 31                          level_1_char: db "1"
   236 000014AB 32                          level_2_char: db "2"
   237 000014AC 33                          level_3_char: db "3"
   238 000014AD 34                          level_4_char: db "4"
   239 000014AE 35                          level_5_char: db "5"
   240                                      level_char_len: equ 1
   241                                  
   242                                      ; Timespec para la pausa del mensaje de nivel
   243                                      level_display_time:
   244 000014AF 0100000000000000                lvl_tv_sec dq 1           ; 1 segundo
   245 000014B7 0000000000000000                lvl_tv_nsec dq 0
   246                                          
   247 000014BF [B013000000000000]      	pallet_position dq board + 38 + 29 * (column_cells +2)
   248 000014C7 0500000000000000            pallet_size dq 5
   249 000014CF 0500000000000000            default_pallet_size dq 5    ; Tamaño normal de la paleta
   250 000014D7 0700000000000000            extended_pallet_size dq 7   ; Tamaño extendido de la paleta
   251                                  
   252 000014DF 2800000000000000        	ball_x_pos: dq 40
   253 000014E7 1C00000000000000        	ball_y_pos: dq 28
   254 000014EF 0100000000000000            ball_direction_x dq 1    ; 1 = derecha, -1 = izquierda
   255 000014F7 FFFFFFFFFFFFFFFF            ball_direction_y dq -1   ; -1 = arriba, 1 = abajo
   256 000014FF 00                          ball_moving db 0         ; 0 = estática, 1 = en movimiento
   257 00001500 00                          ball_active db 0
   258                                  
   259 00001501 0000000000000000            ball2_x_pos:        dq 0
   260 00001509 0000000000000000            ball2_y_pos:        dq 0
   261 00001511 0000000000000000            ball2_direction_x:  dq 0
   262 00001519 0000000000000000            ball2_direction_y:  dq 0
   263 00001521 00                          ball2_moving:       db 0    ; 0 = estática, 1 = en movimiento
   264 00001522 00                          ball2_active:       db 0    ; 0 = inactiva, 1 = activa
   265                                  
   266                                      ; -- Pelota 3 --
   267 00001523 0000000000000000            ball3_x_pos:        dq 0
   268 0000152B 0000000000000000            ball3_y_pos:        dq 0
   269 00001533 0000000000000000            ball3_direction_x:  dq 0
   270 0000153B 0000000000000000            ball3_direction_y:  dq 0
   271 00001543 00                          ball3_moving:       db 0
   272 00001544 00                          ball3_active:       db 0
   273                                  
   274                                  
   275                                  ; Definir los límites de la pantalla o área de juego
   276                                      board_top_left_x equ 1
   277                                      board_top_left_y equ 1
   278                                      board_bottom_right_x equ column_cells - 1
   279                                      board_bottom_right_y equ row_cells
   280                                  
   281                                      ; Limites laterales
   282                                      left_edge equ board_top_left_x               ; Límite izquierdo en la primera columna
   283                                      right_edge equ board_bottom_right_x         ; Límite derecho en la última columna
   284                                  
   285                                      ; O también puedes hacerlo así si prefieres usando las coordenadas en memoria para obtener la ubicación exacta:
   286 00001545 [920A000000000000]          left_edge_position dq board + (board_top_left_y * (column_cells + 2)) ; Coordenada de la parte izquierda del marco
   287 0000154D [E00A000000000000]          right_edge_position dq board + (board_top_left_y * (column_cells + 2) + board_bottom_right_x - 1) ; Coordenada de la parte derecha del marco
   288                                  
   289                                      ; Definición de tipos de bloques
   290 00001555 555555555555                block_type_1: db "UUUUUU"    ; Durabilidad 1
   291 0000155B 4F4F4F4F4F4F                block_type_2: db "OOOOOO"    ; Durabilidad 2
   292 00001561 444444444444                block_type_3: db "DDDDDD"    ; Durabilidad 3
   293 00001567 4C4C4C4C4C4C                block_type_4: db "LLLLLL"    ; Durabilidad 4
   294 0000156D 565656565656                block_type_5: db "VVVVVV"    ; Durabilidad 5
   295 00001573 383838383838                block_type_6: db "888888"    ; Durabilidad 6
   296                                      block_length: equ 6        ; Longitud de cada bloque
   297                                  
   298                                      ; Estructura para el nivel actual
   299 00001579 05                          current_level db 5
   300 0000157A 00                          blocks_remaining db 0
   301                                  
   302                                      ; Definición del nivel 1 (ejemplo con múltiples bloques)destroyed_blocks
   303                                      ; Formato: x_pos, y_pos, tipo_bloque, durabilidad_actual
   304                                      level1_blocks:
   305                                          ; Tercera fila (tipo 3)
   306 0000157B 0105050220                      db 1, 5, 5, 2, ' '   
   307 00001580 0705050220                      db 7, 5, 5, 2, ' '    
   308 00001585 0D05050220                      db 13, 5, 5, 2, ' '   
   309 0000158A 1305050220                      db 19, 5, 5, 2, ' '   
   310 0000158F 1905050220                      db 25, 5, 5, 2, ' '   
   311 00001594 1F05050220                      db 31, 5, 5, 2, ' '   
   312 00001599 2505050220                      db 37, 5, 5, 2, ' '   
   313 0000159E 2B05050220                      db 43, 5, 5, 2, ' '   
   314 000015A3 3105050220                      db 49, 5, 5, 2, ' '   
   315 000015A8 3705050220                      db 55, 5, 5, 2, ' '   
   316 000015AD 3D05050220                      db 61, 5, 5, 2, ' '  
   317 000015B2 4305050220                      db 67, 5, 5, 2, ' '   
   318 000015B7 4905050220                      db 73, 5, 5, 2, ' '   
   319                                  
   320 000015BC 0106040120                      db 1, 6, 4, 1, ' '   
   321 000015C1 0706020120                      db 7, 6, 2, 1, ' '    
   322 000015C6 0D06040120                      db 13, 6, 4, 1, ' '   
   323 000015CB 1306020120                      db 19, 6, 2, 1, ' '   
   324 000015D0 1906040120                      db 25, 6, 4, 1, ' '   
   325 000015D5 1F06020120                      db 31, 6, 2, 1, ' '   
   326 000015DA 2506040120                      db 37, 6, 4, 1, ' '   
   327 000015DF 2B06020120                      db 43, 6, 2, 1, ' '   
   328 000015E4 3106040120                      db 49, 6, 4, 1, ' '   
   329 000015E9 3706020120                      db 55, 6, 2, 1, ' '   
   330 000015EE 3D06040120                      db 61, 6, 4, 1, ' '  
   331 000015F3 4306020120                      db 67, 6, 2, 1, ' '   
   332 000015F8 4906040120                      db 73, 6, 4, 1, ' ' 
   333                                  
   334 000015FD 0107010120                      db 1, 7, 1, 1, ' '   
   335 00001602 0707030120                      db 7, 7, 3, 1, ' '    
   336 00001607 0D07010120                      db 13, 7, 1, 1, ' '   
   337 0000160C 1307030120                      db 19, 7, 3, 1, ' '   
   338 00001611 1907010120                      db 25, 7, 1, 1, ' '   
   339 00001616 1F07030120                      db 31, 7, 3, 1, ' '   
   340 0000161B 2507010120                      db 37, 7, 1, 1, ' '   
   341 00001620 2B07030120                      db 43, 7, 3, 1, ' '   
   342 00001625 3107010120                      db 49, 7, 1, 1, ' '   
   343 0000162A 3707030120                      db 55, 7, 3, 1, ' '   
   344 0000162F 3D07010120                      db 61, 7, 1, 1, ' '  
   345 00001634 4307030120                      db 67, 7, 3, 1, ' '   
   346 00001639 4907010120                      db 73, 7, 1, 1, ' ' 
   347                                  
   348 0000163E 0108040120                      db 1, 8, 4, 1, ' '   
   349 00001643 0708020120                      db 7, 8, 2, 1, ' '    
   350 00001648 0D08040120                      db 13, 8, 4, 1, ' '   
   351 0000164D 1308020120                      db 19, 8, 2, 1, ' '   
   352 00001652 1908040120                      db 25, 8, 4, 1, ' '   
   353 00001657 1F08020120                      db 31, 8, 2, 1, ' '   
   354 0000165C 2508040120                      db 37, 8, 4, 1, ' '   
   355 00001661 2B08020120                      db 43, 8, 2, 1, ' '   
   356 00001666 3108040120                      db 49, 8, 4, 1, ' '   
   357 0000166B 3708020120                      db 55, 8, 2, 1, ' '   
   358 00001670 3D08040120                      db 61, 8, 4, 1, ' '  
   359 00001675 4308020120                      db 67, 8, 2, 1, ' '   
   360 0000167A 4908040120                      db 73, 8, 4, 1, ' ' 
   361                                  
   362 0000167F 0109010120                      db 1, 9, 1, 1, ' '   
   363 00001684 0709030120                      db 7, 9, 3, 1, ' '    
   364 00001689 0D09010120                      db 13, 9, 1, 1, ' '   
   365 0000168E 1309030120                      db 19, 9, 3, 1, ' '   
   366 00001693 1909010120                      db 25, 9, 1, 1, ' '   
   367 00001698 1F09030120                      db 31, 9, 3, 1, ' '   
   368 0000169D 2509010120                      db 37, 9, 1, 1, ' '   
   369 000016A2 2B09030120                      db 43, 9, 3, 1, ' '   
   370 000016A7 3109010120                      db 49, 9, 1, 1, ' '   
   371 000016AC 3709030120                      db 55, 9, 3, 1, ' '   
   372 000016B1 3D09010120                      db 61, 9, 1, 1, ' '  
   373 000016B6 4309030120                      db 67, 9, 3, 1, ' '   
   374 000016BB 4909010120                      db 73, 9, 1, 1, ' ' 
   375                                  
   376 000016C0 010A040120                      db 1, 10, 4, 1, ' '   
   377 000016C5 070A020120                      db 7, 10, 2, 1, ' '    
   378 000016CA 0D0A040120                      db 13, 10, 4, 1, ' '   
   379 000016CF 130A020120                      db 19, 10, 2, 1, ' '   
   380 000016D4 190A040120                      db 25, 10, 4, 1, ' '   
   381 000016D9 1F0A020120                      db 31, 10, 2, 1, ' '   
   382 000016DE 250A040120                      db 37, 10, 4, 1, ' '   
   383 000016E3 2B0A020120                      db 43, 10, 2, 1, ' '   
   384 000016E8 310A040120                      db 49, 10, 4, 1, ' '   
   385 000016ED 370A02014C                      db 55, 10, 2, 1, 'L'   
   386 000016F2 3D0A040120                      db 61, 10, 4, 1, ' '  
   387 000016F7 430A020120                      db 67, 10, 2, 1, ' '   
   388 000016FC 490A040120                      db 73, 10, 4, 1, ' ' 
   389                                  
   390                                      level1_blocks_count equ 78   ; Cantidad total de bloques
   391                                  
   392                                      ; Nivel 2: Bloques de prueba
   393                                      level2_blocks:
   394 00001701 0103040120                      db 1, 3, 4, 1, ' '
   395                                  
   396 00001706 0104030120                      db 1, 4, 3, 1, ' '   
   397 0000170B 0704040120                      db 7, 4, 4, 1, ' '   
   398                                                  
   399 00001710 0105020120                      db 1, 5, 2, 1, ' '   
   400 00001715 0705030120                      db 7, 5, 3, 1, ' '
   401 0000171A 0D05040120                      db 13, 5, 4, 1, ' '
   402                                  
   403 0000171F 0106010120                      db 1, 6, 1, 1, ' '   
   404 00001724 0706020120                      db 7, 6, 2, 1, ' '
   405 00001729 0D06030120                      db 13, 6, 3, 1, ' '
   406 0000172E 1306040120                      db 19, 6, 4, 1, ' '   
   407                                  
   408 00001733 0107040120                      db 1, 7, 4, 1, ' '   
   409 00001738 0707010120                      db 7, 7, 1, 1, ' '
   410 0000173D 0D07020120                      db 13, 7, 2, 1, ' '
   411 00001742 1307030120                      db 19, 7, 3, 1, ' '  
   412 00001747 1907040120                      db 25, 7, 4, 1, ' '   
   413                                  
   414 0000174C 0108030120                      db 1, 8, 3, 1, ' '   
   415 00001751 0708040120                      db 7, 8, 4, 1, ' '
   416 00001756 0D08010120                      db 13, 8, 1, 1, ' '
   417 0000175B 1308020120                      db 19, 8, 2, 1, ' '  
   418 00001760 1908030120                      db 25, 8, 3, 1, ' ' 
   419 00001765 1F08040120                      db 31, 8, 4, 1, ' '   
   420                                  
   421 0000176A 0109020120                      db 1, 9, 2, 1, ' '   
   422 0000176F 0709030120                      db 7, 9, 3, 1, ' '
   423 00001774 0D09040120                      db 13, 9, 4, 1, ' '
   424 00001779 1309010120                      db 19, 9, 1, 1, ' '  
   425 0000177E 1909020120                      db 25, 9, 2, 1, ' ' 
   426 00001783 1F09030120                      db 31, 9, 3, 1, ' ' 
   427 00001788 2509040120                      db 37, 9, 4, 1, ' '   
   428                                  
   429 0000178D 010A010120                      db 1, 10, 1, 1, ' '   
   430 00001792 070A020120                      db 7, 10, 2, 1, ' '
   431 00001797 0D0A030120                      db 13, 10, 3, 1, ' '
   432 0000179C 130A040120                      db 19, 10, 4, 1, ' '  
   433 000017A1 190A010120                      db 25, 10, 1, 1, ' ' 
   434 000017A6 1F0A020120                      db 31, 10, 2, 1, ' ' 
   435 000017AB 250A030120                      db 37, 10, 3, 1, ' '  
   436 000017B0 2B0A040120                      db 43, 10, 4, 1, ' '   
   437                                  
   438 000017B5 010B040120                      db 1, 11, 4, 1, ' '   
   439 000017BA 070B010120                      db 7, 11, 1, 1, ' '
   440 000017BF 0D0B020120                      db 13, 11, 2, 1, ' '
   441 000017C4 130B030120                      db 19, 11, 3, 1, ' '  
   442 000017C9 190B040120                      db 25, 11, 4, 1, ' ' 
   443 000017CE 1F0B010120                      db 31, 11, 1, 1, ' ' 
   444 000017D3 250B020120                      db 37, 11, 2, 1, ' '  
   445 000017D8 2B0B030120                      db 43, 11, 3, 1, ' ' 
   446 000017DD 310B040120                      db 49, 11, 4, 1, ' '   
   447                                  
   448 000017E2 010C030120                      db 1, 12, 3, 1, ' '   
   449 000017E7 070C040120                      db 7, 12, 4, 1, ' '
   450 000017EC 0D0C010120                      db 13, 12, 1, 1, ' '
   451 000017F1 130C020120                      db 19, 12, 2, 1, ' '  
   452 000017F6 190C030120                      db 25, 12, 3, 1, ' ' 
   453 000017FB 1F0C040120                      db 31, 12, 4, 1, ' ' 
   454 00001800 250C010120                      db 37, 12, 1, 1, ' '  
   455 00001805 2B0C020120                      db 43, 12, 2, 1, ' ' 
   456 0000180A 310C030120                      db 49, 12, 3, 1, ' '
   457 0000180F 370C040120                      db 55, 12, 4, 1, ' '   
   458                                  
   459 00001814 010D020120                      db 1, 13, 2, 1, ' '   
   460 00001819 070D030120                      db 7, 13, 3, 1, ' '
   461 0000181E 0D0D040120                      db 13, 13, 4, 1, ' '
   462 00001823 130D010120                      db 19, 13, 1, 1, ' '  
   463 00001828 190D020120                      db 25, 13, 2, 1, ' ' 
   464 0000182D 1F0D030120                      db 31, 13, 3, 1, ' ' 
   465 00001832 250D040120                      db 37, 13, 4, 1, ' '  
   466 00001837 2B0D010120                      db 43, 13, 1, 1, ' ' 
   467 0000183C 310D020120                      db 49, 13, 2, 1, ' '
   468 00001841 370D030120                      db 55, 13, 3, 1, ' ' 
   469 00001846 3D0D040120                      db 61, 13, 4, 1, ' '   
   470                                  
   471 0000184B 010E010120                      db 1, 14, 1, 1, ' '   
   472 00001850 070E020120                      db 7, 14, 2, 1, ' '
   473 00001855 0D0E030120                      db 13, 14, 3, 1, ' '
   474 0000185A 130E040120                      db 19, 14, 4, 1, ' '  
   475 0000185F 190E010120                      db 25, 14, 1, 1, ' ' 
   476 00001864 1F0E020120                      db 31, 14, 2, 1, ' ' 
   477 00001869 250E030120                      db 37, 14, 3, 1, ' '  
   478 0000186E 2B0E040120                      db 43, 14, 4, 1, ' ' 
   479 00001873 310E010120                      db 49, 14, 1, 1, ' '
   480 00001878 370E020120                      db 55, 14, 2, 1, ' ' 
   481 0000187D 3D0E030120                      db 61, 14, 3, 1, ' '  
   482 00001882 430E040120                      db 67, 14, 4, 1, ' '   
   483                                  
   484 00001887 010F050220                      db 1, 15, 5, 2, ' '   
   485 0000188C 070F050220                      db 7, 15, 5, 2, ' '
   486 00001891 0D0F050220                      db 13, 15, 5, 2, ' '
   487 00001896 130F050220                      db 19, 15, 5, 2, ' '  
   488 0000189B 190F050220                      db 25, 15, 5, 2, ' ' 
   489 000018A0 1F0F050220                      db 31, 15, 5, 2, ' ' 
   490 000018A5 250F050220                      db 37, 15, 5, 2, ' '  
   491 000018AA 2B0F050220                      db 43, 15, 5, 2, ' ' 
   492 000018AF 310F050220                      db 49, 15, 5, 2, ' '
   493 000018B4 370F050220                      db 55, 15, 5, 2, ' ' 
   494 000018B9 3D0F050220                      db 61, 15, 5, 2, ' '  
   495 000018BE 430F050220                      db 67, 15, 5, 2, ' '
   496 000018C3 490F040120                      db 73, 15, 4, 1, ' '   
   497                                         
   498                                  
   499                                      level2_blocks_count equ 91
   500                                  
   501                                      ; Nivel 3
   502                                      level3_blocks:
   503                                  
   504 000018C8 0104010120                      db 1, 4, 1, 1, ' '   
   505 000018CD 0704020120                      db 7, 4, 2, 1, ' '    
   506 000018D2 0D04010120                      db 13, 4, 1, 1, ' '   
   507 000018D7 1304020120                      db 19, 4, 2, 1, ' '   
   508 000018DC 1904010120                      db 25, 4, 1, 1, ' '   
   509 000018E1 1F04020120                      db 31, 4, 2, 1, ' '   
   510 000018E6 2504010120                      db 37, 4, 1, 1, ' '   
   511 000018EB 2B04020120                      db 43, 4, 2, 1, ' '   
   512 000018F0 3104010120                      db 49, 4, 1, 1, ' '   
   513 000018F5 3704020120                      db 55, 4, 2, 1, ' '   
   514 000018FA 3D04010120                      db 61, 4, 1, 1, ' '  
   515 000018FF 4304020120                      db 67, 4, 2, 1, ' '   
   516 00001904 4904010120                      db 73, 4, 1, 1, ' ' 
   517                                  
   518 00001909 0106040120                      db 1, 6, 4, 1, ' '   
   519 0000190E 0706040120                      db 7, 6, 4, 1, ' '    
   520 00001913 0D06040120                      db 13, 6, 4, 1, ' '   
   521 00001918 1306063C20                      db 19, 6, 6, 60, ' '   
   522 0000191D 1906063C20                      db 25, 6, 6, 60, ' '   
   523 00001922 1F06063C20                      db 31, 6, 6, 60, ' '   
   524 00001927 2506063C20                      db 37, 6, 6, 60, ' '   
   525 0000192C 2B06063C20                      db 43, 6, 6, 60, ' '   
   526 00001931 3106063C20                      db 49, 6, 6, 60, ' '   
   527 00001936 3706063C20                      db 55, 6, 6, 60, ' '   
   528 0000193B 3D06063C20                      db 61, 6, 6, 60, ' '  
   529 00001940 4306063C20                      db 67, 6, 6, 60, ' '   
   530 00001945 4906063C20                      db 73, 6, 6, 60, ' ' 
   531                                  
   532 0000194A 0108040120                      db 1, 8, 4, 1, ' '   
   533 0000194F 0708030120                      db 7, 8, 3, 1, ' '    
   534 00001954 0D08040120                      db 13, 8, 4, 1, ' '   
   535 00001959 1308030120                      db 19, 8, 3, 1, ' '   
   536 0000195E 1908040120                      db 25, 8, 4, 1, ' '   
   537 00001963 1F08030120                      db 31, 8, 3, 1, ' '   
   538 00001968 2508040120                      db 37, 8, 4, 1, ' '   
   539 0000196D 2B08030120                      db 43, 8, 3, 1, ' '   
   540 00001972 3108040120                      db 49, 8, 4, 1, ' '   
   541 00001977 3708030120                      db 55, 8, 3, 1, ' '   
   542 0000197C 3D08040120                      db 61, 8, 4, 1, ' '  
   543 00001981 4308030120                      db 67, 8, 3, 1, ' '   
   544 00001986 4908040120                      db 73, 8, 4, 1, ' ' 
   545                                  
   546 0000198B 010A063C20                      db 1, 10, 6, 60, ' '   
   547 00001990 070A063C20                      db 7, 10, 6, 60, ' '    
   548 00001995 0D0A063C20                      db 13, 10, 6, 60, ' '   
   549 0000199A 130A063C20                      db 19, 10, 6, 60, ' '   
   550 0000199F 190A063C20                      db 25, 10, 6, 60, ' '   
   551 000019A4 1F0A063C20                      db 31, 10, 6, 60, ' '   
   552 000019A9 250A063C20                      db 37, 10, 6, 60, ' '   
   553 000019AE 2B0A063C20                      db 43, 10, 6, 60, ' '   
   554 000019B3 310A063C20                      db 49, 10, 6, 60, ' '   
   555 000019B8 370A063C20                      db 55, 10, 6, 60, ' '   
   556 000019BD 3D0A030120                      db 61, 10, 3, 1, ' '  
   557 000019C2 430A030120                      db 67, 10, 3, 1, ' '   
   558 000019C7 490A030120                      db 73, 10, 3, 1, ' ' 
   559                                  
   560 000019CC 010C010120                      db 1, 12, 1, 1, ' '   
   561 000019D1 070C020120                      db 7, 12, 2, 1, ' '    
   562 000019D6 0D0C010120                      db 13, 12, 1, 1, ' '   
   563 000019DB 130C020120                      db 19, 12, 2, 1, ' '   
   564 000019E0 190C010120                      db 25, 12, 1, 1, ' '   
   565 000019E5 1F0C020120                      db 31, 12, 2, 1, ' '   
   566 000019EA 250C010120                      db 37, 12, 1, 1, ' '   
   567 000019EF 2B0C020120                      db 43, 12, 2, 1, ' '   
   568 000019F4 310C010120                      db 49, 12, 1, 1, ' '   
   569 000019F9 370C020120                      db 55, 12, 2, 1, ' '   
   570 000019FE 3D0C010120                      db 61, 12, 1, 1, ' '  
   571 00001A03 430C020120                      db 67, 12, 2, 1, ' '   
   572 00001A08 490C010120                      db 73, 12, 1, 1, ' ' 
   573                                  
   574 00001A0D 010E020120                      db 1, 14, 2, 1, ' '   
   575 00001A12 070E020120                      db 7, 14, 2, 1, ' '    
   576 00001A17 0D0E020120                      db 13, 14, 2, 1, ' '   
   577 00001A1C 130E063C20                      db 19, 14, 6, 60, ' '   
   578 00001A21 190E063C20                      db 25, 14, 6, 60, ' '   
   579 00001A26 1F0E063C20                      db 31, 14, 6, 60, ' '   
   580 00001A2B 250E063C20                      db 37, 14, 6, 60, ' '   
   581 00001A30 2B0E063C20                      db 43, 14, 6, 60, ' '   
   582 00001A35 310E063C20                      db 49, 14, 6, 60, ' '   
   583 00001A3A 370E063C20                      db 55, 14, 6, 60, ' '   
   584 00001A3F 3D0E063C20                      db 61, 14, 6, 60, ' '  
   585 00001A44 430E063C20                      db 67, 14, 6, 60, ' '   
   586 00001A49 490E063C20                      db 73, 14, 6, 60, ' ' 
   587                                  
   588 00001A4E 0110020120                      db 1, 16, 2, 1, ' '   
   589 00001A53 0710030120                      db 7, 16, 3, 1, ' '    
   590 00001A58 0D10020120                      db 13, 16, 2, 1, ' '   
   591 00001A5D 1310030120                      db 19, 16, 3, 1, ' '   
   592 00001A62 1910020120                      db 25, 16, 2, 1, ' '   
   593 00001A67 1F10030120                      db 31, 16, 3, 1, ' '   
   594 00001A6C 2510020120                      db 37, 16, 2, 1, ' '   
   595 00001A71 2B10030120                      db 43, 16, 3, 1, ' '   
   596 00001A76 3110020120                      db 49, 16, 2, 1, ' '   
   597 00001A7B 3710030120                      db 55, 16, 3, 1, ' '   
   598 00001A80 3D10020120                      db 61, 16, 2, 1, ' '  
   599 00001A85 4310030120                      db 67, 16, 3, 1, ' '   
   600 00001A8A 4910020120                      db 73, 16, 2, 1, ' ' 
   601                                  
   602                                  
   603 00001A8F 0112063C20                      db 1, 18, 6, 60, ' '   
   604 00001A94 0712063C20                      db 7, 18, 6, 60, ' '    
   605 00001A99 0D12063C20                      db 13, 18, 6, 60, ' '   
   606 00001A9E 1312063C20                      db 19, 18, 6, 60, ' '   
   607 00001AA3 1912063C20                      db 25, 18, 6, 60, ' '   
   608 00001AA8 1F12063C20                      db 31, 18, 6, 60, ' '   
   609 00001AAD 2512063C20                      db 37, 18, 6, 60, ' '   
   610 00001AB2 2B12063C20                      db 43, 18, 6, 60, ' '   
   611 00001AB7 3112063C20                      db 49, 18, 6, 60, ' '   
   612 00001ABC 3712063C20                      db 55, 18, 6, 60, ' '   
   613 00001AC1 3D12010120                      db 61, 18, 1, 1, ' '  
   614 00001AC6 4312010120                      db 67, 18, 1, 1, ' '   
   615 00001ACB 4912010120                      db 73, 18, 1, 1, ' ' 
   616                                  
   617                                      level3_blocks_count equ 104
   618                                  
   619                                      ; Nivel 4
   620                                      level4_blocks:
   621                                  
   622 00001AD0 0704010120                      db 7, 4, 1, 1, ' '    
   623 00001AD5 0D04020120                      db 13, 4, 2, 1, ' '   
   624 00001ADA 1304030120                      db 19, 4, 3, 1, ' '   
   625 00001ADF 1904050220                      db 25, 4, 5, 2, ' '   
   626 00001AE4 1F04020120                      db 31, 4, 2, 1, ' '
   627                                  
   628 00001AE9 2B04010120                      db 43, 4, 1, 1, ' '   
   629 00001AEE 3104020120                      db 49, 4, 2, 1, ' '   
   630 00001AF3 3704030120                      db 55, 4, 3, 1, ' '   
   631 00001AF8 3D04040120                      db 61, 4, 4, 1, ' '  
   632 00001AFD 4304020120                      db 67, 4, 2, 1, ' ' 
   633                                  
   634 00001B02 0705020120                      db 7, 5, 2, 1, ' '    
   635 00001B07 0D05030120                      db 13, 5, 3, 1, ' '   
   636 00001B0C 1305050220                      db 19, 5, 5, 2, ' '   
   637 00001B11 1905020120                      db 25, 5, 2, 1, ' '   
   638 00001B16 1F05010120                      db 31, 5, 1, 1, ' '
   639                                  
   640 00001B1B 2B05020120                      db 43, 5, 2, 1, ' '   
   641 00001B20 3105030120                      db 49, 5, 3, 1, ' '   
   642 00001B25 3705040120                      db 55, 5, 4, 1, ' '   
   643 00001B2A 3D05020120                      db 61, 5, 2, 1, ' '  
   644 00001B2F 4305050220                      db 67, 5, 5, 2, ' '  
   645                                  
   646 00001B34 0706030120                      db 7, 6, 3, 1, ' '    
   647 00001B39 0D06050220                      db 13, 6, 5, 2, ' '   
   648 00001B3E 1306020120                      db 19, 6, 2, 1, ' '   
   649 00001B43 1906010120                      db 25, 6, 1, 1, ' '   
   650 00001B48 1F06020120                      db 31, 6, 2, 1, ' '
   651                                  
   652 00001B4D 2B06030120                      db 43, 6, 3, 1, ' '   
   653 00001B52 3106040120                      db 49, 6, 4, 1, ' '   
   654 00001B57 3706020120                      db 55, 6, 2, 1, ' '   
   655 00001B5C 3D06050220                      db 61, 6, 5, 2, ' '  
   656 00001B61 4306020120                      db 67, 6, 2, 1, ' '
   657                                  
   658 00001B66 0707050220                      db 7, 7, 5, 2, ' '    
   659 00001B6B 0D07020120                      db 13, 7, 2, 1, ' '   
   660 00001B70 1307010120                      db 19, 7, 1, 1, ' '   
   661 00001B75 1907020120                      db 25, 7, 2, 1, ' '   
   662 00001B7A 1F07030120                      db 31, 7, 3, 1, ' '
   663                                  
   664 00001B7F 2B07040120                      db 43, 7, 4, 1, ' '   
   665 00001B84 3107020120                      db 49, 7, 2, 1, ' '   
   666 00001B89 3707050220                      db 55, 7, 5, 2, ' '   
   667 00001B8E 3D07020120                      db 61, 7, 2, 1, ' '  
   668 00001B93 4307030120                      db 67, 7, 3, 1, ' '
   669                                  
   670 00001B98 0708020120                      db 7, 8, 2, 1, ' '    
   671 00001B9D 0D08010120                      db 13, 8, 1, 1, ' '   
   672 00001BA2 1308020120                      db 19, 8, 2, 1, ' '   
   673 00001BA7 1908030120                      db 25, 8, 3, 1, ' '   
   674 00001BAC 1F08040120                      db 31, 8, 4, 1, ' '
   675                                  
   676 00001BB1 2B08020120                      db 43, 8, 2, 1, ' '   
   677 00001BB6 3108050220                      db 49, 8, 5, 2, ' '   
   678 00001BBB 3708020120                      db 55, 8, 2, 1, ' '   
   679 00001BC0 3D08030120                      db 61, 8, 3, 1, ' '  
   680 00001BC5 4308040120                      db 67, 8, 4, 1, ' '
   681                                  
   682 00001BCA 0709010120                      db 7, 9, 1, 1, ' '    
   683 00001BCF 0D09020120                      db 13, 9, 2, 1, ' '   
   684 00001BD4 1309030120                      db 19, 9, 3, 1, ' '   
   685 00001BD9 1909040120                      db 25, 9, 4, 1, ' '   
   686 00001BDE 1F09020120                      db 31, 9, 2, 1, ' '
   687                                  
   688 00001BE3 2B09050220                      db 43, 9, 5, 2, ' '   
   689 00001BE8 3109020120                      db 49, 9, 2, 1, ' '   
   690 00001BED 3709030120                      db 55, 9, 3, 1, ' '   
   691 00001BF2 3D09040120                      db 61, 9, 4, 1, ' '  
   692 00001BF7 4309020120                      db 67, 9, 2, 1, ' '
   693                                  
   694 00001BFC 070A020120                      db 7, 10, 2, 1, ' '    
   695 00001C01 0D0A030120                      db 13, 10, 3, 1, ' '   
   696 00001C06 130A040120                      db 19, 10, 4, 1, ' '   
   697 00001C0B 190A020120                      db 25, 10, 2, 1, ' '   
   698 00001C10 1F0A010120                      db 31, 10, 1, 1, ' '
   699                                  
   700 00001C15 2B0A020120                      db 43, 10, 2, 1, ' '   
   701 00001C1A 310A030120                      db 49, 10, 3, 1, ' '   
   702 00001C1F 370A040120                      db 55, 10, 4, 1, ' '   
   703 00001C24 3D0A020120                      db 61, 10, 2, 1, ' '  
   704 00001C29 430A010120                      db 67, 10, 1, 1, ' '
   705                                  
   706 00001C2E 070B030120                      db 7, 11, 3, 1, ' '   
   707 00001C33 0D0B040120                      db 13, 11, 4, 1, ' '   
   708 00001C38 130B020120                      db 19, 11, 2, 1, ' '   
   709 00001C3D 190B010120                      db 25, 11, 1, 1, ' '  
   710 00001C42 1F0B050220                      db 31, 11, 5, 2, ' '
   711                                  
   712 00001C47 2B0B030120                      db 43, 11, 3, 1, ' '   
   713 00001C4C 310B040120                      db 49, 11, 4, 1, ' '   
   714 00001C51 370B020120                      db 55, 11, 2, 1, ' '   
   715 00001C56 3D0B010120                      db 61, 11, 1, 1, ' '  
   716 00001C5B 430B020120                      db 67, 11, 2, 1, ' '
   717                                  
   718 00001C60 070C040120                      db 7, 12, 4, 1, ' '   
   719 00001C65 0D0C020120                      db 13, 12, 2, 1, ' '   
   720 00001C6A 130C010120                      db 19, 12, 1, 1, ' '   
   721 00001C6F 190C050220                      db 25, 12, 5, 2, ' '  
   722 00001C74 1F0C030120                      db 31, 12, 3, 1, ' '
   723                                  
   724 00001C79 2B0C040120                      db 43, 12, 4, 1, ' '    
   725 00001C7E 310C020120                      db 49, 12, 2, 1, ' '   
   726 00001C83 370C010120                      db 55, 12, 1, 1, ' '   
   727 00001C88 3D0C020120                      db 61, 12, 2, 1, ' '   
   728 00001C8D 430C030120                      db 67, 12, 3, 1, ' '
   729                                  
   730 00001C92 070D020120                      db 7, 13, 2, 1, ' '   
   731 00001C97 0D0D010120                      db 13, 13, 1, 1, ' '   
   732 00001C9C 130D050220                      db 19, 13, 5, 2, ' '   
   733 00001CA1 190D030120                      db 25, 13, 3, 1, ' '  
   734 00001CA6 1F0D040120                      db 31, 13, 4, 1, ' '
   735                                  
   736 00001CAB 2B0D020120                      db 43, 13, 2, 1, ' '    
   737 00001CB0 310D010120                      db 49, 13, 1, 1, ' '   
   738 00001CB5 370D020120                      db 55, 13, 2, 1, ' '   
   739 00001CBA 3D0D030120                      db 61, 13, 3, 1, ' '   
   740 00001CBF 430D050220                      db 67, 13, 5, 2, ' '
   741                                  
   742 00001CC4 070E010120                      db 7, 14, 1, 1, ' '   
   743 00001CC9 0D0E050220                      db 13, 14, 5, 2, ' '   
   744 00001CCE 130E030120                      db 19, 14, 3, 1, ' '   
   745 00001CD3 190E040120                      db 25, 14, 4, 1, ' '  
   746 00001CD8 1F0E020120                      db 31, 14, 2, 1, ' '
   747                                  
   748 00001CDD 2B0E010120                      db 43, 14, 1, 1, ' '    
   749 00001CE2 310E020120                      db 49, 14, 2, 1, ' '   
   750 00001CE7 370E030120                      db 55, 14, 3, 1, ' '   
   751 00001CEC 3D0E050220                      db 61, 14, 5, 2, ' '   
   752 00001CF1 430E020120                      db 67, 14, 2, 1, ' '
   753                                  
   754 00001CF6 070F050220                      db 7, 15, 5, 2, ' '   
   755 00001CFB 0D0F030120                      db 13, 15, 3, 1, ' '   
   756 00001D00 130F040120                      db 19, 15, 4, 1, ' '   
   757 00001D05 190F020120                      db 25, 15, 2, 1, ' '  
   758 00001D0A 1F0F010120                      db 31, 15, 1, 1, ' '
   759                                  
   760 00001D0F 2B0F020120                      db 43, 15, 2, 1, ' '    
   761 00001D14 310F030120                      db 49, 15, 3, 1, ' '   
   762 00001D19 370F050220                      db 55, 15, 5, 2, ' '   
   763 00001D1E 3D0F020120                      db 61, 15, 2, 1, ' '   
   764 00001D23 430F010120                      db 67, 15, 1, 1, ' '
   765                                  
   766 00001D28 0710030120                      db 7, 16, 3, 1, ' '   
   767 00001D2D 0D10040120                      db 13, 16, 4, 1, ' '   
   768 00001D32 1310020120                      db 19, 16, 2, 1, ' '   
   769 00001D37 1910010120                      db 25, 16, 1, 1, ' '  
   770 00001D3C 1F10020120                      db 31, 16, 2, 1, ' '
   771                                  
   772 00001D41 2B10030120                      db 43, 16, 3, 1, ' '    
   773 00001D46 3110050220                      db 49, 16, 5, 2, ' '   
   774 00001D4B 3710020120                      db 55, 16, 2, 1, ' '   
   775 00001D50 3D10010120                      db 61, 16, 1, 1, ' '   
   776 00001D55 4310020120                      db 67, 16, 2, 1, ' '
   777                                  
   778 00001D5A 0711040120                      db 7, 17, 4, 1, ' '   
   779 00001D5F 0D11020120                      db 13, 17, 2, 1, ' '   
   780 00001D64 1311010120                      db 19, 17, 1, 1, ' '   
   781 00001D69 1911020120                      db 25, 17, 2, 1, ' '  
   782 00001D6E 1F11030120                      db 31, 17, 3, 1, ' '
   783                                  
   784 00001D73 2B11050220                      db 43, 17, 5, 2, ' '    
   785 00001D78 3111020120                      db 49, 17, 2, 1, ' '    
   786 00001D7D 3711010120                      db 55, 17, 1, 1, ' '   
   787 00001D82 3D11020120                      db 61, 17, 2, 1, ' '   
   788 00001D87 4311030120                      db 67, 17, 3, 1, ' '
   789                                  
   790                                      level4_blocks_count equ 140
   791                                  
   792                                      ; Nivel 5
   793                                      level5_blocks:
   794                                  
   795 00001D8C 1303020120                      db 19, 3, 2, 1, ' '   
   796 00001D91 3703020120                      db 55, 3, 2, 1, ' '   
   797                                  
   798 00001D96 1304020120                      db 19, 4, 2, 1, ' '   
   799 00001D9B 3704020120                      db 55, 4, 2, 1, ' ' 
   800                                  
   801 00001DA0 1905020120                      db 25, 5, 2, 1, ' '   
   802 00001DA5 3105020120                      db 49, 5, 2, 1, ' '   
   803                                  
   804 00001DAA 1906020120                      db 25, 6, 2, 1, ' '   
   805 00001DAF 3106020120                      db 49, 6, 2, 1, ' '   
   806                                  
   807 00001DB4 1307050220                      db 19, 7, 5, 2, ' '   
   808 00001DB9 1907050220                      db 25, 7, 5, 2, ' '  
   809 00001DBE 1F07050220                      db 31, 7, 5, 2, ' '
   810 00001DC3 2507050220                      db 37, 7, 5, 2, ' '
   811 00001DC8 2B07050220                      db 43, 7, 5, 2, ' '    
   812 00001DCD 3107050220                      db 49, 7, 5, 2, ' '    
   813 00001DD2 3707050220                      db 55, 7, 5, 2, ' '   
   814                                  
   815 00001DD7 1308050220                      db 19, 8, 5, 2, ' '   
   816 00001DDC 1908050220                      db 25, 8, 5, 2, ' '  
   817 00001DE1 1F08050220                      db 31, 8, 5, 2, ' '
   818 00001DE6 2508050220                      db 37, 8, 5, 2, ' '
   819 00001DEB 2B08050220                      db 43, 8, 5, 2, ' '    
   820 00001DF0 3108050220                      db 49, 8, 5, 2, ' '    
   821 00001DF5 3708050220                      db 55, 8, 5, 2, ' '   
   822                                  
   823 00001DFA 0D09050220                      db 13, 9, 5, 2, ' '   
   824 00001DFF 1309050220                      db 19, 9, 5, 2, ' '   
   825 00001E04 1909040120                      db 25, 9, 4, 1, ' '  
   826 00001E09 1F09050220                      db 31, 9, 5, 2, ' '
   827 00001E0E 2509050220                      db 37, 9, 5, 2, ' '
   828 00001E13 2B09050220                      db 43, 9, 5, 2, ' '    
   829 00001E18 3109040120                      db 49, 9, 4, 1, ' '    
   830 00001E1D 3709050220                      db 55, 9, 5, 2, ' '   
   831 00001E22 3D09050220                      db 61, 9, 5, 2, ' '  
   832                                  
   833 00001E27 0D0A050220                      db 13, 10, 5, 2, ' '   
   834 00001E2C 130A050220                      db 19, 10, 5, 2, ' '   
   835 00001E31 190A040120                      db 25, 10, 4, 1, ' '  
   836 00001E36 1F0A050220                      db 31, 10, 5, 2, ' '
   837 00001E3B 250A050220                      db 37, 10, 5, 2, ' '
   838 00001E40 2B0A050220                      db 43, 10, 5, 2, ' '    
   839 00001E45 310A040120                      db 49, 10, 4, 1, ' '    
   840 00001E4A 370A050220                      db 55, 10, 5, 2, ' '   
   841 00001E4F 3D0A050220                      db 61, 10, 5, 2, ' '   
   842                                          
   843 00001E54 070B050220                      db 7, 11, 5, 2, ' '   
   844 00001E59 0D0B050220                      db 13, 11, 5, 2, ' '   
   845 00001E5E 130B050220                      db 19, 11, 5, 2, ' '   
   846 00001E63 190B050220                      db 25, 11, 5, 2, ' '  
   847 00001E68 1F0B050220                      db 31, 11, 5, 2, ' '
   848 00001E6D 250B050220                      db 37, 11, 5, 2, ' '
   849 00001E72 2B0B050220                      db 43, 11, 5, 2, ' '    
   850 00001E77 310B050220                      db 49, 11, 5, 2, ' '    
   851 00001E7C 370B050220                      db 55, 11, 5, 2, ' '   
   852 00001E81 3D0B050220                      db 61, 11, 5, 2, ' '   
   853 00001E86 430B050220                      db 67, 11, 5, 2, ' '
   854                                  
   855 00001E8B 070C050220                      db 7, 12, 5, 2, ' '   
   856 00001E90 0D0C050220                      db 13, 12, 5, 2, ' '   
   857 00001E95 130C050220                      db 19, 12, 5, 2, ' '   
   858 00001E9A 190C050220                      db 25, 12, 5, 2, ' '  
   859 00001E9F 1F0C050220                      db 31, 12, 5, 2, ' '
   860 00001EA4 250C050220                      db 37, 12, 5, 2, ' '
   861 00001EA9 2B0C050220                      db 43, 12, 5, 2, ' '    
   862 00001EAE 310C050220                      db 49, 12, 5, 2, ' '    
   863 00001EB3 370C050220                      db 55, 12, 5, 2, ' '   
   864 00001EB8 3D0C050220                      db 61, 12, 5, 2, ' '   
   865 00001EBD 430C050220                      db 67, 12, 5, 2, ' '
   866                                  
   867 00001EC2 070D050220                      db 7, 13, 5, 2, ' '   
   868 00001EC7 0D0D050220                      db 13, 13, 5, 2, ' '   
   869 00001ECC 130D050220                      db 19, 13, 5, 2, ' '   
   870 00001ED1 190D050220                      db 25, 13, 5, 2, ' '  
   871 00001ED6 1F0D050220                      db 31, 13, 5, 2, ' '
   872 00001EDB 250D050220                      db 37, 13, 5, 2, ' '
   873 00001EE0 2B0D050220                      db 43, 13, 5, 2, ' '    
   874 00001EE5 310D050220                      db 49, 13, 5, 2, ' '    
   875 00001EEA 370D050220                      db 55, 13, 5, 2, ' '   
   876 00001EEF 3D0D050220                      db 61, 13, 5, 2, ' '   
   877 00001EF4 430D050220                      db 67, 13, 5, 2, ' '
   878                                  
   879                                          
   880 00001EF9 070E050220                      db 7, 14, 5, 2, ' '   
   881 00001EFE 130E050220                      db 19, 14, 5, 2, ' '   
   882 00001F03 190E050220                      db 25, 14, 5, 2, ' '  
   883 00001F08 1F0E050220                      db 31, 14, 5, 2, ' '
   884 00001F0D 250E050220                      db 37, 14, 5, 2, ' '
   885 00001F12 2B0E050220                      db 43, 14, 5, 2, ' '    
   886 00001F17 310E050220                      db 49, 14, 5, 2, ' '    
   887 00001F1C 370E050220                      db 55, 14, 5, 2, ' '   
   888 00001F21 430E050220                      db 67, 14, 5, 2, ' '
   889                                  
   890 00001F26 070F050220                      db 7, 15, 5, 2, ' '   
   891 00001F2B 130F050220                      db 19, 15, 5, 2, ' '      
   892 00001F30 370F050220                      db 55, 15, 5, 2, ' '   
   893 00001F35 430F050220                      db 67, 15, 5, 2, ' '
   894                                   
   895 00001F3A 0710050220                      db 7, 16, 5, 2, ' '   
   896 00001F3F 1310050220                      db 19, 16, 5, 2, ' '      
   897 00001F44 3710050220                      db 55, 16, 5, 2, ' '   
   898 00001F49 4310050220                      db 67, 16, 5, 2, ' '
   899                                  
   900                                  
   901 00001F4E 1911050220                      db 25, 17, 5, 2, ' '  
   902 00001F53 1F11050220                      db 31, 17, 5, 2, ' '
   903 00001F58 2B11050220                      db 43, 17, 5, 2, ' '    
   904 00001F5D 3111050220                      db 49, 17, 5, 2, ' ' 
   905                                  
   906 00001F62 1912050220                      db 25, 18, 5, 2, ' '  
   907 00001F67 1F12050220                      db 31, 18, 5, 2, ' '
   908 00001F6C 2B12050220                      db 43, 18, 5, 2, ' '    
   909 00001F71 3112050220                      db 49, 18, 5, 2, ' ' 
   910                                  
   911                                      level5_blocks_count equ 98
   912                                  
   913                                      ; Array para mantener el estado de los bloques
   914 00001F76 00<rep C8h>                 block_states: times 200 db 0  ; Durabilidad actual de cada bloque
   915                                  
   916                                      
   917                                      ; Variables para almacenar los valores
   918 0000203E 0000000000000000            current_score dq 0          ; Score actual
   919 00002046 00                          destroyed_blocks db 0       ; Bloques destruidos en el nivel actual
   920                                      
   921                                      ; Buffer para convertir números a string
   922 00002047 00<rep 14h>                 number_buffer: times 20 db 0
   923                                  
   924 0000205B 4023242640                  enemy_chars db "@", "#", "$", "&", "@"    ; El nivel 1 y 5 comparten el mismo caracter (@)
   925                                      
   926                                      ; Estructura para los enemigos (x, y, activo)
   927 00002060 00<rep 1Eh>                 enemies: times 10 * 3 db 0     ; Máximo 5 enemigos, cada uno con 3 bytes (x, y, activo)
   928 0000207E 0A                          enemies_count db 10            ; Cantidad de enemigos activos
   929                                      
   930 0000207F 3200000000000000            enemy_points dq 50              ; Puntos por destruir un enemigo
   931 00002087 00                          enemy_move_counter db 0         ; Contador para controlar velocidad de movimiento
   932 00002088 02                          enemy_move_delay db 2           ; Mover enemigos cada N ciclos
   933 00002089 00                          enemy_move_total db 0      ; Contador total de movimientos
   934 0000208A 00                          enemy_target db 0          ; 0 = persigue bola, 1 = persigue paleta
   935 0000208B 14                          MOVEMENT_THRESHOLD db 20   ; Número de movimientos antes de cambiar objetivo
   936                                   ;Formato: número de bloques destruidos necesario para que aparezca cada enemigo
   937                                      ; Añade esto en la sección .dataa
   938 0000208C 00000006080A0C0E10-         level1_spawn_points: db 0, 0, 0, 6, 8, 10, 12, 14, 16, 18    ; 10 enemigos, cada 2 bloques
   938 00002095 12                 
   939 00002096 01030507090B0D0F11-         level2_spawn_points: db 1, 3, 5, 7, 9, 11, 13, 15, 17, 19    ; 10 enemigos, cada 2 bloques
   939 0000209F 13                 
   940 000020A0 000306090C0F121518-         level3_spawn_points: db 0, 3, 6, 9, 12, 15, 18, 21, 24, 27   ; 10 enemigos, cada 3 bloques
   940 000020A9 1B                 
   941 000020AA 0104070A0D10131619-         level4_spawn_points: db 1, 4, 7, 10, 13, 16, 19, 22, 25, 28  ; 10 enemigos, cada 3 bloques
   941 000020B3 1C                 
   942 000020B4 00050A0F14191E2328-         level5_spawn_points: db 0, 5, 10, 15, 20, 25, 30, 35, 40, 45 ; 10 enemigos, cada 5 bloques
   942 000020BD 2D                 
   943                                          ; Arreglo de punteros a los spawn points de cada nivel
   944                                      spawn_points_table:
   945 000020BE [8C20000000000000]              dq level1_spawn_points
   946 000020C6 [9620000000000000]              dq level2_spawn_points
   947 000020CE [A020000000000000]              dq level3_spawn_points
   948 000020D6 [AA20000000000000]              dq level4_spawn_points
   949 000020DE [B420000000000000]              dq level5_spawn_points
   950                                  
   951                                      ; Variables para el comportamiento de enemigos
   952 000020E6 1E                          BEHAVIOR_CHANGE_TIME db 30    ; Ciclos antes de cambiar comportamiento
   953 000020E7 00                          behavior_counter db 0          ; Contador para cambio de comportamiento
   954 000020E8 00                          current_behavior db 0          ; 0 = persigue bola, 1 = persigue paleta
   955 000020E9 00<rep Ah>                  enemy_spawns_triggered: times 10 db 0  ; 0 = no spawned, 1 = spawned
   956                                  
   957 000020F3 50756E74616A653A20-         score_label: db "Puntaje: [          ]", 0xA, 0xD  ; 10 espacios para el número
   957 000020FC 5B2020202020202020-
   957 00002105 20205D0A0D         
   958                                      score_label_len: equ $ - score_label
   959 0000210A 426C6F717565732064-         blocks_label: db "Bloques destruidos: [   ]", 0xA, 0xD  ; 3 espacios para el número
   959 00002113 657374727569646F73-
   959 0000211C 3A205B2020205D0A0D 
   960                                      blocks_label_len: equ $ - blocks_label
   961                                      
   962                                      ; Posición donde insertar los números en los labels
   963                                      score_pos equ 10    ; Posición después de "Puntaje: ["
   964                                      blocks_pos equ 20   ; Posición después de "Bloques destruidos: ["
   965                                      
   966                                      ; Definición de las vidas (x, y, estado)
   967                                      ; Formato: posición_x, posición_y, estado (1 = activa, 0 = inactiva)
   968                                      lives_data: 
   969 00002125 021E01                          db 2, 30, 1     ; Vida 1 (activa)
   970 00002128 041E01                          db 4, 30, 1     ; Vida 2 (activa)
   971 0000212B 061E01                          db 6, 30, 1     ; Vida 3 (inactiva)
   972 0000212E 081E01                          db 8, 30, 1     ; Vida 4 (inactiva)
   973 00002131 0A1E01                          db 10, 30, 1    ; Vida 5 (inactiva)
   974 00002134 0C1E01                          db 12, 30, 1    ; Vida 6 (inactiva)
   975 00002137 0E1E01                          db 14, 30, 1    ; Vida 7 (inactiva)
   976                                      lives_count equ 7    ; Total de vidas
   977 0000213A 5E                          life_char db "^"    
   978 0000213B 07                          current_lives db 7   ; Contador de vidas activas actual
   979                                  
   980                                  ; Estructura para almacenar las letras y sus posiciones
   981                                      ; Formato: x, y, letra, activo (1 = activo, 0 = inactivo)
   982 0000213C 00<rep 190h>                letters_map: times 100 * 4 db 0  ; Espacio para 100 letras
   983 000022CC 00                          letters_count db 0   
   984 000022CD 20                          last_letter db ' '    ; Variable para almacenar la última letra
   985 000022CE 506F64657220616374-         last_letter_msg db "Poder actual: [ ]", 0xA, 0xD  ; Mensaje para mostrar la última letra
   985 000022D7 75616C3A205B205D0A-
   985 000022E0 0D                 
   986                                      last_letter_msg_len equ $ - last_letter_msg
   987 000022E1 00                          current_power_processed db 0 ; 0 = no procesado, 1 = ya procesado
   988 000022E2 07                          max_lives db 7              ; Máximo número de vidas permitidas
   989 000022E3 0100000000000000            ball_speed dq 1             ; Velocidad normal de la bola
   990 000022EB 0200000000000000            slow_ball_speed dq 2        ; Velocidad lenta (se usará como divisor)
   991 000022F3 0000000000000000            speed_counter dq 0          ; Contador para ralentizar el movimiento
   992                                     
   993 000022FB 00                          initial_catch_active db 0   ; 0 = inactivo, 1 = activo
   994                                  
   995 000022FC 00                          catch_power_active db 0     ; 0 = inactivo, 1 = activo
   996 000022FD 00                          ball_caught db 0           ; 0 = no atrapada, 1 = atrapada
   997 000022FE 00                          ball_caught_2 db 0           ; 0 = no atrapada, 1 = atrapada
   998 000022FF 00                          ball_caught_3 db 0           ; 0 = no atrapada, 1 = atrapada
   999                                  
  1000 00002300 0000000000000000            ball_catch_offset dq 0     ; Offset respecto a la paleta cuando está atrapada
  1001 00002308 00                          last_key db 0    ; Variable para almacenar la última tecla presionada
  1002                                  
  1003 00002309 00                          laser_power_active: db 0         ; Flag para indicar si el poder láser está activo
  1004 0000230A 7C                          laser_symbol: db '|'             ; Símbolo para representar el láser
  1005 0000230B 00                          laser_count: db 0                ; Contador de láseres activos
  1006 0000230C 00<rep C8h>                 lasers: times 200 db 0           ; Array para almacenar posiciones de láseres (x,y)
  1007 000023D4 0100000000000000            laser_speed: dq 1                ; Velocidad del láser
  1008                                  
  1009                                      balls_data:     ; Array para almacenar hasta 3 bolas
  1010                                          ; Bola 1 (principal)
  1011 000023DC 0000000000000000                dq 0        ; x_pos
  1012 000023E4 0000000000000000                dq 0        ; y_pos
  1013 000023EC 0100000000000000                dq 1        ; direction_x
  1014 000023F4 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1015 000023FC 01                              db 1        ; active
  1016                                          ; Bola 2
  1017 000023FD 0000000000000000                dq 0        ; x_pos
  1018 00002405 0000000000000000                dq 0        ; y_pos
  1019 0000240D FFFFFFFFFFFFFFFF                dq -1       ; direction_x
  1020 00002415 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1021 0000241D 00                              db 0        ; active
  1022                                          ; Bola 3
  1023 0000241E 0000000000000000                dq 0        ; x_pos
  1024 00002426 0000000000000000                dq 0        ; y_pos
  1025 0000242E 0000000000000000                dq 0        ; direction_x
  1026 00002436 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1027 0000243E 00                              db 0        ; active
  1028                                      
  1029 0000243F 01                          balls_count db 1     ; Contador de bolas activas
  1030                                      BALL_STRUCT_SIZE equ 33  ; Tamaño de cada estructura de bola (8*4 + 1)
  1031 00002440 00<rep Ah>                  enemy_last_x:       times 10 db 0
  1032 0000244A 00<rep Ah>                  enemy_last_y:       times 10 db 0
  1033 00002454 00<rep Ah>                  enemy_stuck_count:  times 10 db 0
  1034                                  
  1035                                  section .text
  1036                                  
  1037                                  
  1038                                  print_lives:
  1039 000001DD 55                          push rbp
  1040 000001DE 4889E5                      mov rbp, rsp
  1041                                      
  1042 000001E1 4D31E4                      xor r12, r12                    ; Índice de la vida actual
  1043                                      
  1044                                      .print_loop:
  1045 000001E4 4983FC07                        cmp r12, lives_count
  1046 000001E8 7D45                            jge .end
  1047                                          
  1048                                          ; Calcular offset de la vida actual
  1049 000001EA 4C89E0                          mov rax, r12
  1050 000001ED 486BC003                        imul rax, 3                     ; Cada vida ocupa 3 bytes (x, y, estado)
  1051 000001F1 488DB0[25210000]                lea rsi, [lives_data + rax]
  1052                                          
  1053                                          ; Calcular posición en el tablero
  1054 000001F8 4C0FB606                        movzx r8, byte [rsi]            ; X
  1055 000001FC 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  1056                                          
  1057                                          ; Calcular offset en el tablero
  1058 00000201 B850000000                      mov rax, column_cells
  1059 00000206 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  1060 0000020A 49F7E1                          mul r9
  1061 0000020D 4C01C0                          add rax, r8
  1062 00000210 488DB8[400A0000]                lea rdi, [board + rax]
  1063                                          
  1064                                          ; Verificar estado de la vida y dibujar el carácter correspondiente
  1065 00000217 807E0201                        cmp byte [rsi + 2], 1
  1066 0000021B 7405                            je .draw_active
  1067                                          
  1068                                          ; Si está inactiva, dibujar espacio
  1069 0000021D C60720                          mov byte [rdi], ' '
  1070 00000220 EB08                            jmp .next_life
  1071                                          
  1072                                      .draw_active:
  1073                                          ; Si está activa, dibujar el símbolo de vida
  1074 00000222 8A05(3A210000)                  mov al, [life_char]
  1075 00000228 8807                            mov [rdi], al
  1076                                          
  1077                                      .next_life:
  1078 0000022A 49FFC4                          inc r12
  1079 0000022D EBB5                            jmp .print_loop
  1080                                          
  1081                                      .end:
  1082 0000022F 5D                              pop rbp
  1083 00000230 C3                              ret
  1084                                  
  1085                                  ; Función para desactivar una vida
  1086                                  ; Función modificada para perder una vida
  1087                                  ; Modificar lose_life para reiniciar solo la bola principal
  1088                                  lose_life:
  1089 00000231 55                          push rbp
  1090 00000232 4889E5                      mov rbp, rsp
  1091                                      
  1092                                      ; Verificar si aún quedan vidas
  1093 00000235 803D(3B210000)00            cmp byte [current_lives], 0
  1094 0000023C 0F84AB000000                je .game_lost
  1095                                      
  1096                                      ; Encontrar la última vida activa
  1097 00000242 B907000000                  mov rcx, lives_count
  1098 00000247 48FFC9                      dec rcx
  1099                                      
  1100                                      .find_active_life:
  1101 0000024A 4889C8                          mov rax, rcx
  1102 0000024D 486BC003                        imul rax, 3
  1103 00000251 488DB0[25210000]                lea rsi, [lives_data + rax]
  1104 00000258 807E0201                        cmp byte [rsi + 2], 1
  1105 0000025C 740A                            je .deactivate_life
  1106 0000025E 48FFC9                          dec rcx
  1107 00000261 79E7                            jns .find_active_life
  1108 00000263 E985000000                      jmp .game_lost
  1109                                          
  1110                                      .deactivate_life:
  1111                                          ; Borrar vida visualmente y en datos
  1112 00000268 4C0FB606                        movzx r8, byte [rsi]
  1113 0000026C 4C0FB64E01                      movzx r9, byte [rsi + 1]
  1114 00000271 B850000000                      mov rax, column_cells
  1115 00000276 4883C002                        add rax, 2
  1116 0000027A 49F7E1                          mul r9
  1117 0000027D 4C01C0                          add rax, r8
  1118 00000280 488DB8[400A0000]                lea rdi, [board + rax]
  1119 00000287 C60720                          mov byte [rdi], ' '
  1120 0000028A C6460200                        mov byte [rsi + 2], 0
  1121 0000028E FE0D(3B210000)                  dec byte [current_lives]
  1122                                          
  1123                                          ; Borrar paleta anterior
  1124 00000294 4C8B05(BF140000)                mov r8, [pallet_position]
  1125 0000029B 488B0D(C7140000)                mov rcx, [pallet_size]
  1126                                          .erase_pallet_loop:
  1127 000002A2 41C60020                            mov byte [r8], ' '
  1128 000002A6 49FFC0                              inc r8
  1129 000002A9 48FFC9                              dec rcx
  1130 000002AC 75F4                                jnz .erase_pallet_loop
  1131                                          
  1132                                          ; Reiniciar solo la bola principal
  1133 000002AE 48C705(DF140000)28-             mov qword [ball_x_pos], 40
  1133 000002B6 000000             
  1134 000002B9 48C705(E7140000)1C-             mov qword [ball_y_pos], 28
  1134 000002C1 000000             
  1135 000002C4 C605(FF140000)00                mov byte [ball_moving], 0
  1136 000002CB C605(00150000)01                mov byte [ball_active], 1       ; Activar bola principal
  1137 000002D2 48C705(BF140000)-               mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  1137 000002D9 [B0130000]         
  1138                                          
  1139                                          ; Asegurarse que las otras bolas están desactivadas
  1140 000002DD C605(22150000)00                mov byte [ball2_active], 0
  1141 000002E4 C605(44150000)00                mov byte [ball3_active], 0
  1142                                          
  1143 000002EB EB07                            jmp .end
  1144                                          
  1145                                      .game_lost:
  1146 000002ED E8C7000000                      call game_lost
  1147 000002F2 EB00                            jmp .end
  1148                                          
  1149                                      .end:
  1150 000002F4 5D                              pop rbp
  1151 000002F5 C3                              ret
  1152                                  ; Función modificada para verificar colisión con el borde inferior
  1153                                  check_bottom_collision:
  1154 000002F6 55                          push rbp
  1155 000002F7 4889E5                      mov rbp, rsp
  1156                                      
  1157                                      ; Verificar bola principal
  1158 000002FA 803D(00150000)01            cmp byte [ball_active], 1
  1159 00000301 7542                        jne .check_ball2
  1160 00000303 488B05(E7140000)            mov rax, [ball_y_pos]
  1161 0000030A 4883F81E                    cmp rax, row_cells - 2
  1162 0000030E 7535                        jne .check_ball2
  1163                                      
  1164                                      ; Borrar visualmente la bola principal
  1165 00000310 4C8B05(DF140000)            mov r8, [ball_x_pos]
  1166 00000317 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  1167 0000031E 4981C0[400A0000]            add r8, board
  1168 00000325 4C89C9                      mov rcx, r9
  1169 00000328 B852000000                  mov rax, column_cells + 2
  1170 0000032D 48F7E9                      imul rcx
  1171 00000330 4901C0                      add r8, rax
  1172 00000333 41C60020                    mov byte [r8], char_space    ; Borrar la bola del tablero
  1173                                      
  1174 00000337 C605(00150000)00            mov byte [ball_active], 0
  1175 0000033E C605(FF140000)00            mov byte [ball_moving], 0
  1176                                  
  1177                                  .check_ball2:
  1178 00000345 803D(22150000)01            cmp byte [ball2_active], 1
  1179 0000034C 751B                        jne .check_ball3
  1180 0000034E 488B05(09150000)            mov rax, [ball2_y_pos]
  1181 00000355 4883F81E                    cmp rax, row_cells - 2
  1182 00000359 750E                        jne .check_ball3
  1183 0000035B C605(22150000)00            mov byte [ball2_active], 0
  1184 00000362 C605(21150000)00            mov byte [ball2_moving], 0
  1185                                  
  1186                                  .check_ball3:
  1187 00000369 803D(44150000)01            cmp byte [ball3_active], 1
  1188 00000370 751B                        jne .check_active_balls
  1189 00000372 488B05(2B150000)            mov rax, [ball3_y_pos]
  1190 00000379 4883F81E                    cmp rax, row_cells - 2
  1191 0000037D 750E                        jne .check_active_balls
  1192 0000037F C605(44150000)00            mov byte [ball3_active], 0
  1193 00000386 C605(43150000)00            mov byte [ball3_moving], 0
  1194                                  
  1195                                  .check_active_balls:
  1196                                      ; Verificar si quedan bolas activas
  1197 0000038D 4831C9                      xor rcx, rcx
  1198 00000390 803D(00150000)01            cmp byte [ball_active], 1
  1199 00000397 741E                        je .balls_remain
  1200 00000399 803D(22150000)01            cmp byte [ball2_active], 1
  1201 000003A0 7415                        je .balls_remain
  1202 000003A2 803D(44150000)01            cmp byte [ball3_active], 1
  1203 000003A9 740C                        je .balls_remain
  1204                                      
  1205                                      ; Si no quedan bolas activas, perder una vida y reiniciar
  1206 000003AB E881FEFFFF                  call lose_life
  1207 000003B0 C605(00150000)01            mov byte [ball_active], 1    ; Reactivar bola principal
  1208                                      
  1209                                  .balls_remain:
  1210 000003B7 5D                          pop rbp
  1211 000003B8 C3                          ret
  1212                                  
  1213                                  
  1214                                  
  1215                                  ; Nueva función para game over
  1216                                  game_lost:
  1217                                      ; Limpiar la pantalla
  1218                                      print clear, clear_length
    82 000003B9 B801000000          <1>  mov eax, sys_write
    83 000003BE BF01000000          <1>  mov edi, 1
    84 000003C3 48BE-               <1>  mov rsi, %1
    84 000003C5 [1000000000000000]  <1>
    85 000003CD BA07000000          <1>  mov edx, %2
    86 000003D2 0F05                <1>  syscall
  1219                                      
  1220                                      ; Mostrar mensaje de derrota
  1221                                      section .data
  1222 0000245E C2A148617320706572-             lost_msg: db "¡Has perdido!", 0xA, 0xD
  1222 00002467 6469646F210A0D     
  1223                                          lost_msg_len: equ $ - lost_msg
  1224                                      section .text
  1225                                      
  1226                                      ; Imprimir mensaje de derrota
  1227                                      print lost_msg, lost_msg_len
    82 000003D4 B801000000          <1>  mov eax, sys_write
    83 000003D9 BF01000000          <1>  mov edi, 1
    84 000003DE 48BE-               <1>  mov rsi, %1
    84 000003E0 [5E24000000000000]  <1>
    85 000003E8 BA10000000          <1>  mov edx, %2
    86 000003ED 0F05                <1>  syscall
  1228                                      print score_msg, score_msg_len
    82 000003EF B801000000          <1>  mov eax, sys_write
    83 000003F4 BF01000000          <1>  mov edi, 1
    84 000003F9 48BE-               <1>  mov rsi, %1
    84 000003FB [8C24000000000000]  <1>
    85 00000403 BA0F000000          <1>  mov edx, %2
    86 00000408 0F05                <1>  syscall
  1229                                      
  1230                                      ; Mostrar puntaje final
  1231 0000040A 488B05(3E200000)            mov rax, [current_score]
  1232 00000411 48BF-                       mov rdi, number_buffer
  1232 00000413 [4720000000000000] 
  1233 0000041B E894130000                  call number_to_string
  1234                                      print number_buffer, 20
    82 00000420 B801000000          <1>  mov eax, sys_write
    83 00000425 BF01000000          <1>  mov edi, 1
    84 0000042A 48BE-               <1>  mov rsi, %1
    84 0000042C [4720000000000000]  <1>
    85 00000434 BA14000000          <1>  mov edx, %2
    86 00000439 0F05                <1>  syscall
  1235                                      
  1236                                      ; Esperar un momento antes de salir
  1237 0000043B 48C705BAFBFFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  1237 00000444 0000               
  1238 00000446 48C705B7FBFFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  1238 0000044F 0000               
  1239                                      sleeptime
    98 00000451 B823000000          <1>  mov eax, sys_nanosleep
    99 00000456 48BF-               <1>  mov rdi, timespec
    99 00000458 [0000000000000000]  <1>
   100 00000460 31F6                <1>  xor esi, esi
   101 00000462 0F05                <1>  syscall
  1240                                      
  1241 00000464 E95F1D0000                  jmp exit
  1242                                  
  1243                                  
  1244                                  ; Función para registrar una nueva letra en el mapa
  1245                                  ; Entrada:
  1246                                  ;   al - letra a registrar
  1247                                  ;   r8b - posición x
  1248                                  ;   r9b - posición y
  1249                                  register_letter:
  1250 00000469 55                          push rbp
  1251 0000046A 4889E5                      mov rbp, rsp
  1252 0000046D 53                          push rbx
  1253 0000046E 51                          push rcx
  1254                                      
  1255 0000046F 3C20                        cmp al, ' '
  1256 00000471 7438                        je .end
  1257                                  
  1258                                      ; Encontrar un espacio libre en el mapa
  1259 00000473 4831C9                      xor rcx, rcx
  1260 00000476 480FB615(CC220000)          movzx rdx, byte [letters_count]
  1261                                      
  1262                                      .find_slot:
  1263 0000047E 4883F964                        cmp rcx, 100              ; Máximo de letras
  1264 00000482 7D27                            jge .end                  ; Si no hay espacio, salir
  1265                                          
  1266 00000484 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1267 0000048C 807B0300                        cmp byte [rbx + 3], 0    ; Verificar si el slot está inactivo
  1268 00000490 7405                            je .found_slot
  1269                                          
  1270 00000492 48FFC1                          inc rcx
  1271 00000495 EBE7                            jmp .find_slot
  1272                                          
  1273                                      .found_slot:
  1274                                          ; Guardar la información de la letra
  1275 00000497 448803                          mov [rbx], r8b           ; x
  1276 0000049A 44884B01                        mov [rbx + 1], r9b       ; y
  1277 0000049E 884302                          mov [rbx + 2], al        ; letra
  1278 000004A1 C6430301                        mov byte [rbx + 3], 1    ; marcar como activo
  1279                                          
  1280 000004A5 FE05(CC220000)                  inc byte [letters_count]
  1281                                          
  1282                                      .end:
  1283 000004AB 59                              pop rcx
  1284 000004AC 5B                              pop rbx
  1285 000004AD 5D                              pop rbp
  1286 000004AE C3                              ret
  1287                                  
  1288                                  ; Función para imprimir todas las letras registradas
  1289                                  print_letters:
  1290 000004AF 55                          push rbp
  1291 000004B0 4889E5                      mov rbp, rsp
  1292 000004B3 53                          push rbx
  1293 000004B4 51                          push rcx
  1294                                      
  1295 000004B5 4831C9                      xor rcx, rcx
  1296                                      
  1297                                      .print_loop:
  1298 000004B8 4883F964                        cmp rcx, 100              ; Máximo de letras
  1299 000004BC 7D37                            jge .end
  1300                                          
  1301                                          ; Obtener puntero a la letra actual
  1302 000004BE 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1303                                          
  1304                                          ; Verificar si está activa
  1305 000004C6 807B0300                        cmp byte [rbx + 3], 0
  1306 000004CA 7424                            je .next_letter
  1307                                          
  1308                                          ; Calcular posición en el tablero
  1309 000004CC 4C0FB603                        movzx r8, byte [rbx]      ; x
  1310 000004D0 4C0FB64B01                      movzx r9, byte [rbx + 1]  ; y
  1311                                          
  1312                                          ; Calcular offset en el tablero
  1313 000004D5 B850000000                      mov rax, column_cells
  1314 000004DA 4883C002                        add rax, 2                ; Incluir caracteres de nueva línea
  1315 000004DE 49F7E1                          mul r9
  1316 000004E1 4C01C0                          add rax, r8
  1317 000004E4 488DB8[400A0000]                lea rdi, [board + rax]
  1318                                          
  1319                                          ; Imprimir la letra
  1320 000004EB 8A4302                          mov al, [rbx + 2]
  1321 000004EE 8807                            mov [rdi], al
  1322                                          
  1323                                      .next_letter:
  1324 000004F0 48FFC1                          inc rcx
  1325 000004F3 EBC3                            jmp .print_loop
  1326                                          
  1327                                      .end:
  1328 000004F5 59                              pop rcx
  1329 000004F6 5B                              pop rbx
  1330 000004F7 5D                              pop rbp
  1331 000004F8 C3                              ret
  1332                                  
  1333                                  ; Función para borrar una letra específica
  1334                                  ; Entrada:
  1335                                  ;   r8b - posición x
  1336                                  ;   r9b - posición y
  1337                                  remove_letter:
  1338 000004F9 55                          push rbp
  1339 000004FA 4889E5                      mov rbp, rsp
  1340 000004FD 53                          push rbx
  1341 000004FE 51                          push rcx
  1342                                      
  1343 000004FF 4831C9                      xor rcx, rcx
  1344                                      
  1345                                      .find_loop:
  1346 00000502 4883F964                        cmp rcx, 100              ; Máximo de letras
  1347 00000506 7D2E                            jge .end
  1348                                          
  1349 00000508 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1350                                          
  1351                                          ; Verificar si está activa y coincide la posición
  1352 00000510 807B0300                        cmp byte [rbx + 3], 0
  1353 00000514 741B                            je .next_letter
  1354                                          
  1355 00000516 8A03                            mov al, [rbx]
  1356 00000518 4438C0                          cmp al, r8b
  1357 0000051B 7514                            jne .next_letter
  1358                                          
  1359 0000051D 8A4301                          mov al, [rbx + 1]
  1360 00000520 4438C8                          cmp al, r9b
  1361 00000523 750C                            jne .next_letter
  1362                                          
  1363                                          ; Encontrada la letra, desactivarla
  1364 00000525 C6430300                        mov byte [rbx + 3], 0
  1365 00000529 FE0D(CC220000)                  dec byte [letters_count]
  1366 0000052F EB05                            jmp .end
  1367                                          
  1368                                      .next_letter:
  1369 00000531 48FFC1                          inc rcx
  1370 00000534 EBCC                            jmp .find_loop
  1371                                          
  1372                                      .end:
  1373 00000536 59                              pop rcx
  1374 00000537 5B                              pop rbx
  1375 00000538 5D                              pop rbp
  1376 00000539 C3                              ret
  1377                                  ; Función para mover las letras hacia abajo
  1378                                  move_letters:
  1379 0000053A 55                          push rbp
  1380 0000053B 4889E5                      mov rbp, rsp
  1381 0000053E 53                          push rbx
  1382 0000053F 57                          push rdi
  1383 00000540 56                          push rsi
  1384 00000541 4150                        push r8
  1385 00000543 4151                        push r9
  1386 00000545 4152                        push r10
  1387 00000547 4153                        push r11
  1388                                  
  1389 00000549 4831C9                      xor rcx, rcx
  1390                                  
  1391                                      .move_loop:
  1392 0000054C 4883F964                        cmp rcx, 100
  1393 00000550 0F8D0D020000                    jge .print_last_letter
  1394                                          
  1395 00000556 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1396 0000055E 807B0300                        cmp byte [rbx + 3], 0
  1397 00000562 0F84F3010000                    je .next_letter
  1398                                  
  1399 00000568 4C0FB603                        movzx r8, byte [rbx]
  1400 0000056C 4C0FB64B01                      movzx r9, byte [rbx + 1]
  1401                                  
  1402 00000571 B850000000                      mov rax, column_cells
  1403 00000576 4883C002                        add rax, 2
  1404 0000057A 49F7E1                          mul r9
  1405 0000057D 4C01C0                          add rax, r8
  1406 00000580 488DB8[400A0000]                lea rdi, [board + rax]
  1407 00000587 C60720                          mov byte [rdi], ' '
  1408                                  
  1409 0000058A FE4301                          inc byte [rbx + 1]
  1410 0000058D 4C0FB64B01                      movzx r9, byte [rbx + 1]
  1411                                  
  1412 00000592 4983F91F                        cmp r9, row_cells - 1
  1413 00000596 7C09                            jl .check_pallet_collision
  1414                                  
  1415 00000598 C6430300                        mov byte [rbx + 3], 0
  1416 0000059C E9BA010000                      jmp .next_letter
  1417                                  
  1418                                          .check_pallet_collision:
  1419 000005A1 B850000000                          mov rax, column_cells
  1420 000005A6 4883C002                            add rax, 2
  1421 000005AA 49F7E1                              mul r9
  1422 000005AD 4C01C0                              add rax, r8
  1423 000005B0 488DB8[400A0000]                    lea rdi, [board + rax]
  1424                                  
  1425 000005B7 8A07                                mov al, [rdi]
  1426 000005B9 3C20                                cmp al, ' '
  1427 000005BB 0F849A010000                        je .next_letter
  1428 000005C1 3C3D                                cmp al, char_equal
  1429 000005C3 740A                                je .capture_letter
  1430                                  
  1431 000005C5 8A4302                              mov al, [rbx + 2]
  1432 000005C8 8807                                mov [rdi], al
  1433 000005CA E98C010000                          jmp .next_letter
  1434                                  
  1435                                          .capture_letter:
  1436                                              ; Obtener la nueva letra
  1437 000005CF 8A4302                              mov al, [rbx + 2]
  1438                                              
  1439                                              ; Comparar con la última letra
  1440 000005D2 3A05(CD220000)                      cmp al, [last_letter]
  1441 000005D8 7407                                je .same_letter
  1442                                              
  1443                                              ; Es una letra diferente, resetear el procesamiento
  1444 000005DA C605(E1220000)00                    mov byte [current_power_processed], 0
  1445                                              
  1446                                              .same_letter:
  1447                                              ; Guardar la nueva letra
  1448 000005E1 8805(CD220000)                      mov [last_letter], al
  1449                                              
  1450                                              ; Verificar si es 'E' para extender la paleta
  1451 000005E7 3C45                                cmp al, 'E'
  1452 000005E9 7450                                je .extend_pallet
  1453                                              
  1454                                              ; Verificar si es 'P' para añadir vida
  1455 000005EB 3C50                                cmp al, 'P'
  1456 000005ED 7478                                je .check_add_life
  1457                                  
  1458 000005EF 3C53                                cmp al, 'S'
  1459 000005F1 0F84B4000000                        je .slow_ball
  1460                                  
  1461 000005F7 3C43                                cmp al, 'C'
  1462 000005F9 0F84D8000000                        je .activate_catch
  1463                                              
  1464 000005FF 3C4C                                cmp al, 'L'
  1465 00000601 0F84F9000000                        je .activate_laser
  1466                                  
  1467 00000607 3C44                                cmp al, 'D'
  1468 00000609 0F841A010000                        je .activate_split
  1469                                  
  1470                                              ; Si no es ningún power-up, restaurar tamaño normal
  1471 0000060F 488B05(CF140000)                    mov rax, [default_pallet_size]
  1472 00000616 488905(C7140000)                    mov [pallet_size], rax
  1473 0000061D 48C705(E3220000)01-                 mov qword [ball_speed], 1    ; Restaurar velocidad normal
  1473 00000625 000000             
  1474 00000628 C605(FC220000)00                    mov byte [catch_power_active], 0
  1475 0000062F C605(09230000)00                    mov byte [laser_power_active], 0
  1476 00000636 E91C010000                          jmp .finish_capture
  1477                                  
  1478                                              .extend_pallet:
  1479 0000063B C605(09230000)00                        mov byte [laser_power_active], 0
  1480 00000642 C605(FC220000)00                        mov byte [catch_power_active], 0
  1481 00000649 48C705(E3220000)01-                     mov qword [ball_speed], 1    ; Restaurar velocidad normal
  1481 00000651 000000             
  1482 00000654 488B05(D7140000)                        mov rax, [extended_pallet_size]
  1483 0000065B 488905(C7140000)                        mov [pallet_size], rax
  1484 00000662 E9F0000000                              jmp .finish_capture
  1485                                  
  1486                                              .check_add_life:
  1487 00000667 C605(09230000)00                        mov byte [laser_power_active], 0
  1488 0000066E C605(FC220000)00                        mov byte [catch_power_active], 0
  1489 00000675 488B05(CF140000)                        mov rax, [default_pallet_size]
  1490 0000067C 488905(C7140000)                        mov [pallet_size], rax
  1491 00000683 48C705(E3220000)01-                     mov qword [ball_speed], 1 
  1491 0000068B 000000             
  1492                                                  ; Verificar si ya procesamos este power-up
  1493 0000068E 803D(E1220000)00                        cmp byte [current_power_processed], 0
  1494 00000695 0F85BC000000                            jne .finish_capture
  1495                                                  
  1496                                                  ; Preservar registros importantes
  1497 0000069B 51                                      push rcx
  1498 0000069C 53                                      push rbx
  1499                                                  
  1500                                                  ; Marcar como procesado
  1501 0000069D C605(E1220000)01                        mov byte [current_power_processed], 1
  1502                                                  
  1503                                                  ; Añadir una vida
  1504 000006A4 E838040000                              call add_life
  1505                                                  
  1506                                                  ; Restaurar registros
  1507 000006A9 5B                                      pop rbx
  1508 000006AA 59                                      pop rcx
  1509                                                  
  1510                                              .slow_ball:
  1511 000006AB C605(09230000)00                        mov byte [laser_power_active], 0
  1512 000006B2 C605(FC220000)00                        mov byte [catch_power_active], 0                
  1513 000006B9 488B05(CF140000)                        mov rax, [default_pallet_size]
  1514 000006C0 488905(C7140000)                        mov [pallet_size], rax
  1515 000006C7 48C705(E3220000)02-                     mov qword [ball_speed], 2    ; Activar velocidad lenta
  1515 000006CF 000000             
  1516 000006D2 E980000000                              jmp .finish_capture
  1517                                  
  1518                                              .activate_catch:
  1519 000006D7 C605(09230000)00                        mov byte [laser_power_active], 0
  1520 000006DE 488B05(CF140000)                        mov rax, [default_pallet_size]
  1521 000006E5 488905(C7140000)                        mov [pallet_size], rax
  1522 000006EC 48C705(E3220000)01-                     mov qword [ball_speed], 1
  1522 000006F4 000000             
  1523 000006F7 C605(FC220000)01                        mov byte [catch_power_active], 1
  1524 000006FE EB57                                    jmp .finish_capture
  1525                                  
  1526                                              .activate_laser:
  1527 00000700 C605(FC220000)00                        mov byte [catch_power_active], 0
  1528 00000707 488B05(CF140000)                        mov rax, [default_pallet_size]
  1529 0000070E 488905(C7140000)                        mov [pallet_size], rax
  1530 00000715 48C705(E3220000)01-                     mov qword [ball_speed], 1
  1530 0000071D 000000             
  1531 00000720 C605(09230000)01                        mov byte [laser_power_active], 1    ; Activar el poder láser
  1532 00000727 EB2E                                    jmp .finish_capture
  1533                                  
  1534                                              .activate_split:
  1535 00000729 C605(09230000)00                        mov byte [laser_power_active], 0
  1536 00000730 C605(FC220000)00                        mov byte [catch_power_active], 0
  1537 00000737 488B05(CF140000)                        mov rax, [default_pallet_size]
  1538 0000073E 488905(C7140000)                        mov [pallet_size], rax
  1539 00000745 48C705(E3220000)01-                     mov qword [ball_speed], 1 
  1539 0000074D 000000             
  1540 00000750 E8D2000000                              call activate_split_power
  1541 00000755 EB00                                    jmp .finish_capture
  1542                                  
  1543                                              .finish_capture:
  1544 00000757 C6430300                                mov byte [rbx + 3], 0
  1545                                  
  1546                                          .next_letter:
  1547 0000075B 48FFC1                              inc rcx
  1548 0000075E E9E9FDFFFF                          jmp .move_loop
  1549                                  
  1550                                      .print_last_letter:
  1551                                          print last_letter_msg, last_letter_msg_len - 3
    82 00000763 B801000000          <1>  mov eax, sys_write
    83 00000768 BF01000000          <1>  mov edi, 1
    84 0000076D 48BE-               <1>  mov rsi, %1
    84 0000076F [CE22000000000000]  <1>
    85 00000777 BA10000000          <1>  mov edx, %2
    86 0000077C 0F05                <1>  syscall
  1552 0000077E 8A05(CD220000)                  mov al, [last_letter]
  1553 00000784 8805(DD220000)                  mov [last_letter_msg + 15], al
  1554                                          print last_letter_msg + last_letter_msg_len - 3, 3
    82 0000078A B801000000          <1>  mov eax, sys_write
    83 0000078F BF01000000          <1>  mov edi, 1
    84 00000794 48BE-               <1>  mov rsi, %1
    84 00000796 [DE22000000000000]  <1>
    85 0000079E BA03000000          <1>  mov edx, %2
    86 000007A3 0F05                <1>  syscall
  1555                                  
  1556                                      .end:
  1557 000007A5 415B                            pop r11
  1558 000007A7 415A                            pop r10
  1559 000007A9 4159                            pop r9
  1560 000007AB 4158                            pop r8
  1561 000007AD 5E                              pop rsi
  1562 000007AE 5F                              pop rdi
  1563 000007AF 5B                              pop rbx
  1564 000007B0 5D                              pop rbp
  1565 000007B1 C3                              ret
  1566                                  
  1567                                  
  1568                                  clear_lasers:
  1569 000007B2 55                          push rbp
  1570 000007B3 4889E5                      mov  rbp, rsp
  1571                                  
  1572                                      ; Recorrer el array de láseres
  1573 000007B6 4831C9                      xor rcx, rcx                ; Índice del láser
  1574 000007B9 480FB61D(0B230000)          movzx rbx, byte [laser_count]  ; Cantidad de láseres activos
  1575                                  
  1576                                      .clear_loop:
  1577 000007C1 4839D9                          cmp rcx, rbx
  1578 000007C4 7D2F                            jge .done                ; Salir si no quedan láseres
  1579                                  
  1580                                          ; Obtener posición del láser actual
  1581 000007C6 488DB409[0C230000]              lea rsi, [lasers + rcx * 2]
  1582 000007CE 4C0FB606                        movzx r8, byte [rsi]     ; X
  1583 000007D2 4C0FB64E01                      movzx r9, byte [rsi + 1] ; Y
  1584                                  
  1585                                          ; Calcular posición en el tablero
  1586 000007D7 B850000000                      mov rax, column_cells
  1587 000007DC 4883C002                        add rax, 2
  1588 000007E0 49F7E1                          mul r9
  1589 000007E3 4C01C0                          add rax, r8
  1590 000007E6 488DB8[400A0000]                lea rdi, [board + rax]
  1591                                  
  1592                                          ; Borrar el láser visualmente
  1593 000007ED C60720                          mov byte [rdi], ' '
  1594                                  
  1595                                          ; Pasar al siguiente láser
  1596 000007F0 48FFC1                          inc rcx
  1597 000007F3 EBCC                            jmp .clear_loop
  1598                                  
  1599                                      .done:
  1600                                          ; Resetear contador de láseres
  1601 000007F5 C605(0B230000)00                mov byte [laser_count], 0
  1602                                  
  1603 000007FC 5D                              pop rbp
  1604 000007FD C3                              ret
  1605                                  
  1606                                  
  1607                                  ; Nueva función para actualizar los láseres
  1608                                  update_lasers:
  1609 000007FE 55                          push rbp
  1610 000007FF 4889E5                      mov rbp, rsp
  1611                                      
  1612                                      ; Verificar si el poder láser está activo
  1613 00000802 803D(09230000)00            cmp byte [laser_power_active], 0
  1614 00000809 741A                        je .end
  1615                                      
  1616                                      ; Verificar si se presionó la tecla de espacio
  1617 0000080B 803D(08230000)20            cmp byte [last_key], ' '
  1618 00000812 750C                        jne .skip_shooting
  1619                                      
  1620                                      ; Disparar nuevos láseres
  1621 00000814 E89A000000                  call shoot_lasers
  1622 00000819 C605(08230000)00            mov byte [last_key], 0    ; Limpiar la tecla procesada
  1623                                      
  1624                                      .skip_shooting:
  1625                                      ; Mover los láseres existentes
  1626 00000820 E828010000                  call move_lasers
  1627                                      
  1628                                      .end:
  1629 00000825 5D                              pop rbp
  1630 00000826 C3                              ret
  1631                                  
  1632                                  activate_split_power:
  1633 00000827 55                          push rbp
  1634 00000828 4889E5                      mov rbp, rsp
  1635                                      
  1636                                      ; Verificar si la bola2 y bola3 ya están activas
  1637 0000082B 803D(22150000)01            cmp byte [ball2_active], 1
  1638 00000832 750B                        jne .enable_balls
  1639 00000834 803D(44150000)01            cmp byte [ball3_active], 1
  1640 0000083B 7502                        jne .enable_balls
  1641                                      
  1642                                      ; Si ambas ya están activas, no hacemos nada.
  1643 0000083D EB72                        jmp .end
  1644                                  
  1645                                  .enable_balls:
  1646                                      ; Copiamos la posición de la bola principal
  1647 0000083F 488B05(DF140000)            mov rax, [ball_x_pos]
  1648 00000846 488905(01150000)            mov [ball2_x_pos], rax
  1649 0000084D 488905(23150000)            mov [ball3_x_pos], rax
  1650                                  
  1651 00000854 488B05(E7140000)            mov rax, [ball_y_pos]
  1652 0000085B 488905(09150000)            mov [ball2_y_pos], rax
  1653 00000862 488905(2B150000)            mov [ball3_y_pos], rax
  1654                                  
  1655                                      ; Activamos bola2 y bola3 con direcciones diferentes
  1656                                      ; Por ejemplo: una va diagonal izq-arriba, otra diagonal der-arriba
  1657 00000869 48C705(11150000)FF-         mov qword [ball2_direction_x], -1
  1657 00000871 FFFFFF             
  1658 00000874 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  1658 0000087C FFFFFF             
  1659 0000087F C605(21150000)01            mov byte [ball2_moving], 1
  1660 00000886 C605(22150000)01            mov byte [ball2_active], 1
  1661                                  
  1662 0000088D 48C705(33150000)01-         mov qword [ball3_direction_x], 1
  1662 00000895 000000             
  1663 00000898 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  1663 000008A0 FFFFFF             
  1664 000008A3 C605(43150000)01            mov byte [ball3_moving], 1
  1665 000008AA C605(44150000)01            mov byte [ball3_active], 1
  1666                                  
  1667                                  .end:
  1668 000008B1 5D                          pop rbp
  1669 000008B2 C3                          ret
  1670                                  
  1671                                  
  1672                                  shoot_lasers:
  1673 000008B3 55                          push rbp
  1674 000008B4 4889E5                      mov rbp, rsp
  1675 000008B7 53                          push rbx
  1676                                      
  1677                                      ; Verificar si hay espacio para más láseres
  1678 000008B8 480FB605(0B230000)          movzx rax, byte [laser_count]
  1679 000008C0 4883F862                    cmp rax, 98  ; Asegurar que hay espacio para 2 láseres
  1680 000008C4 0F8D80000000                jge .end
  1681                                      
  1682                                      ; Obtener posición de la paleta
  1683 000008CA 4C8B05(BF140000)            mov r8, [pallet_position]
  1684 000008D1 4981E8[400A0000]            sub r8, board                  ; Offset relativo de la paleta
  1685                                      
  1686                                      ; Calcular coordenadas x,y
  1687 000008D8 4C89C0                      mov rax, r8
  1688 000008DB 41B950000000                mov r9, column_cells
  1689 000008E1 4983C102                    add r9, 2                     ; Ancho total de línea
  1690 000008E5 4831D2                      xor rdx, rdx
  1691 000008E8 49F7F1                      div r9                        ; rax = y, rdx = x
  1692                                      
  1693                                      ; Guardar coordenadas
  1694 000008EB 4989C2                      mov r10, rax                  ; Y en r10
  1695 000008EE 4989D3                      mov r11, rdx                  ; X en r11
  1696                                      
  1697                                      ; Validar coordenadas
  1698 000008F1 4983FA00                    cmp r10, 0
  1699 000008F5 7C53                        jl .end
  1700 000008F7 4983FA20                    cmp r10, row_cells
  1701 000008FB 7D4D                        jge .end
  1702 000008FD 4983FB00                    cmp r11, 0
  1703 00000901 7C47                        jl .end
  1704 00000903 4983FB50                    cmp r11, column_cells
  1705 00000907 7D41                        jge .end
  1706                                      
  1707                                      ; Calcular índice para el primer láser
  1708 00000909 480FB61D(0B230000)          movzx rbx, byte [laser_count]
  1709 00000911 486BDB02                    imul rbx, 2                   ; Cada láser usa 2 bytes
  1710                                      
  1711                                      ; Primer láser (izquierda)
  1712 00000915 488DBB[0C230000]            lea rdi, [lasers + rbx]
  1713 0000091C 44881F                      mov [rdi], r11b              ; X
  1714 0000091F 4488D0                      mov al, r10b
  1715 00000922 FEC8                        dec al                       ; Y - 1
  1716 00000924 884701                      mov [rdi + 1], al           ; Y
  1717                                      
  1718                                      ; Segundo láser (derecha)
  1719 00000927 4488D8                      mov al, r11b
  1720 0000092A 0205(C7140000)              add al, byte [pallet_size]
  1721 00000930 FEC8                        dec al                       ; Ajustar para el último carácter
  1722 00000932 488DBB[0E230000]            lea rdi, [lasers + rbx + 2]
  1723 00000939 8807                        mov [rdi], al               ; X
  1724 0000093B 4488D0                      mov al, r10b
  1725 0000093E FEC8                        dec al                      ; Y - 1
  1726 00000940 884701                      mov [rdi + 1], al          ; Y
  1727                                      
  1728                                      ; Incrementar contador de láseres
  1729 00000943 8005(0B230000)02            add byte [laser_count], 2
  1730                                      
  1731                                      
  1732                                      .end:
  1733 0000094A 5B                              pop rbx
  1734 0000094B 5D                              pop rbp
  1735 0000094C C3                              ret
  1736                                  
  1737                                  ; Función corregida para mover láseres
  1738                                  ; Función corregida para mover láseres
  1739                                  ; Esta es la parte clave para recorrer los láseres de atrás hacia adelante.
  1740                                  
  1741                                  ; Actualizar la función move_lasers para incluir verificación de colisiones
  1742                                  ; ============================================================
  1743                                  ; NUEVA FUNCIÓN move_lasers (todo-en-uno)
  1744                                  ; ============================================================
  1745                                  ; Mueve cada láser hacia arriba, verifica colisiones (bloques/enemigos)
  1746                                  ; y lo elimina inmediatamente si choca, de lo contrario lo dibuja.
  1747                                  ; ============================================================
  1748                                  move_lasers:
  1749 0000094D 55                          push rbp
  1750 0000094E 4889E5                      mov  rbp, rsp
  1751 00000951 53                          push rbx
  1752 00000952 57                          push rdi
  1753 00000953 56                          push rsi
  1754 00000954 4154                        push r12
  1755 00000956 4155                        push r13
  1756 00000958 4156                        push r14
  1757 0000095A 4157                        push r15
  1758                                  
  1759                                      ; 1) Tomamos la cantidad de láseres
  1760 0000095C 480FB60D(0B230000)          movzx rcx, byte [laser_count]
  1761 00000964 4885C9                      test rcx, rcx
  1762 00000967 0F84BB000000                jz .fin              ; Si es cero, no hay láseres => salir
  1763                                  
  1764                                      ; Ajustamos RCX para que sea el último índice (laser_count - 1)
  1765 0000096D 48FFC9                      dec rcx              ; Empezamos desde el último láser
  1766                                  
  1767                                  .loop_lasers:
  1768                                      ; RSI apunta a lasers + (rcx * 2) => (x, y) del láser
  1769 00000970 488DB409[0C230000]          lea rsi, [lasers + rcx*2]
  1770                                  
  1771                                      ; 2) Cargar x,y actuales del láser
  1772 00000978 4C0FB606                    movzx r8,  byte [rsi]      ; X
  1773 0000097C 4C0FB64E01                  movzx r9,  byte [rsi + 1]  ; Y
  1774                                  
  1775                                      ; 3) Borrar el láser de su posición actual en pantalla
  1776                                      ;    (por si en el ciclo anterior se había dibujado)
  1777 00000981 B850000000                  mov rax, column_cells
  1778 00000986 4883C002                    add rax, 2
  1779 0000098A 49F7E1                      mul r9
  1780 0000098D 4C01C0                      add rax, r8
  1781 00000990 488DB8[400A0000]            lea rdi, [board + rax]
  1782 00000997 C60720                      mov byte [rdi], ' '        ; Borramos el símbolo anterior (láser)
  1783                                  
  1784                                      ; 4) Mover el láser hacia arriba (y - 1)
  1785 0000099A 49FFC9                      dec r9
  1786                                  
  1787                                      ; Si y < 1, está fuera de pantalla => eliminarlo
  1788 0000099D 4983F901                    cmp r9, 1
  1789 000009A1 7C57                        jl .delete_laser
  1790                                  
  1791                                      ; Guardamos la posición nueva en el array (aún no lo dibujamos)
  1792 000009A3 44884E01                    mov byte [rsi + 1], r9b
  1793                                  
  1794                                      ; 5) Verificamos colisión inmediata con bloques o enemigos
  1795                                      ;    - Primero colisión con bloques
  1796                                      ; ---------------------------------------------------------
  1797                                      ; Calculamos la nueva dirección de memoria para esa posición (r9,r8)
  1798 000009A7 B850000000                  mov rax, column_cells
  1799 000009AC 4883C002                    add rax, 2
  1800 000009B0 49F7E1                      mul r9
  1801 000009B3 4C01C0                      add rax, r8
  1802 000009B6 488DB8[400A0000]            lea rdi, [board + rax]   ; rdi apunta a la celda donde estaría el láser
  1803                                  
  1804                                      ; Revisar si hay bloque
  1805 000009BD 51                          push rcx
  1806 000009BE 56                          push rsi
  1807 000009BF 57                          push rdi
  1808 000009C0 4989FA                      mov r10, rdi    ; En check_block_collision, r10 = posición en board
  1809 000009C3 E8440F0000                  call check_block_collision
  1810 000009C8 5F                          pop rdi
  1811 000009C9 5E                          pop rsi
  1812 000009CA 59                          pop rcx
  1813                                  
  1814 000009CB 4885C0                      test rax, rax          ; rax=1 => hubo colisión con bloque
  1815 000009CE 752A                        jnz .delete_laser      ; si chocó, eliminar ya el láser
  1816                                  
  1817                                      ;    - Luego colisión con enemigos
  1818                                      ; ---------------------------------------------------------
  1819 000009D0 51                          push rcx
  1820 000009D1 56                          push rsi
  1821 000009D2 57                          push rdi
  1822                                      ; Pasamos (r8=X, r9=Y, r10=punteroEnBoard) a la función
  1823                                      ; o podemos crear una versión inlined. A modo de ejemplo:
  1824                                      ; Llamamos a check_laser_enemy_collision, que retorna
  1825                                      ; rax=1 si hubo colisión con enemigo, 0 si no.
  1826                                      ;
  1827                                      ; Hacemos algo como:
  1828 000009D3 4989FA                      mov r10, rdi
  1829 000009D6 E85A000000                  call check_laser_enemy_collision
  1830 000009DB 5F                          pop rdi
  1831 000009DC 5E                          pop rsi
  1832 000009DD 59                          pop rcx
  1833                                  
  1834 000009DE 4885C0                      test rax, rax          ; rax=1 => colisión con un enemigo
  1835 000009E1 7517                        jnz .delete_laser
  1836                                  
  1837                                      ; 6) Si NO hubo colisión, dibujamos el láser en la nueva posición
  1838 000009E3 8A05(0A230000)              mov al, [laser_symbol]
  1839 000009E9 8807                        mov [rdi], al
  1840                                  
  1841                                  .next_laser:
  1842                                      ; Pasamos al láser anterior en el array
  1843 000009EB 48FFC9                      dec rcx
  1844 000009EE 4883F9FF                    cmp rcx, -1
  1845 000009F2 0F8F78FFFFFF                jg .loop_lasers   ; Mientras rcx >= 0, seguir iterando
  1846 000009F8 EB2E                        jmp .fin
  1847                                  
  1848                                  ; -----------------------------------------------------------------
  1849                                  ; Subrutina interna: .delete_laser
  1850                                  ; -----------------------------------------------------------------
  1851                                  ; Elimina el láser actual del array 'lasers' moviendo el último
  1852                                  ; láser a su posición (si no es el último). Decrementa laser_count.
  1853                                  .delete_laser:
  1854 000009FA 4C0FB625(0B230000)          movzx r12, byte [laser_count]
  1855 00000A02 49FFCC                      dec r12                    ; r12 = índice del último láser
  1856 00000A05 4939CC                      cmp r12, rcx
  1857 00000A08 7616                        jbe .just_decrement        ; Si rcx ya apunta al último, no copiamos
  1858                                  
  1859                                      ; Copiamos el último láser a la posición actual
  1860 00000A0A 488DBC09[0C230000]          lea rdi, [lasers + rcx*2]
  1861 00000A12 4B8DB424[0C230000]          lea rsi, [lasers + r12*2]
  1862 00000A1A 668B06                      mov ax, [rsi]             ; lee 2 bytes (X,Y) del último láser
  1863 00000A1D 668907                      mov [rdi], ax             ; copiamos X,Y
  1864                                  
  1865                                  .just_decrement:
  1866 00000A20 FE0D(0B230000)              dec byte [laser_count]    ; Decrementar contador de láseres
  1867 00000A26 EBC3                        jmp .next_laser
  1868                                  
  1869                                  .fin:
  1870 00000A28 415F                        pop r15
  1871 00000A2A 415E                        pop r14
  1872 00000A2C 415D                        pop r13
  1873 00000A2E 415C                        pop r12
  1874 00000A30 5E                          pop rsi
  1875 00000A31 5F                          pop rdi
  1876 00000A32 5B                          pop rbx
  1877 00000A33 5D                          pop rbp
  1878 00000A34 C3                          ret
  1879                                  
  1880                                  
  1881                                  ; Nueva función para verificar colisión entre láser y enemigos
  1882                                  ; ==========================================================
  1883                                  ; NUEVA check_laser_enemy_collision - inlined destroy
  1884                                  ; ==========================================================
  1885                                  check_laser_enemy_collision:
  1886 00000A35 55                          push rbp
  1887 00000A36 4889E5                      mov  rbp, rsp
  1888                                      
  1889 00000A39 4D31ED                      xor r13, r13            ; Índice del enemigo
  1890 00000A3C 4831C0                      xor rax, rax            ; 0 = no colisión
  1891                                  
  1892                                  .loop_enemies:
  1893 00000A3F 4983FD05                    cmp r13, 5              ; Máximo 5 enemigos
  1894 00000A43 7D64                        jge .end
  1895                                  
  1896                                      ; r13 * 3 => offset del enemigo i
  1897 00000A45 4C89E9                      mov rcx, r13
  1898 00000A48 486BC903                    imul rcx, 3
  1899 00000A4C 488DB1[60200000]            lea rsi, [enemies + rcx]   ; rsi => &enemies[i]
  1900                                  
  1901                                      ; Verificar si está activo
  1902 00000A53 807E0201                    cmp byte [rsi+2], 1
  1903 00000A57 754B                        jne .next_enemy
  1904                                  
  1905                                      ; Cargar posición X/Y del enemigo
  1906 00000A59 4C0FB636                    movzx r14, byte [rsi]      ; X
  1907 00000A5D 4C0FB67E01                  movzx r15, byte [rsi+1]    ; Y
  1908                                  
  1909                                      ; Comparar con posición del láser (r8=X, r9=Y)
  1910 00000A62 4D39F0                      cmp r8, r14
  1911 00000A65 753D                        jne .next_enemy
  1912 00000A67 4D39F9                      cmp r9, r15
  1913 00000A6A 7538                        jne .next_enemy
  1914                                  
  1915                                      ; ==== Colisión detectada con láser ====
  1916                                  
  1917                                      ; 1) Desactivar enemigo
  1918 00000A6C C6460200                    mov byte [rsi+2], 0     ; (activo=0)
  1919                                  
  1920                                      ; 2) Sumar puntos
  1921 00000A70 488B05(7F200000)            mov rax, [enemy_points]
  1922 00000A77 480105(3E200000)            add [current_score], rax
  1923                                  
  1924                                      ; 3) (Opcional) Borrar del board, SOLO si no coincide con la paleta
  1925                                      ;    Evita crasheos en la fila de la paleta (row_cells - 2).
  1926 00000A7E 4983FF1E                    cmp r15, row_cells - 2
  1927 00000A82 7419                        je .skip_erase
  1928                                  
  1929                                      ; Borrar visualmente del board
  1930 00000A84 B850000000                  mov rax, column_cells
  1931 00000A89 4883C002                    add rax, 2
  1932 00000A8D 49F7E7                      mul r15
  1933 00000A90 4C01F0                      add rax, r14
  1934 00000A93 488DB8[400A0000]            lea rdi, [board + rax]
  1935 00000A9A C60720                      mov byte [rdi], ' '
  1936                                  
  1937                                  .skip_erase:
  1938                                  
  1939                                      ; 4) Devolver rax=1 => colisión con enemigo
  1940 00000A9D B801000000                  mov rax, 1
  1941 00000AA2 EB05                        jmp .end
  1942                                  
  1943                                  .next_enemy:
  1944 00000AA4 49FFC5                      inc r13
  1945 00000AA7 EB96                        jmp .loop_enemies
  1946                                  
  1947                                  .end:
  1948 00000AA9 5D                          pop rbp
  1949 00000AAA C3                          ret
  1950                                  
  1951                                  
  1952                                  ; Función auxiliar para eliminar un láser específico
  1953                                  remove_laser:
  1954 00000AAB 55                          push rbp
  1955 00000AAC 4889E5                      mov rbp, rsp
  1956                                  
  1957                                      ; Borrar el láser del tablero
  1958 00000AAF 41C60220                    mov byte [r10], ' '
  1959                                  
  1960                                      ; Mover el último láser a esta posición si no es el último
  1961 00000AB3 480FB605(0B230000)          movzx rax, byte [laser_count]
  1962 00000ABB 48FFC8                      dec rax                    ; Índice del último láser
  1963 00000ABE 4939C4                      cmp r12, rax              ; Comparar con láser actual
  1964 00000AC1 7416                        je .just_decrease         ; Si es el último, solo decrementar contador
  1965                                  
  1966                                      ; Copiar último láser a la posición actual
  1967 00000AC3 4B8DBC24[0C230000]          lea rdi, [lasers + r12*2]
  1968 00000ACB 488DB400[0C230000]          lea rsi, [lasers + rax*2]
  1969 00000AD3 668B16                      mov dx, [rsi]             ; Copiar X,Y del último láser
  1970 00000AD6 668917                      mov [rdi], dx
  1971                                  
  1972                                  .just_decrease:
  1973 00000AD9 FE0D(0B230000)              dec byte [laser_count]    ; Decrementar contador de láseres
  1974                                  
  1975 00000ADF 5D                          pop rbp
  1976 00000AE0 C3                          ret
  1977                                  
  1978                                  add_life:
  1979 00000AE1 55                          push rbp
  1980 00000AE2 4889E5                      mov rbp, rsp
  1981 00000AE5 53                          push rbx
  1982 00000AE6 51                          push rcx
  1983 00000AE7 57                          push rdi
  1984 00000AE8 56                          push rsi
  1985 00000AE9 4150                        push r8
  1986 00000AEB 4151                        push r9
  1987                                      
  1988                                      ; Verificar si ya tenemos el máximo de vidas
  1989 00000AED 480FB605(3B210000)          movzx rax, byte [current_lives]
  1990 00000AF5 4883F807                    cmp rax, 7          ; Comparar con el máximo de vidas
  1991 00000AF9 7D2C                        jge .end
  1992                                      
  1993                                      ; Incrementar el contador de vidas
  1994 00000AFB FE05(3B210000)              inc byte [current_lives]
  1995                                      
  1996                                      ; Encontrar la siguiente vida inactiva
  1997 00000B01 4831C9                      xor rcx, rcx
  1998                                      
  1999                                      .find_inactive:
  2000 00000B04 4883F907                        cmp rcx, lives_count
  2001 00000B08 7D1D                            jge .end
  2002                                          
  2003                                          ; Calcular offset de la vida actual
  2004 00000B0A 4889C8                          mov rax, rcx
  2005 00000B0D 486BC003                        imul rax, 3
  2006 00000B11 488DB0[25210000]                lea rsi, [lives_data + rax]
  2007                                          
  2008                                          ; Verificar si está inactiva
  2009 00000B18 807E0200                        cmp byte [rsi + 2], 0
  2010 00000B1C 7405                            je .activate_life
  2011                                          
  2012 00000B1E 48FFC1                          inc rcx
  2013 00000B21 EBE1                            jmp .find_inactive
  2014                                          
  2015                                      .activate_life:
  2016                                          ; Activar la vida
  2017 00000B23 C6460201                        mov byte [rsi + 2], 1
  2018                                          
  2019                                      .end:
  2020 00000B27 4159                            pop r9
  2021 00000B29 4158                            pop r8
  2022 00000B2B 5E                              pop rsi
  2023 00000B2C 5F                              pop rdi
  2024 00000B2D 59                              pop rcx
  2025 00000B2E 5B                              pop rbx
  2026 00000B2F 5D                              pop rbp
  2027 00000B30 C3                              ret
  2028                                  
  2029                                  
  2030                                  print_ball:
  2031 00000B31 4C8B05(DF140000)        	mov r8, [ball_x_pos]
  2032 00000B38 4C8B0D(E7140000)        	mov r9, [ball_y_pos]
  2033 00000B3F 4981C0[400A0000]        	add r8, board
  2034                                  
  2035 00000B46 4C89C9                  	mov rcx, r9
  2036 00000B49 B852000000              	mov rax, column_cells + 2
  2037 00000B4E 48F7E9                  	imul rcx
  2038                                  	
  2039 00000B51 4901C0                  	add r8, rax
  2040 00000B54 41C6004F                	mov byte [r8], char_O
  2041 00000B58 C3                      	ret
  2042                                  
  2043                                  print_ball_2:
  2044 00000B59 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2045 00000B60 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2046 00000B67 4981C0[400A0000]            add r8, board
  2047 00000B6E 4C89C9                      mov rcx, r9
  2048 00000B71 B852000000                  mov rax, column_cells + 2
  2049 00000B76 48F7E9                      imul rcx
  2050 00000B79 4901C0                      add r8, rax
  2051 00000B7C 41C6004F                    mov byte [r8], char_O
  2052 00000B80 C3                          ret
  2053                                  
  2054                                  print_ball_3:
  2055 00000B81 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2056 00000B88 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2057 00000B8F 4981C0[400A0000]            add r8, board
  2058 00000B96 4C89C9                      mov rcx, r9
  2059 00000B99 B852000000                  mov rax, column_cells + 2
  2060 00000B9E 48F7E9                      imul rcx
  2061 00000BA1 4901C0                      add r8, rax
  2062 00000BA4 41C6004F                    mov byte [r8], char_O
  2063 00000BA8 C3                          ret
  2064                                  
  2065                                  	;mov rax, board + r8 + r9 * (column_cells + 2)
  2066                                  	
  2067                                  print_pallet:
  2068                                      ; Primero borrar la paleta anterior completa (usando el tamaño máximo posible)
  2069 00000BA9 4C8B05(BF140000)            mov r8, [pallet_position]
  2070 00000BB0 488B0D(D7140000)            mov rcx, [extended_pallet_size]
  2071                                      .clear_pallet:
  2072 00000BB7 41C60020                        mov byte [r8], char_space
  2073 00000BBB 49FFC0                          inc r8
  2074 00000BBE 48FFC9                          dec rcx
  2075 00000BC1 75F4                            jnz .clear_pallet
  2076                                  
  2077                                      ; Luego dibujar la nueva paleta con el tamaño actual
  2078 00000BC3 4C8B05(BF140000)            mov r8, [pallet_position]
  2079 00000BCA 488B0D(C7140000)            mov rcx, [pallet_size]
  2080                                      .write_pallet:
  2081 00000BD1 41C6003D                        mov byte [r8], char_equal
  2082 00000BD5 49FFC0                          inc r8
  2083 00000BD8 48FFC9                          dec rcx
  2084 00000BDB 75F4                            jnz .write_pallet
  2085                                  
  2086 00000BDD C3                          ret
  2087                                  
  2088                                  move_pallet:
  2089                                      
  2090 00000BDE 803D(FF140000)00            cmp byte [ball_moving], 0
  2091 00000BE5 7507                        jne .continue_movement
  2092 00000BE7 C605(FF140000)01            mov byte [ball_moving], 1
  2093                                  
  2094                                      .continue_movement:
  2095 00000BEE 4883FFFF                        cmp rdi, left_direction
  2096 00000BF2 7531                            jne .move_right
  2097                                  
  2098                                          .move_left:
  2099                                              ; Verificar si la siguiente posición sería una X (borde izquierdo)
  2100 00000BF4 4C8B05(BF140000)                    mov r8, [pallet_position]
  2101 00000BFB 49FFC8                              dec r8              ; Verificar la posición a la izquierda
  2102 00000BFE 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
  2103 00000C01 3C58                                cmp al, 'X'        ; Comparar si es una X
  2104 00000C03 744E                                je .end            ; Si es X, no mover
  2105                                              
  2106 00000C05 4C8B05(BF140000)                    mov r8, [pallet_position]
  2107 00000C0C 4C8B0D(C7140000)                    mov r9, [pallet_size]
  2108 00000C13 43C64408FF20                        mov byte [r8 + r9 - 1], char_space  ; Borrar último carácter de la paleta
  2109 00000C19 49FFC8                              dec r8
  2110 00000C1C 4C8905(BF140000)                    mov [pallet_position], r8
  2111 00000C23 EB2E                                jmp .end
  2112                                              
  2113                                          .move_right:
  2114                                              ; Verificar si la siguiente posición después de la paleta sería una X
  2115 00000C25 4C8B05(BF140000)                    mov r8, [pallet_position]
  2116 00000C2C 4C8B0D(C7140000)                    mov r9, [pallet_size]
  2117 00000C33 4D01C8                              add r8, r9         ; Moverse al final de la paleta
  2118 00000C36 418A4002                            mov al, [r8+2]       ; Cargar el carácter en esa posición
  2119 00000C3A 3C58                                cmp al, 'X'        ; Comparar si es una X
  2120 00000C3C 7415                                je .end            ; Si es X, no mover
  2121                                              
  2122 00000C3E 4C8B05(BF140000)                    mov r8, [pallet_position]
  2123 00000C45 41C60020                            mov byte [r8], char_space
  2124 00000C49 49FFC0                              inc r8
  2125 00000C4C 4C8905(BF140000)                    mov [pallet_position], r8
  2126                                          .end:
  2127 00000C53 C3                                  ret
  2128                                  
  2129                                  
  2130                                  
  2131                                              
  2132                                  ; Nueva función auxiliar para actualizar la posición de la bola atrapada
  2133                                  update_caught_ball_position:
  2134 00000C54 55                          push rbp
  2135 00000C55 4889E5                      mov rbp, rsp
  2136                                      
  2137                                      ; Calcular la nueva posición de la bola basada en la paleta
  2138 00000C58 4C8B05(BF140000)            mov r8, [pallet_position]
  2139 00000C5F 4981E8[400A0000]            sub r8, board          ; Obtener posición relativa
  2140 00000C66 B852000000                  mov rax, column_cells + 2
  2141 00000C6B 4831D2                      xor rdx, rdx
  2142 00000C6E 48F7F0                      div rax                ; División para obtener X,Y
  2143                                      
  2144                                      ; rdx contiene X (resto), rax contiene Y (cociente)
  2145 00000C71 4989C1                      mov r9, rax            ; Y de la paleta
  2146 00000C74 49FFC9                      dec r9                 ; Una posición arriba de la paleta
  2147                                      
  2148                                      ; Añadir el offset guardado a la posición X
  2149 00000C77 4889D0                      mov rax, rdx
  2150 00000C7A 480305(00230000)            add rax, [ball_catch_offset]
  2151 00000C81 488905(DF140000)            mov [ball_x_pos], rax
  2152 00000C88 4C890D(E7140000)            mov [ball_y_pos], r9
  2153                                      
  2154 00000C8F 5D                          pop rbp
  2155 00000C90 C3                          ret
  2156                                  
  2157                                  
  2158                                  move_all_balls:
  2159 00000C91 55                          push rbp
  2160 00000C92 4889E5                      mov rbp, rsp
  2161 00000C95 53                          push rbx
  2162                                      
  2163                                      ; Inicializar contador de bolas
  2164 00000C96 4831DB                      xor rbx, rbx
  2165                                      
  2166                                  .loop_balls:
  2167                                      ; Verificar si hemos procesado todas las bolas
  2168 00000C99 3A1D(3F240000)              cmp bl, byte [balls_count]
  2169 00000C9F 7D1D                        jge .end
  2170                                      
  2171                                      ; Calcular offset de la bola actual
  2172 00000CA1 B821000000                  mov rax, BALL_STRUCT_SIZE
  2173 00000CA6 48F7E3                      mul rbx
  2174                                      
  2175                                      ; Verificar si la bola está activa
  2176 00000CA9 80B8[FC230000]01            cmp byte [balls_data + rax + 32], 1
  2177 00000CB0 7507                        jne .next_ball
  2178                                      
  2179                                      ; Guardar offset en la pila
  2180 00000CB2 50                          push rax
  2181                                      
  2182                                      ; Llamar a move_ball con los parámetros de esta bola
  2183 00000CB3 E809000000                  call move_ball
  2184                                      
  2185                                      ; Restaurar offset
  2186 00000CB8 58                          pop rax
  2187                                      
  2188                                  .next_ball:
  2189 00000CB9 48FFC3                      inc rbx
  2190 00000CBC EBDB                        jmp .loop_balls
  2191                                      
  2192                                  .end:
  2193 00000CBE 5B                          pop rbx
  2194 00000CBF 5D                          pop rbp
  2195 00000CC0 C3                          ret
  2196                                  
  2197                                  move_ball:
  2198                                  
  2199 00000CC1 803D(FD220000)01            cmp byte [ball_caught], 1
  2200 00000CC8 0F849D000000                je .move_with_pallet
  2201                                  
  2202 00000CCE 803D(FF140000)00            cmp byte [ball_moving], 0
  2203 00000CD5 0F84B8010000                je .end
  2204                                  
  2205                                      ; Incrementar contador de velocidad
  2206 00000CDB 48FF05(F3220000)            inc qword [speed_counter]
  2207                                      
  2208                                      ; Verificar si debemos mover la bola en este ciclo
  2209 00000CE2 488B05(F3220000)            mov rax, [speed_counter]
  2210 00000CE9 483B05(E3220000)            cmp rax, [ball_speed]
  2211 00000CF0 0F8C9D010000                jl .end
  2212                                      
  2213                                      ; Resetear contador de velocidad
  2214 00000CF6 48C705(F3220000)00-         mov qword [speed_counter], 0
  2214 00000CFE 000000             
  2215                                  
  2216                                      ; Borrar la posición actual de la bola
  2217 00000D01 4C8B05(DF140000)            mov r8, [ball_x_pos]
  2218 00000D08 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  2219 00000D0F 4981C0[400A0000]            add r8, board
  2220 00000D16 4C89C9                      mov rcx, r9
  2221 00000D19 B852000000                  mov rax, column_cells + 2
  2222 00000D1E 48F7E9                      imul rcx
  2223 00000D21 4901C0                      add r8, rax
  2224 00000D24 41C60020                    mov byte [r8], char_space
  2225                                  
  2226                                      ; Calcular siguiente posición X
  2227 00000D28 4C8B05(DF140000)            mov r8, [ball_x_pos]
  2228 00000D2F 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  2229 00000D36 488B05(EF140000)            mov rax, [ball_direction_x]
  2230 00000D3D 4901C0                      add r8, rax               ; Nueva posición X
  2231                                  
  2232                                      ; Calcular la dirección de memoria para la siguiente posición
  2233 00000D40 4D89C2                      mov r10, r8
  2234 00000D43 4981C2[400A0000]            add r10, board
  2235 00000D4A 4C89C9                      mov rcx, r9
  2236 00000D4D B852000000                  mov rax, column_cells + 2
  2237 00000D52 48F7E9                      imul rcx
  2238 00000D55 4901C2                      add r10, rax
  2239                                  
  2240                                      ; Verificar si hay una X en la siguiente posición X
  2241 00000D58 418A02                      mov al, [r10]
  2242 00000D5B 3C58                        cmp al, 'X'
  2243 00000D5D 7565                        jne .check_block_x
  2244 00000D5F 48F71D(EF140000)            neg qword [ball_direction_x]  ; Cambiar dirección X si hay una X
  2245 00000D66 E928010000                  jmp .end
  2246                                  
  2247                                      .move_with_pallet:
  2248                                          ; Borrar la posición actual de la bola
  2249 00000D6B 4C8B05(DF140000)                mov r8, [ball_x_pos]
  2250 00000D72 4C8B0D(E7140000)                mov r9, [ball_y_pos]
  2251 00000D79 4D89C2                          mov r10, r8
  2252 00000D7C 4981C2[400A0000]                add r10, board
  2253 00000D83 4C89C9                          mov rcx, r9
  2254 00000D86 B852000000                      mov rax, column_cells + 2
  2255 00000D8B 48F7E9                          imul rcx
  2256 00000D8E 4901C2                          add r10, rax
  2257 00000D91 41C60220                        mov byte [r10], char_space
  2258                                  
  2259                                          ; Actualizar posición X basada en la paleta
  2260 00000D95 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2261 00000D9C 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2262 00000DA3 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2263 00000DAA 4C8905(DF140000)                mov [ball_x_pos], r8          ; Guardar nueva posición X
  2264                                  
  2265                                          ; Mantener la bola una posición arriba de la paleta
  2266 00000DB1 4C8B0D(E7140000)                mov r9, [ball_y_pos]          ; Mantener la misma altura
  2267 00000DB8 4C890D(E7140000)                mov [ball_y_pos], r9          ; Actualizar posición Y
  2268                                  
  2269 00000DBF E9CF000000                      jmp .end
  2270                                  
  2271                                  
  2272                                      .check_block_x:
  2273                                          ; Verificar colisión con bloques en X
  2274 00000DC4 4150                            push r8     ; Guardar registros que usa check_block_collision
  2275 00000DC6 4151                            push r9
  2276 00000DC8 4152                            push r10
  2277 00000DCA E83D0B0000                      call check_block_collision
  2278 00000DCF 415A                            pop r10
  2279 00000DD1 4159                            pop r9
  2280 00000DD3 4158                            pop r8
  2281 00000DD5 4885C0                          test rax, rax
  2282 00000DD8 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2283 00000DDA 48F71D(EF140000)                neg qword [ball_direction_x]  ; Si hay colisión, rebotar
  2284 00000DE1 E9AD000000                      jmp .end
  2285                                  
  2286                                      .check_paddle_x:
  2287                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2288 00000DE6 41803A3D                        cmp byte [r10], char_equal
  2289 00000DEA 750C                            jne .check_y_movement
  2290 00000DEC 48F71D(EF140000)                neg qword [ball_direction_x]  ; Cambiar dirección X si hay una paleta
  2291 00000DF3 E99B000000                      jmp .end
  2292                                  
  2293                                      .check_y_movement:
  2294                                          ; Calcular siguiente posición Y
  2295 00000DF8 488B05(F7140000)                mov rax, [ball_direction_y]
  2296 00000DFF 4901C1                          add r9, rax                  ; Nueva posición Y
  2297                                  
  2298                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2299 00000E02 4D89C2                          mov r10, r8
  2300 00000E05 4981C2[400A0000]                add r10, board
  2301 00000E0C 4C89C9                          mov rcx, r9
  2302 00000E0F B852000000                      mov rax, column_cells + 2
  2303 00000E14 48F7E9                          imul rcx
  2304 00000E17 4901C2                          add r10, rax
  2305                                  
  2306                                          ; Verificar si hay una X en la siguiente posición Y
  2307 00000E1A 418A02                          mov al, [r10]
  2308 00000E1D 3C58                            cmp al, 'X'
  2309 00000E1F 7509                            jne .check_block_y
  2310 00000E21 48F71D(F7140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una X
  2311 00000E28 EB69                            jmp .end
  2312                                  
  2313                                      .check_block_y:
  2314                                          ; Verificar colisión con bloques en Y
  2315 00000E2A 4150                            push r8     ; Guardar registros que usa check_block_collision
  2316 00000E2C 4151                            push r9
  2317 00000E2E 4152                            push r10
  2318 00000E30 E8D70A0000                      call check_block_collision
  2319 00000E35 415A                            pop r10
  2320 00000E37 4159                            pop r9
  2321 00000E39 4158                            pop r8
  2322 00000E3B 4885C0                          test rax, rax
  2323 00000E3E 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2324 00000E40 48F71D(F7140000)                neg qword [ball_direction_y]  ; Si hay colisión, rebotar
  2325 00000E47 EB4A                            jmp .end
  2326                                  
  2327                                      .check_paddle_y:
  2328                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2329 00000E49 41803A3D                        cmp byte [r10], char_equal
  2330 00000E4D 7536                            jne .update_position
  2331                                  
  2332                                          ; Verificar si el poder catch está activo
  2333 00000E4F 803D(FC220000)01                cmp byte [catch_power_active], 1
  2334 00000E56 7524                            jne .normal_bounce
  2335                                  
  2336                                          ; Activar el modo "atrapado"
  2337 00000E58 C605(FD220000)01                mov byte [ball_caught], 1
  2338                                          
  2339                                          ; Guardar la posición X actual de la bola como offset
  2340 00000E5F 488B05(DF140000)                mov rax, [ball_x_pos]           ; Posición X actual de la bola
  2341 00000E66 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2342 00000E6D 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2343 00000E73 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2344                                          
  2345 00000E7A EB17                            jmp .end
  2346                                  
  2347                                      .normal_bounce:
  2348 00000E7C 48F71D(F7140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una paleta
  2349 00000E83 EB0E                            jmp .end
  2350                                  
  2351                                  
  2352                                      .update_position:
  2353 00000E85 4C8905(DF140000)                mov [ball_x_pos], r8
  2354 00000E8C 4C890D(E7140000)                mov [ball_y_pos], r9
  2355                                  
  2356                                      .end:
  2357 00000E93 C3                              ret
  2358                                  
  2359                                  
  2360                                  move_ball_2:
  2361                                  
  2362 00000E94 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2363 00000E9B 0F849D000000                je .move_with_pallet
  2364                                  
  2365 00000EA1 803D(21150000)00            cmp byte [ball2_moving], 0
  2366 00000EA8 0F84B8010000                je .end
  2367                                  
  2368                                      ; Incrementar contador de velocidad
  2369 00000EAE 48FF05(F3220000)            inc qword [speed_counter]
  2370                                      
  2371                                      ; Verificar si debemos mover la bola en este ciclo
  2372 00000EB5 488B05(F3220000)            mov rax, [speed_counter]
  2373 00000EBC 483B05(E3220000)            cmp rax, [ball_speed]
  2374 00000EC3 0F8C9D010000                jl .end
  2375                                      
  2376                                      ; Resetear contador de velocidad
  2377 00000EC9 48C705(F3220000)00-         mov qword [speed_counter], 0
  2377 00000ED1 000000             
  2378                                  
  2379                                      ; Borrar la posición actual de la bola
  2380 00000ED4 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2381 00000EDB 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2382 00000EE2 4981C0[400A0000]            add r8, board
  2383 00000EE9 4C89C9                      mov rcx, r9
  2384 00000EEC B852000000                  mov rax, column_cells + 2
  2385 00000EF1 48F7E9                      imul rcx
  2386 00000EF4 4901C0                      add r8, rax
  2387 00000EF7 41C60020                    mov byte [r8], char_space
  2388                                  
  2389                                      ; Calcular siguiente posición X
  2390 00000EFB 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2391 00000F02 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2392 00000F09 488B05(11150000)            mov rax, [ball2_direction_x]
  2393 00000F10 4901C0                      add r8, rax               ; Nueva posición X
  2394                                  
  2395                                      ; Calcular la dirección de memoria para la siguiente posición
  2396 00000F13 4D89C2                      mov r10, r8
  2397 00000F16 4981C2[400A0000]            add r10, board
  2398 00000F1D 4C89C9                      mov rcx, r9
  2399 00000F20 B852000000                  mov rax, column_cells + 2
  2400 00000F25 48F7E9                      imul rcx
  2401 00000F28 4901C2                      add r10, rax
  2402                                  
  2403                                      ; Verificar si hay una X en la siguiente posición X
  2404 00000F2B 418A02                      mov al, [r10]
  2405 00000F2E 3C58                        cmp al, 'X'
  2406 00000F30 7565                        jne .check_block_x
  2407 00000F32 48F71D(11150000)            neg qword [ball2_direction_x]  ; Cambiar dirección X si hay una X
  2408 00000F39 E928010000                  jmp .end
  2409                                  
  2410                                      .move_with_pallet:
  2411                                          ; Borrar la posición actual de la bola
  2412 00000F3E 4C8B05(01150000)                mov r8, [ball2_x_pos]
  2413 00000F45 4C8B0D(09150000)                mov r9, [ball2_y_pos]
  2414 00000F4C 4D89C2                          mov r10, r8
  2415 00000F4F 4981C2[400A0000]                add r10, board
  2416 00000F56 4C89C9                          mov rcx, r9
  2417 00000F59 B852000000                      mov rax, column_cells + 2
  2418 00000F5E 48F7E9                          imul rcx
  2419 00000F61 4901C2                          add r10, rax
  2420 00000F64 41C60220                        mov byte [r10], char_space
  2421                                  
  2422                                          ; Actualizar posición X basada en la paleta
  2423 00000F68 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2424 00000F6F 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2425 00000F76 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2426 00000F7D 4C8905(01150000)                mov [ball2_x_pos], r8          ; Guardar nueva posición X
  2427                                  
  2428                                          ; Mantener la bola una posición arriba de la paleta
  2429 00000F84 4C8B0D(09150000)                mov r9, [ball2_y_pos]          ; Mantener la misma altura
  2430 00000F8B 4C890D(09150000)                mov [ball2_y_pos], r9          ; Actualizar posición Y
  2431                                  
  2432 00000F92 E9CF000000                      jmp .end
  2433                                  
  2434                                  
  2435                                      .check_block_x:
  2436                                          ; Verificar colisión con bloques en X
  2437 00000F97 4150                            push r8     ; Guardar registros que usa check_block_collision
  2438 00000F99 4151                            push r9
  2439 00000F9B 4152                            push r10
  2440 00000F9D E86A090000                      call check_block_collision
  2441 00000FA2 415A                            pop r10
  2442 00000FA4 4159                            pop r9
  2443 00000FA6 4158                            pop r8
  2444 00000FA8 4885C0                          test rax, rax
  2445 00000FAB 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2446 00000FAD 48F71D(11150000)                neg qword [ball2_direction_x]  ; Si hay colisión, rebotar
  2447 00000FB4 E9AD000000                      jmp .end
  2448                                  
  2449                                      .check_paddle_x:
  2450                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2451 00000FB9 41803A3D                        cmp byte [r10], char_equal
  2452 00000FBD 750C                            jne .check_y_movement
  2453 00000FBF 48F71D(11150000)                neg qword [ball2_direction_x]  ; Cambiar dirección X si hay una paleta
  2454 00000FC6 E99B000000                      jmp .end
  2455                                  
  2456                                      .check_y_movement:
  2457                                          ; Calcular siguiente posición Y
  2458 00000FCB 488B05(19150000)                mov rax, [ball2_direction_y]
  2459 00000FD2 4901C1                          add r9, rax                  ; Nueva posición Y
  2460                                  
  2461                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2462 00000FD5 4D89C2                          mov r10, r8
  2463 00000FD8 4981C2[400A0000]                add r10, board
  2464 00000FDF 4C89C9                          mov rcx, r9
  2465 00000FE2 B852000000                      mov rax, column_cells + 2
  2466 00000FE7 48F7E9                          imul rcx
  2467 00000FEA 4901C2                          add r10, rax
  2468                                  
  2469                                          ; Verificar si hay una X en la siguiente posición Y
  2470 00000FED 418A02                          mov al, [r10]
  2471 00000FF0 3C58                            cmp al, 'X'
  2472 00000FF2 7509                            jne .check_block_y
  2473 00000FF4 48F71D(19150000)                neg qword [ball2_direction_y]  ; Cambiar dirección Y si hay una X
  2474 00000FFB EB69                            jmp .end
  2475                                  
  2476                                      .check_block_y:
  2477                                          ; Verificar colisión con bloques en Y
  2478 00000FFD 4150                            push r8     ; Guardar registros que usa check_block_collision
  2479 00000FFF 4151                            push r9
  2480 00001001 4152                            push r10
  2481 00001003 E804090000                      call check_block_collision
  2482 00001008 415A                            pop r10
  2483 0000100A 4159                            pop r9
  2484 0000100C 4158                            pop r8
  2485 0000100E 4885C0                          test rax, rax
  2486 00001011 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2487 00001013 48F71D(19150000)                neg qword [ball2_direction_y]  ; Si hay colisión, rebotar
  2488 0000101A EB4A                            jmp .end
  2489                                  
  2490                                      .check_paddle_y:
  2491                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2492 0000101C 41803A3D                        cmp byte [r10], char_equal
  2493 00001020 7536                            jne .update_position
  2494                                  
  2495                                          ; Verificar si el poder catch está activo
  2496 00001022 803D(FC220000)01                cmp byte [catch_power_active], 1
  2497 00001029 7524                            jne .normal_bounce
  2498                                  
  2499                                          ; Activar el modo "atrapado"
  2500 0000102B C605(FE220000)01                mov byte [ball_caught_2], 1
  2501                                          
  2502                                          ; Guardar la posición X actual de la bola como offset
  2503 00001032 488B05(01150000)                mov rax, [ball2_x_pos]           ; Posición X actual de la bola
  2504 00001039 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2505 00001040 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2506 00001046 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2507                                          
  2508 0000104D EB17                            jmp .end
  2509                                  
  2510                                      .normal_bounce:
  2511 0000104F 48F71D(19150000)                neg qword [ball2_direction_y]  ; Cambiar dirección Y si hay una paleta
  2512 00001056 EB0E                            jmp .end
  2513                                  
  2514                                  
  2515                                      .update_position:
  2516 00001058 4C8905(01150000)                mov [ball2_x_pos], r8
  2517 0000105F 4C890D(09150000)                mov [ball2_y_pos], r9
  2518                                  
  2519                                      .end:
  2520 00001066 C3                              ret
  2521                                  
  2522                                  move_ball_3:
  2523                                  
  2524 00001067 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2525 0000106E 0F849D000000                je .move_with_pallet
  2526                                  
  2527 00001074 803D(43150000)00            cmp byte [ball3_moving], 0
  2528 0000107B 0F84B8010000                je .end
  2529                                  
  2530                                      ; Incrementar contador de velocidad
  2531 00001081 48FF05(F3220000)            inc qword [speed_counter]
  2532                                      
  2533                                      ; Verificar si debemos mover la bola en este ciclo
  2534 00001088 488B05(F3220000)            mov rax, [speed_counter]
  2535 0000108F 483B05(E3220000)            cmp rax, [ball_speed]
  2536 00001096 0F8C9D010000                jl .end
  2537                                      
  2538                                      ; Resetear contador de velocidad
  2539 0000109C 48C705(F3220000)00-         mov qword [speed_counter], 0
  2539 000010A4 000000             
  2540                                  
  2541                                      ; Borrar la posición actual de la bola
  2542 000010A7 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2543 000010AE 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2544 000010B5 4981C0[400A0000]            add r8, board
  2545 000010BC 4C89C9                      mov rcx, r9
  2546 000010BF B852000000                  mov rax, column_cells + 2
  2547 000010C4 48F7E9                      imul rcx
  2548 000010C7 4901C0                      add r8, rax
  2549 000010CA 41C60020                    mov byte [r8], char_space
  2550                                  
  2551                                      ; Calcular siguiente posición X
  2552 000010CE 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2553 000010D5 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2554 000010DC 488B05(33150000)            mov rax, [ball3_direction_x]
  2555 000010E3 4901C0                      add r8, rax               ; Nueva posición X
  2556                                  
  2557                                      ; Calcular la dirección de memoria para la siguiente posición
  2558 000010E6 4D89C2                      mov r10, r8
  2559 000010E9 4981C2[400A0000]            add r10, board
  2560 000010F0 4C89C9                      mov rcx, r9
  2561 000010F3 B852000000                  mov rax, column_cells + 2
  2562 000010F8 48F7E9                      imul rcx
  2563 000010FB 4901C2                      add r10, rax
  2564                                  
  2565                                      ; Verificar si hay una X en la siguiente posición X
  2566 000010FE 418A02                      mov al, [r10]
  2567 00001101 3C58                        cmp al, 'X'
  2568 00001103 7565                        jne .check_block_x
  2569 00001105 48F71D(33150000)            neg qword [ball3_direction_x]  ; Cambiar dirección X si hay una X
  2570 0000110C E928010000                  jmp .end
  2571                                  
  2572                                      .move_with_pallet:
  2573                                          ; Borrar la posición actual de la bola
  2574 00001111 4C8B05(23150000)                mov r8, [ball3_x_pos]
  2575 00001118 4C8B0D(2B150000)                mov r9, [ball3_y_pos]
  2576 0000111F 4D89C2                          mov r10, r8
  2577 00001122 4981C2[400A0000]                add r10, board
  2578 00001129 4C89C9                          mov rcx, r9
  2579 0000112C B852000000                      mov rax, column_cells + 2
  2580 00001131 48F7E9                          imul rcx
  2581 00001134 4901C2                          add r10, rax
  2582 00001137 41C60220                        mov byte [r10], char_space
  2583                                  
  2584                                          ; Actualizar posición X basada en la paleta
  2585 0000113B 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2586 00001142 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2587 00001149 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2588 00001150 4C8905(23150000)                mov [ball3_x_pos], r8          ; Guardar nueva posición X
  2589                                  
  2590                                          ; Mantener la bola una posición arriba de la paleta
  2591 00001157 4C8B0D(2B150000)                mov r9, [ball3_y_pos]          ; Mantener la misma altura
  2592 0000115E 4C890D(2B150000)                mov [ball3_y_pos], r9          ; Actualizar posición Y
  2593                                  
  2594 00001165 E9CF000000                      jmp .end
  2595                                  
  2596                                  
  2597                                      .check_block_x:
  2598                                          ; Verificar colisión con bloques en X
  2599 0000116A 4150                            push r8     ; Guardar registros que usa check_block_collision
  2600 0000116C 4151                            push r9
  2601 0000116E 4152                            push r10
  2602 00001170 E897070000                      call check_block_collision
  2603 00001175 415A                            pop r10
  2604 00001177 4159                            pop r9
  2605 00001179 4158                            pop r8
  2606 0000117B 4885C0                          test rax, rax
  2607 0000117E 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2608 00001180 48F71D(33150000)                neg qword [ball3_direction_x]  ; Si hay colisión, rebotar
  2609 00001187 E9AD000000                      jmp .end
  2610                                  
  2611                                      .check_paddle_x:
  2612                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2613 0000118C 41803A3D                        cmp byte [r10], char_equal
  2614 00001190 750C                            jne .check_y_movement
  2615 00001192 48F71D(33150000)                neg qword [ball3_direction_x]  ; Cambiar dirección X si hay una paleta
  2616 00001199 E99B000000                      jmp .end
  2617                                  
  2618                                      .check_y_movement:
  2619                                          ; Calcular siguiente posición Y
  2620 0000119E 488B05(3B150000)                mov rax, [ball3_direction_y]
  2621 000011A5 4901C1                          add r9, rax                  ; Nueva posición Y
  2622                                  
  2623                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2624 000011A8 4D89C2                          mov r10, r8
  2625 000011AB 4981C2[400A0000]                add r10, board
  2626 000011B2 4C89C9                          mov rcx, r9
  2627 000011B5 B852000000                      mov rax, column_cells + 2
  2628 000011BA 48F7E9                          imul rcx
  2629 000011BD 4901C2                          add r10, rax
  2630                                  
  2631                                          ; Verificar si hay una X en la siguiente posición Y
  2632 000011C0 418A02                          mov al, [r10]
  2633 000011C3 3C58                            cmp al, 'X'
  2634 000011C5 7509                            jne .check_block_y
  2635 000011C7 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Cambiar dirección Y si hay una X
  2636 000011CE EB69                            jmp .end
  2637                                  
  2638                                      .check_block_y:
  2639                                          ; Verificar colisión con bloques en Y
  2640 000011D0 4150                            push r8     ; Guardar registros que usa check_block_collision
  2641 000011D2 4151                            push r9
  2642 000011D4 4152                            push r10
  2643 000011D6 E831070000                      call check_block_collision
  2644 000011DB 415A                            pop r10
  2645 000011DD 4159                            pop r9
  2646 000011DF 4158                            pop r8
  2647 000011E1 4885C0                          test rax, rax
  2648 000011E4 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2649 000011E6 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Si hay colisión, rebotar
  2650 000011ED EB4A                            jmp .end
  2651                                  
  2652                                      .check_paddle_y:
  2653                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2654 000011EF 41803A3D                        cmp byte [r10], char_equal
  2655 000011F3 7536                            jne .update_position
  2656                                  
  2657                                          ; Verificar si el poder catch está activo
  2658 000011F5 803D(FC220000)01                cmp byte [catch_power_active], 1
  2659 000011FC 7524                            jne .normal_bounce
  2660                                  
  2661                                          ; Activar el modo "atrapado"
  2662 000011FE C605(FF220000)01                mov byte [ball_caught_3], 1
  2663                                          
  2664                                          ; Guardar la posición X actual de la bola como offset
  2665 00001205 488B05(23150000)                mov rax, [ball3_x_pos]           ; Posición X actual de la bola
  2666 0000120C 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2667 00001213 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2668 00001219 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2669                                          
  2670 00001220 EB17                            jmp .end
  2671                                  
  2672                                      .normal_bounce:
  2673 00001222 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Cambiar dirección Y si hay una paleta
  2674 00001229 EB0E                            jmp .end
  2675                                  
  2676                                  
  2677                                      .update_position:
  2678 0000122B 4C8905(23150000)                mov [ball3_x_pos], r8
  2679 00001232 4C890D(2B150000)                mov [ball3_y_pos], r9
  2680                                  
  2681                                      .end:
  2682 00001239 C3                              ret
  2683                                  
  2684                                  ; Nueva función para procesar la tecla C cuando la bola está atrapada
  2685                                  ; Procesar la tecla 'c' cuando el poder de atrapar está activo
  2686                                  process_catch_release:
  2687 0000123A 55                          push rbp
  2688 0000123B 4889E5                      mov  rbp, rsp
  2689                                  
  2690                                      ; Verificar si el poder de catch está activo
  2691 0000123E 803D(FC220000)01            cmp byte [catch_power_active], 1
  2692 00001245 0F85A1000000                jne .no_catch_power
  2693                                  
  2694                                      ; Verificar si se presionó 'c'
  2695 0000124B 803D(08230000)63            cmp byte [last_key], 'c'
  2696 00001252 0F8594000000                jne .no_catch_power
  2697                                  
  2698                                      ; Liberar la bola principal si está atrapada
  2699 00001258 803D(FD220000)01            cmp byte [ball_caught], 1
  2700 0000125F 751F                        jne .check_ball2
  2701 00001261 C605(FD220000)00            mov byte [ball_caught], 0
  2702 00001268 48C705(EF140000)01-         mov qword [ball_direction_x], 1
  2702 00001270 000000             
  2703 00001273 48C705(F7140000)FF-         mov qword [ball_direction_y], -1
  2703 0000127B FFFFFF             
  2704 0000127E EB4E                        jmp .release_complete
  2705                                  
  2706                                  .check_ball2:
  2707 00001280 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2708 00001287 751F                        jne .check_ball3
  2709 00001289 C605(FE220000)00            mov byte [ball_caught_2], 0
  2710 00001290 48C705(11150000)01-         mov qword [ball2_direction_x], 1
  2710 00001298 000000             
  2711 0000129B 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  2711 000012A3 FFFFFF             
  2712 000012A6 EB26                        jmp .release_complete
  2713                                  
  2714                                  .check_ball3:
  2715 000012A8 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2716 000012AF 751D                        jne .release_complete
  2717 000012B1 C605(FF220000)00            mov byte [ball_caught_3], 0
  2718 000012B8 48C705(33150000)01-         mov qword [ball3_direction_x], 1
  2718 000012C0 000000             
  2719 000012C3 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  2719 000012CB FFFFFF             
  2720                                  
  2721                                  .release_complete:
  2722                                      ; Si era el catch inicial, desactivarlo
  2723 000012CE 803D(FB220000)01            cmp byte [initial_catch_active], 1
  2724 000012D5 750E                        jne .finish
  2725 000012D7 C605(FB220000)00            mov byte [initial_catch_active], 0
  2726 000012DE C605(FC220000)00            mov byte [catch_power_active], 0  ; Desactivar poder de catch después de la 1ra vez
  2727                                  
  2728                                  .finish:
  2729 000012E5 C605(08230000)00            mov byte [last_key], 0  ; Limpiar la tecla
  2730                                  .no_catch_power:
  2731 000012EC 5D                          pop rbp
  2732 000012ED C3                          ret
  2733                                  
  2734                                  
  2735                                  
  2736                                  display_level_number:
  2737 000012EE 55                          push rbp
  2738 000012EF 4889E5                      mov rbp, rsp
  2739                                      
  2740                                      ; Limpiar la pantalla primero
  2741                                      print clear, clear_length
    82 000012F2 B801000000          <1>  mov eax, sys_write
    83 000012F7 BF01000000          <1>  mov edi, 1
    84 000012FC 48BE-               <1>  mov rsi, %1
    84 000012FE [1000000000000000]  <1>
    85 00001306 BA07000000          <1>  mov edx, %2
    86 0000130B 0F05                <1>  syscall
  2742                                      
  2743                                      ; Calcular la posición central para el mensaje
  2744                                      ; Para el mensaje "NIVEL X", necesitamos centrar 7 caracteres
  2745 0000130D B850000000                  mov rax, column_cells
  2746 00001312 4883E807                    sub rax, 7                  ; longitud de "NIVEL X"
  2747 00001316 48D1E8                      shr rax, 1                  ; dividir por 2 para centrar
  2748                                      
  2749                                      ; Calcular la fila central
  2750 00001319 BB20000000                  mov rbx, row_cells
  2751 0000131E 48D1EB                      shr rbx, 1                  ; dividir por 2 para obtener la fila central
  2752                                      
  2753                                      ; Calcular el offset en el buffer
  2754 00001321 B952000000                  mov rcx, column_cells + 2   ; ancho total de una línea incluyendo newline
  2755 00001326 48F7E3                      mul rbx                     ; multiplicar por la fila central
  2756 00001329 4801D8                      add rax, rbx                ; añadir el offset horizontal
  2757                                      
  2758                                      ; Escribir "NIVEL " en la posición calculada
  2759 0000132C 488DB8[400A0000]            lea rdi, [board + rax]
  2760 00001333 48BE-                       mov rsi, level_msg
  2760 00001335 [A414000000000000] 
  2761 0000133D B906000000                  mov rcx, level_msg_len
  2762 00001342 F3A4                        rep movsb
  2763                                      
  2764                                      ; Escribir el número del nivel
  2765 00001344 8A05(79150000)              mov al, [current_level]
  2766 0000134A 0430                        add al, '0'                 ; convertir a ASCII
  2767 0000134C 8807                        mov [rdi], al
  2768                                      
  2769                                      ; Mostrar el board con el mensaje
  2770                                      print board, board_size
    82 0000134E B801000000          <1>  mov eax, sys_write
    83 00001353 BF01000000          <1>  mov edi, 1
    84 00001358 48BE-               <1>  mov rsi, %1
    84 0000135A [400A000000000000]  <1>
    85 00001362 BA400A0000          <1>  mov edx, %2
    86 00001367 0F05                <1>  syscall
  2771                                      
  2772                                      ; Esperar un segundo
  2773 00001369 B823000000                  mov rax, sys_nanosleep
  2774 0000136E 48BF-                       mov rdi, level_display_time
  2774 00001370 [AF14000000000000] 
  2775 00001378 4831F6                      xor rsi, rsi
  2776 0000137B 0F05                        syscall
  2777                                      
  2778 0000137D 5D                          pop rbp
  2779 0000137E C3                          ret
  2780                                  
  2781                                  ; Función para inicializar un tablero vacío
  2782                                  init_empty_board:
  2783 0000137F 56                          push rsi
  2784 00001380 57                          push rdi
  2785 00001381 51                          push rcx
  2786 00001382 50                          push rax
  2787                                  
  2788 00001383 488D35(00000000)            lea rsi, [board_template]   ; Copiar la plantilla del tablero
  2789 0000138A 488D3D(400A0000)            lea rdi, [board]            ; Destino: el tablero actual
  2790 00001391 B9400A0000                  mov rcx, board_template_size
  2791 00001396 F3A4                        rep movsb                   ; Copiar el tablero
  2792                                  
  2793 00001398 58                          pop rax
  2794 00001399 59                          pop rcx
  2795 0000139A 5F                          pop rdi
  2796 0000139B 5E                          pop rsi
  2797 0000139C C3                          ret
  2798                                  
  2799                                  
  2800                                  init_level:
  2801                                            ; Asegurarse que las otras bolas están desactivadas
  2802 0000139D C605(22150000)00            mov byte [ball2_active], 0
  2803 000013A4 C605(44150000)00            mov byte [ball3_active], 0
  2804 000013AB C605(09230000)00            mov byte [laser_power_active], 0
  2805 000013B2 E8FBF3FFFF                  call clear_lasers
  2806 000013B7 488B05(CF140000)            mov rax, [default_pallet_size]
  2807 000013BE 488905(C7140000)            mov [pallet_size], rax
  2808 000013C5 48C705(E3220000)01-         mov qword [ball_speed], 1    ; Restaurar velocidad normal
  2808 000013CD 000000             
  2809                                  
  2810                                      ; 1) Copiamos board_template en board para que quede "virgen"
  2811                                          ; Reiniciar letras activas
  2812 000013D0 488D3D(3C210000)            lea rdi, [letters_map]
  2813 000013D7 B990010000                  mov rcx, 100 * 4             ; Cada letra ocupa 4 bytes, limpiar 100 letras
  2814 000013DC 4831C0                      xor rax, rax
  2815 000013DF F3AA                        rep stosb                    ; Llenar con ceros
  2816                                      
  2817                                      ; Inicializar dirección de la bola (derecha y arriba)
  2818 000013E1 48C705(EF140000)01-         mov qword [ball_direction_x], 1    ; Dirección hacia la derecha (1 = derecha, -1 = izquierda)
  2818 000013E9 000000             
  2819 000013EC 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Dirección hacia arriba (-1 = arriba, 1 = abajo)
  2819 000013F4 FFFFFF             
  2820                                  
  2821                                      ; En init_level, después de inicializar las direcciones
  2822 000013F7 C605(FC220000)01            mov byte [catch_power_active], 1    ; Activar el poder catch
  2823 000013FE C605(FD220000)01            mov byte [ball_caught], 1           ; Marcar la bola como atrapada
  2824 00001405 C605(FB220000)01            mov byte [initial_catch_active], 1  ; Marcar que es el catch inicial
  2825                                  
  2826                                      ; Calcular y guardar el offset inicial de la bola respecto a la paleta
  2827 0000140C 488B05(DF140000)            mov rax, [ball_x_pos]              ; Posición X actual de la bola
  2828 00001413 482B05(BF140000)            sub rax, [pallet_position]         ; Restar la posición de la paleta
  2829 0000141A 4805[400A0000]              add rax, board                     ; Ajustar por el offset del tablero
  2830 00001420 488905(00230000)            mov [ball_catch_offset], rax       ; Guardar el offset
  2831                                  
  2832                                      ; Reiniciar contador de letras activas
  2833 00001427 4831C0                      xor rax, rax
  2834 0000142A 8805(CC220000)              mov [letters_count], al
  2835                                  
  2836                                      ; Reiniciar última letra capturada
  2837 00001430 C605(CD220000)20            mov byte [last_letter], ' '
  2838 00001437 C605(46200000)00            mov byte [destroyed_blocks], 0 
  2839 0000143E E83CFFFFFF                  call init_empty_board
  2840 00001443 E8A6FEFFFF                  call display_level_number
  2841 00001448 E8E8050000                  call init_enemies
  2842                                      
  2843 0000144D 56                          push rsi
  2844 0000144E 57                          push rdi
  2845 0000144F 51                          push rcx
  2846 00001450 50                          push rax
  2847                                  
  2848 00001451 488D35(00000000)            lea rsi, [board_template]
  2849 00001458 488D3D(400A0000)            lea rdi, [board]
  2850 0000145F B9400A0000                  mov rcx, board_template_size
  2851 00001464 F3A4                        rep movsb                 ; Copiamos la plantilla a board
  2852                                  
  2853 00001466 58                          pop rax
  2854 00001467 59                          pop rcx
  2855 00001468 5F                          pop rdi
  2856 00001469 5E                          pop rsi
  2857                                  
  2858 0000146A B90A000000                  mov rcx, 10
  2859 0000146F 4831C0                      xor rax, rax
  2860 00001472 488D3D(E9200000)            lea rdi, [enemy_spawns_triggered]
  2861 00001479 F3AA                        rep stosb      
  2862                                  
  2863                                      ; Verificar el nivel actual y cargar los bloques correspondientes
  2864 0000147B 803D(79150000)01            cmp byte [current_level], 1
  2865 00001482 7431                        je .level1
  2866 00001484 803D(79150000)02            cmp byte [current_level], 2
  2867 0000148B 7454                        je .level2
  2868 0000148D 803D(79150000)03            cmp byte [current_level], 3
  2869 00001494 7477                        je .level3
  2870 00001496 803D(79150000)04            cmp byte [current_level], 4
  2871 0000149D 0F8492000000                je .level4
  2872 000014A3 803D(79150000)05            cmp byte [current_level], 5
  2873 000014AA 0F84B0000000                je .level5
  2874 000014B0 E9D3000000                  jmp .done
  2875                                  
  2876                                  
  2877                                  
  2878                                      .level1:
  2879 000014B5 C605(7A150000)4E                mov byte [blocks_remaining], level1_blocks_count
  2880 000014BC 4831C9                          xor rcx, rcx             
  2881                                          .init_loop1:
  2882 000014BF 4883F94E                            cmp rcx, level1_blocks_count
  2883 000014C3 0F8DBF000000                        jge .done
  2884 000014C9 4889C8                              mov rax, rcx         
  2885 000014CC 486BC005                            imul rax, 5         ; en vez de shl rax,2
  2886 000014D0 8A90[7E150000]                      mov dl, byte [level1_blocks + rax + 3]  
  2887 000014D6 8891[761F0000]                      mov byte [block_states + rcx], dl
  2888 000014DC 48FFC1                              inc rcx
  2889 000014DF EBDE                                jmp .init_loop1
  2890                                  
  2891                                      .level2:
  2892 000014E1 C605(7A150000)5B                mov byte [blocks_remaining], level2_blocks_count
  2893 000014E8 4831C9                          xor rcx, rcx             
  2894                                          .init_loop2:
  2895 000014EB 4883F95B                            cmp rcx, level2_blocks_count
  2896 000014EF 0F8D93000000                        jge .done
  2897 000014F5 4889C8                              mov rax, rcx         
  2898 000014F8 486BC005                            imul rax, 5         ; en vez de shl rax,2
  2899 000014FC 8A90[04170000]                      mov dl, byte [level2_blocks + rax + 3]  
  2900 00001502 8891[761F0000]                      mov byte [block_states + rcx], dl
  2901 00001508 48FFC1                              inc rcx
  2902 0000150B EBDE                                jmp .init_loop2
  2903                                      .level3:
  2904 0000150D C605(7A150000)68                mov byte [blocks_remaining], level3_blocks_count
  2905 00001514 4831C9                          xor rcx, rcx             
  2906                                          .init_loop3:
  2907 00001517 4883F968                            cmp rcx, level3_blocks_count
  2908 0000151B 7D6B                                jge .done
  2909 0000151D 4889C8                              mov rax, rcx         
  2910 00001520 486BC005                            imul rax, 5         ; en vez de shl rax,2
  2911 00001524 8A90[CB180000]                      mov dl, byte [level3_blocks + rax + 3]  
  2912 0000152A 8891[761F0000]                      mov byte [block_states + rcx], dl
  2913 00001530 48FFC1                              inc rcx
  2914 00001533 EBE2                                jmp .init_loop3
  2915                                  
  2916                                      .level4:
  2917 00001535 C605(7A150000)8C                mov byte [blocks_remaining], level4_blocks_count
  2918 0000153C 4831C9                          xor rcx, rcx             
  2919                                          .init_loop4:
  2920 0000153F 4881F98C000000                      cmp rcx, level4_blocks_count
  2921 00001546 7D40                                jge .done
  2922 00001548 4889C8                              mov rax, rcx         
  2923 0000154B 486BC005                            imul rax, 5         ; en vez de shl rax,2
  2924 0000154F 8A90[D31A0000]                      mov dl, byte [level4_blocks + rax + 3]  
  2925 00001555 8891[761F0000]                      mov byte [block_states + rcx], dl
  2926 0000155B 48FFC1                              inc rcx
  2927 0000155E EBDF                                jmp .init_loop4
  2928                                  
  2929                                      .level5:
  2930 00001560 C605(7A150000)62                mov byte [blocks_remaining], level5_blocks_count
  2931 00001567 4831C9                          xor rcx, rcx             
  2932                                          .init_loop5:
  2933 0000156A 4883F962                            cmp rcx, level5_blocks_count
  2934 0000156E 7D18                                jge .done
  2935 00001570 4889C8                              mov rax, rcx         
  2936 00001573 486BC005                            imul rax, 5         ; en vez de shl rax,2
  2937 00001577 8A90[8F1D0000]                      mov dl, byte [level5_blocks + rax + 3]  
  2938 0000157D 8891[761F0000]                      mov byte [block_states + rcx], dl
  2939 00001583 48FFC1                              inc rcx
  2940 00001586 EBE2                                jmp .init_loop5
  2941                                      .done:
  2942 00001588 C3                              ret
  2943                                  
  2944                                  
  2945                                  ; Función para verificar y manejar la transición de nivel
  2946                                  check_level_complete:
  2947                                      ; Verificar si quedan bloques
  2948 00001589 803D(7A150000)00            cmp byte [blocks_remaining], 0
  2949 00001590 753C                        jne .not_complete
  2950                                      
  2951                                      ; Incrementar el nivel
  2952 00001592 FE05(79150000)              inc byte [current_level]
  2953                                      
  2954                                      ; Verificar si hemos completado todos los niveles (asumiendo 2 niveles por ahora)
  2955 00001598 803D(79150000)06            cmp byte [current_level], 6
  2956 0000159F 742E                        je game_win
  2957                                      
  2958                                      ; Reinicializar el juego para el siguiente nivel
  2959 000015A1 E8F7FDFFFF                  call init_level
  2960                                      
  2961                                      ; Reinicializar la posición de la bola y la paleta
  2962 000015A6 48C705(DF140000)28-         mov qword [ball_x_pos], 40
  2962 000015AE 000000             
  2963 000015B1 48C705(E7140000)1C-         mov qword [ball_y_pos], 28
  2963 000015B9 000000             
  2964 000015BC C605(FF140000)00            mov byte [ball_moving], 0
  2965 000015C3 48C705(BF140000)-           mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  2965 000015CA [B0130000]         
  2966                                      
  2967                                      .not_complete:
  2968 000015CE C3                              ret
  2969                                  
  2970                                      ; Nueva función para manejar la victoria del juego
  2971                                  game_win:
  2972                                      ; Limpiar la pantalla primero
  2973                                      print clear, clear_length
    82 000015CF B801000000          <1>  mov eax, sys_write
    83 000015D4 BF01000000          <1>  mov edi, 1
    84 000015D9 48BE-               <1>  mov rsi, %1
    84 000015DB [1000000000000000]  <1>
    85 000015E3 BA07000000          <1>  mov edx, %2
    86 000015E8 0F05                <1>  syscall
  2974                                      
  2975                                      ; Mensaje de victoria
  2976 000015EA 488B05(3E200000)            mov rax, [current_score]    ; Obtener el puntaje final
  2977 000015F1 48BF-                       mov rdi, number_buffer      ; Convertir a string
  2977 000015F3 [4720000000000000] 
  2978 000015FB E8B4010000                  call number_to_string
  2979                                      
  2980                                      ; Definir mensaje de victoria
  2981                                      section .data
  2982 0000246E C2A146656C69636964-             win_msg: db "¡Felicidades! ¡Has ganado!", 0xA, 0xD
  2982 00002477 616465732120C2A148-
  2982 00002480 61732067616E61646F-
  2982 00002489 210A0D             
  2983                                          win_msg_len: equ $ - win_msg
  2984 0000248C 50756E74616A652066-             score_msg: db "Puntaje final: "
  2984 00002495 696E616C3A20       
  2985                                          score_msg_len: equ $ - score_msg
  2986                                      section .text
  2987                                      
  2988                                      ; Imprimir mensajes
  2989                                      print win_msg, win_msg_len
    82 00001600 B801000000          <1>  mov eax, sys_write
    83 00001605 BF01000000          <1>  mov edi, 1
    84 0000160A 48BE-               <1>  mov rsi, %1
    84 0000160C [6E24000000000000]  <1>
    85 00001614 BA1E000000          <1>  mov edx, %2
    86 00001619 0F05                <1>  syscall
  2990                                      print score_msg, score_msg_len
    82 0000161B B801000000          <1>  mov eax, sys_write
    83 00001620 BF01000000          <1>  mov edi, 1
    84 00001625 48BE-               <1>  mov rsi, %1
    84 00001627 [8C24000000000000]  <1>
    85 0000162F BA0F000000          <1>  mov edx, %2
    86 00001634 0F05                <1>  syscall
  2991                                      print number_buffer, 20
    82 00001636 B801000000          <1>  mov eax, sys_write
    83 0000163B BF01000000          <1>  mov edi, 1
    84 00001640 48BE-               <1>  mov rsi, %1
    84 00001642 [4720000000000000]  <1>
    85 0000164A BA14000000          <1>  mov edx, %2
    86 0000164F 0F05                <1>  syscall
  2992                                      
  2993                                      ; Esperar un momento antes de salir
  2994 00001651 48C705A4E9FFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  2994 0000165A 0000               
  2995 0000165C 48C705A1E9FFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  2995 00001665 0000               
  2996                                      sleeptime
    98 00001667 B823000000          <1>  mov eax, sys_nanosleep
    99 0000166C 48BF-               <1>  mov rdi, timespec
    99 0000166E [0000000000000000]  <1>
   100 00001676 31F6                <1>  xor esi, esi
   101 00001678 0F05                <1>  syscall
  2997                                      
  2998 0000167A E9490B0000                  jmp exit
  2999                                  
  3000                                  ; Función para imprimir los bloques
  3001                                  ; Función modificada para imprimir bloques
  3002                                  
  3003                                  ; Primero, agreguemos una función para obtener el puntero a los bloques del nivel actual
  3004                                  get_current_level_blocks:
  3005 0000167F 803D(79150000)01            cmp byte [current_level], 1
  3006 00001686 7428                        je .level1
  3007 00001688 803D(79150000)02            cmp byte [current_level], 2
  3008 0000168F 7427                        je .level2
  3009 00001691 803D(79150000)03            cmp byte [current_level], 3
  3010 00001698 7426                        je .level3
  3011 0000169A 803D(79150000)04            cmp byte [current_level], 4
  3012 000016A1 7425                        je .level4
  3013 000016A3 803D(79150000)05            cmp byte [current_level], 5
  3014 000016AA 7424                        je .level5
  3015                                      ; Si llegamos aquí, hay un error en el nivel
  3016 000016AC 4831C0                      xor rax, rax
  3017 000016AF C3                          ret
  3018                                  
  3019                                      .level1:
  3020 000016B0 488D05(7B150000)                lea rax, [level1_blocks]
  3021 000016B7 C3                              ret
  3022                                      .level2:
  3023 000016B8 488D05(01170000)                lea rax, [level2_blocks]
  3024 000016BF C3                              ret
  3025                                      .level3:
  3026 000016C0 488D05(C8180000)                lea rax, [level3_blocks]
  3027 000016C7 C3                              ret
  3028                                      .level4:
  3029 000016C8 488D05(D01A0000)                lea rax, [level4_blocks]
  3030 000016CF C3                              ret
  3031                                      .level5:
  3032 000016D0 488D05(8C1D0000)                lea rax, [level5_blocks]
  3033 000016D7 C3                              ret
  3034                                  ; Función para obtener la cantidad de bloques del nivel actual
  3035                                  get_current_level_count:
  3036 000016D8 803D(79150000)01            cmp byte [current_level], 1
  3037 000016DF 7428                        je .level1
  3038 000016E1 803D(79150000)02            cmp byte [current_level], 2
  3039 000016E8 7425                        je .level2
  3040 000016EA 803D(79150000)03            cmp byte [current_level], 3
  3041 000016F1 7422                        je .level3
  3042 000016F3 803D(79150000)04            cmp byte [current_level], 4
  3043 000016FA 741F                        je .level4
  3044 000016FC 803D(79150000)05            cmp byte [current_level], 5
  3045 00001703 741C                        je .level5
  3046                                      ; Si llegamos aquí, hay un error en el nivel
  3047 00001705 4831C0                      xor rax, rax
  3048 00001708 C3                          ret
  3049                                  
  3050                                      .level1:
  3051 00001709 B84E000000                      mov rax, level1_blocks_count
  3052 0000170E C3                              ret
  3053                                      .level2:
  3054 0000170F B85B000000                      mov rax, level2_blocks_count
  3055 00001714 C3                              ret
  3056                                      .level3:
  3057 00001715 B868000000                      mov rax, level3_blocks_count
  3058 0000171A C3                              ret
  3059                                      .level4:
  3060 0000171B B88C000000                      mov rax, level4_blocks_count
  3061 00001720 C3                              ret
  3062                                      .level5:
  3063 00001721 B862000000                      mov rax, level5_blocks_count
  3064 00001726 C3                              ret
  3065                                  
  3066                                  
  3067                                  print_blocks:
  3068 00001727 55                          push rbp
  3069 00001728 4889E5                      mov rbp, rsp
  3070                                      
  3071                                      ; Obtener puntero a los bloques del nivel actual
  3072 0000172B E84FFFFFFF                  call get_current_level_blocks
  3073 00001730 4989C5                      mov r13, rax                  ; Guardar puntero a los bloques en r13
  3074                                      
  3075                                      ; Obtener cantidad de bloques del nivel actual
  3076 00001733 E8A0FFFFFF                  call get_current_level_count
  3077 00001738 4989C6                      mov r14, rax                  ; Guardar cantidad de bloques en r14
  3078                                      
  3079 0000173B 4D31E4                      xor r12, r12                  ; Índice del bloque actual
  3080                                      
  3081                                      .print_loop:
  3082 0000173E 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
  3083 00001741 7D6F                            jge .end
  3084                                          
  3085                                          ; Verificar si el bloque está activo
  3086 00001743 490FB68424-                     movzx rax, byte [block_states + r12]
  3086 00001748 [761F0000]         
  3087 0000174C 4885C0                          test rax, rax
  3088 0000174F 745C                            jz .next_block
  3089                                          
  3090                                          ; Obtener posición y tipo del bloque usando r13
  3091 00001751 4C89E0                          mov rax, r12
  3092 00001754 486BC005                        imul rax, 5
  3093 00001758 4C01E8                          add rax, r13
  3094 0000175B 448A00                          mov r8b, [rax]        ; X position
  3095 0000175E 448A4801                        mov r9b, [rax + 1]    ; Y position
  3096 00001762 448A5002                        mov r10b, [rax + 2]   ; Tipo de bloque
  3097                                  
  3098                                          ; El resto de la lógica de impresión permanece igual
  3099 00001766 4D0FB6C0                        movzx r8, r8b
  3100 0000176A 4D0FB6C9                        movzx r9, r9b
  3101 0000176E 4981C0[400A0000]                add r8, board
  3102 00001775 B852000000                      mov rax, column_cells + 2
  3103 0000177A 49F7E1                          mul r9
  3104 0000177D 4901C0                          add r8, rax
  3105                                          
  3106 00001780 B906000000                      mov rcx, block_length
  3107 00001785 48BE-                           mov rsi, block_type_1
  3107 00001787 [5515000000000000] 
  3108 0000178F 490FB6C2                        movzx rax, r10b
  3109 00001793 48FFC8                          dec rax
  3110 00001796 486BC006                        imul rax, block_length
  3111 0000179A 4801C6                          add rsi, rax
  3112                                          
  3113                                      .print_block_chars:
  3114 0000179D 8A06                            mov al, [rsi]
  3115 0000179F 418800                          mov [r8], al
  3116 000017A2 48FFC6                          inc rsi
  3117 000017A5 49FFC0                          inc r8
  3118 000017A8 48FFC9                          dec rcx
  3119 000017AB 75F0                            jnz .print_block_chars
  3120                                          
  3121                                      .next_block:
  3122 000017AD 49FFC4                          inc r12
  3123 000017B0 EB8C                            jmp .print_loop
  3124                                          
  3125                                      .end:
  3126 000017B2 5D                              pop rbp
  3127 000017B3 C3                              ret
  3128                                  
  3129                                  ; Función para convertir número a string
  3130                                  ; Input: RAX = número a convertir
  3131                                  ; RDI = buffer donde escribir el string
  3132                                  number_to_string:
  3133 000017B4 53                          push rbx
  3134 000017B5 52                          push rdx
  3135 000017B6 56                          push rsi
  3136 000017B7 BB0A000000                  mov rbx, 10          ; Divisor
  3137 000017BC B900000000                  mov rcx, 0          ; Contador de dígitos
  3138                                      
  3139                                      ; Si el número es 0, manejarlo especialmente
  3140 000017C1 4885C0                      test rax, rax
  3141 000017C4 7509                        jnz .convert_loop
  3142 000017C6 C60730                      mov byte [rdi], '0'
  3143 000017C9 C6470100                    mov byte [rdi + 1], 0
  3144 000017CD EB20                        jmp .end
  3145                                      
  3146                                      .convert_loop:
  3147 000017CF 4831D2                          xor rdx, rdx    ; Limpiar RDX para la división
  3148 000017D2 48F7F3                          div rbx         ; RAX/10, cociente en RAX, residuo en RDX
  3149 000017D5 80C230                          add dl, '0'     ; Convertir a ASCII
  3150 000017D8 52                              push rdx        ; Guardar el dígito
  3151 000017D9 48FFC1                          inc rcx         ; Incrementar contador
  3152 000017DC 4885C0                          test rax, rax   ; Verificar si quedan más dígitos
  3153 000017DF 75EE                            jnz .convert_loop
  3154                                          
  3155                                      .write_loop:
  3156 000017E1 5A                              pop rdx         ; Obtener dígito
  3157 000017E2 8817                            mov [rdi], dl   ; Escribir al buffer
  3158 000017E4 48FFC7                          inc rdi         ; Siguiente posición
  3159 000017E7 48FFC9                          dec rcx         ; Decrementar contador
  3160 000017EA 75F5                            jnz .write_loop
  3161                                          
  3162 000017EC C60700                      mov byte [rdi], 0   ; Null terminator
  3163                                      
  3164                                      .end:
  3165 000017EF 5E                          pop rsi
  3166 000017F0 5A                          pop rdx
  3167 000017F1 5B                          pop rbx
  3168 000017F2 C3                          ret
  3169                                  
  3170                                  ; Función para imprimir los labels
  3171                                  print_labels:
  3172 000017F3 55                          push rbp
  3173 000017F4 4889E5                      mov rbp, rsp
  3174                                  
  3175                                      ; Crear buffer temporal
  3176 000017F7 4883EC20                    sub rsp, 32
  3177                                  
  3178                                      ; Copiar labels a buffer temporal
  3179 000017FB 4889E7                      mov rdi, rsp
  3180 000017FE 488D35(F3200000)            lea rsi, [score_label]
  3181 00001805 B917000000                  mov rcx, score_label_len
  3182 0000180A F3A4                        rep movsb
  3183                                  
  3184                                      ; Convertir score a string
  3185 0000180C 488B05(3E200000)            mov rax, [current_score]
  3186 00001813 48BF-                       mov rdi, number_buffer
  3186 00001815 [4720000000000000] 
  3187 0000181D E892FFFFFF                  call number_to_string
  3188                                  
  3189                                      ; Calcular longitud del número
  3190 00001822 B900000000                  mov rcx, 0
  3191 00001827 48BF-                       mov rdi, number_buffer
  3191 00001829 [4720000000000000] 
  3192                                      .count_loop:
  3193 00001831 803C0F00                        cmp byte [rdi + rcx], 0
  3194 00001835 7405                            je .count_done
  3195 00001837 48FFC1                          inc rcx
  3196 0000183A EBF5                            jmp .count_loop
  3197                                      .count_done:
  3198                                  
  3199                                      ; Insertar el número en la posición correcta, alineado a la derecha
  3200 0000183C 4889E7                      mov rdi, rsp
  3201 0000183F 4883C70A                    add rdi, score_pos           ; Moverse a la posición del número
  3202 00001843 BE0A000000                  mov rsi, 10                  ; Espacio reservado para el número
  3203 00001848 4829CE                      sub rsi, rcx                 ; Calcular padding necesario
  3204                                      .pad_loop:
  3205 0000184B 4885F6                          test rsi, rsi
  3206 0000184E 740B                            jz .pad_done
  3207 00001850 C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  3208 00001853 48FFC7                          inc rdi
  3209 00001856 48FFCE                          dec rsi
  3210 00001859 EBF0                            jmp .pad_loop
  3211                                      .pad_done:
  3212                                  
  3213                                      ; Copiar el número
  3214 0000185B 48BE-                       mov rsi, number_buffer
  3214 0000185D [4720000000000000] 
  3215 00001865 F3A4                        rep movsb
  3216                                  
  3217                                      ; Imprimir el buffer completo
  3218                                      print rsp, score_label_len
    82 00001867 B801000000          <1>  mov eax, sys_write
    83 0000186C BF01000000          <1>  mov edi, 1
    84 00001871 4889E6              <1>  mov rsi, %1
    85 00001874 BA17000000          <1>  mov edx, %2
    86 00001879 0F05                <1>  syscall
  3219                                  
  3220                                      ; Repetir proceso para bloques destruidos
  3221 0000187B 4889E7                      mov rdi, rsp
  3222 0000187E 488D35(0A210000)            lea rsi, [blocks_label]
  3223 00001885 B91B000000                  mov rcx, blocks_label_len
  3224 0000188A F3A4                        rep movsb
  3225                                  
  3226                                      ; Verificar que el `[` esté en su posición correcta
  3227 0000188C 4889E7                      mov rdi, rsp
  3228 0000188F 4883C713                    add rdi, blocks_pos - 1  ; Posición exacta donde debe ir el '['
  3229 00001893 C6075B                      mov byte [rdi], '['      ; Garantizar que el `[` esté presente
  3230                                  
  3231                                      ; Convertir bloques destruidos a string
  3232 00001896 480FB605(46200000)          movzx rax, byte [destroyed_blocks]
  3233 0000189E 48BF-                       mov rdi, number_buffer
  3233 000018A0 [4720000000000000] 
  3234 000018A8 E807FFFFFF                  call number_to_string
  3235                                  
  3236                                      ; Calcular longitud del número
  3237 000018AD B900000000                  mov rcx, 0
  3238 000018B2 48BF-                       mov rdi, number_buffer
  3238 000018B4 [4720000000000000] 
  3239                                      .count_loop2:
  3240 000018BC 803C0F00                        cmp byte [rdi + rcx], 0
  3241 000018C0 7405                            je .count_done2
  3242 000018C2 48FFC1                          inc rcx
  3243 000018C5 EBF5                            jmp .count_loop2
  3244                                      .count_done2:
  3245                                  
  3246                                      ; Insertar el número en la posición correcta, alineado a la derecha
  3247 000018C7 4889E7                      mov rdi, rsp
  3248 000018CA 4883C714                    add rdi, blocks_pos         ; Moverse a la posición del número
  3249 000018CE BE03000000                  mov rsi, 3                  ; Espacio reservado para el número
  3250 000018D3 4829CE                      sub rsi, rcx                ; Calcular padding necesario
  3251                                      .pad_loop2:
  3252 000018D6 4885F6                          test rsi, rsi
  3253 000018D9 740B                            jz .pad_done2
  3254 000018DB C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  3255 000018DE 48FFC7                          inc rdi
  3256 000018E1 48FFCE                          dec rsi
  3257 000018E4 EBF0                            jmp .pad_loop2
  3258                                      .pad_done2:
  3259                                  
  3260                                      ; Copiar el número
  3261 000018E6 48BE-                       mov rsi, number_buffer
  3261 000018E8 [4720000000000000] 
  3262 000018F0 F3A4                        rep movsb
  3263                                  
  3264                                      ; Imprimir el buffer completo
  3265                                      print rsp, blocks_label_len
    82 000018F2 B801000000          <1>  mov eax, sys_write
    83 000018F7 BF01000000          <1>  mov edi, 1
    84 000018FC 4889E6              <1>  mov rsi, %1
    85 000018FF BA1B000000          <1>  mov edx, %2
    86 00001904 0F05                <1>  syscall
  3266                                  
  3267                                      ; Restaurar stack
  3268 00001906 4883C420                    add rsp, 32
  3269 0000190A 5D                          pop rbp
  3270 0000190B C3                          ret
  3271                                  
  3272                                  
  3273                                  
  3274                                  check_block_collision:
  3275 0000190C 55                          push rbp
  3276 0000190D 4889E5                      mov rbp, rsp
  3277                                  
  3278                                      ; Almacenar el carácter en la posición r10 (pos. de la bola en board[])
  3279 00001910 418A02                      mov al, [r10]
  3280                                  
  3281                                      ; Verificar si el carácter es un bloque
  3282 00001913 3C55                        cmp al, 'U'  
  3283 00001915 7419                        je .possible
  3284 00001917 3C4F                        cmp al, 'O'  
  3285 00001919 7415                        je .possible
  3286 0000191B 3C44                        cmp al, 'D'  
  3287 0000191D 7411                        je .possible
  3288 0000191F 3C4C                        cmp al, 'L'  
  3289 00001921 740D                        je .possible
  3290 00001923 3C56                        cmp al, 'V'  
  3291 00001925 7409                        je .possible
  3292 00001927 3C38                        cmp al, '8'  
  3293 00001929 7405                        je .possible
  3294                                  
  3295                                      ; No es bloque, salir
  3296 0000192B 4831C0                      xor rax, rax
  3297 0000192E 5D                          pop rbp
  3298 0000192F C3                          ret
  3299                                  
  3300                                  .possible:
  3301 00001930 53                          push rbx
  3302 00001931 57                          push rdi
  3303 00001932 56                          push rsi
  3304 00001933 4154                        push r12
  3305 00001935 4155                        push r13
  3306 00001937 4156                        push r14
  3307 00001939 4157                        push r15
  3308                                  
  3309                                      ; 1) Obtener base de los bloques del nivel actual
  3310 0000193B E83FFDFFFF                  call get_current_level_blocks
  3311 00001940 4989C5                      mov r13, rax  ; (r13) = base de levelX_blocks
  3312                                  
  3313                                      ; 2) Obtener la cantidad de bloques
  3314 00001943 E890FDFFFF                  call get_current_level_count
  3315 00001948 4989C6                      mov r14, rax
  3316                                  
  3317 0000194B 4D31E4                      xor r12, r12  ; Índice del bloque actual
  3318                                  
  3319                                  .find_block_loop:
  3320 0000194E 4D39F4                      cmp r12, r14
  3321 00001951 0F8DCE000000                jge .no_block_found  ; Se acabaron los bloques
  3322                                  
  3323                                      ; Calcular puntero base del bloque actual en levelX_blocks
  3324 00001957 4C89E0                      mov rax, r12
  3325 0000195A 486BC005                    imul rax, 5            ; (x, y, tipo, durabilidad_inicial, letra)
  3326 0000195E 4C01E8                      add rax, r13
  3327 00001961 4989C7                      mov r15, rax           ; r15 apunta a los datos del bloque actual
  3328                                  
  3329                                      ; --- Aquí la diferencia: la durabilidad no la leemos de [r15+3], sino de block_states[r12]
  3330 00001964 490FB69C24-                 movzx rbx, byte [block_states + r12]  ; Durabilidad "viva" en block_states
  3330 00001969 [761F0000]         
  3331 0000196D 4885DB                      test rbx, rbx
  3332 00001970 0F84A7000000                jz .next_block  ; si durabilidad=0 => bloque destruido => ignorar
  3333                                  
  3334                                      ; Obtener coordenadas
  3335 00001976 418A17                      mov dl, [r15]         ; x
  3336 00001979 418A4F01                    mov cl, [r15 + 1]     ; y
  3337                                  
  3338                                      ; Calcular posición en el board
  3339 0000197D 488D3D(400A0000)            lea rdi, [board]
  3340 00001984 4831C0                      xor rax, rax
  3341 00001987 B850000000                  mov rax, column_cells
  3342 0000198C 4883C002                    add rax, 2
  3343 00001990 480FB6C9                    movzx rcx, cl         ; y
  3344 00001994 480FAFC1                    imul rax, rcx
  3345 00001998 4801C7                      add rdi, rax
  3346 0000199B 480FB6C2                    movzx rax, dl         ; x
  3347 0000199F 4801C7                      add rdi, rax
  3348                                  
  3349                                      ; Guardar la posición base del bloque
  3350 000019A2 57                          push rdi
  3351                                  
  3352                                      ; Verificar si la bola (r10) está dentro de [rdi .. rdi+block_length)
  3353 000019A3 4939FA                      cmp r10, rdi
  3354 000019A6 7274                        jb .skip_collision
  3355 000019A8 488D5F06                    lea rbx, [rdi + block_length]
  3356 000019AC 4939DA                      cmp r10, rbx
  3357 000019AF 736B                        jae .skip_collision
  3358                                  
  3359                                      ; ------- Hay colisión, reducir durabilidad en block_states
  3360 000019B1 41FE8C24[761F0000]          dec byte [block_states + r12]
  3361                                      ; Volver a cargar durabilidad
  3362 000019B9 490FB69C24-                 movzx rbx, byte [block_states + r12]
  3362 000019BE [761F0000]         
  3363 000019C2 4885DB                      test rbx, rbx
  3364 000019C5 754D                        jnz .update_display  ; si no llegó a 0 => solo "golpeado"
  3365                                  
  3366                                      ; >>> Llegó a 0 => Bloque destruido
  3367 000019C7 5F                          pop rdi  ; recuperar puntero base del bloque en board
  3368 000019C8 B906000000                  mov rcx, block_length
  3369                                  .clear_loop:
  3370 000019CD C60720                      mov byte [rdi], ' '
  3371 000019D0 48FFC7                      inc rdi
  3372 000019D3 E2F8                        loop .clear_loop
  3373                                  
  3374                                      ; Dibujar letra del bloque destruido
  3375 000019D5 418A4704                    mov al, [r15 + 4]  ; Obtener la letra asociada
  3376 000019D9 4883EF06                    sub rdi, block_length
  3377 000019DD 8807                        mov [rdi], al      ; Escribir la letra en la posición inicial
  3378                                      ; Después de escribir la letra en el tablero
  3379 000019DF 418A4704                    mov al, [r15 + 4]      ; Obtener la letra
  3380 000019E3 4D0FB607                    movzx r8, byte [r15]   ; Posición x del bloque
  3381 000019E7 4D0FB64F01                  movzx r9, byte [r15 + 1] ; Posición y del bloque
  3382 000019EC E878EAFFFF                  call register_letter
  3383                                      ; Actualizar contadores globales
  3384 000019F1 FE0D(7A150000)              dec byte [blocks_remaining]
  3385 000019F7 FE05(46200000)              inc byte [destroyed_blocks]
  3386                                  
  3387                                      ; Sumar puntos según el tipo
  3388 000019FD 490FB64702                  movzx rax, byte [r15 + 2]  ; tipo del bloque original
  3389 00001A02 486BC00A                    imul rax, 10
  3390 00001A06 480105(3E200000)            add [current_score], rax
  3391                                  
  3392 00001A0D B801000000                  mov rax, 1  ; colisión con destrucción
  3393 00001A12 EB14                        jmp .end_pop
  3394                                  
  3395                                  .update_display:
  3396                                      ; => durabilidad >0, se podría actualizar el "look" del bloque
  3397 00001A14 B801000000                  mov rax, 1  ; colisión con "rebote"  
  3398 00001A19 5F                          pop rdi     ; pop que quedó pendiente
  3399 00001A1A EB0C                        jmp .end_pop
  3400                                  
  3401                                  .skip_collision:
  3402 00001A1C 5F                          pop rdi     ; si no hubo colisión, quita de la pila
  3403                                  .next_block:
  3404 00001A1D 49FFC4                      inc r12
  3405 00001A20 E929FFFFFF                  jmp .find_block_loop
  3406                                  
  3407                                  .no_block_found:
  3408 00001A25 4831C0                      xor rax, rax  ; 0 => no hubo colisión
  3409                                  
  3410                                  .end_pop:
  3411 00001A28 415F                        pop r15
  3412 00001A2A 415E                        pop r14
  3413 00001A2C 415D                        pop r13
  3414 00001A2E 415C                        pop r12
  3415 00001A30 5E                          pop rsi
  3416 00001A31 5F                          pop rdi
  3417 00001A32 5B                          pop rbx
  3418 00001A33 5D                          pop rbp
  3419 00001A34 C3                          ret
  3420                                  
  3421                                  
  3422                                  
  3423                                  init_enemies:
  3424 00001A35 55                          push rbp
  3425 00001A36 4889E5                      mov rbp, rsp
  3426                                      ; Reiniciar contadores de movimiento
  3427 00001A39 C605(89200000)00            mov byte [enemy_move_total], 0
  3428 00001A40 C605(8A200000)00            mov byte [enemy_target], 0 ; Inicialmente persigue la bola
  3429                                      ; Limpiar estado previo de enemigos
  3430 00001A47 B90A000000                  mov rcx, 10 ; Máximo 10 enemigos
  3431 00001A4C 488D3D(60200000)            lea rdi, [enemies]
  3432 00001A53 30C0                        xor al, al
  3433 00001A55 F3AA                        rep stosb ; Limpiar datos de enemigos
  3434                                      
  3435                                      ; Marcar todos los enemigos como inactivos
  3436 00001A57 488D3D(E9200000)            lea rdi, [enemy_spawns_triggered]
  3437 00001A5E 30C0                        xor al, al
  3438 00001A60 B90A000000                  mov rcx, 10
  3439 00001A65 F3AA                        rep stosb ; Todos los enemigos no han sido activados aún
  3440                                  
  3441 00001A67 5D                          pop rbp
  3442 00001A68 C3                          ret
  3443                                  
  3444                                  
  3445                                  random_move_enemy:
  3446 00001A69 55                          push rbp
  3447 00001A6A 4889E5                      mov  rbp, rsp
  3448 00001A6D 53                          push rbx
  3449 00001A6E 52                          push rdx
  3450 00001A6F 57                          push rdi
  3451                                  
  3452                                      ; r12 = índice del enemigo
  3453                                      ; 1) obtener puntero al enemigo i
  3454 00001A70 4C89E0                      mov rax, r12
  3455 00001A73 486BC003                    imul rax, 3
  3456 00001A77 488D98[60200000]            lea rbx, [enemies + rax]     ; rbx => &enemies[r12]
  3457                                  
  3458                                      ; 2) Cargar X, Y actuales (NO SE BORRA AQUÍ TODAVÍA)
  3459 00001A7E 4C0FB603                    movzx r8, byte [rbx]         ; r8 = X actual
  3460 00001A82 4C0FB64B01                  movzx r9, byte [rbx + 1]     ; r9 = Y actual
  3461                                  
  3462                                      ; 3) Generar "movimiento aleatorio" => tomamos [enemy_move_counter] & 3
  3463 00001A87 480FB605(87200000)          movzx rax, byte [enemy_move_counter]
  3464 00001A8F 4883E003                    and rax, 3
  3465                                  
  3466 00001A93 4883F800                    cmp rax, 0
  3467 00001A97 741B                        je .try_left
  3468 00001A99 4883F801                    cmp rax, 1
  3469 00001A9D 7410                        je .try_right
  3470 00001A9F 4883F802                    cmp rax, 2
  3471 00001AA3 7405                        je .try_up
  3472                                      ; si es 3 => mover abajo
  3473                                  .try_down:
  3474 00001AA5 49FFC1                      inc r9
  3475 00001AA8 EB0D                        jmp .check_valid
  3476                                  
  3477                                  .try_up:
  3478 00001AAA 49FFC9                      dec r9
  3479 00001AAD EB08                        jmp .check_valid
  3480                                  
  3481                                  .try_right:
  3482 00001AAF 49FFC0                      inc r8
  3483 00001AB2 EB03                        jmp .check_valid
  3484                                  
  3485                                  .try_left:
  3486 00001AB4 49FFC8                      dec r8
  3487                                  
  3488                                  .check_valid:
  3489                                      ; 4) Verificar límites
  3490 00001AB7 4983F801                    cmp r8, 1                    
  3491 00001ABB 0F8EA4000000                jle .invalid_move
  3492 00001AC1 4983F850                    cmp r8, column_cells        
  3493 00001AC5 0F8D9A000000                jge .invalid_move
  3494 00001ACB 4983F901                    cmp r9, 1                    
  3495 00001ACF 0F8E90000000                jle .invalid_move
  3496 00001AD5 4983F920                    cmp r9, row_cells          
  3497 00001AD9 0F8D86000000                jge .invalid_move
  3498                                  
  3499                                      ; 5) Verificar colisión con bloques/enemigos
  3500 00001ADF 4150                        push r8
  3501 00001AE1 4151                        push r9
  3502 00001AE3 B850000000                  mov rax, column_cells
  3503 00001AE8 4883C002                    add rax, 2
  3504 00001AEC 49F7E1                      mul r9
  3505 00001AEF 4C01C0                      add rax, r8
  3506 00001AF2 488DB8[400A0000]            lea rdi, [board + rax]
  3507 00001AF9 8A07                        mov al, [rdi]
  3508                                  
  3509                                      ; Revisa si es bloque o borde
  3510 00001AFB 3C55                        cmp al, 'U'
  3511 00001AFD 7462                        je .pop_and_invalid
  3512 00001AFF 3C4F                        cmp al, 'O'
  3513 00001B01 745E                        je .pop_and_invalid
  3514 00001B03 3C44                        cmp al, 'D'
  3515 00001B05 745A                        je .pop_and_invalid
  3516 00001B07 3C4C                        cmp al, 'L'
  3517 00001B09 7456                        je .pop_and_invalid
  3518 00001B0B 3C56                        cmp al, 'V'
  3519 00001B0D 7452                        je .pop_and_invalid
  3520 00001B0F 3C38                        cmp al, '8'
  3521 00001B11 744E                        je .pop_and_invalid
  3522 00001B13 3C58                        cmp al, 'X'
  3523 00001B15 744A                        je .pop_and_invalid
  3524                                  
  3525                                      ; Revisa si hay enemigo
  3526 00001B17 3C40                        cmp al, '@'
  3527 00001B19 7446                        je .pop_and_invalid
  3528 00001B1B 3C23                        cmp al, '#'
  3529 00001B1D 7442                        je .pop_and_invalid
  3530 00001B1F 3C24                        cmp al, '$'
  3531 00001B21 743E                        je .pop_and_invalid
  3532 00001B23 3C26                        cmp al, '&'
  3533 00001B25 743A                        je .pop_and_invalid
  3534                                  
  3535 00001B27 E8A0020000                  call check_enemy_at_position
  3536 00001B2C 4883F801                    cmp rax, 1
  3537 00001B30 742F                        je .pop_and_invalid
  3538                                  
  3539                                      ; ------------------------------
  3540                                      ; SI LLEGAMOS AQUI => POSICIÓN NUEVA ES VÁLIDA
  3541                                      ; AHORA SÍ BORRAMOS LA POSICIÓN ANTIGUA:
  3542                                      ; ------------------------------
  3543 00001B32 4159                        pop r9
  3544 00001B34 4158                        pop r8
  3545                                  
  3546                                      ; (A) Borrar la posición antigua en el board
  3547                                      ;    (X,Y) originales estaban en [rbx], [rbx+1].
  3548 00001B36 4C0FB613                    movzx r10, byte [rbx]   ; oldX
  3549 00001B3A 4C0FB65B01                  movzx r11, byte [rbx+1] ; oldY
  3550 00001B3F B850000000                  mov rax, column_cells
  3551 00001B44 4883C002                    add rax, 2
  3552 00001B48 49F7E3                      mul r11
  3553 00001B4B 4C01D0                      add rax, r10
  3554 00001B4E 488DB8[400A0000]            lea rdi, [board + rax]
  3555 00001B55 C60720                      mov byte [rdi], ' '     ; BORRA la posición vieja
  3556                                  
  3557                                      ; (B) Guardar la nueva X,Y en la estructura
  3558 00001B58 448803                      mov byte [rbx], r8b
  3559 00001B5B 44884B01                    mov byte [rbx + 1], r9b
  3560                                  
  3561 00001B5F EB0D                        jmp .done
  3562                                  
  3563                                  .pop_and_invalid:
  3564 00001B61 4159                        pop r9
  3565 00001B63 4158                        pop r8
  3566                                  
  3567                                  .invalid_move:
  3568                                      ; Restablecer la posición X,Y en [rbx], [rbx+1] (no se borró la vieja)
  3569 00001B65 4C0FB603                    movzx r8, byte [rbx]
  3570 00001B69 4C0FB64B01                  movzx r9, byte [rbx + 1]
  3571                                      ; Se queda donde estaba
  3572                                  .done:
  3573 00001B6E 5F                          pop rdi
  3574 00001B6F 5A                          pop rdx
  3575 00001B70 5B                          pop rbx
  3576 00001B71 5D                          pop rbp
  3577 00001B72 C3                          ret
  3578                                  
  3579                                  
  3580                                  ; Función para mover enemigos
  3581                                  move_enemies:
  3582 00001B73 55                          push rbp
  3583 00001B74 4889E5                      mov rbp, rsp
  3584                                      
  3585                                      ; Incrementar contador de movimiento
  3586 00001B77 FE05(87200000)              inc byte [enemy_move_counter]
  3587 00001B7D 480FB605(87200000)          movzx rax, byte [enemy_move_counter]
  3588 00001B85 3A05(88200000)              cmp al, [enemy_move_delay]
  3589 00001B8B 0F8539020000                jne .end
  3590                                      
  3591                                      ; Resetear contador
  3592 00001B91 C605(87200000)00            mov byte [enemy_move_counter], 0
  3593                                      
  3594 00001B98 4D31E4                      xor r12, r12                    ; Índice del enemigo
  3595                                      
  3596                                      .enemy_loop:
  3597 00001B9B 4983FC0A                        cmp r12, 10                     ; Máximo 10 enemigos
  3598 00001B9F 0F8D25020000                    jge .end
  3599                                          
  3600                                          ; Calcular offset del enemigo actual
  3601 00001BA5 4C89E0                          mov rax, r12
  3602 00001BA8 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  3603 00001BAC 488DB0[60200000]                lea rsi, [enemies + rax]
  3604                                          
  3605                                          ; Verificar si el enemigo está activo
  3606 00001BB3 807E0201                        cmp byte [rsi + 2], 1
  3607 00001BB7 0F8505020000                    jne .next_enemy
  3608                                          
  3609                                          ; Obtener posición actual
  3610 00001BBD 4C0FB606                        movzx r8, byte [rsi]            ; X
  3611 00001BC1 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  3612                                          
  3613 00001BC6 488D3D(40240000)                lea rdi, [enemy_last_x]
  3614 00001BCD 4C01E7                          add rdi, r12
  3615 00001BD0 8A07                            mov al, [rdi]             ; al = last_x
  3616                                  
  3617 00001BD2 488D15(4A240000)                lea rdx, [enemy_last_y]
  3618 00001BD9 4C01E2                          add rdx, r12
  3619 00001BDC 8A22                            mov ah, [rdx]             ; ah = last_y
  3620                                  
  3621                                          ; r8 = X actual del enemigo
  3622                                          ; r9 = Y actual del enemigo
  3623                                  
  3624                                          ; *** En lugar de cmp ah, r9b => hacemos lo siguiente:
  3625 00001BDE 88E2                            mov dl, ah      ; dl = old_Y
  3626 00001BE0 4488CB                          mov bl, r9b     ; bl = new_Y
  3627 00001BE3 38DA                            cmp dl, bl
  3628 00001BE5 752C                            jne .not_stuck
  3629                                  
  3630                                          ; => SI son iguales => pasa al siguiente check
  3631 00001BE7 88C2                            mov dl, al      ; dl = old_X
  3632 00001BE9 4488C3                          mov bl, r8b     ; bl = new_X
  3633 00001BEC 38DA                            cmp dl, bl
  3634 00001BEE 7523                            jne .not_stuck
  3635                                  
  3636                                          ; => MISMA POSICIÓN (STUCK)
  3637 00001BF0 488D1D(54240000)                lea rbx, [enemy_stuck_count]
  3638 00001BF7 4C01E3                          add rbx, r12
  3639 00001BFA FE03                            inc byte [rbx]              ; Aumentar contador de “pegarse”
  3640                                  
  3641                                          ; Verificar si supera umbral, digamos 3
  3642 00001BFC 480FB60B                        movzx rcx, byte [rbx]
  3643 00001C00 4883F902                        cmp rcx, 2
  3644 00001C04 7C34                            jl .check_normal_move       ; Si aún no llega a 3, seguir normal
  3645                                  
  3646                                          ; SI LLEGA A 3, FORZAR UN MOVIMIENTO ALEATORIO:
  3647                                          ;  1) resetear el stuck_count
  3648 00001C06 C60300                          mov byte [rbx], 0
  3649                                  
  3650                                          ;  2) cambiar random
  3651 00001C09 E85BFEFFFF                      call random_move_enemy        ; (Ver ejemplo de abajo)
  3652 00001C0E E9AF010000                      jmp .next_enemy
  3653                                  
  3654                                      .not_stuck:
  3655                                          ; => Se movió
  3656 00001C13 488D1D(54240000)                lea rbx, [enemy_stuck_count]
  3657 00001C1A 4C01E3                          add rbx, r12
  3658 00001C1D C60300                          mov byte [rbx], 0            ; Resetear
  3659                                  
  3660                                          ; Guardar su nueva posición en “last_x, last_y”
  3661 00001C20 488D3D(40240000)                lea rdi, [enemy_last_x]
  3662 00001C27 4C01E7                          add rdi, r12
  3663 00001C2A 448807                          mov [rdi], r8b
  3664                                          
  3665 00001C2D 488D3D(4A240000)                lea rdi, [enemy_last_y]
  3666 00001C34 4C01E7                          add rdi, r12
  3667 00001C37 44880F                          mov [rdi], r9b
  3668                                  
  3669                                          ; Limpiar posición actual antes de mover
  3670                                      .check_normal_move:
  3671 00001C3A 4150                            push r8
  3672 00001C3C 4151                            push r9
  3673 00001C3E B850000000                      mov rax, column_cells
  3674 00001C43 4883C002                        add rax, 2
  3675 00001C47 49F7E1                          mul r9
  3676 00001C4A 4C01C0                          add rax, r8
  3677 00001C4D 488DB8[400A0000]                lea rdi, [board + rax]
  3678 00001C54 C60720                          mov byte [rdi], ' '         ; Limpiar rastro
  3679 00001C57 4159                            pop r9
  3680 00001C59 4158                            pop r8
  3681                                  
  3682                                          ; Determinar comportamiento basado en índice
  3683 00001C5B 4C89E0                          mov rax, r12
  3684 00001C5E 4883E001                        and rax, 1                      ; 0 para índices pares, 1 para impares
  3685 00001C62 4885C0                          test rax, rax
  3686 00001C65 7402                            jz .chase_ball
  3687 00001C67 EB31                            jmp .chase_paddle             ; Si es 1, perseguir paleta
  3688                                          
  3689                                          ; Perseguir bola (comportamiento original)
  3690                                      .chase_ball:
  3691 00001C69 4C8B15(DF140000)                mov r10, [ball_x_pos]
  3692 00001C70 4D39D0                          cmp r8, r10
  3693 00001C73 0F8F96000000                    jg .move_left
  3694 00001C79 0F8C95000000                    jl .move_right
  3695                                          
  3696 00001C7F 4C8B15(E7140000)                mov r10, [ball_y_pos]
  3697 00001C86 4D39D1                          cmp r9, r10
  3698 00001C89 0F8F8A000000                    jg .move_up
  3699 00001C8F 0F8C89000000                    jl .move_down
  3700 00001C95 E9A5000000                      jmp .check_collision
  3701                                          
  3702                                      .chase_paddle:
  3703                                          ; Obtener la posición X actual de la paleta
  3704 00001C9A 4C8B15(BF140000)                mov r10, [pallet_position]
  3705 00001CA1 4981EA[400A0000]                sub r10, board              ; Convertir a offset relativo
  3706                                          
  3707                                          ; Calcular la posición X real de la paleta
  3708 00001CA8 4C89D0                          mov rax, r10
  3709 00001CAB BB50000000                      mov rbx, column_cells
  3710 00001CB0 4883C302                        add rbx, 2                  ; Añadir newline chars
  3711 00001CB4 4831D2                          xor rdx, rdx
  3712 00001CB7 48F7F3                          div rbx                     ; rax = y, rdx = x
  3713                                          
  3714                                          ; rdx ahora contiene la posición X de la paleta
  3715                                          ; Añadir la mitad del tamaño de la paleta para apuntar al centro
  3716 00001CBA 488B0D(C7140000)                mov rcx, [pallet_size]
  3717 00001CC1 48D1E9                          shr rcx, 1                  ; Dividir por 2
  3718 00001CC4 4801CA                          add rdx, rcx
  3719                                          
  3720                                          ; Comparar con posición X del enemigo y mover gradualmente
  3721 00001CC7 4939D0                          cmp r8, rdx
  3722 00001CCA 7404                            je .check_y_paddle          ; Si está en la misma X, verificar Y
  3723 00001CCC 7F41                            jg .move_left              ; Si está a la derecha, mover izquierda
  3724 00001CCE 7C44                            jl .move_right             ; Si está a la izquierda, mover derecha
  3725                                  
  3726                                      .check_y_paddle:
  3727                                          ; La Y de la paleta siempre es row_cells - 2
  3728 00001CD0 41BA20000000                    mov r10, row_cells
  3729 00001CD6 4983EA02                        sub r10, 2
  3730                                          
  3731                                          ; Comparar con posición Y del enemigo y mover gradualmente
  3732 00001CDA 4D39D1                          cmp r9, r10
  3733 00001CDD 7404                            je .no_movement            ; Si está en la misma Y, no mover
  3734 00001CDF 7F38                            jg .move_up               ; Si está abajo, mover arriba
  3735 00001CE1 7C3B                            jl .move_down             ; Si está arriba, mover abajo
  3736                                          
  3737                                      .no_movement:
  3738 00001CE3 EB5A                            jmp .check_collision
  3739                                  
  3740                                      ; También agregar una nueva sección para el movimiento suave
  3741                                      .smooth_transition:
  3742                                          ; Si el enemigo está muy lejos de su objetivo, limitar el movimiento
  3743 00001CE5 8A05(8A200000)                  mov al, [enemy_target]
  3744 00001CEB 84C0                            test al, al
  3745 00001CED 7450                            jz .check_collision        ; Si persigue la bola, movimiento normal
  3746                                          
  3747                                          ; Verificar distancia en X
  3748 00001CEF 4989D2                          mov r10, rdx              ; Posición X objetivo
  3749 00001CF2 4D29C2                          sub r10, r8               ; Calcular diferencia
  3750 00001CF5 4983FA05                        cmp r10, 5               ; Si la diferencia es mayor a 5
  3751 00001CF9 7F08                            jg .limit_right_movement  ; Limitar movimiento a la derecha
  3752 00001CFB 4983FAFB                        cmp r10, -5              ; Si la diferencia es menor a -5
  3753 00001CFF 7C08                            jl .limit_left_movement   ; Limitar movimiento a la izquierda
  3754 00001D01 EB3C                            jmp .check_collision
  3755                                          
  3756                                      .limit_right_movement:
  3757 00001D03 4983C002                        add r8, 2                ; Mover solo 2 unidades a la derecha
  3758 00001D07 EB36                            jmp .check_collision
  3759                                          
  3760                                      .limit_left_movement:
  3761 00001D09 4983E802                        sub r8, 2                ; Mover solo 2 unidades a la izquierda
  3762 00001D0D EB30                            jmp .check_collision
  3763                                      .move_left:
  3764 00001D0F 49FFC8                          dec r8
  3765 00001D12 EB0F                            jmp .check_vertical
  3766                                          
  3767                                      .move_right:
  3768 00001D14 49FFC0                          inc r8
  3769 00001D17 EB0A                            jmp .check_vertical
  3770                                          
  3771                                      .move_up:
  3772 00001D19 49FFC9                          dec r9
  3773 00001D1C EB21                            jmp .check_collision
  3774                                          
  3775                                      .move_down:
  3776 00001D1E 49FFC1                          inc r9
  3777 00001D21 EB1C                            jmp .check_collision
  3778                                          
  3779                                      .check_vertical:
  3780 00001D23 8A05(8A200000)                  mov al, [enemy_target]
  3781 00001D29 84C0                            test al, al
  3782 00001D2B 0F8569FFFFFF                    jnz .chase_paddle         ; Si persigue paleta, volver a su lógica
  3783 00001D31 4C8B15(E7140000)                mov r10, [ball_y_pos]     ; Si no, seguir persiguiendo la bola
  3784 00001D38 4D39D1                          cmp r9, r10
  3785 00001D3B 7FDC                            jg .move_up
  3786 00001D3D 7CDF                            jl .move_down
  3787                                          
  3788                                      .check_collision:
  3789                                          ; Verificar colisión con bordes
  3790 00001D3F 4983F801                        cmp r8, 1                       ; Borde izquierdo
  3791 00001D43 7E7D                            jle .next_enemy
  3792 00001D45 4983F850                        cmp r8, column_cells
  3793 00001D49 7D77                            jge .next_enemy
  3794 00001D4B 4983F901                        cmp r9, 1                       ; Borde superior
  3795 00001D4F 7E71                            jle .next_enemy
  3796 00001D51 4983F920                        cmp r9, row_cells
  3797 00001D55 7D6B                            jge .next_enemy
  3798                                          
  3799                                          ; Verificar colisión con bloques antes de moverse
  3800 00001D57 4150                            push r8
  3801 00001D59 4151                            push r9
  3802 00001D5B 4152                            push r10
  3803                                          
  3804                                          ; Calcular posición en el tablero para verificar
  3805 00001D5D B850000000                      mov rax, column_cells
  3806 00001D62 4883C002                        add rax, 2
  3807 00001D66 49F7E1                          mul r9
  3808 00001D69 4C01C0                          add rax, r8
  3809 00001D6C 4C8D90[400A0000]                lea r10, [board + rax]
  3810                                          
  3811                                          ; Verificar si hay un bloque en la nueva posición
  3812 00001D73 418A02                          mov al, [r10]
  3813 00001D76 3C55                            cmp al, 'U'
  3814 00001D78 7442                            je .invalid_move
  3815 00001D7A 3C4F                            cmp al, 'O'
  3816 00001D7C 743E                            je .invalid_move
  3817 00001D7E 3C44                            cmp al, 'D'
  3818 00001D80 743A                            je .invalid_move
  3819 00001D82 3C4C                            cmp al, 'L'
  3820 00001D84 7436                            je .invalid_move
  3821 00001D86 3C56                            cmp al, 'V'
  3822 00001D88 7432                            je .invalid_move
  3823 00001D8A 3C38                            cmp al, '8'
  3824 00001D8C 742E                            je .invalid_move
  3825 00001D8E 3C58                            cmp al, 'X'
  3826 00001D90 742A                            je .invalid_move
  3827 00001D92 3C40                            cmp al, '@'                 ; Enemigo nivel 1 y 5
  3828 00001D94 7426                            je .invalid_move
  3829 00001D96 3C23                            cmp al, '#'                 ; Enemigo nivel 2
  3830 00001D98 7422                            je .invalid_move
  3831 00001D9A 3C24                            cmp al, '$'                 ; Enemigo nivel 3
  3832 00001D9C 741E                            je .invalid_move
  3833 00001D9E 3C26                            cmp al, '&'                 ; Enemigo nivel 4
  3834 00001DA0 741A                            je .invalid_move
  3835                                          
  3836 00001DA2 E825000000                      call check_enemy_at_position
  3837 00001DA7 4883F801                        cmp rax, 1
  3838 00001DAB 740F                            je .invalid_move
  3839 00001DAD 415A                            pop r10
  3840 00001DAF 4159                            pop r9
  3841 00001DB1 4158                            pop r8
  3842                                          
  3843                                          ; Guardar nueva posición si es válida
  3844 00001DB3 448806                          mov [rsi], r8b
  3845 00001DB6 44884E01                        mov [rsi + 1], r9b
  3846 00001DBA EB06                            jmp .next_enemy
  3847                                          
  3848                                      .invalid_move:
  3849 00001DBC 415A                            pop r10
  3850 00001DBE 4159                            pop r9
  3851 00001DC0 4158                            pop r8
  3852                                          
  3853                                      .next_enemy:
  3854 00001DC2 49FFC4                          inc r12
  3855 00001DC5 E9D1FDFFFF                      jmp .enemy_loop
  3856                                          
  3857                                      .end:
  3858 00001DCA 5D                              pop rbp
  3859 00001DCB C3                              ret
  3860                                  
  3861                                  check_enemy_at_position:
  3862 00001DCC 55                          push rbp
  3863 00001DCD 4889E5                      mov rbp, rsp
  3864                                      
  3865                                      ; Parámetros esperados en r8 (X) y r9 (Y)
  3866 00001DD0 B850000000                  mov rax, column_cells
  3867 00001DD5 4883C002                    add rax, 2
  3868 00001DD9 49F7E1                      mul r9
  3869 00001DDC 4C01C0                      add rax, r8
  3870 00001DDF 488DB8[400A0000]            lea rdi, [board + rax]
  3871 00001DE6 480FB607                    movzx rax, byte [rdi]
  3872                                      
  3873                                      ; Verificar todos los caracteres de enemigos
  3874 00001DEA 3C40                        cmp al, '@'
  3875 00001DEC 7411                        je .enemy_found
  3876 00001DEE 3C23                        cmp al, '#'
  3877 00001DF0 740D                        je .enemy_found
  3878 00001DF2 3C24                        cmp al, '$'
  3879 00001DF4 7409                        je .enemy_found
  3880 00001DF6 3C26                        cmp al, '&'
  3881 00001DF8 7405                        je .enemy_found
  3882                                      
  3883 00001DFA 4831C0                      xor rax, rax    ; No hay enemigo (retorna 0)
  3884 00001DFD EB05                        jmp .end
  3885                                      
  3886                                  .enemy_found:
  3887 00001DFF B801000000                  mov rax, 1      ; Hay enemigo (retorna 1)
  3888                                      
  3889                                  .end:
  3890 00001E04 5D                          pop rbp
  3891 00001E05 C3                          ret
  3892                                  
  3893                                  get_current_spawn_points:
  3894 00001E06 55                          push rbp
  3895 00001E07 4889E5                      mov rbp, rsp
  3896                                      
  3897 00001E0A 480FB605(79150000)          movzx rax, byte [current_level]
  3898 00001E12 48FFC8                      dec rax                         ; Ajustar para índice base 0
  3899 00001E15 488B04C5[BE200000]          mov rax, [spawn_points_table + rax * 8]
  3900                                      
  3901 00001E1D 5D                          pop rbp
  3902 00001E1E C3                          ret
  3903                                  
  3904                                  ; Función para verificar si debe aparecer un nuevo enemigo
  3905                                  check_enemy_spawn:
  3906 00001E1F 55                          push rbp
  3907 00001E20 4889E5                      mov rbp, rsp
  3908                                      
  3909                                      ; Obtener spawn points del nivel actual
  3910 00001E23 E8DEFFFFFF                  call get_current_spawn_points
  3911 00001E28 4989C4                      mov r12, rax                    ; r12 = puntero a spawn points
  3912                                      
  3913                                      ; Obtener cantidad de bloques destruidos
  3914 00001E2B 4C0FB62D(46200000)          movzx r13, byte [destroyed_blocks]
  3915                                      
  3916                                      ; Verificar cada punto de spawn
  3917 00001E33 4831C9                      xor rcx, rcx                    ; Índice del enemigo
  3918                                      
  3919                                      .check_loop:
  3920 00001E36 4883F90A                        cmp rcx, 10                     ; Máximo 10 enemigos
  3921 00001E3A 7D4E                            jge .end
  3922                                          
  3923                                          ; Verificar si este spawn point ya fue usado
  3924 00001E3C 80B9[E9200000]01                cmp byte [enemy_spawns_triggered + rcx], 1
  3925 00001E43 7440                            je .next_enemy
  3926                                          
  3927                                          ; Verificar si este enemigo ya está activo
  3928 00001E45 4889C8                          mov rax, rcx
  3929 00001E48 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  3930 00001E4C 488DB0[60200000]                lea rsi, [enemies + rax]
  3931 00001E53 807E0201                        cmp byte [rsi + 2], 1          ; Verificar si está activo
  3932 00001E57 742C                            je .next_enemy
  3933                                          
  3934                                          ; Verificar si debemos spawnear este enemigo
  3935 00001E59 490FB6040C                      movzx rax, byte [r12 + rcx]    ; Obtener punto de spawn
  3936 00001E5E 4939C5                          cmp r13, rax                   ; Comparar con bloques destruidos
  3937 00001E61 7522                            jne .next_enemy
  3938                                          
  3939                                          ; Marcar este spawn point como usado
  3940 00001E63 C681[E9200000]01                mov byte [enemy_spawns_triggered + rcx], 1
  3941                                          
  3942                                          ; Spawner nuevo enemigo
  3943 00001E6A B004                            mov al, 4
  3944 00001E6C 00C8                            add al, cl       ; con 'rcx' como índice
  3945 00001E6E 8806                            mov [rsi], al
  3946 00001E70 C6460102                        mov byte [rsi+1], 2
  3947 00001E74 C6460201                        mov byte [rsi+2], 1
  3948                                  
  3949                                          ; Inicializar comportamiento
  3950 00001E78 4889C8                          mov rax, rcx
  3951 00001E7B 4883E001                        and rax, 1                     ; Alternar comportamiento basado en índice par/impar
  3952 00001E7F 8805(E8200000)                  mov [current_behavior], al      ; 0 = persigue bola, 1 = persigue paleta
  3953                                          
  3954                                      .next_enemy:
  3955 00001E85 48FFC1                          inc rcx
  3956 00001E88 EBAC                            jmp .check_loop
  3957                                          
  3958                                      .end:
  3959 00001E8A 5D                              pop rbp
  3960 00001E8B C3                              ret
  3961                                  
  3962                                  
  3963                                  ; Función para dibujar enemigos
  3964                                  print_enemies:
  3965 00001E8C 55                          push rbp
  3966 00001E8D 4889E5                      mov rbp, rsp
  3967                                      
  3968 00001E90 4D31E4                      xor r12, r12                    ; Índice del enemigo
  3969                                      
  3970                                      .print_loop:
  3971 00001E93 4983FC0A                        cmp r12, 10                      ; Máximo 5 enemigos
  3972 00001E97 7D4B                            jge .end
  3973                                          
  3974                                          ; Calcular offset del enemigo actual
  3975 00001E99 4C89E0                          mov rax, r12
  3976 00001E9C 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  3977 00001EA0 488DB0[60200000]                lea rsi, [enemies + rax]
  3978                                          
  3979                                          ; Verificar si el enemigo está activo
  3980 00001EA7 807E0201                        cmp byte [rsi + 2], 1
  3981 00001EAB 7532                            jne .next_enemy
  3982                                          
  3983                                          ; Calcular posición en el tablero
  3984 00001EAD 4C0FB606                        movzx r8, byte [rsi]            ; X
  3985 00001EB1 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  3986                                          
  3987                                          ; Calcular offset en el tablero
  3988 00001EB6 B850000000                      mov rax, column_cells
  3989 00001EBB 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  3990 00001EBF 49F7E1                          mul r9
  3991 00001EC2 4C01C0                          add rax, r8
  3992 00001EC5 488DB8[400A0000]                lea rdi, [board + rax]
  3993                                          
  3994                                          ; Obtener carácter del enemigo según el nivel
  3995 00001ECC 480FB605(79150000)              movzx rax, byte [current_level]
  3996 00001ED4 48FFC8                          dec rax                         ; Ajustar para índice base 0
  3997 00001ED7 8A80[5B200000]                  mov al, [enemy_chars + rax]
  3998                                          
  3999                                          ; Dibujar enemigo
  4000 00001EDD 8807                            mov [rdi], al
  4001                                          
  4002                                      .next_enemy:
  4003 00001EDF 49FFC4                          inc r12
  4004 00001EE2 EBAF                            jmp .print_loop
  4005                                          
  4006                                      .end:
  4007 00001EE4 5D                              pop rbp
  4008 00001EE5 C3                              ret
  4009                                  
  4010                                  ; Función para verificar colisión con enemigos
  4011                                  ; Función para verificar colisión con enemigos
  4012                                  check_enemy_collision:
  4013 00001EE6 55                          push rbp
  4014 00001EE7 4889E5                      mov rbp, rsp
  4015                                      
  4016 00001EEA 4D31E4                      xor r12, r12                    ; Índice del enemigo
  4017 00001EED 4831C0                      xor rax, rax                    ; Valor de retorno (0 = no colisión)
  4018                                      
  4019                                      .check_loop:
  4020 00001EF0 4983FC05                        cmp r12, 5                      ; Máximo 5 enemigos
  4021 00001EF4 0F8DE9000000                    jge .end
  4022                                          
  4023                                          ; Calcular offset del enemigo actual
  4024 00001EFA 4C89E1                          mov rcx, r12
  4025 00001EFD 486BC903                        imul rcx, 3                     ; Cada enemigo ocupa 3 bytes
  4026 00001F01 488DB1[60200000]                lea rsi, [enemies + rcx]
  4027                                          
  4028                                          ; Verificar si el enemigo está activo
  4029 00001F08 807E0201                        cmp byte [rsi + 2], 1
  4030 00001F0C 0F85C9000000                    jne .next_enemy
  4031                                          
  4032                                          ; Verificar colisión con la bola
  4033 00001F12 4C0FB606                        movzx r8, byte [rsi]            ; X enemigo
  4034 00001F16 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y enemigo
  4035                                          
  4036                                          ; Verificar si la bola está en el rango del enemigo (considerando el enemigo como un área)
  4037 00001F1B 4C8B15(DF140000)                mov r10, [ball_x_pos]
  4038 00001F22 4C8B1D(E7140000)                mov r11, [ball_y_pos]
  4039                                          
  4040                                          ; Comprobar colisión vertical (misma columna)
  4041 00001F29 4D39C2                          cmp r10, r8
  4042 00001F2C 7525                            jne .check_horizontal
  4043 00001F2E 4D29CB                          sub r11, r9
  4044 00001F31 4983FB01                        cmp r11, 1
  4045 00001F35 7F1C                            jg .check_horizontal
  4046 00001F37 4983FBFF                        cmp r11, -1
  4047 00001F3B 7C16                            jl .check_horizontal
  4048                                          
  4049                                          ; Colisión vertical detectada
  4050 00001F3D E8A3000000                      call destroy_enemy
  4051 00001F42 48F71D(F7140000)                neg qword [ball_direction_y]    ; Invertir dirección vertical
  4052 00001F49 B801000000                      mov rax, 1
  4053 00001F4E E990000000                      jmp .end
  4054                                          
  4055                                      .check_horizontal:
  4056                                          ; Comprobar colisión horizontal (misma fila)
  4057 00001F53 4C8B15(DF140000)                mov r10, [ball_x_pos]
  4058 00001F5A 4C8B1D(E7140000)                mov r11, [ball_y_pos]
  4059 00001F61 4D39CB                          cmp r11, r9
  4060 00001F64 7522                            jne .check_paddle
  4061 00001F66 4D29C2                          sub r10, r8
  4062 00001F69 4983FA01                        cmp r10, 1
  4063 00001F6D 7F19                            jg .check_paddle
  4064 00001F6F 4983FAFF                        cmp r10, -1
  4065 00001F73 7C13                            jl .check_paddle
  4066                                          
  4067                                          ; Colisión horizontal detectada
  4068 00001F75 E86B000000                      call destroy_enemy
  4069 00001F7A 48F71D(EF140000)                neg qword [ball_direction_x]    ; Invertir dirección horizontal
  4070 00001F81 B801000000                      mov rax, 1
  4071 00001F86 EB5B                            jmp .end
  4072                                          
  4073                                      .check_paddle:
  4074                                          ; Verificar colisión con la paleta
  4075 00001F88 4C8B15(BF140000)                mov r10, [pallet_position]
  4076 00001F8F 4981EA[400A0000]                sub r10, board
  4077 00001F96 4C89D0                          mov rax, r10
  4078 00001F99 41BB50000000                    mov r11, column_cells
  4079 00001F9F 4983C302                        add r11, 2
  4080 00001FA3 4831D2                          xor rdx, rdx
  4081 00001FA6 49F7F3                          div r11                     ; División para obtener la posición Y
  4082 00001FA9 4989D3                          mov r11, rdx               ; X de la paleta en r11
  4083                                          
  4084 00001FAC 488B0D(C7140000)                mov rcx, [pallet_size]     ; Obtener el tamaño de la paleta
  4085                                          
  4086                                          ; Verificar si el enemigo está en la misma fila que la paleta
  4087 00001FB3 41BD20000000                    mov r13, row_cells
  4088 00001FB9 4983ED02                        sub r13, 2                 ; Y de la paleta
  4089 00001FBD 4D39E9                          cmp r9, r13               ; Comparar Y del enemigo con Y de la paleta
  4090 00001FC0 7519                            jne .next_enemy
  4091                                          
  4092                                          ; Verificar si el enemigo está dentro del rango X de la paleta
  4093 00001FC2 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X inicial de la paleta
  4094 00001FC5 7C14                            jl .next_enemy
  4095                                          
  4096 00001FC7 4901CB                          add r11, rcx              ; Añadir el tamaño de la paleta
  4097 00001FCA 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X final de la paleta
  4098 00001FCD 7F0C                            jg .next_enemy
  4099                                          
  4100                                          ; Si llegamos aquí, hay colisión con la paleta
  4101 00001FCF E811000000                      call destroy_enemy        ; Destruir el enemigo
  4102 00001FD4 B801000000                      mov rax, 1                ; Indicar que hubo colisión
  4103 00001FD9 EB08                            jmp .end
  4104                                          
  4105                                      .next_enemy:
  4106 00001FDB 49FFC4                          inc r12
  4107 00001FDE E90DFFFFFF                      jmp .check_loop
  4108                                          
  4109                                      .end:
  4110 00001FE3 5D                              pop rbp
  4111 00001FE4 C3                              ret
  4112                                  
  4113                                  ; Función para destruir un enemigo
  4114                                  destroy_enemy:
  4115                                      ; Desactivar enemigo
  4116 00001FE5 C6460200                    mov byte [rsi + 2], 0   ; Marcar enemigo como inactivo
  4117                                  
  4118                                      ; Sumar puntos por destruir enemigo
  4119 00001FE9 488B05(7F200000)            mov rax, [enemy_points]
  4120 00001FF0 480105(3E200000)            add [current_score], rax
  4121                                  
  4122                                      ; No tocar bloques destruidos aquí
  4123 00001FF7 C3                          ret
  4124                                  
  4125                                  
  4126                                  _start:
  4127 00001FF8 E82EE1FFFF              	call canonical_off
  4128 00001FFD E853010000              	call start_screen
  4129 00002002 E896F3FFFF                  call init_level
  4130 00002007 E829FAFFFF                  call init_enemies
  4131 0000200C EB00                    	jmp .main_loop
  4132                                  	
  4133                                  
  4134                                      .main_loop:
  4135 0000200E E8E0F7FFFF                      call print_labels
  4136 00002013 E80FF7FFFF                      call print_blocks
  4137 00002018 E81DE5FFFF                      call move_letters
  4138 0000201D E8DCE7FFFF                      call update_lasers
  4139 00002022 E888E4FFFF                      call print_letters
  4140 00002027 E87DEBFFFF                      call print_pallet
  4141                                          
  4142                                          ; Mover bola principal solo si está activa
  4143 0000202C 803D(00150000)01                cmp byte [ball_active], 1
  4144 00002033 7505                            jne .skip_ball1
  4145 00002035 E887ECFFFF                          call move_ball
  4146                                          .skip_ball1:
  4147                                  
  4148                                          ; Mover bola 2 si está activa
  4149 0000203A 803D(22150000)01                cmp byte [ball2_active], 1
  4150 00002041 7505                            jne .skip_ball2
  4151 00002043 E84CEEFFFF                          call move_ball_2
  4152                                          .skip_ball2:
  4153                                  
  4154                                          ; Mover bola 3 si está activa
  4155 00002048 803D(44150000)01                cmp byte [ball3_active], 1
  4156 0000204F 7505                            jne .skip_ball3
  4157 00002051 E811F0FFFF                          call move_ball_3
  4158                                          .skip_ball3:
  4159                                  
  4160 00002056 E89BE2FFFF                      call check_bottom_collision    ; Nueva función que maneja todas las bolas
  4161 0000205B E87DE1FFFF                      call print_lives
  4162                                  
  4163                                          ; Imprimir solo las bolas activas
  4164 00002060 803D(00150000)01                cmp byte [ball_active], 1
  4165 00002067 7505                            jne .no_pb1
  4166 00002069 E8C3EAFFFF                          call print_ball
  4167                                          .no_pb1:
  4168                                  
  4169 0000206E 803D(22150000)01                cmp byte [ball2_active], 1
  4170 00002075 7505                            jne .no_pb2
  4171 00002077 E8DDEAFFFF                          call print_ball_2
  4172                                          .no_pb2:
  4173                                  
  4174 0000207C 803D(44150000)01                cmp byte [ball3_active], 1
  4175 00002083 7505                            jne .no_pb3
  4176 00002085 E8F7EAFFFF                          call print_ball_3
  4177                                          .no_pb3:
  4178                                  
  4179 0000208A E8FAF4FFFF                      call check_level_complete
  4180 0000208F E88BFDFFFF                      call check_enemy_spawn
  4181 00002094 E8DAFAFFFF                      call move_enemies
  4182 00002099 E848FEFFFF                      call check_enemy_collision
  4183 0000209E E8E9FDFFFF                      call print_enemies
  4184                                  		print board, board_size				
    82 000020A3 B801000000          <1>  mov eax, sys_write
    83 000020A8 BF01000000          <1>  mov edi, 1
    84 000020AD 48BE-               <1>  mov rsi, %1
    84 000020AF [400A000000000000]  <1>
    85 000020B7 BA400A0000          <1>  mov edx, %2
    86 000020BC 0F05                <1>  syscall
  4185                                  		;setnonblocking	
  4186                                  	.read_more:	
  4187                                  	    getchar	
    90 000020BE B800000000          <1>  mov rax, sys_read
    91 000020C3 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 000020C8 48BE-               <1>  mov rsi, input_char
    92 000020CA [0000000000000000]  <1>
    93 000020D2 BA01000000          <1>  mov rdx, 1
    94 000020D7 0F05                <1>  syscall
  4188 000020D9 4883F801                	    cmp rax, 1
  4189 000020DD 7543                    	    jne .done
  4190                                  	
  4191 000020DF 8A05(00000000)          	    mov al, [input_char]
  4192 000020E5 8805(08230000)          	    mov [last_key], al      ; Registrar la última tecla presionada
  4193                                  	
  4194 000020EB 3C61                    	    cmp al, 'a'
  4195 000020ED 750E                    	    jne .not_left
  4196 000020EF 48C7C7FFFFFFFF          	    mov rdi, left_direction
  4197 000020F6 E8E3EAFFFF              	    call move_pallet
  4198 000020FB EB25                    	    jmp .done
  4199                                  	
  4200                                      .not_left:
  4201 000020FD 3C64                    	    cmp al, 'd'
  4202 000020FF 750C                    	    jne .not_right
  4203 00002101 BF01000000              	    mov rdi, right_direction
  4204 00002106 E8D3EAFFFF              	    call move_pallet
  4205 0000210B EB15                    	    jmp .done
  4206                                  	
  4207                                      .not_right:
  4208 0000210D 3C63                    	    cmp al, 'c'             ; Verificar si se presionó la tecla 'c'
  4209 0000210F 740A                    	    je .release_ball        ; Si sí, liberar la bola
  4210                                  	
  4211 00002111 3C71                    	    cmp al, 'q' 
  4212 00002113 0F84AF000000            	    je exit
  4213 00002119 EBA3                    	    jmp .read_more
  4214                                  	
  4215                                      .release_ball:
  4216 0000211B E81AF1FFFF              	    call process_catch_release
  4217 00002120 EB00                    	    jmp .done
  4218                                  	
  4219                                      .done:
  4220                                  	    sleeptime
    98 00002122 B823000000          <1>  mov eax, sys_nanosleep
    99 00002127 48BF-               <1>  mov rdi, timespec
    99 00002129 [0000000000000000]  <1>
   100 00002131 31F6                <1>  xor esi, esi
   101 00002133 0F05                <1>  syscall
  4221                                  	    print clear, clear_length
    82 00002135 B801000000          <1>  mov eax, sys_write
    83 0000213A BF01000000          <1>  mov edi, 1
    84 0000213F 48BE-               <1>  mov rsi, %1
    84 00002141 [1000000000000000]  <1>
    85 00002149 BA07000000          <1>  mov edx, %2
    86 0000214E 0F05                <1>  syscall
  4222 00002150 E9B9FEFFFF              	    jmp .main_loop
  4223                                  
  4224                                  
  4225                                  
  4226                                  
  4227                                  start_screen:
  4228                                      print clear, clear_length    ; Limpiamos la pantalla primero
    82 00002155 B801000000          <1>  mov eax, sys_write
    83 0000215A BF01000000          <1>  mov edi, 1
    84 0000215F 48BE-               <1>  mov rsi, %1
    84 00002161 [1000000000000000]  <1>
    85 00002169 BA07000000          <1>  mov edx, %2
    86 0000216E 0F05                <1>  syscall
  4229                                      print msg1, msg1_length
    82 00002170 B801000000          <1>  mov eax, sys_write
    83 00002175 BF01000000          <1>  mov edi, 1
    84 0000217A 48BE-               <1>  mov rsi, %1
    84 0000217C [1700000000000000]  <1>
    85 00002184 BA14010000          <1>  mov edx, %2
    86 00002189 0F05                <1>  syscall
  4230                                      
  4231                                      .wait_for_key:              ; Agregamos una etiqueta para esperar la tecla
  4232                                          getchar                 ; Esperamos una tecla
    90 0000218B B800000000          <1>  mov rax, sys_read
    91 00002190 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 00002195 48BE-               <1>  mov rsi, input_char
    92 00002197 [0000000000000000]  <1>
    93 0000219F BA01000000          <1>  mov rdx, 1
    94 000021A4 0F05                <1>  syscall
  4233 000021A6 4883F801                        cmp rax, 1             ; Verificamos si se leyó un carácter
  4234 000021AA 75DF                            jne .wait_for_key      ; Si no se leyó, seguimos esperando
  4235                                          
  4236                                      print clear, clear_length   ; Limpiamos la pantalla antes de salir
    82 000021AC B801000000          <1>  mov eax, sys_write
    83 000021B1 BF01000000          <1>  mov edi, 1
    84 000021B6 48BE-               <1>  mov rsi, %1
    84 000021B8 [1000000000000000]  <1>
    85 000021C0 BA07000000          <1>  mov edx, %2
    86 000021C5 0F05                <1>  syscall
  4237 000021C7 C3                          ret
  4238                                  
  4239                                  exit: 
  4240 000021C8 E8A0DFFFFF              	call canonical_on
  4241 000021CD B83C000000              	mov    rax, 60
  4242 000021D2 BF00000000                  mov    rdi, 0
  4243 000021D7 0F05                        syscall
  4244                                  
