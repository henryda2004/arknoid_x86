     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  sys_read: equ 0	
     7                                  sys_write:	equ 1
     8                                  sys_nanosleep:	equ 35
     9                                  sys_time:	equ 201
    10                                  sys_fcntl:	equ 72
    11                                  
    12                                  
    13                                  STDIN_FILENO: equ 0
    14                                  
    15                                  F_SETFL:	equ 0x0004
    16                                  O_NONBLOCK: equ 0x0004
    17                                  
    18                                  ;screen clean definition
    19                                  row_cells:	equ 32	; set to any (reasonable) value you wish
    20                                  column_cells: 	equ 80 ; set to any (reasonable) value you wish
    21                                  array_length:	equ row_cells * column_cells + row_cells ; cells are mapped to bytes in the array and a new line char ends each row
    22                                  
    23                                  ;This is regarding the sleep time
    24                                  timespec:
    25 00000000 0000000000000000            tv_sec  dq 0
    26 00000008 00C2EB0B00000000            tv_nsec dq 200000000
    27                                  
    28                                  
    29                                  ;This is for cleaning up the screen
    30 00000010 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"
    31                                  clear_length:	equ $-clear
    32                                  	
    33                                  	
    34                                  
    35                                  ; Start Message
    36 00000017 202020202020202054-     msg1: db "        TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    36 00000020 45434E4F4C4F474943-
    36 00000029 4F20444520434F5354-
    36 00000032 412052494341202020-
    36 0000003B 20202020200A0D     
    37 00000042 202020202020202041-     msg2: db "        ARQUITECTURA DE COMPUTADORAS I        ", 0xA, 0xD
    37 0000004B 525155495445435455-
    37 00000054 524120444520434F4D-
    37 0000005D 50555441444F524153-
    37 00000066 204920202020202020-
    37 0000006F 200A0D             
    38 00000072 202020202020202045-     msg3: db "        ESTUDIANTE: HENRY NUNEZ PEREZ        ", 0xA, 0xD
    38 0000007B 5354554449414E5445-
    38 00000084 3A2048454E5259204E-
    38 0000008D 554E455A2050455245-
    38 00000096 5A2020202020202020-
    38 0000009F 0A0D               
    39 000000A1 202020202020202050-     msg4: db "        PROFESOR: ERNESTO RIVERA ALVARADO        ", 0xA, 0xD
    39 000000AA 524F4645534F523A20-
    39 000000B3 45524E4553544F2052-
    39 000000BC 495645524120414C56-
    39 000000C5 415241444F20202020-
    39 000000CE 202020200A0D       
    40 000000D4 202020202020202041-     msg5: db "        ARKANOID RETRO        ", 0xA, 0xD
    40 000000DD 524B414E4F49442052-
    40 000000E6 4554524F2020202020-
    40 000000EF 2020200A0D         
    41 000000F4 202020202020202050-     msg6: db "        PRESIONE CUALQUIER TECLA PARA INICIAR        ", 0xA, 0xD
    41 000000FD 524553494F4E452043-
    41 00000106 55414C515549455220-
    41 0000010F 5445434C4120504152-
    41 00000118 4120494E4943494152-
    41 00000121 20202020202020200A-
    41 0000012A 0D                 
    42                                  msg1_length: equ $-msg1
    43                                  msg2_length: equ $-msg2
    44                                  msg3_length: equ $-msg3
    45                                  msg4_length: equ $-msg4
    46                                  msg5_length: equ $-msg5
    47                                  msg6_length: equ $-msg6
    48                                  
    49                                  ; Usefull macros
    50                                  
    51                                  
    52                                  
    53                                  %macro setnonblocking 0
    54                                  	mov rax, sys_fcntl
    55                                      mov rdi, STDIN_FILENO
    56                                      mov rsi, F_SETFL
    57                                      mov rdx, O_NONBLOCK
    58                                      syscall
    59                                  %endmacro
    60                                  
    61                                  %macro unsetnonblocking 0
    62                                  	mov rax, sys_fcntl
    63                                      mov rdi, STDIN_FILENO
    64                                      mov rsi, F_SETFL
    65                                      mov rdx, 0
    66                                      syscall
    67                                  %endmacro
    68                                  
    69                                  %macro full_line 0
    70                                      times column_cells db "X"
    71                                      db 0x0a, 0xD
    72                                  %endmacro
    73                                  
    74                                  %macro hollow_line 0
    75                                      db "X"
    76                                      times column_cells-2 db " "
    77                                      db "X", 0x0a, 0xD
    78                                  %endmacro
    79                                  
    80                                  
    81                                  %macro print 2
    82                                  	mov eax, sys_write
    83                                  	mov edi, 1 	; stdout
    84                                  	mov rsi, %1
    85                                  	mov edx, %2
    86                                  	syscall
    87                                  %endmacro
    88                                  
    89                                  %macro getchar 0
    90                                  	mov     rax, sys_read
    91                                      mov     rdi, STDIN_FILENO
    92                                      mov     rsi, input_char
    93                                      mov     rdx, 1 ; number of bytes
    94                                      syscall         ;read text input from keyboard
    95                                  %endmacro
    96                                  
    97                                  %macro sleeptime 0
    98                                  	mov eax, sys_nanosleep
    99                                  	mov rdi, timespec
   100                                  	xor esi, esi		; ignore remaining time in case of call interruption
   101                                  	syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   102                                  %endmacro
   103                                  
   104                                  
   105                                  
   106                                  global _start
   107                                  
   108                                  section .bss
   109                                  
   110 00000000 ??                      input_char: resb 1
   111                                  
   112                                  section .data
   113                                  
   114                                  	; Guardamos la plantilla del tablero (32 filas)
   115                                      board_template:
   116                                          full_line
    70 00000000 58<rep 50h>         <1>  times column_cells db "X"
    71 00000050 0A0D                <1>  db 0x0a, 0xD
   117                                          %rep 30
   118                                          hollow_line
   119                                          %endrep
   118                              <1>  hollow_line
    75 00000052 58                  <2>  db "X"
    76 00000053 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000A1 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000A4 58                  <2>  db "X"
    76 000000A5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000F3 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000F6 58                  <2>  db "X"
    76 000000F7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000145 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000148 58                  <2>  db "X"
    76 00000149 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000197 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000019A 58                  <2>  db "X"
    76 0000019B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000001E9 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000001EC 58                  <2>  db "X"
    76 000001ED 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000023B 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000023E 58                  <2>  db "X"
    76 0000023F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000028D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000290 58                  <2>  db "X"
    76 00000291 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000002DF 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000002E2 58                  <2>  db "X"
    76 000002E3 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000331 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000334 58                  <2>  db "X"
    76 00000335 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000383 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000386 58                  <2>  db "X"
    76 00000387 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000003D5 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000003D8 58                  <2>  db "X"
    76 000003D9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000427 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000042A 58                  <2>  db "X"
    76 0000042B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000479 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000047C 58                  <2>  db "X"
    76 0000047D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000004CB 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000004CE 58                  <2>  db "X"
    76 000004CF 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000051D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000520 58                  <2>  db "X"
    76 00000521 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000056F 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000572 58                  <2>  db "X"
    76 00000573 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000005C1 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005C4 58                  <2>  db "X"
    76 000005C5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000613 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000616 58                  <2>  db "X"
    76 00000617 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000665 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000668 58                  <2>  db "X"
    76 00000669 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000006B7 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000006BA 58                  <2>  db "X"
    76 000006BB 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000709 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000070C 58                  <2>  db "X"
    76 0000070D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000075B 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000075E 58                  <2>  db "X"
    76 0000075F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007AD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000007B0 58                  <2>  db "X"
    76 000007B1 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007FF 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000802 58                  <2>  db "X"
    76 00000803 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000851 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000854 58                  <2>  db "X"
    76 00000855 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008A3 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008A6 58                  <2>  db "X"
    76 000008A7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008F5 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008F8 58                  <2>  db "X"
    76 000008F9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000947 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000094A 58                  <2>  db "X"
    76 0000094B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000999 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000099C 58                  <2>  db "X"
    76 0000099D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000009EB 580A0D              <2>  db "X", 0x0a, 0xD
   120                                          full_line
    70 000009EE 58<rep 50h>         <1>  times column_cells db "X"
    71 00000A3E 0A0D                <1>  db 0x0a, 0xD
   121                                      board_template_size: equ $ - board_template
   122                                  
   123                                      ; Espacio real que se usará en la ejecución
   124 00000A40 00<rep A40h>                board: times board_template_size db 0
   125                                      board_size: equ board_template_size
   126                                  
   127                                  	; Added for the terminal issue
   128 00001480 00<rep 24h>             	termios:        times 36 db 0
   129                                  	stdin:          equ 0
   130                                  	ICANON:         equ 1<<1
   131                                  	ECHO:           equ 1<<3
   132                                  	VTIME: 			equ 5
   133                                  	VMIN:			equ 6
   134                                  	CC_C:			equ 18
   135                                  
   136                                  section .text
   137                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   138                                  canonical_off:
   139 0000012B E86F000000                      call read_stdin_termios
   140                                  
   141                                          ; clear canonical bit in local mode flags
   142 00000130 50                              push rax
   143 00000131 B802000000                      mov eax, ICANON
   144 00000136 F7D0                            not eax
   145 00000138 2105(8C140000)                  and [termios+12], eax
   146 0000013E C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   147 00000145 C605(98140000)00        		mov byte[termios+CC_C+VMIN], 0
   148 0000014C 58                              pop rax
   149                                  
   150 0000014D E86C000000                      call write_stdin_termios
   151 00000152 C3                              ret
   152                                  
   153                                  echo_off:
   154 00000153 E847000000                      call read_stdin_termios
   155                                  
   156                                          ; clear echo bit in local mode flags
   157 00000158 50                              push rax
   158 00000159 B808000000                      mov eax, ECHO
   159 0000015E F7D0                            not eax
   160 00000160 2105(8C140000)                  and [termios+12], eax
   161 00000166 58                              pop rax
   162                                  
   163 00000167 E852000000                      call write_stdin_termios
   164 0000016C C3                              ret
   165                                  
   166                                  canonical_on:
   167 0000016D E82D000000                      call read_stdin_termios
   168                                  
   169                                          ; set canonical bit in local mode flags
   170 00000172 830D(8C140000)02                or dword [termios+12], ICANON
   171 00000179 C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   172 00000180 C605(98140000)01        		mov byte[termios+CC_C+VMIN], 1
   173 00000187 E832000000                      call write_stdin_termios
   174 0000018C C3                              ret
   175                                  
   176                                  echo_on:
   177 0000018D E80D000000                      call read_stdin_termios
   178                                  
   179                                          ; set echo bit in local mode flags
   180 00000192 830D(8C140000)08                or dword [termios+12], ECHO
   181                                  
   182 00000199 E820000000                      call write_stdin_termios
   183 0000019E C3                              ret
   184                                  
   185                                  read_stdin_termios:
   186 0000019F 50                              push rax
   187 000001A0 53                              push rbx
   188 000001A1 51                              push rcx
   189 000001A2 52                              push rdx
   190                                  
   191 000001A3 B836000000                      mov eax, 36h
   192 000001A8 BB00000000                      mov ebx, stdin
   193 000001AD B901540000                      mov ecx, 5401h
   194 000001B2 BA[80140000]                    mov edx, termios
   195 000001B7 CD80                            int 80h
   196                                  
   197 000001B9 5A                              pop rdx
   198 000001BA 59                              pop rcx
   199 000001BB 5B                              pop rbx
   200 000001BC 58                              pop rax
   201 000001BD C3                              ret
   202                                  
   203                                  write_stdin_termios:
   204 000001BE 50                              push rax
   205 000001BF 53                              push rbx
   206 000001C0 51                              push rcx
   207 000001C1 52                              push rdx
   208                                  
   209 000001C2 B836000000                      mov eax, 36h
   210 000001C7 BB00000000                      mov ebx, stdin
   211 000001CC B902540000                      mov ecx, 5402h
   212 000001D1 BA[80140000]                    mov edx, termios
   213 000001D6 CD80                            int 80h
   214                                  
   215 000001D8 5A                              pop rdx
   216 000001D9 59                              pop rcx
   217 000001DA 5B                              pop rbx
   218 000001DB 58                              pop rax
   219 000001DC C3                              ret
   220                                  
   221                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   222                                  
   223                                  char_equal: equ 61
   224                                  char_space: equ 32
   225                                  char_O: equ 79
   226                                  left_direction: equ -1
   227                                  right_direction: equ 1
   228                                  
   229                                  
   230                                  section .data
   231                                  
   232                                  ; Mensajes para los niveles
   233 000014A4 4E4956454C20                level_msg: db "NIVEL "
   234                                      level_msg_len: equ $ - level_msg
   235 000014AA 31                          level_1_char: db "1"
   236 000014AB 32                          level_2_char: db "2"
   237 000014AC 33                          level_3_char: db "3"
   238 000014AD 34                          level_4_char: db "4"
   239 000014AE 35                          level_5_char: db "5"
   240                                      level_char_len: equ 1
   241                                  
   242                                      ; Timespec para la pausa del mensaje de nivel
   243                                      level_display_time:
   244 000014AF 0100000000000000                lvl_tv_sec dq 1           ; 1 segundo
   245 000014B7 0000000000000000                lvl_tv_nsec dq 0
   246                                          
   247 000014BF [B013000000000000]      	pallet_position dq board + 38 + 29 * (column_cells +2)
   248 000014C7 0500000000000000            pallet_size dq 5
   249 000014CF 0500000000000000            default_pallet_size dq 5    ; Tamaño normal de la paleta
   250 000014D7 0700000000000000            extended_pallet_size dq 7   ; Tamaño extendido de la paleta
   251                                  
   252 000014DF 2800000000000000        	ball_x_pos: dq 40
   253 000014E7 1C00000000000000        	ball_y_pos: dq 28
   254 000014EF 0100000000000000            ball_direction_x dq 1    ; 1 = derecha, -1 = izquierda
   255 000014F7 FFFFFFFFFFFFFFFF            ball_direction_y dq -1   ; -1 = arriba, 1 = abajo
   256 000014FF 00                          ball_moving db 0         ; 0 = estática, 1 = en movimiento
   257 00001500 00                          ball_active db 0
   258                                  
   259 00001501 0000000000000000            ball2_x_pos:        dq 0
   260 00001509 0000000000000000            ball2_y_pos:        dq 0
   261 00001511 0000000000000000            ball2_direction_x:  dq 0
   262 00001519 0000000000000000            ball2_direction_y:  dq 0
   263 00001521 00                          ball2_moving:       db 0    ; 0 = estática, 1 = en movimiento
   264 00001522 00                          ball2_active:       db 0    ; 0 = inactiva, 1 = activa
   265                                  
   266                                      ; -- Pelota 3 --
   267 00001523 0000000000000000            ball3_x_pos:        dq 0
   268 0000152B 0000000000000000            ball3_y_pos:        dq 0
   269 00001533 0000000000000000            ball3_direction_x:  dq 0
   270 0000153B 0000000000000000            ball3_direction_y:  dq 0
   271 00001543 00                          ball3_moving:       db 0
   272 00001544 00                          ball3_active:       db 0
   273                                  
   274                                  
   275                                  ; Definir los límites de la pantalla o área de juego
   276                                      board_top_left_x equ 1
   277                                      board_top_left_y equ 1
   278                                      board_bottom_right_x equ column_cells - 1
   279                                      board_bottom_right_y equ row_cells
   280                                  
   281                                      ; Limites laterales
   282                                      left_edge equ board_top_left_x               ; Límite izquierdo en la primera columna
   283                                      right_edge equ board_bottom_right_x         ; Límite derecho en la última columna
   284                                  
   285                                      ; O también puedes hacerlo así si prefieres usando las coordenadas en memoria para obtener la ubicación exacta:
   286 00001545 [920A000000000000]          left_edge_position dq board + (board_top_left_y * (column_cells + 2)) ; Coordenada de la parte izquierda del marco
   287 0000154D [E00A000000000000]          right_edge_position dq board + (board_top_left_y * (column_cells + 2) + board_bottom_right_x - 1) ; Coordenada de la parte derecha del marco
   288                                  
   289                                      ; Definición de tipos de bloques
   290 00001555 555555555555                block_type_1: db "UUUUUU"    ; Durabilidad 1
   291 0000155B 4F4F4F4F4F4F                block_type_2: db "OOOOOO"    ; Durabilidad 2
   292 00001561 444444444444                block_type_3: db "DDDDDD"    ; Durabilidad 3
   293 00001567 4C4C4C4C4C4C                block_type_4: db "LLLLLL"    ; Durabilidad 4
   294 0000156D 565656565656                block_type_5: db "VVVVVV"    ; Durabilidad 5
   295 00001573 383838383838                block_type_6: db "888888"    ; Durabilidad 6
   296                                      block_length: equ 6        ; Longitud de cada bloque
   297                                  
   298                                      ; Estructura para el nivel actual
   299 00001579 05                          current_level db 5
   300 0000157A 00                          blocks_remaining db 0
   301                                  
   302                                      ; Definición del nivel 1 (ejemplo con múltiples bloques)destroyed_blocks
   303                                      ; Formato: x_pos, y_pos, tipo_bloque, durabilidad_actual
   304                                      level1_blocks:
   305                                          ; Tercera fila (tipo 3)
   306 0000157B 0105050220                      db 1, 5, 5, 2, ' '   
   307 00001580 0705050220                      db 7, 5, 5, 2, ' '    
   308 00001585 0D05050220                      db 13, 5, 5, 2, ' '   
   309 0000158A 1305050220                      db 19, 5, 5, 2, ' '   
   310 0000158F 1905050220                      db 25, 5, 5, 2, ' '   
   311 00001594 1F05050220                      db 31, 5, 5, 2, ' '   
   312 00001599 2505050220                      db 37, 5, 5, 2, ' '   
   313 0000159E 2B05050220                      db 43, 5, 5, 2, ' '   
   314 000015A3 3105050220                      db 49, 5, 5, 2, ' '   
   315 000015A8 3705050220                      db 55, 5, 5, 2, ' '   
   316 000015AD 3D05050220                      db 61, 5, 5, 2, ' '  
   317 000015B2 4305050220                      db 67, 5, 5, 2, ' '   
   318 000015B7 4905050220                      db 73, 5, 5, 2, ' '   
   319                                  
   320 000015BC 0106040120                      db 1, 6, 4, 1, ' '   
   321 000015C1 0706020120                      db 7, 6, 2, 1, ' '    
   322 000015C6 0D06040120                      db 13, 6, 4, 1, ' '   
   323 000015CB 1306020120                      db 19, 6, 2, 1, ' '   
   324 000015D0 1906040120                      db 25, 6, 4, 1, ' '   
   325 000015D5 1F06020120                      db 31, 6, 2, 1, ' '   
   326 000015DA 2506040120                      db 37, 6, 4, 1, ' '   
   327 000015DF 2B06020120                      db 43, 6, 2, 1, ' '   
   328 000015E4 3106040120                      db 49, 6, 4, 1, ' '   
   329 000015E9 3706020120                      db 55, 6, 2, 1, ' '   
   330 000015EE 3D06040120                      db 61, 6, 4, 1, ' '  
   331 000015F3 4306020120                      db 67, 6, 2, 1, ' '   
   332 000015F8 4906040120                      db 73, 6, 4, 1, ' ' 
   333                                  
   334 000015FD 0107010120                      db 1, 7, 1, 1, ' '   
   335 00001602 0707030120                      db 7, 7, 3, 1, ' '    
   336 00001607 0D07010120                      db 13, 7, 1, 1, ' '   
   337 0000160C 1307030120                      db 19, 7, 3, 1, ' '   
   338 00001611 1907010120                      db 25, 7, 1, 1, ' '   
   339 00001616 1F07030120                      db 31, 7, 3, 1, ' '   
   340 0000161B 2507010120                      db 37, 7, 1, 1, ' '   
   341 00001620 2B07030120                      db 43, 7, 3, 1, ' '   
   342 00001625 3107010120                      db 49, 7, 1, 1, ' '   
   343 0000162A 3707030120                      db 55, 7, 3, 1, ' '   
   344 0000162F 3D07010120                      db 61, 7, 1, 1, ' '  
   345 00001634 4307030120                      db 67, 7, 3, 1, ' '   
   346 00001639 4907010120                      db 73, 7, 1, 1, ' ' 
   347                                  
   348 0000163E 0108040120                      db 1, 8, 4, 1, ' '   
   349 00001643 0708020120                      db 7, 8, 2, 1, ' '    
   350 00001648 0D08040120                      db 13, 8, 4, 1, ' '   
   351 0000164D 1308020120                      db 19, 8, 2, 1, ' '   
   352 00001652 1908040120                      db 25, 8, 4, 1, ' '   
   353 00001657 1F08020120                      db 31, 8, 2, 1, ' '   
   354 0000165C 2508040120                      db 37, 8, 4, 1, ' '   
   355 00001661 2B08020120                      db 43, 8, 2, 1, ' '   
   356 00001666 3108040120                      db 49, 8, 4, 1, ' '   
   357 0000166B 3708020120                      db 55, 8, 2, 1, ' '   
   358 00001670 3D08040120                      db 61, 8, 4, 1, ' '  
   359 00001675 4308020120                      db 67, 8, 2, 1, ' '   
   360 0000167A 4908040120                      db 73, 8, 4, 1, ' ' 
   361                                  
   362 0000167F 0109010120                      db 1, 9, 1, 1, ' '   
   363 00001684 0709030120                      db 7, 9, 3, 1, ' '    
   364 00001689 0D09010120                      db 13, 9, 1, 1, ' '   
   365 0000168E 1309030120                      db 19, 9, 3, 1, ' '   
   366 00001693 1909010120                      db 25, 9, 1, 1, ' '   
   367 00001698 1F09030120                      db 31, 9, 3, 1, ' '   
   368 0000169D 2509010120                      db 37, 9, 1, 1, ' '   
   369 000016A2 2B09030120                      db 43, 9, 3, 1, ' '   
   370 000016A7 3109010120                      db 49, 9, 1, 1, ' '   
   371 000016AC 3709030120                      db 55, 9, 3, 1, ' '   
   372 000016B1 3D09010120                      db 61, 9, 1, 1, ' '  
   373 000016B6 4309030120                      db 67, 9, 3, 1, ' '   
   374 000016BB 4909010120                      db 73, 9, 1, 1, ' ' 
   375                                  
   376 000016C0 010A040120                      db 1, 10, 4, 1, ' '   
   377 000016C5 070A020120                      db 7, 10, 2, 1, ' '    
   378 000016CA 0D0A040120                      db 13, 10, 4, 1, ' '   
   379 000016CF 130A020120                      db 19, 10, 2, 1, ' '   
   380 000016D4 190A040120                      db 25, 10, 4, 1, ' '   
   381 000016D9 1F0A020120                      db 31, 10, 2, 1, ' '   
   382 000016DE 250A040120                      db 37, 10, 4, 1, ' '   
   383 000016E3 2B0A020120                      db 43, 10, 2, 1, ' '   
   384 000016E8 310A040120                      db 49, 10, 4, 1, ' '   
   385 000016ED 370A02014C                      db 55, 10, 2, 1, 'L'   
   386 000016F2 3D0A040120                      db 61, 10, 4, 1, ' '  
   387 000016F7 430A020120                      db 67, 10, 2, 1, ' '   
   388 000016FC 490A040120                      db 73, 10, 4, 1, ' ' 
   389                                  
   390                                      level1_blocks_count equ 78   ; Cantidad total de bloques
   391                                  
   392                                      ; Nivel 2: Bloques de prueba
   393                                      level2_blocks:
   394 00001701 0103040120                      db 1, 3, 4, 1, ' '
   395                                  
   396 00001706 0104030120                      db 1, 4, 3, 1, ' '   
   397 0000170B 0704040120                      db 7, 4, 4, 1, ' '   
   398                                                  
   399 00001710 0105020120                      db 1, 5, 2, 1, ' '   
   400 00001715 0705030120                      db 7, 5, 3, 1, ' '
   401 0000171A 0D05040120                      db 13, 5, 4, 1, ' '
   402                                  
   403 0000171F 0106010120                      db 1, 6, 1, 1, ' '   
   404 00001724 0706020120                      db 7, 6, 2, 1, ' '
   405 00001729 0D06030120                      db 13, 6, 3, 1, ' '
   406 0000172E 1306040120                      db 19, 6, 4, 1, ' '   
   407                                  
   408 00001733 0107040120                      db 1, 7, 4, 1, ' '   
   409 00001738 0707010120                      db 7, 7, 1, 1, ' '
   410 0000173D 0D07020120                      db 13, 7, 2, 1, ' '
   411 00001742 1307030120                      db 19, 7, 3, 1, ' '  
   412 00001747 1907040120                      db 25, 7, 4, 1, ' '   
   413                                  
   414 0000174C 0108030120                      db 1, 8, 3, 1, ' '   
   415 00001751 0708040120                      db 7, 8, 4, 1, ' '
   416 00001756 0D08010120                      db 13, 8, 1, 1, ' '
   417 0000175B 1308020120                      db 19, 8, 2, 1, ' '  
   418 00001760 1908030120                      db 25, 8, 3, 1, ' ' 
   419 00001765 1F08040120                      db 31, 8, 4, 1, ' '   
   420                                  
   421 0000176A 0109020120                      db 1, 9, 2, 1, ' '   
   422 0000176F 0709030120                      db 7, 9, 3, 1, ' '
   423 00001774 0D09040120                      db 13, 9, 4, 1, ' '
   424 00001779 1309010120                      db 19, 9, 1, 1, ' '  
   425 0000177E 1909020120                      db 25, 9, 2, 1, ' ' 
   426 00001783 1F09030120                      db 31, 9, 3, 1, ' ' 
   427 00001788 2509040120                      db 37, 9, 4, 1, ' '   
   428                                  
   429 0000178D 010A010120                      db 1, 10, 1, 1, ' '   
   430 00001792 070A020120                      db 7, 10, 2, 1, ' '
   431 00001797 0D0A030120                      db 13, 10, 3, 1, ' '
   432 0000179C 130A040120                      db 19, 10, 4, 1, ' '  
   433 000017A1 190A010120                      db 25, 10, 1, 1, ' ' 
   434 000017A6 1F0A020120                      db 31, 10, 2, 1, ' ' 
   435 000017AB 250A030120                      db 37, 10, 3, 1, ' '  
   436 000017B0 2B0A040120                      db 43, 10, 4, 1, ' '   
   437                                  
   438 000017B5 010B040120                      db 1, 11, 4, 1, ' '   
   439 000017BA 070B010120                      db 7, 11, 1, 1, ' '
   440 000017BF 0D0B020120                      db 13, 11, 2, 1, ' '
   441 000017C4 130B030120                      db 19, 11, 3, 1, ' '  
   442 000017C9 190B040120                      db 25, 11, 4, 1, ' ' 
   443 000017CE 1F0B010120                      db 31, 11, 1, 1, ' ' 
   444 000017D3 250B020120                      db 37, 11, 2, 1, ' '  
   445 000017D8 2B0B030120                      db 43, 11, 3, 1, ' ' 
   446 000017DD 310B040120                      db 49, 11, 4, 1, ' '   
   447                                  
   448 000017E2 010C030120                      db 1, 12, 3, 1, ' '   
   449 000017E7 070C040120                      db 7, 12, 4, 1, ' '
   450 000017EC 0D0C010120                      db 13, 12, 1, 1, ' '
   451 000017F1 130C020120                      db 19, 12, 2, 1, ' '  
   452 000017F6 190C030120                      db 25, 12, 3, 1, ' ' 
   453 000017FB 1F0C040120                      db 31, 12, 4, 1, ' ' 
   454 00001800 250C010120                      db 37, 12, 1, 1, ' '  
   455 00001805 2B0C020120                      db 43, 12, 2, 1, ' ' 
   456 0000180A 310C030120                      db 49, 12, 3, 1, ' '
   457 0000180F 370C040120                      db 55, 12, 4, 1, ' '   
   458                                  
   459 00001814 010D020120                      db 1, 13, 2, 1, ' '   
   460 00001819 070D030120                      db 7, 13, 3, 1, ' '
   461 0000181E 0D0D040120                      db 13, 13, 4, 1, ' '
   462 00001823 130D010120                      db 19, 13, 1, 1, ' '  
   463 00001828 190D020120                      db 25, 13, 2, 1, ' ' 
   464 0000182D 1F0D030120                      db 31, 13, 3, 1, ' ' 
   465 00001832 250D040120                      db 37, 13, 4, 1, ' '  
   466 00001837 2B0D010120                      db 43, 13, 1, 1, ' ' 
   467 0000183C 310D020120                      db 49, 13, 2, 1, ' '
   468 00001841 370D030120                      db 55, 13, 3, 1, ' ' 
   469 00001846 3D0D040120                      db 61, 13, 4, 1, ' '   
   470                                  
   471 0000184B 010E010120                      db 1, 14, 1, 1, ' '   
   472 00001850 070E020120                      db 7, 14, 2, 1, ' '
   473 00001855 0D0E030120                      db 13, 14, 3, 1, ' '
   474 0000185A 130E040120                      db 19, 14, 4, 1, ' '  
   475 0000185F 190E010120                      db 25, 14, 1, 1, ' ' 
   476 00001864 1F0E020120                      db 31, 14, 2, 1, ' ' 
   477 00001869 250E030120                      db 37, 14, 3, 1, ' '  
   478 0000186E 2B0E040120                      db 43, 14, 4, 1, ' ' 
   479 00001873 310E010120                      db 49, 14, 1, 1, ' '
   480 00001878 370E020120                      db 55, 14, 2, 1, ' ' 
   481 0000187D 3D0E030120                      db 61, 14, 3, 1, ' '  
   482 00001882 430E040120                      db 67, 14, 4, 1, ' '   
   483                                  
   484 00001887 010F050220                      db 1, 15, 5, 2, ' '   
   485 0000188C 070F050220                      db 7, 15, 5, 2, ' '
   486 00001891 0D0F050220                      db 13, 15, 5, 2, ' '
   487 00001896 130F050220                      db 19, 15, 5, 2, ' '  
   488 0000189B 190F050220                      db 25, 15, 5, 2, ' ' 
   489 000018A0 1F0F050220                      db 31, 15, 5, 2, ' ' 
   490 000018A5 250F050220                      db 37, 15, 5, 2, ' '  
   491 000018AA 2B0F050220                      db 43, 15, 5, 2, ' ' 
   492 000018AF 310F050220                      db 49, 15, 5, 2, ' '
   493 000018B4 370F050220                      db 55, 15, 5, 2, ' ' 
   494 000018B9 3D0F050220                      db 61, 15, 5, 2, ' '  
   495 000018BE 430F050220                      db 67, 15, 5, 2, ' '
   496 000018C3 490F040120                      db 73, 15, 4, 1, ' '   
   497                                         
   498                                  
   499                                      level2_blocks_count equ 91
   500                                  
   501                                      ; Nivel 3
   502                                      level3_blocks:
   503                                  
   504 000018C8 0104010120                      db 1, 4, 1, 1, ' '   
   505 000018CD 0704020120                      db 7, 4, 2, 1, ' '    
   506 000018D2 0D04010120                      db 13, 4, 1, 1, ' '   
   507 000018D7 1304020120                      db 19, 4, 2, 1, ' '   
   508 000018DC 1904010120                      db 25, 4, 1, 1, ' '   
   509 000018E1 1F04020120                      db 31, 4, 2, 1, ' '   
   510 000018E6 2504010120                      db 37, 4, 1, 1, ' '   
   511 000018EB 2B04020120                      db 43, 4, 2, 1, ' '   
   512 000018F0 3104010120                      db 49, 4, 1, 1, ' '   
   513 000018F5 3704020120                      db 55, 4, 2, 1, ' '   
   514 000018FA 3D04010120                      db 61, 4, 1, 1, ' '  
   515 000018FF 4304020120                      db 67, 4, 2, 1, ' '   
   516 00001904 4904010120                      db 73, 4, 1, 1, ' ' 
   517                                  
   518 00001909 0106040120                      db 1, 6, 4, 1, ' '   
   519 0000190E 0706040120                      db 7, 6, 4, 1, ' '    
   520 00001913 0D06040120                      db 13, 6, 4, 1, ' '   
   521 00001918 1306063C20                      db 19, 6, 6, 60, ' '   
   522 0000191D 1906063C20                      db 25, 6, 6, 60, ' '   
   523 00001922 1F06063C20                      db 31, 6, 6, 60, ' '   
   524 00001927 2506063C20                      db 37, 6, 6, 60, ' '   
   525 0000192C 2B06063C20                      db 43, 6, 6, 60, ' '   
   526 00001931 3106063C20                      db 49, 6, 6, 60, ' '   
   527 00001936 3706063C20                      db 55, 6, 6, 60, ' '   
   528 0000193B 3D06063C20                      db 61, 6, 6, 60, ' '  
   529 00001940 4306063C20                      db 67, 6, 6, 60, ' '   
   530 00001945 4906063C20                      db 73, 6, 6, 60, ' ' 
   531                                  
   532 0000194A 0108040120                      db 1, 8, 4, 1, ' '   
   533 0000194F 0708030120                      db 7, 8, 3, 1, ' '    
   534 00001954 0D08040120                      db 13, 8, 4, 1, ' '   
   535 00001959 1308030120                      db 19, 8, 3, 1, ' '   
   536 0000195E 1908040120                      db 25, 8, 4, 1, ' '   
   537 00001963 1F08030120                      db 31, 8, 3, 1, ' '   
   538 00001968 2508040120                      db 37, 8, 4, 1, ' '   
   539 0000196D 2B08030120                      db 43, 8, 3, 1, ' '   
   540 00001972 3108040120                      db 49, 8, 4, 1, ' '   
   541 00001977 3708030120                      db 55, 8, 3, 1, ' '   
   542 0000197C 3D08040120                      db 61, 8, 4, 1, ' '  
   543 00001981 4308030120                      db 67, 8, 3, 1, ' '   
   544 00001986 4908040120                      db 73, 8, 4, 1, ' ' 
   545                                  
   546 0000198B 010A063C20                      db 1, 10, 6, 60, ' '   
   547 00001990 070A063C20                      db 7, 10, 6, 60, ' '    
   548 00001995 0D0A063C20                      db 13, 10, 6, 60, ' '   
   549 0000199A 130A063C20                      db 19, 10, 6, 60, ' '   
   550 0000199F 190A063C20                      db 25, 10, 6, 60, ' '   
   551 000019A4 1F0A063C20                      db 31, 10, 6, 60, ' '   
   552 000019A9 250A063C20                      db 37, 10, 6, 60, ' '   
   553 000019AE 2B0A063C20                      db 43, 10, 6, 60, ' '   
   554 000019B3 310A063C20                      db 49, 10, 6, 60, ' '   
   555 000019B8 370A063C20                      db 55, 10, 6, 60, ' '   
   556 000019BD 3D0A030120                      db 61, 10, 3, 1, ' '  
   557 000019C2 430A030120                      db 67, 10, 3, 1, ' '   
   558 000019C7 490A030120                      db 73, 10, 3, 1, ' ' 
   559                                  
   560 000019CC 010C010120                      db 1, 12, 1, 1, ' '   
   561 000019D1 070C020120                      db 7, 12, 2, 1, ' '    
   562 000019D6 0D0C010120                      db 13, 12, 1, 1, ' '   
   563 000019DB 130C020120                      db 19, 12, 2, 1, ' '   
   564 000019E0 190C010120                      db 25, 12, 1, 1, ' '   
   565 000019E5 1F0C020120                      db 31, 12, 2, 1, ' '   
   566 000019EA 250C010120                      db 37, 12, 1, 1, ' '   
   567 000019EF 2B0C020120                      db 43, 12, 2, 1, ' '   
   568 000019F4 310C010120                      db 49, 12, 1, 1, ' '   
   569 000019F9 370C020120                      db 55, 12, 2, 1, ' '   
   570 000019FE 3D0C010120                      db 61, 12, 1, 1, ' '  
   571 00001A03 430C020120                      db 67, 12, 2, 1, ' '   
   572 00001A08 490C010120                      db 73, 12, 1, 1, ' ' 
   573                                  
   574 00001A0D 010E020120                      db 1, 14, 2, 1, ' '   
   575 00001A12 070E020120                      db 7, 14, 2, 1, ' '    
   576 00001A17 0D0E020120                      db 13, 14, 2, 1, ' '   
   577 00001A1C 130E063C20                      db 19, 14, 6, 60, ' '   
   578 00001A21 190E063C20                      db 25, 14, 6, 60, ' '   
   579 00001A26 1F0E063C20                      db 31, 14, 6, 60, ' '   
   580 00001A2B 250E063C20                      db 37, 14, 6, 60, ' '   
   581 00001A30 2B0E063C20                      db 43, 14, 6, 60, ' '   
   582 00001A35 310E063C20                      db 49, 14, 6, 60, ' '   
   583 00001A3A 370E063C20                      db 55, 14, 6, 60, ' '   
   584 00001A3F 3D0E063C20                      db 61, 14, 6, 60, ' '  
   585 00001A44 430E063C20                      db 67, 14, 6, 60, ' '   
   586 00001A49 490E063C20                      db 73, 14, 6, 60, ' ' 
   587                                  
   588 00001A4E 0110020120                      db 1, 16, 2, 1, ' '   
   589 00001A53 0710030120                      db 7, 16, 3, 1, ' '    
   590 00001A58 0D10020120                      db 13, 16, 2, 1, ' '   
   591 00001A5D 1310030120                      db 19, 16, 3, 1, ' '   
   592 00001A62 1910020120                      db 25, 16, 2, 1, ' '   
   593 00001A67 1F10030120                      db 31, 16, 3, 1, ' '   
   594 00001A6C 2510020120                      db 37, 16, 2, 1, ' '   
   595 00001A71 2B10030120                      db 43, 16, 3, 1, ' '   
   596 00001A76 3110020120                      db 49, 16, 2, 1, ' '   
   597 00001A7B 3710030120                      db 55, 16, 3, 1, ' '   
   598 00001A80 3D10020120                      db 61, 16, 2, 1, ' '  
   599 00001A85 4310030120                      db 67, 16, 3, 1, ' '   
   600 00001A8A 4910020120                      db 73, 16, 2, 1, ' ' 
   601                                  
   602                                  
   603 00001A8F 0112063C20                      db 1, 18, 6, 60, ' '   
   604 00001A94 0712063C20                      db 7, 18, 6, 60, ' '    
   605 00001A99 0D12063C20                      db 13, 18, 6, 60, ' '   
   606 00001A9E 1312063C20                      db 19, 18, 6, 60, ' '   
   607 00001AA3 1912063C20                      db 25, 18, 6, 60, ' '   
   608 00001AA8 1F12063C20                      db 31, 18, 6, 60, ' '   
   609 00001AAD 2512063C20                      db 37, 18, 6, 60, ' '   
   610 00001AB2 2B12063C20                      db 43, 18, 6, 60, ' '   
   611 00001AB7 3112063C20                      db 49, 18, 6, 60, ' '   
   612 00001ABC 3712063C20                      db 55, 18, 6, 60, ' '   
   613 00001AC1 3D12010120                      db 61, 18, 1, 1, ' '  
   614 00001AC6 4312010120                      db 67, 18, 1, 1, ' '   
   615 00001ACB 4912010120                      db 73, 18, 1, 1, ' ' 
   616                                  
   617                                      level3_blocks_count equ 104
   618                                  
   619                                      ; Nivel 4
   620                                      level4_blocks:
   621                                  
   622 00001AD0 0704010120                      db 7, 4, 1, 1, ' '    
   623 00001AD5 0D04020120                      db 13, 4, 2, 1, ' '   
   624 00001ADA 1304030120                      db 19, 4, 3, 1, ' '   
   625 00001ADF 1904050220                      db 25, 4, 5, 2, ' '   
   626 00001AE4 1F04020120                      db 31, 4, 2, 1, ' '
   627                                  
   628 00001AE9 2B04010120                      db 43, 4, 1, 1, ' '   
   629 00001AEE 3104020120                      db 49, 4, 2, 1, ' '   
   630 00001AF3 3704030120                      db 55, 4, 3, 1, ' '   
   631 00001AF8 3D04040120                      db 61, 4, 4, 1, ' '  
   632 00001AFD 4304020120                      db 67, 4, 2, 1, ' ' 
   633                                  
   634 00001B02 0705020120                      db 7, 5, 2, 1, ' '    
   635 00001B07 0D05030120                      db 13, 5, 3, 1, ' '   
   636 00001B0C 1305050220                      db 19, 5, 5, 2, ' '   
   637 00001B11 1905020120                      db 25, 5, 2, 1, ' '   
   638 00001B16 1F05010120                      db 31, 5, 1, 1, ' '
   639                                  
   640 00001B1B 2B05020120                      db 43, 5, 2, 1, ' '   
   641 00001B20 3105030120                      db 49, 5, 3, 1, ' '   
   642 00001B25 3705040120                      db 55, 5, 4, 1, ' '   
   643 00001B2A 3D05020120                      db 61, 5, 2, 1, ' '  
   644 00001B2F 4305050220                      db 67, 5, 5, 2, ' '  
   645                                  
   646 00001B34 0706030120                      db 7, 6, 3, 1, ' '    
   647 00001B39 0D06050220                      db 13, 6, 5, 2, ' '   
   648 00001B3E 1306020120                      db 19, 6, 2, 1, ' '   
   649 00001B43 1906010120                      db 25, 6, 1, 1, ' '   
   650 00001B48 1F06020120                      db 31, 6, 2, 1, ' '
   651                                  
   652 00001B4D 2B06030120                      db 43, 6, 3, 1, ' '   
   653 00001B52 3106040120                      db 49, 6, 4, 1, ' '   
   654 00001B57 3706020120                      db 55, 6, 2, 1, ' '   
   655 00001B5C 3D06050220                      db 61, 6, 5, 2, ' '  
   656 00001B61 4306020120                      db 67, 6, 2, 1, ' '
   657                                  
   658 00001B66 0707050220                      db 7, 7, 5, 2, ' '    
   659 00001B6B 0D07020120                      db 13, 7, 2, 1, ' '   
   660 00001B70 1307010120                      db 19, 7, 1, 1, ' '   
   661 00001B75 1907020120                      db 25, 7, 2, 1, ' '   
   662 00001B7A 1F07030120                      db 31, 7, 3, 1, ' '
   663                                  
   664 00001B7F 2B07040120                      db 43, 7, 4, 1, ' '   
   665 00001B84 3107020120                      db 49, 7, 2, 1, ' '   
   666 00001B89 3707050220                      db 55, 7, 5, 2, ' '   
   667 00001B8E 3D07020120                      db 61, 7, 2, 1, ' '  
   668 00001B93 4307030120                      db 67, 7, 3, 1, ' '
   669                                  
   670 00001B98 0708020120                      db 7, 8, 2, 1, ' '    
   671 00001B9D 0D08010120                      db 13, 8, 1, 1, ' '   
   672 00001BA2 1308020120                      db 19, 8, 2, 1, ' '   
   673 00001BA7 1908030120                      db 25, 8, 3, 1, ' '   
   674 00001BAC 1F08040120                      db 31, 8, 4, 1, ' '
   675                                  
   676 00001BB1 2B08020120                      db 43, 8, 2, 1, ' '   
   677 00001BB6 3108050220                      db 49, 8, 5, 2, ' '   
   678 00001BBB 3708020120                      db 55, 8, 2, 1, ' '   
   679 00001BC0 3D08030120                      db 61, 8, 3, 1, ' '  
   680 00001BC5 4308040120                      db 67, 8, 4, 1, ' '
   681                                  
   682 00001BCA 0709010120                      db 7, 9, 1, 1, ' '    
   683 00001BCF 0D09020120                      db 13, 9, 2, 1, ' '   
   684 00001BD4 1309030120                      db 19, 9, 3, 1, ' '   
   685 00001BD9 1909040120                      db 25, 9, 4, 1, ' '   
   686 00001BDE 1F09020120                      db 31, 9, 2, 1, ' '
   687                                  
   688 00001BE3 2B09050220                      db 43, 9, 5, 2, ' '   
   689 00001BE8 3109020120                      db 49, 9, 2, 1, ' '   
   690 00001BED 3709030120                      db 55, 9, 3, 1, ' '   
   691 00001BF2 3D09040120                      db 61, 9, 4, 1, ' '  
   692 00001BF7 4309020120                      db 67, 9, 2, 1, ' '
   693                                  
   694 00001BFC 070A020120                      db 7, 10, 2, 1, ' '    
   695 00001C01 0D0A030120                      db 13, 10, 3, 1, ' '   
   696 00001C06 130A040120                      db 19, 10, 4, 1, ' '   
   697 00001C0B 190A020120                      db 25, 10, 2, 1, ' '   
   698 00001C10 1F0A010120                      db 31, 10, 1, 1, ' '
   699                                  
   700 00001C15 2B0A020120                      db 43, 10, 2, 1, ' '   
   701 00001C1A 310A030120                      db 49, 10, 3, 1, ' '   
   702 00001C1F 370A040120                      db 55, 10, 4, 1, ' '   
   703 00001C24 3D0A020120                      db 61, 10, 2, 1, ' '  
   704 00001C29 430A010120                      db 67, 10, 1, 1, ' '
   705                                  
   706 00001C2E 070B030120                      db 7, 11, 3, 1, ' '   
   707 00001C33 0D0B040120                      db 13, 11, 4, 1, ' '   
   708 00001C38 130B020120                      db 19, 11, 2, 1, ' '   
   709 00001C3D 190B010120                      db 25, 11, 1, 1, ' '  
   710 00001C42 1F0B050220                      db 31, 11, 5, 2, ' '
   711                                  
   712 00001C47 2B0B030120                      db 43, 11, 3, 1, ' '   
   713 00001C4C 310B040120                      db 49, 11, 4, 1, ' '   
   714 00001C51 370B020120                      db 55, 11, 2, 1, ' '   
   715 00001C56 3D0B010120                      db 61, 11, 1, 1, ' '  
   716 00001C5B 430B020120                      db 67, 11, 2, 1, ' '
   717                                  
   718 00001C60 070C040120                      db 7, 12, 4, 1, ' '   
   719 00001C65 0D0C020120                      db 13, 12, 2, 1, ' '   
   720 00001C6A 130C010120                      db 19, 12, 1, 1, ' '   
   721 00001C6F 190C050220                      db 25, 12, 5, 2, ' '  
   722 00001C74 1F0C030120                      db 31, 12, 3, 1, ' '
   723                                  
   724 00001C79 2B0C040120                      db 43, 12, 4, 1, ' '    
   725 00001C7E 310C020120                      db 49, 12, 2, 1, ' '   
   726 00001C83 370C010120                      db 55, 12, 1, 1, ' '   
   727 00001C88 3D0C020120                      db 61, 12, 2, 1, ' '   
   728 00001C8D 430C030120                      db 67, 12, 3, 1, ' '
   729                                  
   730 00001C92 070D020120                      db 7, 13, 2, 1, ' '   
   731 00001C97 0D0D010120                      db 13, 13, 1, 1, ' '   
   732 00001C9C 130D050220                      db 19, 13, 5, 2, ' '   
   733 00001CA1 190D030120                      db 25, 13, 3, 1, ' '  
   734 00001CA6 1F0D040120                      db 31, 13, 4, 1, ' '
   735                                  
   736 00001CAB 2B0D020120                      db 43, 13, 2, 1, ' '    
   737 00001CB0 310D010120                      db 49, 13, 1, 1, ' '   
   738 00001CB5 370D020120                      db 55, 13, 2, 1, ' '   
   739 00001CBA 3D0D030120                      db 61, 13, 3, 1, ' '   
   740 00001CBF 430D050220                      db 67, 13, 5, 2, ' '
   741                                  
   742 00001CC4 070E010120                      db 7, 14, 1, 1, ' '   
   743 00001CC9 0D0E050220                      db 13, 14, 5, 2, ' '   
   744 00001CCE 130E030120                      db 19, 14, 3, 1, ' '   
   745 00001CD3 190E040120                      db 25, 14, 4, 1, ' '  
   746 00001CD8 1F0E020120                      db 31, 14, 2, 1, ' '
   747                                  
   748 00001CDD 2B0E010120                      db 43, 14, 1, 1, ' '    
   749 00001CE2 310E020120                      db 49, 14, 2, 1, ' '   
   750 00001CE7 370E030120                      db 55, 14, 3, 1, ' '   
   751 00001CEC 3D0E050220                      db 61, 14, 5, 2, ' '   
   752 00001CF1 430E020120                      db 67, 14, 2, 1, ' '
   753                                  
   754 00001CF6 070F050220                      db 7, 15, 5, 2, ' '   
   755 00001CFB 0D0F030120                      db 13, 15, 3, 1, ' '   
   756 00001D00 130F040120                      db 19, 15, 4, 1, ' '   
   757 00001D05 190F020120                      db 25, 15, 2, 1, ' '  
   758 00001D0A 1F0F010120                      db 31, 15, 1, 1, ' '
   759                                  
   760 00001D0F 2B0F020120                      db 43, 15, 2, 1, ' '    
   761 00001D14 310F030120                      db 49, 15, 3, 1, ' '   
   762 00001D19 370F050220                      db 55, 15, 5, 2, ' '   
   763 00001D1E 3D0F020120                      db 61, 15, 2, 1, ' '   
   764 00001D23 430F010120                      db 67, 15, 1, 1, ' '
   765                                  
   766 00001D28 0710030120                      db 7, 16, 3, 1, ' '   
   767 00001D2D 0D10040120                      db 13, 16, 4, 1, ' '   
   768 00001D32 1310020120                      db 19, 16, 2, 1, ' '   
   769 00001D37 1910010120                      db 25, 16, 1, 1, ' '  
   770 00001D3C 1F10020120                      db 31, 16, 2, 1, ' '
   771                                  
   772 00001D41 2B10030120                      db 43, 16, 3, 1, ' '    
   773 00001D46 3110050220                      db 49, 16, 5, 2, ' '   
   774 00001D4B 3710020120                      db 55, 16, 2, 1, ' '   
   775 00001D50 3D10010120                      db 61, 16, 1, 1, ' '   
   776 00001D55 4310020120                      db 67, 16, 2, 1, ' '
   777                                  
   778 00001D5A 0711040120                      db 7, 17, 4, 1, ' '   
   779 00001D5F 0D11020120                      db 13, 17, 2, 1, ' '   
   780 00001D64 1311010120                      db 19, 17, 1, 1, ' '   
   781 00001D69 1911020120                      db 25, 17, 2, 1, ' '  
   782 00001D6E 1F11030120                      db 31, 17, 3, 1, ' '
   783                                  
   784 00001D73 2B11050220                      db 43, 17, 5, 2, ' '    
   785 00001D78 3111020120                      db 49, 17, 2, 1, ' '    
   786 00001D7D 3711010120                      db 55, 17, 1, 1, ' '   
   787 00001D82 3D11020120                      db 61, 17, 2, 1, ' '   
   788 00001D87 4311030120                      db 67, 17, 3, 1, ' '
   789                                  
   790                                      level4_blocks_count equ 140
   791                                  
   792                                      ; Nivel 5
   793                                      level5_blocks:
   794                                  
   795 00001D8C 1303020120                      db 19, 3, 2, 1, ' '   
   796 00001D91 3703020120                      db 55, 3, 2, 1, ' '   
   797                                  
   798 00001D96 1304020120                      db 19, 4, 2, 1, ' '   
   799 00001D9B 3704020120                      db 55, 4, 2, 1, ' ' 
   800                                  
   801 00001DA0 1905020120                      db 25, 5, 2, 1, ' '   
   802 00001DA5 3105020120                      db 49, 5, 2, 1, ' '   
   803                                  
   804 00001DAA 1906020120                      db 25, 6, 2, 1, ' '   
   805 00001DAF 3106020120                      db 49, 6, 2, 1, ' '   
   806                                  
   807 00001DB4 1307050220                      db 19, 7, 5, 2, ' '   
   808 00001DB9 1907050220                      db 25, 7, 5, 2, ' '  
   809 00001DBE 1F07050220                      db 31, 7, 5, 2, ' '
   810 00001DC3 2507050220                      db 37, 7, 5, 2, ' '
   811 00001DC8 2B07050220                      db 43, 7, 5, 2, ' '    
   812 00001DCD 3107050220                      db 49, 7, 5, 2, ' '    
   813 00001DD2 3707050220                      db 55, 7, 5, 2, ' '   
   814                                  
   815 00001DD7 1308050220                      db 19, 8, 5, 2, ' '   
   816 00001DDC 1908050220                      db 25, 8, 5, 2, ' '  
   817 00001DE1 1F08050220                      db 31, 8, 5, 2, ' '
   818 00001DE6 2508050220                      db 37, 8, 5, 2, ' '
   819 00001DEB 2B08050220                      db 43, 8, 5, 2, ' '    
   820 00001DF0 3108050220                      db 49, 8, 5, 2, ' '    
   821 00001DF5 3708050220                      db 55, 8, 5, 2, ' '   
   822                                  
   823 00001DFA 0D09050220                      db 13, 9, 5, 2, ' '   
   824 00001DFF 1309050220                      db 19, 9, 5, 2, ' '   
   825 00001E04 1909040120                      db 25, 9, 4, 1, ' '  
   826 00001E09 1F09050220                      db 31, 9, 5, 2, ' '
   827 00001E0E 2509050220                      db 37, 9, 5, 2, ' '
   828 00001E13 2B09050220                      db 43, 9, 5, 2, ' '    
   829 00001E18 3109040120                      db 49, 9, 4, 1, ' '    
   830 00001E1D 3709050220                      db 55, 9, 5, 2, ' '   
   831 00001E22 3D09050220                      db 61, 9, 5, 2, ' '  
   832                                  
   833 00001E27 0D0A050220                      db 13, 10, 5, 2, ' '   
   834 00001E2C 130A050220                      db 19, 10, 5, 2, ' '   
   835 00001E31 190A040120                      db 25, 10, 4, 1, ' '  
   836 00001E36 1F0A050220                      db 31, 10, 5, 2, ' '
   837 00001E3B 250A050220                      db 37, 10, 5, 2, ' '
   838 00001E40 2B0A050220                      db 43, 10, 5, 2, ' '    
   839 00001E45 310A040120                      db 49, 10, 4, 1, ' '    
   840 00001E4A 370A050220                      db 55, 10, 5, 2, ' '   
   841 00001E4F 3D0A050220                      db 61, 10, 5, 2, ' '   
   842                                          
   843 00001E54 070B050220                      db 7, 11, 5, 2, ' '   
   844 00001E59 0D0B050220                      db 13, 11, 5, 2, ' '   
   845 00001E5E 130B050220                      db 19, 11, 5, 2, ' '   
   846 00001E63 190B050220                      db 25, 11, 5, 2, ' '  
   847 00001E68 1F0B050220                      db 31, 11, 5, 2, ' '
   848 00001E6D 250B050220                      db 37, 11, 5, 2, ' '
   849 00001E72 2B0B050220                      db 43, 11, 5, 2, ' '    
   850 00001E77 310B050220                      db 49, 11, 5, 2, ' '    
   851 00001E7C 370B050220                      db 55, 11, 5, 2, ' '   
   852 00001E81 3D0B050220                      db 61, 11, 5, 2, ' '   
   853 00001E86 430B050220                      db 67, 11, 5, 2, ' '
   854                                  
   855 00001E8B 070C050220                      db 7, 12, 5, 2, ' '   
   856 00001E90 0D0C050220                      db 13, 12, 5, 2, ' '   
   857 00001E95 130C050220                      db 19, 12, 5, 2, ' '   
   858 00001E9A 190C050220                      db 25, 12, 5, 2, ' '  
   859 00001E9F 1F0C050220                      db 31, 12, 5, 2, ' '
   860 00001EA4 250C050220                      db 37, 12, 5, 2, ' '
   861 00001EA9 2B0C050220                      db 43, 12, 5, 2, ' '    
   862 00001EAE 310C050220                      db 49, 12, 5, 2, ' '    
   863 00001EB3 370C050220                      db 55, 12, 5, 2, ' '   
   864 00001EB8 3D0C050220                      db 61, 12, 5, 2, ' '   
   865 00001EBD 430C050220                      db 67, 12, 5, 2, ' '
   866                                  
   867 00001EC2 070D050220                      db 7, 13, 5, 2, ' '   
   868 00001EC7 0D0D050220                      db 13, 13, 5, 2, ' '   
   869 00001ECC 130D050220                      db 19, 13, 5, 2, ' '   
   870 00001ED1 190D050220                      db 25, 13, 5, 2, ' '  
   871 00001ED6 1F0D050220                      db 31, 13, 5, 2, ' '
   872 00001EDB 250D050220                      db 37, 13, 5, 2, ' '
   873 00001EE0 2B0D050220                      db 43, 13, 5, 2, ' '    
   874 00001EE5 310D050220                      db 49, 13, 5, 2, ' '    
   875 00001EEA 370D050220                      db 55, 13, 5, 2, ' '   
   876 00001EEF 3D0D050220                      db 61, 13, 5, 2, ' '   
   877 00001EF4 430D050220                      db 67, 13, 5, 2, ' '
   878                                  
   879                                          
   880 00001EF9 070E050220                      db 7, 14, 5, 2, ' '   
   881 00001EFE 130E050220                      db 19, 14, 5, 2, ' '   
   882 00001F03 190E050220                      db 25, 14, 5, 2, ' '  
   883 00001F08 1F0E050220                      db 31, 14, 5, 2, ' '
   884 00001F0D 250E050220                      db 37, 14, 5, 2, ' '
   885 00001F12 2B0E050220                      db 43, 14, 5, 2, ' '    
   886 00001F17 310E050220                      db 49, 14, 5, 2, ' '    
   887 00001F1C 370E050220                      db 55, 14, 5, 2, ' '   
   888 00001F21 430E050220                      db 67, 14, 5, 2, ' '
   889                                  
   890 00001F26 070F050220                      db 7, 15, 5, 2, ' '   
   891 00001F2B 130F050220                      db 19, 15, 5, 2, ' '      
   892 00001F30 370F050220                      db 55, 15, 5, 2, ' '   
   893 00001F35 430F050220                      db 67, 15, 5, 2, ' '
   894                                   
   895 00001F3A 0710050220                      db 7, 16, 5, 2, ' '   
   896 00001F3F 1310050220                      db 19, 16, 5, 2, ' '      
   897 00001F44 3710050220                      db 55, 16, 5, 2, ' '   
   898 00001F49 4310050220                      db 67, 16, 5, 2, ' '
   899                                  
   900                                  
   901 00001F4E 1911050220                      db 25, 17, 5, 2, ' '  
   902 00001F53 1F11050220                      db 31, 17, 5, 2, ' '
   903 00001F58 2B11050220                      db 43, 17, 5, 2, ' '    
   904 00001F5D 3111050220                      db 49, 17, 5, 2, ' ' 
   905                                  
   906 00001F62 1912050220                      db 25, 18, 5, 2, ' '  
   907 00001F67 1F12050220                      db 31, 18, 5, 2, ' '
   908 00001F6C 2B12050220                      db 43, 18, 5, 2, ' '    
   909 00001F71 3112050220                      db 49, 18, 5, 2, ' ' 
   910                                  
   911                                      level5_blocks_count equ 98
   912                                  
   913                                      ; Array para mantener el estado de los bloques
   914 00001F76 00<rep C8h>                 block_states: times 200 db 0  ; Durabilidad actual de cada bloque
   915                                  
   916                                      
   917                                      ; Variables para almacenar los valores
   918 0000203E 0000000000000000            current_score dq 0          ; Score actual
   919 00002046 00                          destroyed_blocks db 0       ; Bloques destruidos en el nivel actual
   920                                      
   921                                      ; Buffer para convertir números a string
   922 00002047 00<rep 14h>                 number_buffer: times 20 db 0
   923                                  
   924 0000205B 4023242640                  enemy_chars db "@", "#", "$", "&", "@"    ; El nivel 1 y 5 comparten el mismo caracter (@)
   925                                      
   926                                      ; Estructura para los enemigos (x, y, activo)
   927 00002060 00<rep 1Eh>                 enemies: times 10 * 3 db 0     ; Máximo 5 enemigos, cada uno con 3 bytes (x, y, activo)
   928 0000207E 0A                          enemies_count db 10            ; Cantidad de enemigos activos
   929                                      
   930 0000207F 3200000000000000            enemy_points dq 50              ; Puntos por destruir un enemigo
   931 00002087 00                          enemy_move_counter db 0         ; Contador para controlar velocidad de movimiento
   932 00002088 02                          enemy_move_delay db 2           ; Mover enemigos cada N ciclos
   933 00002089 00                          enemy_move_total db 0      ; Contador total de movimientos
   934 0000208A 00                          enemy_target db 0          ; 0 = persigue bola, 1 = persigue paleta
   935 0000208B 14                          MOVEMENT_THRESHOLD db 20   ; Número de movimientos antes de cambiar objetivo
   936                                   ;Formato: número de bloques destruidos necesario para que aparezca cada enemigo
   937                                      ; Añade esto en la sección .dataa
   938 0000208C 00000006080A0C0E10-         level1_spawn_points: db 0, 0, 0, 6, 8, 10, 12, 14, 16, 18    ; 10 enemigos, cada 2 bloques
   938 00002095 12                 
   939 00002096 01030507090B0D0F11-         level2_spawn_points: db 1, 3, 5, 7, 9, 11, 13, 15, 17, 19    ; 10 enemigos, cada 2 bloques
   939 0000209F 13                 
   940 000020A0 000306090C0F121518-         level3_spawn_points: db 0, 3, 6, 9, 12, 15, 18, 21, 24, 27   ; 10 enemigos, cada 3 bloques
   940 000020A9 1B                 
   941 000020AA 0104070A0D10131619-         level4_spawn_points: db 1, 4, 7, 10, 13, 16, 19, 22, 25, 28  ; 10 enemigos, cada 3 bloques
   941 000020B3 1C                 
   942 000020B4 00050A0F14191E2328-         level5_spawn_points: db 0, 5, 10, 15, 20, 25, 30, 35, 40, 45 ; 10 enemigos, cada 5 bloques
   942 000020BD 2D                 
   943                                          ; Arreglo de punteros a los spawn points de cada nivel
   944                                      spawn_points_table:
   945 000020BE [8C20000000000000]              dq level1_spawn_points
   946 000020C6 [9620000000000000]              dq level2_spawn_points
   947 000020CE [A020000000000000]              dq level3_spawn_points
   948 000020D6 [AA20000000000000]              dq level4_spawn_points
   949 000020DE [B420000000000000]              dq level5_spawn_points
   950                                  
   951                                      ; Variables para el comportamiento de enemigos
   952 000020E6 1E                          BEHAVIOR_CHANGE_TIME db 30    ; Ciclos antes de cambiar comportamiento
   953 000020E7 00                          behavior_counter db 0          ; Contador para cambio de comportamiento
   954 000020E8 00                          current_behavior db 0          ; 0 = persigue bola, 1 = persigue paleta
   955 000020E9 00<rep Ah>                  enemy_spawns_triggered: times 10 db 0  ; 0 = no spawned, 1 = spawned
   956                                  
   957 000020F3 50756E74616A653A20-         score_label: db "Puntaje: [          ]", 0xA, 0xD  ; 10 espacios para el número
   957 000020FC 5B2020202020202020-
   957 00002105 20205D0A0D         
   958                                      score_label_len: equ $ - score_label
   959 0000210A 426C6F717565732064-         blocks_label: db "Bloques destruidos: [   ]", 0xA, 0xD  ; 3 espacios para el número
   959 00002113 657374727569646F73-
   959 0000211C 3A205B2020205D0A0D 
   960                                      blocks_label_len: equ $ - blocks_label
   961                                      
   962                                      ; Posición donde insertar los números en los labels
   963                                      score_pos equ 10    ; Posición después de "Puntaje: ["
   964                                      blocks_pos equ 20   ; Posición después de "Bloques destruidos: ["
   965                                      
   966                                      ; Definición de las vidas (x, y, estado)
   967                                      ; Formato: posición_x, posición_y, estado (1 = activa, 0 = inactiva)
   968                                      lives_data: 
   969 00002125 021E01                          db 2, 30, 1     ; Vida 1 (activa)
   970 00002128 041E01                          db 4, 30, 1     ; Vida 2 (activa)
   971 0000212B 061E01                          db 6, 30, 1     ; Vida 3 (inactiva)
   972 0000212E 081E01                          db 8, 30, 1     ; Vida 4 (inactiva)
   973 00002131 0A1E01                          db 10, 30, 1    ; Vida 5 (inactiva)
   974 00002134 0C1E01                          db 12, 30, 1    ; Vida 6 (inactiva)
   975 00002137 0E1E01                          db 14, 30, 1    ; Vida 7 (inactiva)
   976                                      lives_count equ 7    ; Total de vidas
   977 0000213A 5E                          life_char db "^"    
   978 0000213B 07                          current_lives db 7   ; Contador de vidas activas actual
   979                                  
   980                                  ; Estructura para almacenar las letras y sus posiciones
   981                                      ; Formato: x, y, letra, activo (1 = activo, 0 = inactivo)
   982 0000213C 00<rep 190h>                letters_map: times 100 * 4 db 0  ; Espacio para 100 letras
   983 000022CC 00                          letters_count db 0   
   984 000022CD 20                          last_letter db ' '    ; Variable para almacenar la última letra
   985 000022CE 506F64657220616374-         last_letter_msg db "Poder actual: [ ]", 0xA, 0xD  ; Mensaje para mostrar la última letra
   985 000022D7 75616C3A205B205D0A-
   985 000022E0 0D                 
   986                                      last_letter_msg_len equ $ - last_letter_msg
   987 000022E1 00                          current_power_processed db 0 ; 0 = no procesado, 1 = ya procesado
   988 000022E2 07                          max_lives db 7              ; Máximo número de vidas permitidas
   989 000022E3 0100000000000000            ball_speed dq 1             ; Velocidad normal de la bola
   990 000022EB 0200000000000000            slow_ball_speed dq 2        ; Velocidad lenta (se usará como divisor)
   991 000022F3 0000000000000000            speed_counter dq 0          ; Contador para ralentizar el movimiento
   992                                  
   993 000022FB 00                          catch_power_active db 0     ; 0 = inactivo, 1 = activo
   994 000022FC 00                          ball_caught db 0           ; 0 = no atrapada, 1 = atrapada
   995 000022FD 00                          ball_caught_2 db 0           ; 0 = no atrapada, 1 = atrapada
   996 000022FE 00                          ball_caught_3 db 0           ; 0 = no atrapada, 1 = atrapada
   997                                  
   998 000022FF 0000000000000000            ball_catch_offset dq 0     ; Offset respecto a la paleta cuando está atrapada
   999 00002307 00                          last_key db 0    ; Variable para almacenar la última tecla presionada
  1000                                  
  1001 00002308 00                          laser_power_active: db 0         ; Flag para indicar si el poder láser está activo
  1002 00002309 7C                          laser_symbol: db '|'             ; Símbolo para representar el láser
  1003 0000230A 00                          laser_count: db 0                ; Contador de láseres activos
  1004 0000230B 00<rep C8h>                 lasers: times 200 db 0           ; Array para almacenar posiciones de láseres (x,y)
  1005 000023D3 0100000000000000            laser_speed: dq 1                ; Velocidad del láser
  1006                                  
  1007                                      balls_data:     ; Array para almacenar hasta 3 bolas
  1008                                          ; Bola 1 (principal)
  1009 000023DB 0000000000000000                dq 0        ; x_pos
  1010 000023E3 0000000000000000                dq 0        ; y_pos
  1011 000023EB 0100000000000000                dq 1        ; direction_x
  1012 000023F3 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1013 000023FB 01                              db 1        ; active
  1014                                          ; Bola 2
  1015 000023FC 0000000000000000                dq 0        ; x_pos
  1016 00002404 0000000000000000                dq 0        ; y_pos
  1017 0000240C FFFFFFFFFFFFFFFF                dq -1       ; direction_x
  1018 00002414 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1019 0000241C 00                              db 0        ; active
  1020                                          ; Bola 3
  1021 0000241D 0000000000000000                dq 0        ; x_pos
  1022 00002425 0000000000000000                dq 0        ; y_pos
  1023 0000242D 0000000000000000                dq 0        ; direction_x
  1024 00002435 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1025 0000243D 00                              db 0        ; active
  1026                                      
  1027 0000243E 01                          balls_count db 1     ; Contador de bolas activas
  1028                                      BALL_STRUCT_SIZE equ 33  ; Tamaño de cada estructura de bola (8*4 + 1)
  1029 0000243F 00<rep Ah>                  enemy_last_x:       times 10 db 0
  1030 00002449 00<rep Ah>                  enemy_last_y:       times 10 db 0
  1031 00002453 00<rep Ah>                  enemy_stuck_count:  times 10 db 0
  1032                                  
  1033                                  section .text
  1034                                  
  1035                                  
  1036                                  print_lives:
  1037 000001DD 55                          push rbp
  1038 000001DE 4889E5                      mov rbp, rsp
  1039                                      
  1040 000001E1 4D31E4                      xor r12, r12                    ; Índice de la vida actual
  1041                                      
  1042                                      .print_loop:
  1043 000001E4 4983FC07                        cmp r12, lives_count
  1044 000001E8 7D45                            jge .end
  1045                                          
  1046                                          ; Calcular offset de la vida actual
  1047 000001EA 4C89E0                          mov rax, r12
  1048 000001ED 486BC003                        imul rax, 3                     ; Cada vida ocupa 3 bytes (x, y, estado)
  1049 000001F1 488DB0[25210000]                lea rsi, [lives_data + rax]
  1050                                          
  1051                                          ; Calcular posición en el tablero
  1052 000001F8 4C0FB606                        movzx r8, byte [rsi]            ; X
  1053 000001FC 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  1054                                          
  1055                                          ; Calcular offset en el tablero
  1056 00000201 B850000000                      mov rax, column_cells
  1057 00000206 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  1058 0000020A 49F7E1                          mul r9
  1059 0000020D 4C01C0                          add rax, r8
  1060 00000210 488DB8[400A0000]                lea rdi, [board + rax]
  1061                                          
  1062                                          ; Verificar estado de la vida y dibujar el carácter correspondiente
  1063 00000217 807E0201                        cmp byte [rsi + 2], 1
  1064 0000021B 7405                            je .draw_active
  1065                                          
  1066                                          ; Si está inactiva, dibujar espacio
  1067 0000021D C60720                          mov byte [rdi], ' '
  1068 00000220 EB08                            jmp .next_life
  1069                                          
  1070                                      .draw_active:
  1071                                          ; Si está activa, dibujar el símbolo de vida
  1072 00000222 8A05(3A210000)                  mov al, [life_char]
  1073 00000228 8807                            mov [rdi], al
  1074                                          
  1075                                      .next_life:
  1076 0000022A 49FFC4                          inc r12
  1077 0000022D EBB5                            jmp .print_loop
  1078                                          
  1079                                      .end:
  1080 0000022F 5D                              pop rbp
  1081 00000230 C3                              ret
  1082                                  
  1083                                  ; Función para desactivar una vida
  1084                                  ; Función modificada para perder una vida
  1085                                  ; Modificar lose_life para reiniciar solo la bola principal
  1086                                  lose_life:
  1087 00000231 55                          push rbp
  1088 00000232 4889E5                      mov rbp, rsp
  1089                                      
  1090                                      ; Verificar si aún quedan vidas
  1091 00000235 803D(3B210000)00            cmp byte [current_lives], 0
  1092 0000023C 0F84AB000000                je .game_lost
  1093                                      
  1094                                      ; Encontrar la última vida activa
  1095 00000242 B907000000                  mov rcx, lives_count
  1096 00000247 48FFC9                      dec rcx
  1097                                      
  1098                                      .find_active_life:
  1099 0000024A 4889C8                          mov rax, rcx
  1100 0000024D 486BC003                        imul rax, 3
  1101 00000251 488DB0[25210000]                lea rsi, [lives_data + rax]
  1102 00000258 807E0201                        cmp byte [rsi + 2], 1
  1103 0000025C 740A                            je .deactivate_life
  1104 0000025E 48FFC9                          dec rcx
  1105 00000261 79E7                            jns .find_active_life
  1106 00000263 E985000000                      jmp .game_lost
  1107                                          
  1108                                      .deactivate_life:
  1109                                          ; Borrar vida visualmente y en datos
  1110 00000268 4C0FB606                        movzx r8, byte [rsi]
  1111 0000026C 4C0FB64E01                      movzx r9, byte [rsi + 1]
  1112 00000271 B850000000                      mov rax, column_cells
  1113 00000276 4883C002                        add rax, 2
  1114 0000027A 49F7E1                          mul r9
  1115 0000027D 4C01C0                          add rax, r8
  1116 00000280 488DB8[400A0000]                lea rdi, [board + rax]
  1117 00000287 C60720                          mov byte [rdi], ' '
  1118 0000028A C6460200                        mov byte [rsi + 2], 0
  1119 0000028E FE0D(3B210000)                  dec byte [current_lives]
  1120                                          
  1121                                          ; Borrar paleta anterior
  1122 00000294 4C8B05(BF140000)                mov r8, [pallet_position]
  1123 0000029B 488B0D(C7140000)                mov rcx, [pallet_size]
  1124                                          .erase_pallet_loop:
  1125 000002A2 41C60020                            mov byte [r8], ' '
  1126 000002A6 49FFC0                              inc r8
  1127 000002A9 48FFC9                              dec rcx
  1128 000002AC 75F4                                jnz .erase_pallet_loop
  1129                                          
  1130                                          ; Reiniciar solo la bola principal
  1131 000002AE 48C705(DF140000)28-             mov qword [ball_x_pos], 40
  1131 000002B6 000000             
  1132 000002B9 48C705(E7140000)1C-             mov qword [ball_y_pos], 28
  1132 000002C1 000000             
  1133 000002C4 C605(FF140000)00                mov byte [ball_moving], 0
  1134 000002CB C605(00150000)01                mov byte [ball_active], 1       ; Activar bola principal
  1135 000002D2 48C705(BF140000)-               mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  1135 000002D9 [B0130000]         
  1136                                          
  1137                                          ; Asegurarse que las otras bolas están desactivadas
  1138 000002DD C605(22150000)00                mov byte [ball2_active], 0
  1139 000002E4 C605(44150000)00                mov byte [ball3_active], 0
  1140                                          
  1141 000002EB EB07                            jmp .end
  1142                                          
  1143                                      .game_lost:
  1144 000002ED E8C7000000                      call game_lost
  1145 000002F2 EB00                            jmp .end
  1146                                          
  1147                                      .end:
  1148 000002F4 5D                              pop rbp
  1149 000002F5 C3                              ret
  1150                                  ; Función modificada para verificar colisión con el borde inferior
  1151                                  check_bottom_collision:
  1152 000002F6 55                          push rbp
  1153 000002F7 4889E5                      mov rbp, rsp
  1154                                      
  1155                                      ; Verificar bola principal
  1156 000002FA 803D(00150000)01            cmp byte [ball_active], 1
  1157 00000301 7542                        jne .check_ball2
  1158 00000303 488B05(E7140000)            mov rax, [ball_y_pos]
  1159 0000030A 4883F81E                    cmp rax, row_cells - 2
  1160 0000030E 7535                        jne .check_ball2
  1161                                      
  1162                                      ; Borrar visualmente la bola principal
  1163 00000310 4C8B05(DF140000)            mov r8, [ball_x_pos]
  1164 00000317 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  1165 0000031E 4981C0[400A0000]            add r8, board
  1166 00000325 4C89C9                      mov rcx, r9
  1167 00000328 B852000000                  mov rax, column_cells + 2
  1168 0000032D 48F7E9                      imul rcx
  1169 00000330 4901C0                      add r8, rax
  1170 00000333 41C60020                    mov byte [r8], char_space    ; Borrar la bola del tablero
  1171                                      
  1172 00000337 C605(00150000)00            mov byte [ball_active], 0
  1173 0000033E C605(FF140000)00            mov byte [ball_moving], 0
  1174                                  
  1175                                  .check_ball2:
  1176 00000345 803D(22150000)01            cmp byte [ball2_active], 1
  1177 0000034C 751B                        jne .check_ball3
  1178 0000034E 488B05(09150000)            mov rax, [ball2_y_pos]
  1179 00000355 4883F81E                    cmp rax, row_cells - 2
  1180 00000359 750E                        jne .check_ball3
  1181 0000035B C605(22150000)00            mov byte [ball2_active], 0
  1182 00000362 C605(21150000)00            mov byte [ball2_moving], 0
  1183                                  
  1184                                  .check_ball3:
  1185 00000369 803D(44150000)01            cmp byte [ball3_active], 1
  1186 00000370 751B                        jne .check_active_balls
  1187 00000372 488B05(2B150000)            mov rax, [ball3_y_pos]
  1188 00000379 4883F81E                    cmp rax, row_cells - 2
  1189 0000037D 750E                        jne .check_active_balls
  1190 0000037F C605(44150000)00            mov byte [ball3_active], 0
  1191 00000386 C605(43150000)00            mov byte [ball3_moving], 0
  1192                                  
  1193                                  .check_active_balls:
  1194                                      ; Verificar si quedan bolas activas
  1195 0000038D 4831C9                      xor rcx, rcx
  1196 00000390 803D(00150000)01            cmp byte [ball_active], 1
  1197 00000397 741E                        je .balls_remain
  1198 00000399 803D(22150000)01            cmp byte [ball2_active], 1
  1199 000003A0 7415                        je .balls_remain
  1200 000003A2 803D(44150000)01            cmp byte [ball3_active], 1
  1201 000003A9 740C                        je .balls_remain
  1202                                      
  1203                                      ; Si no quedan bolas activas, perder una vida y reiniciar
  1204 000003AB E881FEFFFF                  call lose_life
  1205 000003B0 C605(00150000)01            mov byte [ball_active], 1    ; Reactivar bola principal
  1206                                      
  1207                                  .balls_remain:
  1208 000003B7 5D                          pop rbp
  1209 000003B8 C3                          ret
  1210                                  
  1211                                  
  1212                                  
  1213                                  ; Nueva función para game over
  1214                                  game_lost:
  1215                                      ; Limpiar la pantalla
  1216                                      print clear, clear_length
    82 000003B9 B801000000          <1>  mov eax, sys_write
    83 000003BE BF01000000          <1>  mov edi, 1
    84 000003C3 48BE-               <1>  mov rsi, %1
    84 000003C5 [1000000000000000]  <1>
    85 000003CD BA07000000          <1>  mov edx, %2
    86 000003D2 0F05                <1>  syscall
  1217                                      
  1218                                      ; Mostrar mensaje de derrota
  1219                                      section .data
  1220 0000245D C2A148617320706572-             lost_msg: db "¡Has perdido!", 0xA, 0xD
  1220 00002466 6469646F210A0D     
  1221                                          lost_msg_len: equ $ - lost_msg
  1222                                      section .text
  1223                                      
  1224                                      ; Imprimir mensaje de derrota
  1225                                      print lost_msg, lost_msg_len
    82 000003D4 B801000000          <1>  mov eax, sys_write
    83 000003D9 BF01000000          <1>  mov edi, 1
    84 000003DE 48BE-               <1>  mov rsi, %1
    84 000003E0 [5D24000000000000]  <1>
    85 000003E8 BA10000000          <1>  mov edx, %2
    86 000003ED 0F05                <1>  syscall
  1226                                      print score_msg, score_msg_len
    82 000003EF B801000000          <1>  mov eax, sys_write
    83 000003F4 BF01000000          <1>  mov edi, 1
    84 000003F9 48BE-               <1>  mov rsi, %1
    84 000003FB [8B24000000000000]  <1>
    85 00000403 BA0F000000          <1>  mov edx, %2
    86 00000408 0F05                <1>  syscall
  1227                                      
  1228                                      ; Mostrar puntaje final
  1229 0000040A 488B05(3E200000)            mov rax, [current_score]
  1230 00000411 48BF-                       mov rdi, number_buffer
  1230 00000413 [4720000000000000] 
  1231 0000041B E849130000                  call number_to_string
  1232                                      print number_buffer, 20
    82 00000420 B801000000          <1>  mov eax, sys_write
    83 00000425 BF01000000          <1>  mov edi, 1
    84 0000042A 48BE-               <1>  mov rsi, %1
    84 0000042C [4720000000000000]  <1>
    85 00000434 BA14000000          <1>  mov edx, %2
    86 00000439 0F05                <1>  syscall
  1233                                      
  1234                                      ; Esperar un momento antes de salir
  1235 0000043B 48C705BAFBFFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  1235 00000444 0000               
  1236 00000446 48C705B7FBFFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  1236 0000044F 0000               
  1237                                      sleeptime
    98 00000451 B823000000          <1>  mov eax, sys_nanosleep
    99 00000456 48BF-               <1>  mov rdi, timespec
    99 00000458 [0000000000000000]  <1>
   100 00000460 31F6                <1>  xor esi, esi
   101 00000462 0F05                <1>  syscall
  1238                                      
  1239 00000464 E9141D0000                  jmp exit
  1240                                  
  1241                                  
  1242                                  ; Función para registrar una nueva letra en el mapa
  1243                                  ; Entrada:
  1244                                  ;   al - letra a registrar
  1245                                  ;   r8b - posición x
  1246                                  ;   r9b - posición y
  1247                                  register_letter:
  1248 00000469 55                          push rbp
  1249 0000046A 4889E5                      mov rbp, rsp
  1250 0000046D 53                          push rbx
  1251 0000046E 51                          push rcx
  1252                                      
  1253 0000046F 3C20                        cmp al, ' '
  1254 00000471 7438                        je .end
  1255                                  
  1256                                      ; Encontrar un espacio libre en el mapa
  1257 00000473 4831C9                      xor rcx, rcx
  1258 00000476 480FB615(CC220000)          movzx rdx, byte [letters_count]
  1259                                      
  1260                                      .find_slot:
  1261 0000047E 4883F964                        cmp rcx, 100              ; Máximo de letras
  1262 00000482 7D27                            jge .end                  ; Si no hay espacio, salir
  1263                                          
  1264 00000484 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1265 0000048C 807B0300                        cmp byte [rbx + 3], 0    ; Verificar si el slot está inactivo
  1266 00000490 7405                            je .found_slot
  1267                                          
  1268 00000492 48FFC1                          inc rcx
  1269 00000495 EBE7                            jmp .find_slot
  1270                                          
  1271                                      .found_slot:
  1272                                          ; Guardar la información de la letra
  1273 00000497 448803                          mov [rbx], r8b           ; x
  1274 0000049A 44884B01                        mov [rbx + 1], r9b       ; y
  1275 0000049E 884302                          mov [rbx + 2], al        ; letra
  1276 000004A1 C6430301                        mov byte [rbx + 3], 1    ; marcar como activo
  1277                                          
  1278 000004A5 FE05(CC220000)                  inc byte [letters_count]
  1279                                          
  1280                                      .end:
  1281 000004AB 59                              pop rcx
  1282 000004AC 5B                              pop rbx
  1283 000004AD 5D                              pop rbp
  1284 000004AE C3                              ret
  1285                                  
  1286                                  ; Función para imprimir todas las letras registradas
  1287                                  print_letters:
  1288 000004AF 55                          push rbp
  1289 000004B0 4889E5                      mov rbp, rsp
  1290 000004B3 53                          push rbx
  1291 000004B4 51                          push rcx
  1292                                      
  1293 000004B5 4831C9                      xor rcx, rcx
  1294                                      
  1295                                      .print_loop:
  1296 000004B8 4883F964                        cmp rcx, 100              ; Máximo de letras
  1297 000004BC 7D37                            jge .end
  1298                                          
  1299                                          ; Obtener puntero a la letra actual
  1300 000004BE 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1301                                          
  1302                                          ; Verificar si está activa
  1303 000004C6 807B0300                        cmp byte [rbx + 3], 0
  1304 000004CA 7424                            je .next_letter
  1305                                          
  1306                                          ; Calcular posición en el tablero
  1307 000004CC 4C0FB603                        movzx r8, byte [rbx]      ; x
  1308 000004D0 4C0FB64B01                      movzx r9, byte [rbx + 1]  ; y
  1309                                          
  1310                                          ; Calcular offset en el tablero
  1311 000004D5 B850000000                      mov rax, column_cells
  1312 000004DA 4883C002                        add rax, 2                ; Incluir caracteres de nueva línea
  1313 000004DE 49F7E1                          mul r9
  1314 000004E1 4C01C0                          add rax, r8
  1315 000004E4 488DB8[400A0000]                lea rdi, [board + rax]
  1316                                          
  1317                                          ; Imprimir la letra
  1318 000004EB 8A4302                          mov al, [rbx + 2]
  1319 000004EE 8807                            mov [rdi], al
  1320                                          
  1321                                      .next_letter:
  1322 000004F0 48FFC1                          inc rcx
  1323 000004F3 EBC3                            jmp .print_loop
  1324                                          
  1325                                      .end:
  1326 000004F5 59                              pop rcx
  1327 000004F6 5B                              pop rbx
  1328 000004F7 5D                              pop rbp
  1329 000004F8 C3                              ret
  1330                                  
  1331                                  ; Función para borrar una letra específica
  1332                                  ; Entrada:
  1333                                  ;   r8b - posición x
  1334                                  ;   r9b - posición y
  1335                                  remove_letter:
  1336 000004F9 55                          push rbp
  1337 000004FA 4889E5                      mov rbp, rsp
  1338 000004FD 53                          push rbx
  1339 000004FE 51                          push rcx
  1340                                      
  1341 000004FF 4831C9                      xor rcx, rcx
  1342                                      
  1343                                      .find_loop:
  1344 00000502 4883F964                        cmp rcx, 100              ; Máximo de letras
  1345 00000506 7D2E                            jge .end
  1346                                          
  1347 00000508 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1348                                          
  1349                                          ; Verificar si está activa y coincide la posición
  1350 00000510 807B0300                        cmp byte [rbx + 3], 0
  1351 00000514 741B                            je .next_letter
  1352                                          
  1353 00000516 8A03                            mov al, [rbx]
  1354 00000518 4438C0                          cmp al, r8b
  1355 0000051B 7514                            jne .next_letter
  1356                                          
  1357 0000051D 8A4301                          mov al, [rbx + 1]
  1358 00000520 4438C8                          cmp al, r9b
  1359 00000523 750C                            jne .next_letter
  1360                                          
  1361                                          ; Encontrada la letra, desactivarla
  1362 00000525 C6430300                        mov byte [rbx + 3], 0
  1363 00000529 FE0D(CC220000)                  dec byte [letters_count]
  1364 0000052F EB05                            jmp .end
  1365                                          
  1366                                      .next_letter:
  1367 00000531 48FFC1                          inc rcx
  1368 00000534 EBCC                            jmp .find_loop
  1369                                          
  1370                                      .end:
  1371 00000536 59                              pop rcx
  1372 00000537 5B                              pop rbx
  1373 00000538 5D                              pop rbp
  1374 00000539 C3                              ret
  1375                                  ; Función para mover las letras hacia abajo
  1376                                  move_letters:
  1377 0000053A 55                          push rbp
  1378 0000053B 4889E5                      mov rbp, rsp
  1379 0000053E 53                          push rbx
  1380 0000053F 57                          push rdi
  1381 00000540 56                          push rsi
  1382 00000541 4150                        push r8
  1383 00000543 4151                        push r9
  1384 00000545 4152                        push r10
  1385 00000547 4153                        push r11
  1386                                  
  1387 00000549 4831C9                      xor rcx, rcx
  1388                                  
  1389                                      .move_loop:
  1390 0000054C 4883F964                        cmp rcx, 100
  1391 00000550 0F8D0D020000                    jge .print_last_letter
  1392                                          
  1393 00000556 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1394 0000055E 807B0300                        cmp byte [rbx + 3], 0
  1395 00000562 0F84F3010000                    je .next_letter
  1396                                  
  1397 00000568 4C0FB603                        movzx r8, byte [rbx]
  1398 0000056C 4C0FB64B01                      movzx r9, byte [rbx + 1]
  1399                                  
  1400 00000571 B850000000                      mov rax, column_cells
  1401 00000576 4883C002                        add rax, 2
  1402 0000057A 49F7E1                          mul r9
  1403 0000057D 4C01C0                          add rax, r8
  1404 00000580 488DB8[400A0000]                lea rdi, [board + rax]
  1405 00000587 C60720                          mov byte [rdi], ' '
  1406                                  
  1407 0000058A FE4301                          inc byte [rbx + 1]
  1408 0000058D 4C0FB64B01                      movzx r9, byte [rbx + 1]
  1409                                  
  1410 00000592 4983F91F                        cmp r9, row_cells - 1
  1411 00000596 7C09                            jl .check_pallet_collision
  1412                                  
  1413 00000598 C6430300                        mov byte [rbx + 3], 0
  1414 0000059C E9BA010000                      jmp .next_letter
  1415                                  
  1416                                          .check_pallet_collision:
  1417 000005A1 B850000000                          mov rax, column_cells
  1418 000005A6 4883C002                            add rax, 2
  1419 000005AA 49F7E1                              mul r9
  1420 000005AD 4C01C0                              add rax, r8
  1421 000005B0 488DB8[400A0000]                    lea rdi, [board + rax]
  1422                                  
  1423 000005B7 8A07                                mov al, [rdi]
  1424 000005B9 3C20                                cmp al, ' '
  1425 000005BB 0F849A010000                        je .next_letter
  1426 000005C1 3C3D                                cmp al, char_equal
  1427 000005C3 740A                                je .capture_letter
  1428                                  
  1429 000005C5 8A4302                              mov al, [rbx + 2]
  1430 000005C8 8807                                mov [rdi], al
  1431 000005CA E98C010000                          jmp .next_letter
  1432                                  
  1433                                          .capture_letter:
  1434                                              ; Obtener la nueva letra
  1435 000005CF 8A4302                              mov al, [rbx + 2]
  1436                                              
  1437                                              ; Comparar con la última letra
  1438 000005D2 3A05(CD220000)                      cmp al, [last_letter]
  1439 000005D8 7407                                je .same_letter
  1440                                              
  1441                                              ; Es una letra diferente, resetear el procesamiento
  1442 000005DA C605(E1220000)00                    mov byte [current_power_processed], 0
  1443                                              
  1444                                              .same_letter:
  1445                                              ; Guardar la nueva letra
  1446 000005E1 8805(CD220000)                      mov [last_letter], al
  1447                                              
  1448                                              ; Verificar si es 'E' para extender la paleta
  1449 000005E7 3C45                                cmp al, 'E'
  1450 000005E9 7450                                je .extend_pallet
  1451                                              
  1452                                              ; Verificar si es 'P' para añadir vida
  1453 000005EB 3C50                                cmp al, 'P'
  1454 000005ED 7478                                je .check_add_life
  1455                                  
  1456 000005EF 3C53                                cmp al, 'S'
  1457 000005F1 0F84B4000000                        je .slow_ball
  1458                                  
  1459 000005F7 3C43                                cmp al, 'C'
  1460 000005F9 0F84D8000000                        je .activate_catch
  1461                                              
  1462 000005FF 3C4C                                cmp al, 'L'
  1463 00000601 0F84F9000000                        je .activate_laser
  1464                                  
  1465 00000607 3C44                                cmp al, 'D'
  1466 00000609 0F841A010000                        je .activate_split
  1467                                  
  1468                                              ; Si no es ningún power-up, restaurar tamaño normal
  1469 0000060F 488B05(CF140000)                    mov rax, [default_pallet_size]
  1470 00000616 488905(C7140000)                    mov [pallet_size], rax
  1471 0000061D 48C705(E3220000)01-                 mov qword [ball_speed], 1    ; Restaurar velocidad normal
  1471 00000625 000000             
  1472 00000628 C605(FB220000)00                    mov byte [catch_power_active], 0
  1473 0000062F C605(08230000)00                    mov byte [laser_power_active], 0
  1474 00000636 E91C010000                          jmp .finish_capture
  1475                                  
  1476                                              .extend_pallet:
  1477 0000063B C605(08230000)00                        mov byte [laser_power_active], 0
  1478 00000642 C605(FB220000)00                        mov byte [catch_power_active], 0
  1479 00000649 48C705(E3220000)01-                     mov qword [ball_speed], 1    ; Restaurar velocidad normal
  1479 00000651 000000             
  1480 00000654 488B05(D7140000)                        mov rax, [extended_pallet_size]
  1481 0000065B 488905(C7140000)                        mov [pallet_size], rax
  1482 00000662 E9F0000000                              jmp .finish_capture
  1483                                  
  1484                                              .check_add_life:
  1485 00000667 C605(08230000)00                        mov byte [laser_power_active], 0
  1486 0000066E C605(FB220000)00                        mov byte [catch_power_active], 0
  1487 00000675 488B05(CF140000)                        mov rax, [default_pallet_size]
  1488 0000067C 488905(C7140000)                        mov [pallet_size], rax
  1489 00000683 48C705(E3220000)01-                     mov qword [ball_speed], 1 
  1489 0000068B 000000             
  1490                                                  ; Verificar si ya procesamos este power-up
  1491 0000068E 803D(E1220000)00                        cmp byte [current_power_processed], 0
  1492 00000695 0F85BC000000                            jne .finish_capture
  1493                                                  
  1494                                                  ; Preservar registros importantes
  1495 0000069B 51                                      push rcx
  1496 0000069C 53                                      push rbx
  1497                                                  
  1498                                                  ; Marcar como procesado
  1499 0000069D C605(E1220000)01                        mov byte [current_power_processed], 1
  1500                                                  
  1501                                                  ; Añadir una vida
  1502 000006A4 E838040000                              call add_life
  1503                                                  
  1504                                                  ; Restaurar registros
  1505 000006A9 5B                                      pop rbx
  1506 000006AA 59                                      pop rcx
  1507                                                  
  1508                                              .slow_ball:
  1509 000006AB C605(08230000)00                        mov byte [laser_power_active], 0
  1510 000006B2 C605(FB220000)00                        mov byte [catch_power_active], 0                
  1511 000006B9 488B05(CF140000)                        mov rax, [default_pallet_size]
  1512 000006C0 488905(C7140000)                        mov [pallet_size], rax
  1513 000006C7 48C705(E3220000)02-                     mov qword [ball_speed], 2    ; Activar velocidad lenta
  1513 000006CF 000000             
  1514 000006D2 E980000000                              jmp .finish_capture
  1515                                  
  1516                                              .activate_catch:
  1517 000006D7 C605(08230000)00                        mov byte [laser_power_active], 0
  1518 000006DE 488B05(CF140000)                        mov rax, [default_pallet_size]
  1519 000006E5 488905(C7140000)                        mov [pallet_size], rax
  1520 000006EC 48C705(E3220000)01-                     mov qword [ball_speed], 1
  1520 000006F4 000000             
  1521 000006F7 C605(FB220000)01                        mov byte [catch_power_active], 1
  1522 000006FE EB57                                    jmp .finish_capture
  1523                                  
  1524                                              .activate_laser:
  1525 00000700 C605(FB220000)00                        mov byte [catch_power_active], 0
  1526 00000707 488B05(CF140000)                        mov rax, [default_pallet_size]
  1527 0000070E 488905(C7140000)                        mov [pallet_size], rax
  1528 00000715 48C705(E3220000)01-                     mov qword [ball_speed], 1
  1528 0000071D 000000             
  1529 00000720 C605(08230000)01                        mov byte [laser_power_active], 1    ; Activar el poder láser
  1530 00000727 EB2E                                    jmp .finish_capture
  1531                                  
  1532                                              .activate_split:
  1533 00000729 C605(08230000)00                        mov byte [laser_power_active], 0
  1534 00000730 C605(FB220000)00                        mov byte [catch_power_active], 0
  1535 00000737 488B05(CF140000)                        mov rax, [default_pallet_size]
  1536 0000073E 488905(C7140000)                        mov [pallet_size], rax
  1537 00000745 48C705(E3220000)01-                     mov qword [ball_speed], 1 
  1537 0000074D 000000             
  1538 00000750 E8D2000000                              call activate_split_power
  1539 00000755 EB00                                    jmp .finish_capture
  1540                                  
  1541                                              .finish_capture:
  1542 00000757 C6430300                                mov byte [rbx + 3], 0
  1543                                  
  1544                                          .next_letter:
  1545 0000075B 48FFC1                              inc rcx
  1546 0000075E E9E9FDFFFF                          jmp .move_loop
  1547                                  
  1548                                      .print_last_letter:
  1549                                          print last_letter_msg, last_letter_msg_len - 3
    82 00000763 B801000000          <1>  mov eax, sys_write
    83 00000768 BF01000000          <1>  mov edi, 1
    84 0000076D 48BE-               <1>  mov rsi, %1
    84 0000076F [CE22000000000000]  <1>
    85 00000777 BA10000000          <1>  mov edx, %2
    86 0000077C 0F05                <1>  syscall
  1550 0000077E 8A05(CD220000)                  mov al, [last_letter]
  1551 00000784 8805(DD220000)                  mov [last_letter_msg + 15], al
  1552                                          print last_letter_msg + last_letter_msg_len - 3, 3
    82 0000078A B801000000          <1>  mov eax, sys_write
    83 0000078F BF01000000          <1>  mov edi, 1
    84 00000794 48BE-               <1>  mov rsi, %1
    84 00000796 [DE22000000000000]  <1>
    85 0000079E BA03000000          <1>  mov edx, %2
    86 000007A3 0F05                <1>  syscall
  1553                                  
  1554                                      .end:
  1555 000007A5 415B                            pop r11
  1556 000007A7 415A                            pop r10
  1557 000007A9 4159                            pop r9
  1558 000007AB 4158                            pop r8
  1559 000007AD 5E                              pop rsi
  1560 000007AE 5F                              pop rdi
  1561 000007AF 5B                              pop rbx
  1562 000007B0 5D                              pop rbp
  1563 000007B1 C3                              ret
  1564                                  
  1565                                  
  1566                                  clear_lasers:
  1567 000007B2 55                          push rbp
  1568 000007B3 4889E5                      mov  rbp, rsp
  1569                                  
  1570                                      ; Recorrer el array de láseres
  1571 000007B6 4831C9                      xor rcx, rcx                ; Índice del láser
  1572 000007B9 480FB61D(0A230000)          movzx rbx, byte [laser_count]  ; Cantidad de láseres activos
  1573                                  
  1574                                      .clear_loop:
  1575 000007C1 4839D9                          cmp rcx, rbx
  1576 000007C4 7D2F                            jge .done                ; Salir si no quedan láseres
  1577                                  
  1578                                          ; Obtener posición del láser actual
  1579 000007C6 488DB409[0B230000]              lea rsi, [lasers + rcx * 2]
  1580 000007CE 4C0FB606                        movzx r8, byte [rsi]     ; X
  1581 000007D2 4C0FB64E01                      movzx r9, byte [rsi + 1] ; Y
  1582                                  
  1583                                          ; Calcular posición en el tablero
  1584 000007D7 B850000000                      mov rax, column_cells
  1585 000007DC 4883C002                        add rax, 2
  1586 000007E0 49F7E1                          mul r9
  1587 000007E3 4C01C0                          add rax, r8
  1588 000007E6 488DB8[400A0000]                lea rdi, [board + rax]
  1589                                  
  1590                                          ; Borrar el láser visualmente
  1591 000007ED C60720                          mov byte [rdi], ' '
  1592                                  
  1593                                          ; Pasar al siguiente láser
  1594 000007F0 48FFC1                          inc rcx
  1595 000007F3 EBCC                            jmp .clear_loop
  1596                                  
  1597                                      .done:
  1598                                          ; Resetear contador de láseres
  1599 000007F5 C605(0A230000)00                mov byte [laser_count], 0
  1600                                  
  1601 000007FC 5D                              pop rbp
  1602 000007FD C3                              ret
  1603                                  
  1604                                  
  1605                                  ; Nueva función para actualizar los láseres
  1606                                  update_lasers:
  1607 000007FE 55                          push rbp
  1608 000007FF 4889E5                      mov rbp, rsp
  1609                                      
  1610                                      ; Verificar si el poder láser está activo
  1611 00000802 803D(08230000)00            cmp byte [laser_power_active], 0
  1612 00000809 741A                        je .end
  1613                                      
  1614                                      ; Verificar si se presionó la tecla de espacio
  1615 0000080B 803D(07230000)20            cmp byte [last_key], ' '
  1616 00000812 750C                        jne .skip_shooting
  1617                                      
  1618                                      ; Disparar nuevos láseres
  1619 00000814 E89A000000                  call shoot_lasers
  1620 00000819 C605(07230000)00            mov byte [last_key], 0    ; Limpiar la tecla procesada
  1621                                      
  1622                                      .skip_shooting:
  1623                                      ; Mover los láseres existentes
  1624 00000820 E828010000                  call move_lasers
  1625                                      
  1626                                      .end:
  1627 00000825 5D                              pop rbp
  1628 00000826 C3                              ret
  1629                                  
  1630                                  activate_split_power:
  1631 00000827 55                          push rbp
  1632 00000828 4889E5                      mov rbp, rsp
  1633                                      
  1634                                      ; Verificar si la bola2 y bola3 ya están activas
  1635 0000082B 803D(22150000)01            cmp byte [ball2_active], 1
  1636 00000832 750B                        jne .enable_balls
  1637 00000834 803D(44150000)01            cmp byte [ball3_active], 1
  1638 0000083B 7502                        jne .enable_balls
  1639                                      
  1640                                      ; Si ambas ya están activas, no hacemos nada.
  1641 0000083D EB72                        jmp .end
  1642                                  
  1643                                  .enable_balls:
  1644                                      ; Copiamos la posición de la bola principal
  1645 0000083F 488B05(DF140000)            mov rax, [ball_x_pos]
  1646 00000846 488905(01150000)            mov [ball2_x_pos], rax
  1647 0000084D 488905(23150000)            mov [ball3_x_pos], rax
  1648                                  
  1649 00000854 488B05(E7140000)            mov rax, [ball_y_pos]
  1650 0000085B 488905(09150000)            mov [ball2_y_pos], rax
  1651 00000862 488905(2B150000)            mov [ball3_y_pos], rax
  1652                                  
  1653                                      ; Activamos bola2 y bola3 con direcciones diferentes
  1654                                      ; Por ejemplo: una va diagonal izq-arriba, otra diagonal der-arriba
  1655 00000869 48C705(11150000)FF-         mov qword [ball2_direction_x], -1
  1655 00000871 FFFFFF             
  1656 00000874 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  1656 0000087C FFFFFF             
  1657 0000087F C605(21150000)01            mov byte [ball2_moving], 1
  1658 00000886 C605(22150000)01            mov byte [ball2_active], 1
  1659                                  
  1660 0000088D 48C705(33150000)01-         mov qword [ball3_direction_x], 1
  1660 00000895 000000             
  1661 00000898 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  1661 000008A0 FFFFFF             
  1662 000008A3 C605(43150000)01            mov byte [ball3_moving], 1
  1663 000008AA C605(44150000)01            mov byte [ball3_active], 1
  1664                                  
  1665                                  .end:
  1666 000008B1 5D                          pop rbp
  1667 000008B2 C3                          ret
  1668                                  
  1669                                  
  1670                                  shoot_lasers:
  1671 000008B3 55                          push rbp
  1672 000008B4 4889E5                      mov rbp, rsp
  1673 000008B7 53                          push rbx
  1674                                      
  1675                                      ; Verificar si hay espacio para más láseres
  1676 000008B8 480FB605(0A230000)          movzx rax, byte [laser_count]
  1677 000008C0 4883F862                    cmp rax, 98  ; Asegurar que hay espacio para 2 láseres
  1678 000008C4 0F8D80000000                jge .end
  1679                                      
  1680                                      ; Obtener posición de la paleta
  1681 000008CA 4C8B05(BF140000)            mov r8, [pallet_position]
  1682 000008D1 4981E8[400A0000]            sub r8, board                  ; Offset relativo de la paleta
  1683                                      
  1684                                      ; Calcular coordenadas x,y
  1685 000008D8 4C89C0                      mov rax, r8
  1686 000008DB 41B950000000                mov r9, column_cells
  1687 000008E1 4983C102                    add r9, 2                     ; Ancho total de línea
  1688 000008E5 4831D2                      xor rdx, rdx
  1689 000008E8 49F7F1                      div r9                        ; rax = y, rdx = x
  1690                                      
  1691                                      ; Guardar coordenadas
  1692 000008EB 4989C2                      mov r10, rax                  ; Y en r10
  1693 000008EE 4989D3                      mov r11, rdx                  ; X en r11
  1694                                      
  1695                                      ; Validar coordenadas
  1696 000008F1 4983FA00                    cmp r10, 0
  1697 000008F5 7C53                        jl .end
  1698 000008F7 4983FA20                    cmp r10, row_cells
  1699 000008FB 7D4D                        jge .end
  1700 000008FD 4983FB00                    cmp r11, 0
  1701 00000901 7C47                        jl .end
  1702 00000903 4983FB50                    cmp r11, column_cells
  1703 00000907 7D41                        jge .end
  1704                                      
  1705                                      ; Calcular índice para el primer láser
  1706 00000909 480FB61D(0A230000)          movzx rbx, byte [laser_count]
  1707 00000911 486BDB02                    imul rbx, 2                   ; Cada láser usa 2 bytes
  1708                                      
  1709                                      ; Primer láser (izquierda)
  1710 00000915 488DBB[0B230000]            lea rdi, [lasers + rbx]
  1711 0000091C 44881F                      mov [rdi], r11b              ; X
  1712 0000091F 4488D0                      mov al, r10b
  1713 00000922 FEC8                        dec al                       ; Y - 1
  1714 00000924 884701                      mov [rdi + 1], al           ; Y
  1715                                      
  1716                                      ; Segundo láser (derecha)
  1717 00000927 4488D8                      mov al, r11b
  1718 0000092A 0205(C7140000)              add al, byte [pallet_size]
  1719 00000930 FEC8                        dec al                       ; Ajustar para el último carácter
  1720 00000932 488DBB[0D230000]            lea rdi, [lasers + rbx + 2]
  1721 00000939 8807                        mov [rdi], al               ; X
  1722 0000093B 4488D0                      mov al, r10b
  1723 0000093E FEC8                        dec al                      ; Y - 1
  1724 00000940 884701                      mov [rdi + 1], al          ; Y
  1725                                      
  1726                                      ; Incrementar contador de láseres
  1727 00000943 8005(0A230000)02            add byte [laser_count], 2
  1728                                      
  1729                                      
  1730                                      .end:
  1731 0000094A 5B                              pop rbx
  1732 0000094B 5D                              pop rbp
  1733 0000094C C3                              ret
  1734                                  
  1735                                  ; Función corregida para mover láseres
  1736                                  ; Función corregida para mover láseres
  1737                                  ; Esta es la parte clave para recorrer los láseres de atrás hacia adelante.
  1738                                  
  1739                                  ; Actualizar la función move_lasers para incluir verificación de colisiones
  1740                                  ; ============================================================
  1741                                  ; NUEVA FUNCIÓN move_lasers (todo-en-uno)
  1742                                  ; ============================================================
  1743                                  ; Mueve cada láser hacia arriba, verifica colisiones (bloques/enemigos)
  1744                                  ; y lo elimina inmediatamente si choca, de lo contrario lo dibuja.
  1745                                  ; ============================================================
  1746                                  move_lasers:
  1747 0000094D 55                          push rbp
  1748 0000094E 4889E5                      mov  rbp, rsp
  1749 00000951 53                          push rbx
  1750 00000952 57                          push rdi
  1751 00000953 56                          push rsi
  1752 00000954 4154                        push r12
  1753 00000956 4155                        push r13
  1754 00000958 4156                        push r14
  1755 0000095A 4157                        push r15
  1756                                  
  1757                                      ; 1) Tomamos la cantidad de láseres
  1758 0000095C 480FB60D(0A230000)          movzx rcx, byte [laser_count]
  1759 00000964 4885C9                      test rcx, rcx
  1760 00000967 0F84BB000000                jz .fin              ; Si es cero, no hay láseres => salir
  1761                                  
  1762                                      ; Ajustamos RCX para que sea el último índice (laser_count - 1)
  1763 0000096D 48FFC9                      dec rcx              ; Empezamos desde el último láser
  1764                                  
  1765                                  .loop_lasers:
  1766                                      ; RSI apunta a lasers + (rcx * 2) => (x, y) del láser
  1767 00000970 488DB409[0B230000]          lea rsi, [lasers + rcx*2]
  1768                                  
  1769                                      ; 2) Cargar x,y actuales del láser
  1770 00000978 4C0FB606                    movzx r8,  byte [rsi]      ; X
  1771 0000097C 4C0FB64E01                  movzx r9,  byte [rsi + 1]  ; Y
  1772                                  
  1773                                      ; 3) Borrar el láser de su posición actual en pantalla
  1774                                      ;    (por si en el ciclo anterior se había dibujado)
  1775 00000981 B850000000                  mov rax, column_cells
  1776 00000986 4883C002                    add rax, 2
  1777 0000098A 49F7E1                      mul r9
  1778 0000098D 4C01C0                      add rax, r8
  1779 00000990 488DB8[400A0000]            lea rdi, [board + rax]
  1780 00000997 C60720                      mov byte [rdi], ' '        ; Borramos el símbolo anterior (láser)
  1781                                  
  1782                                      ; 4) Mover el láser hacia arriba (y - 1)
  1783 0000099A 49FFC9                      dec r9
  1784                                  
  1785                                      ; Si y < 1, está fuera de pantalla => eliminarlo
  1786 0000099D 4983F901                    cmp r9, 1
  1787 000009A1 7C57                        jl .delete_laser
  1788                                  
  1789                                      ; Guardamos la posición nueva en el array (aún no lo dibujamos)
  1790 000009A3 44884E01                    mov byte [rsi + 1], r9b
  1791                                  
  1792                                      ; 5) Verificamos colisión inmediata con bloques o enemigos
  1793                                      ;    - Primero colisión con bloques
  1794                                      ; ---------------------------------------------------------
  1795                                      ; Calculamos la nueva dirección de memoria para esa posición (r9,r8)
  1796 000009A7 B850000000                  mov rax, column_cells
  1797 000009AC 4883C002                    add rax, 2
  1798 000009B0 49F7E1                      mul r9
  1799 000009B3 4C01C0                      add rax, r8
  1800 000009B6 488DB8[400A0000]            lea rdi, [board + rax]   ; rdi apunta a la celda donde estaría el láser
  1801                                  
  1802                                      ; Revisar si hay bloque
  1803 000009BD 51                          push rcx
  1804 000009BE 56                          push rsi
  1805 000009BF 57                          push rdi
  1806 000009C0 4989FA                      mov r10, rdi    ; En check_block_collision, r10 = posición en board
  1807 000009C3 E8F90E0000                  call check_block_collision
  1808 000009C8 5F                          pop rdi
  1809 000009C9 5E                          pop rsi
  1810 000009CA 59                          pop rcx
  1811                                  
  1812 000009CB 4885C0                      test rax, rax          ; rax=1 => hubo colisión con bloque
  1813 000009CE 752A                        jnz .delete_laser      ; si chocó, eliminar ya el láser
  1814                                  
  1815                                      ;    - Luego colisión con enemigos
  1816                                      ; ---------------------------------------------------------
  1817 000009D0 51                          push rcx
  1818 000009D1 56                          push rsi
  1819 000009D2 57                          push rdi
  1820                                      ; Pasamos (r8=X, r9=Y, r10=punteroEnBoard) a la función
  1821                                      ; o podemos crear una versión inlined. A modo de ejemplo:
  1822                                      ; Llamamos a check_laser_enemy_collision, que retorna
  1823                                      ; rax=1 si hubo colisión con enemigo, 0 si no.
  1824                                      ;
  1825                                      ; Hacemos algo como:
  1826 000009D3 4989FA                      mov r10, rdi
  1827 000009D6 E85A000000                  call check_laser_enemy_collision
  1828 000009DB 5F                          pop rdi
  1829 000009DC 5E                          pop rsi
  1830 000009DD 59                          pop rcx
  1831                                  
  1832 000009DE 4885C0                      test rax, rax          ; rax=1 => colisión con un enemigo
  1833 000009E1 7517                        jnz .delete_laser
  1834                                  
  1835                                      ; 6) Si NO hubo colisión, dibujamos el láser en la nueva posición
  1836 000009E3 8A05(09230000)              mov al, [laser_symbol]
  1837 000009E9 8807                        mov [rdi], al
  1838                                  
  1839                                  .next_laser:
  1840                                      ; Pasamos al láser anterior en el array
  1841 000009EB 48FFC9                      dec rcx
  1842 000009EE 4883F9FF                    cmp rcx, -1
  1843 000009F2 0F8F78FFFFFF                jg .loop_lasers   ; Mientras rcx >= 0, seguir iterando
  1844 000009F8 EB2E                        jmp .fin
  1845                                  
  1846                                  ; -----------------------------------------------------------------
  1847                                  ; Subrutina interna: .delete_laser
  1848                                  ; -----------------------------------------------------------------
  1849                                  ; Elimina el láser actual del array 'lasers' moviendo el último
  1850                                  ; láser a su posición (si no es el último). Decrementa laser_count.
  1851                                  .delete_laser:
  1852 000009FA 4C0FB625(0A230000)          movzx r12, byte [laser_count]
  1853 00000A02 49FFCC                      dec r12                    ; r12 = índice del último láser
  1854 00000A05 4939CC                      cmp r12, rcx
  1855 00000A08 7616                        jbe .just_decrement        ; Si rcx ya apunta al último, no copiamos
  1856                                  
  1857                                      ; Copiamos el último láser a la posición actual
  1858 00000A0A 488DBC09[0B230000]          lea rdi, [lasers + rcx*2]
  1859 00000A12 4B8DB424[0B230000]          lea rsi, [lasers + r12*2]
  1860 00000A1A 668B06                      mov ax, [rsi]             ; lee 2 bytes (X,Y) del último láser
  1861 00000A1D 668907                      mov [rdi], ax             ; copiamos X,Y
  1862                                  
  1863                                  .just_decrement:
  1864 00000A20 FE0D(0A230000)              dec byte [laser_count]    ; Decrementar contador de láseres
  1865 00000A26 EBC3                        jmp .next_laser
  1866                                  
  1867                                  .fin:
  1868 00000A28 415F                        pop r15
  1869 00000A2A 415E                        pop r14
  1870 00000A2C 415D                        pop r13
  1871 00000A2E 415C                        pop r12
  1872 00000A30 5E                          pop rsi
  1873 00000A31 5F                          pop rdi
  1874 00000A32 5B                          pop rbx
  1875 00000A33 5D                          pop rbp
  1876 00000A34 C3                          ret
  1877                                  
  1878                                  
  1879                                  ; Nueva función para verificar colisión entre láser y enemigos
  1880                                  ; ==========================================================
  1881                                  ; NUEVA check_laser_enemy_collision - inlined destroy
  1882                                  ; ==========================================================
  1883                                  check_laser_enemy_collision:
  1884 00000A35 55                          push rbp
  1885 00000A36 4889E5                      mov  rbp, rsp
  1886                                      
  1887 00000A39 4D31ED                      xor r13, r13            ; Índice del enemigo
  1888 00000A3C 4831C0                      xor rax, rax            ; 0 = no colisión
  1889                                  
  1890                                  .loop_enemies:
  1891 00000A3F 4983FD05                    cmp r13, 5              ; Máximo 5 enemigos
  1892 00000A43 7D64                        jge .end
  1893                                  
  1894                                      ; r13 * 3 => offset del enemigo i
  1895 00000A45 4C89E9                      mov rcx, r13
  1896 00000A48 486BC903                    imul rcx, 3
  1897 00000A4C 488DB1[60200000]            lea rsi, [enemies + rcx]   ; rsi => &enemies[i]
  1898                                  
  1899                                      ; Verificar si está activo
  1900 00000A53 807E0201                    cmp byte [rsi+2], 1
  1901 00000A57 754B                        jne .next_enemy
  1902                                  
  1903                                      ; Cargar posición X/Y del enemigo
  1904 00000A59 4C0FB636                    movzx r14, byte [rsi]      ; X
  1905 00000A5D 4C0FB67E01                  movzx r15, byte [rsi+1]    ; Y
  1906                                  
  1907                                      ; Comparar con posición del láser (r8=X, r9=Y)
  1908 00000A62 4D39F0                      cmp r8, r14
  1909 00000A65 753D                        jne .next_enemy
  1910 00000A67 4D39F9                      cmp r9, r15
  1911 00000A6A 7538                        jne .next_enemy
  1912                                  
  1913                                      ; ==== Colisión detectada con láser ====
  1914                                  
  1915                                      ; 1) Desactivar enemigo
  1916 00000A6C C6460200                    mov byte [rsi+2], 0     ; (activo=0)
  1917                                  
  1918                                      ; 2) Sumar puntos
  1919 00000A70 488B05(7F200000)            mov rax, [enemy_points]
  1920 00000A77 480105(3E200000)            add [current_score], rax
  1921                                  
  1922                                      ; 3) (Opcional) Borrar del board, SOLO si no coincide con la paleta
  1923                                      ;    Evita crasheos en la fila de la paleta (row_cells - 2).
  1924 00000A7E 4983FF1E                    cmp r15, row_cells - 2
  1925 00000A82 7419                        je .skip_erase
  1926                                  
  1927                                      ; Borrar visualmente del board
  1928 00000A84 B850000000                  mov rax, column_cells
  1929 00000A89 4883C002                    add rax, 2
  1930 00000A8D 49F7E7                      mul r15
  1931 00000A90 4C01F0                      add rax, r14
  1932 00000A93 488DB8[400A0000]            lea rdi, [board + rax]
  1933 00000A9A C60720                      mov byte [rdi], ' '
  1934                                  
  1935                                  .skip_erase:
  1936                                  
  1937                                      ; 4) Devolver rax=1 => colisión con enemigo
  1938 00000A9D B801000000                  mov rax, 1
  1939 00000AA2 EB05                        jmp .end
  1940                                  
  1941                                  .next_enemy:
  1942 00000AA4 49FFC5                      inc r13
  1943 00000AA7 EB96                        jmp .loop_enemies
  1944                                  
  1945                                  .end:
  1946 00000AA9 5D                          pop rbp
  1947 00000AAA C3                          ret
  1948                                  
  1949                                  
  1950                                  ; Función auxiliar para eliminar un láser específico
  1951                                  remove_laser:
  1952 00000AAB 55                          push rbp
  1953 00000AAC 4889E5                      mov rbp, rsp
  1954                                  
  1955                                      ; Borrar el láser del tablero
  1956 00000AAF 41C60220                    mov byte [r10], ' '
  1957                                  
  1958                                      ; Mover el último láser a esta posición si no es el último
  1959 00000AB3 480FB605(0A230000)          movzx rax, byte [laser_count]
  1960 00000ABB 48FFC8                      dec rax                    ; Índice del último láser
  1961 00000ABE 4939C4                      cmp r12, rax              ; Comparar con láser actual
  1962 00000AC1 7416                        je .just_decrease         ; Si es el último, solo decrementar contador
  1963                                  
  1964                                      ; Copiar último láser a la posición actual
  1965 00000AC3 4B8DBC24[0B230000]          lea rdi, [lasers + r12*2]
  1966 00000ACB 488DB400[0B230000]          lea rsi, [lasers + rax*2]
  1967 00000AD3 668B16                      mov dx, [rsi]             ; Copiar X,Y del último láser
  1968 00000AD6 668917                      mov [rdi], dx
  1969                                  
  1970                                  .just_decrease:
  1971 00000AD9 FE0D(0A230000)              dec byte [laser_count]    ; Decrementar contador de láseres
  1972                                  
  1973 00000ADF 5D                          pop rbp
  1974 00000AE0 C3                          ret
  1975                                  
  1976                                  add_life:
  1977 00000AE1 55                          push rbp
  1978 00000AE2 4889E5                      mov rbp, rsp
  1979 00000AE5 53                          push rbx
  1980 00000AE6 51                          push rcx
  1981 00000AE7 57                          push rdi
  1982 00000AE8 56                          push rsi
  1983 00000AE9 4150                        push r8
  1984 00000AEB 4151                        push r9
  1985                                      
  1986                                      ; Verificar si ya tenemos el máximo de vidas
  1987 00000AED 480FB605(3B210000)          movzx rax, byte [current_lives]
  1988 00000AF5 4883F807                    cmp rax, 7          ; Comparar con el máximo de vidas
  1989 00000AF9 7D2C                        jge .end
  1990                                      
  1991                                      ; Incrementar el contador de vidas
  1992 00000AFB FE05(3B210000)              inc byte [current_lives]
  1993                                      
  1994                                      ; Encontrar la siguiente vida inactiva
  1995 00000B01 4831C9                      xor rcx, rcx
  1996                                      
  1997                                      .find_inactive:
  1998 00000B04 4883F907                        cmp rcx, lives_count
  1999 00000B08 7D1D                            jge .end
  2000                                          
  2001                                          ; Calcular offset de la vida actual
  2002 00000B0A 4889C8                          mov rax, rcx
  2003 00000B0D 486BC003                        imul rax, 3
  2004 00000B11 488DB0[25210000]                lea rsi, [lives_data + rax]
  2005                                          
  2006                                          ; Verificar si está inactiva
  2007 00000B18 807E0200                        cmp byte [rsi + 2], 0
  2008 00000B1C 7405                            je .activate_life
  2009                                          
  2010 00000B1E 48FFC1                          inc rcx
  2011 00000B21 EBE1                            jmp .find_inactive
  2012                                          
  2013                                      .activate_life:
  2014                                          ; Activar la vida
  2015 00000B23 C6460201                        mov byte [rsi + 2], 1
  2016                                          
  2017                                      .end:
  2018 00000B27 4159                            pop r9
  2019 00000B29 4158                            pop r8
  2020 00000B2B 5E                              pop rsi
  2021 00000B2C 5F                              pop rdi
  2022 00000B2D 59                              pop rcx
  2023 00000B2E 5B                              pop rbx
  2024 00000B2F 5D                              pop rbp
  2025 00000B30 C3                              ret
  2026                                  
  2027                                  
  2028                                  print_ball:
  2029 00000B31 4C8B05(DF140000)        	mov r8, [ball_x_pos]
  2030 00000B38 4C8B0D(E7140000)        	mov r9, [ball_y_pos]
  2031 00000B3F 4981C0[400A0000]        	add r8, board
  2032                                  
  2033 00000B46 4C89C9                  	mov rcx, r9
  2034 00000B49 B852000000              	mov rax, column_cells + 2
  2035 00000B4E 48F7E9                  	imul rcx
  2036                                  	
  2037 00000B51 4901C0                  	add r8, rax
  2038 00000B54 41C6004F                	mov byte [r8], char_O
  2039 00000B58 C3                      	ret
  2040                                  
  2041                                  print_ball_2:
  2042 00000B59 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2043 00000B60 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2044 00000B67 4981C0[400A0000]            add r8, board
  2045 00000B6E 4C89C9                      mov rcx, r9
  2046 00000B71 B852000000                  mov rax, column_cells + 2
  2047 00000B76 48F7E9                      imul rcx
  2048 00000B79 4901C0                      add r8, rax
  2049 00000B7C 41C6004F                    mov byte [r8], char_O
  2050 00000B80 C3                          ret
  2051                                  
  2052                                  print_ball_3:
  2053 00000B81 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2054 00000B88 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2055 00000B8F 4981C0[400A0000]            add r8, board
  2056 00000B96 4C89C9                      mov rcx, r9
  2057 00000B99 B852000000                  mov rax, column_cells + 2
  2058 00000B9E 48F7E9                      imul rcx
  2059 00000BA1 4901C0                      add r8, rax
  2060 00000BA4 41C6004F                    mov byte [r8], char_O
  2061 00000BA8 C3                          ret
  2062                                  
  2063                                  	;mov rax, board + r8 + r9 * (column_cells + 2)
  2064                                  	
  2065                                  print_pallet:
  2066                                      ; Primero borrar la paleta anterior completa (usando el tamaño máximo posible)
  2067 00000BA9 4C8B05(BF140000)            mov r8, [pallet_position]
  2068 00000BB0 488B0D(D7140000)            mov rcx, [extended_pallet_size]
  2069                                      .clear_pallet:
  2070 00000BB7 41C60020                        mov byte [r8], char_space
  2071 00000BBB 49FFC0                          inc r8
  2072 00000BBE 48FFC9                          dec rcx
  2073 00000BC1 75F4                            jnz .clear_pallet
  2074                                  
  2075                                      ; Luego dibujar la nueva paleta con el tamaño actual
  2076 00000BC3 4C8B05(BF140000)            mov r8, [pallet_position]
  2077 00000BCA 488B0D(C7140000)            mov rcx, [pallet_size]
  2078                                      .write_pallet:
  2079 00000BD1 41C6003D                        mov byte [r8], char_equal
  2080 00000BD5 49FFC0                          inc r8
  2081 00000BD8 48FFC9                          dec rcx
  2082 00000BDB 75F4                            jnz .write_pallet
  2083                                  
  2084 00000BDD C3                          ret
  2085                                  
  2086                                  move_pallet:
  2087                                      
  2088 00000BDE 803D(FF140000)00            cmp byte [ball_moving], 0
  2089 00000BE5 7507                        jne .continue_movement
  2090 00000BE7 C605(FF140000)01            mov byte [ball_moving], 1
  2091                                  
  2092                                      .continue_movement:
  2093 00000BEE 4883FFFF                        cmp rdi, left_direction
  2094 00000BF2 7531                            jne .move_right
  2095                                  
  2096                                          .move_left:
  2097                                              ; Verificar si la siguiente posición sería una X (borde izquierdo)
  2098 00000BF4 4C8B05(BF140000)                    mov r8, [pallet_position]
  2099 00000BFB 49FFC8                              dec r8              ; Verificar la posición a la izquierda
  2100 00000BFE 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
  2101 00000C01 3C58                                cmp al, 'X'        ; Comparar si es una X
  2102 00000C03 744E                                je .end            ; Si es X, no mover
  2103                                              
  2104 00000C05 4C8B05(BF140000)                    mov r8, [pallet_position]
  2105 00000C0C 4C8B0D(C7140000)                    mov r9, [pallet_size]
  2106 00000C13 43C64408FF20                        mov byte [r8 + r9 - 1], char_space  ; Borrar último carácter de la paleta
  2107 00000C19 49FFC8                              dec r8
  2108 00000C1C 4C8905(BF140000)                    mov [pallet_position], r8
  2109 00000C23 EB2E                                jmp .end
  2110                                              
  2111                                          .move_right:
  2112                                              ; Verificar si la siguiente posición después de la paleta sería una X
  2113 00000C25 4C8B05(BF140000)                    mov r8, [pallet_position]
  2114 00000C2C 4C8B0D(C7140000)                    mov r9, [pallet_size]
  2115 00000C33 4D01C8                              add r8, r9         ; Moverse al final de la paleta
  2116 00000C36 418A4002                            mov al, [r8+2]       ; Cargar el carácter en esa posición
  2117 00000C3A 3C58                                cmp al, 'X'        ; Comparar si es una X
  2118 00000C3C 7415                                je .end            ; Si es X, no mover
  2119                                              
  2120 00000C3E 4C8B05(BF140000)                    mov r8, [pallet_position]
  2121 00000C45 41C60020                            mov byte [r8], char_space
  2122 00000C49 49FFC0                              inc r8
  2123 00000C4C 4C8905(BF140000)                    mov [pallet_position], r8
  2124                                          .end:
  2125 00000C53 C3                                  ret
  2126                                  
  2127                                  
  2128                                  
  2129                                              
  2130                                  ; Nueva función auxiliar para actualizar la posición de la bola atrapada
  2131                                  update_caught_ball_position:
  2132 00000C54 55                          push rbp
  2133 00000C55 4889E5                      mov rbp, rsp
  2134                                      
  2135                                      ; Calcular la nueva posición de la bola basada en la paleta
  2136 00000C58 4C8B05(BF140000)            mov r8, [pallet_position]
  2137 00000C5F 4981E8[400A0000]            sub r8, board          ; Obtener posición relativa
  2138 00000C66 B852000000                  mov rax, column_cells + 2
  2139 00000C6B 4831D2                      xor rdx, rdx
  2140 00000C6E 48F7F0                      div rax                ; División para obtener X,Y
  2141                                      
  2142                                      ; rdx contiene X (resto), rax contiene Y (cociente)
  2143 00000C71 4989C1                      mov r9, rax            ; Y de la paleta
  2144 00000C74 49FFC9                      dec r9                 ; Una posición arriba de la paleta
  2145                                      
  2146                                      ; Añadir el offset guardado a la posición X
  2147 00000C77 4889D0                      mov rax, rdx
  2148 00000C7A 480305(FF220000)            add rax, [ball_catch_offset]
  2149 00000C81 488905(DF140000)            mov [ball_x_pos], rax
  2150 00000C88 4C890D(E7140000)            mov [ball_y_pos], r9
  2151                                      
  2152 00000C8F 5D                          pop rbp
  2153 00000C90 C3                          ret
  2154                                  
  2155                                  
  2156                                  move_all_balls:
  2157 00000C91 55                          push rbp
  2158 00000C92 4889E5                      mov rbp, rsp
  2159 00000C95 53                          push rbx
  2160                                      
  2161                                      ; Inicializar contador de bolas
  2162 00000C96 4831DB                      xor rbx, rbx
  2163                                      
  2164                                  .loop_balls:
  2165                                      ; Verificar si hemos procesado todas las bolas
  2166 00000C99 3A1D(3E240000)              cmp bl, byte [balls_count]
  2167 00000C9F 7D1D                        jge .end
  2168                                      
  2169                                      ; Calcular offset de la bola actual
  2170 00000CA1 B821000000                  mov rax, BALL_STRUCT_SIZE
  2171 00000CA6 48F7E3                      mul rbx
  2172                                      
  2173                                      ; Verificar si la bola está activa
  2174 00000CA9 80B8[FB230000]01            cmp byte [balls_data + rax + 32], 1
  2175 00000CB0 7507                        jne .next_ball
  2176                                      
  2177                                      ; Guardar offset en la pila
  2178 00000CB2 50                          push rax
  2179                                      
  2180                                      ; Llamar a move_ball con los parámetros de esta bola
  2181 00000CB3 E809000000                  call move_ball
  2182                                      
  2183                                      ; Restaurar offset
  2184 00000CB8 58                          pop rax
  2185                                      
  2186                                  .next_ball:
  2187 00000CB9 48FFC3                      inc rbx
  2188 00000CBC EBDB                        jmp .loop_balls
  2189                                      
  2190                                  .end:
  2191 00000CBE 5B                          pop rbx
  2192 00000CBF 5D                          pop rbp
  2193 00000CC0 C3                          ret
  2194                                  
  2195                                  move_ball:
  2196                                  
  2197 00000CC1 803D(FC220000)01            cmp byte [ball_caught], 1
  2198 00000CC8 0F849D000000                je .move_with_pallet
  2199                                  
  2200 00000CCE 803D(FF140000)00            cmp byte [ball_moving], 0
  2201 00000CD5 0F84B8010000                je .end
  2202                                  
  2203                                      ; Incrementar contador de velocidad
  2204 00000CDB 48FF05(F3220000)            inc qword [speed_counter]
  2205                                      
  2206                                      ; Verificar si debemos mover la bola en este ciclo
  2207 00000CE2 488B05(F3220000)            mov rax, [speed_counter]
  2208 00000CE9 483B05(E3220000)            cmp rax, [ball_speed]
  2209 00000CF0 0F8C9D010000                jl .end
  2210                                      
  2211                                      ; Resetear contador de velocidad
  2212 00000CF6 48C705(F3220000)00-         mov qword [speed_counter], 0
  2212 00000CFE 000000             
  2213                                  
  2214                                      ; Borrar la posición actual de la bola
  2215 00000D01 4C8B05(DF140000)            mov r8, [ball_x_pos]
  2216 00000D08 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  2217 00000D0F 4981C0[400A0000]            add r8, board
  2218 00000D16 4C89C9                      mov rcx, r9
  2219 00000D19 B852000000                  mov rax, column_cells + 2
  2220 00000D1E 48F7E9                      imul rcx
  2221 00000D21 4901C0                      add r8, rax
  2222 00000D24 41C60020                    mov byte [r8], char_space
  2223                                  
  2224                                      ; Calcular siguiente posición X
  2225 00000D28 4C8B05(DF140000)            mov r8, [ball_x_pos]
  2226 00000D2F 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  2227 00000D36 488B05(EF140000)            mov rax, [ball_direction_x]
  2228 00000D3D 4901C0                      add r8, rax               ; Nueva posición X
  2229                                  
  2230                                      ; Calcular la dirección de memoria para la siguiente posición
  2231 00000D40 4D89C2                      mov r10, r8
  2232 00000D43 4981C2[400A0000]            add r10, board
  2233 00000D4A 4C89C9                      mov rcx, r9
  2234 00000D4D B852000000                  mov rax, column_cells + 2
  2235 00000D52 48F7E9                      imul rcx
  2236 00000D55 4901C2                      add r10, rax
  2237                                  
  2238                                      ; Verificar si hay una X en la siguiente posición X
  2239 00000D58 418A02                      mov al, [r10]
  2240 00000D5B 3C58                        cmp al, 'X'
  2241 00000D5D 7565                        jne .check_block_x
  2242 00000D5F 48F71D(EF140000)            neg qword [ball_direction_x]  ; Cambiar dirección X si hay una X
  2243 00000D66 E928010000                  jmp .end
  2244                                  
  2245                                      .move_with_pallet:
  2246                                          ; Borrar la posición actual de la bola
  2247 00000D6B 4C8B05(DF140000)                mov r8, [ball_x_pos]
  2248 00000D72 4C8B0D(E7140000)                mov r9, [ball_y_pos]
  2249 00000D79 4D89C2                          mov r10, r8
  2250 00000D7C 4981C2[400A0000]                add r10, board
  2251 00000D83 4C89C9                          mov rcx, r9
  2252 00000D86 B852000000                      mov rax, column_cells + 2
  2253 00000D8B 48F7E9                          imul rcx
  2254 00000D8E 4901C2                          add r10, rax
  2255 00000D91 41C60220                        mov byte [r10], char_space
  2256                                  
  2257                                          ; Actualizar posición X basada en la paleta
  2258 00000D95 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2259 00000D9C 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2260 00000DA3 4C0305(FF220000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2261 00000DAA 4C8905(DF140000)                mov [ball_x_pos], r8          ; Guardar nueva posición X
  2262                                  
  2263                                          ; Mantener la bola una posición arriba de la paleta
  2264 00000DB1 4C8B0D(E7140000)                mov r9, [ball_y_pos]          ; Mantener la misma altura
  2265 00000DB8 4C890D(E7140000)                mov [ball_y_pos], r9          ; Actualizar posición Y
  2266                                  
  2267 00000DBF E9CF000000                      jmp .end
  2268                                  
  2269                                  
  2270                                      .check_block_x:
  2271                                          ; Verificar colisión con bloques en X
  2272 00000DC4 4150                            push r8     ; Guardar registros que usa check_block_collision
  2273 00000DC6 4151                            push r9
  2274 00000DC8 4152                            push r10
  2275 00000DCA E8F20A0000                      call check_block_collision
  2276 00000DCF 415A                            pop r10
  2277 00000DD1 4159                            pop r9
  2278 00000DD3 4158                            pop r8
  2279 00000DD5 4885C0                          test rax, rax
  2280 00000DD8 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2281 00000DDA 48F71D(EF140000)                neg qword [ball_direction_x]  ; Si hay colisión, rebotar
  2282 00000DE1 E9AD000000                      jmp .end
  2283                                  
  2284                                      .check_paddle_x:
  2285                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2286 00000DE6 41803A3D                        cmp byte [r10], char_equal
  2287 00000DEA 750C                            jne .check_y_movement
  2288 00000DEC 48F71D(EF140000)                neg qword [ball_direction_x]  ; Cambiar dirección X si hay una paleta
  2289 00000DF3 E99B000000                      jmp .end
  2290                                  
  2291                                      .check_y_movement:
  2292                                          ; Calcular siguiente posición Y
  2293 00000DF8 488B05(F7140000)                mov rax, [ball_direction_y]
  2294 00000DFF 4901C1                          add r9, rax                  ; Nueva posición Y
  2295                                  
  2296                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2297 00000E02 4D89C2                          mov r10, r8
  2298 00000E05 4981C2[400A0000]                add r10, board
  2299 00000E0C 4C89C9                          mov rcx, r9
  2300 00000E0F B852000000                      mov rax, column_cells + 2
  2301 00000E14 48F7E9                          imul rcx
  2302 00000E17 4901C2                          add r10, rax
  2303                                  
  2304                                          ; Verificar si hay una X en la siguiente posición Y
  2305 00000E1A 418A02                          mov al, [r10]
  2306 00000E1D 3C58                            cmp al, 'X'
  2307 00000E1F 7509                            jne .check_block_y
  2308 00000E21 48F71D(F7140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una X
  2309 00000E28 EB69                            jmp .end
  2310                                  
  2311                                      .check_block_y:
  2312                                          ; Verificar colisión con bloques en Y
  2313 00000E2A 4150                            push r8     ; Guardar registros que usa check_block_collision
  2314 00000E2C 4151                            push r9
  2315 00000E2E 4152                            push r10
  2316 00000E30 E88C0A0000                      call check_block_collision
  2317 00000E35 415A                            pop r10
  2318 00000E37 4159                            pop r9
  2319 00000E39 4158                            pop r8
  2320 00000E3B 4885C0                          test rax, rax
  2321 00000E3E 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2322 00000E40 48F71D(F7140000)                neg qword [ball_direction_y]  ; Si hay colisión, rebotar
  2323 00000E47 EB4A                            jmp .end
  2324                                  
  2325                                      .check_paddle_y:
  2326                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2327 00000E49 41803A3D                        cmp byte [r10], char_equal
  2328 00000E4D 7536                            jne .update_position
  2329                                  
  2330                                          ; Verificar si el poder catch está activo
  2331 00000E4F 803D(FB220000)01                cmp byte [catch_power_active], 1
  2332 00000E56 7524                            jne .normal_bounce
  2333                                  
  2334                                          ; Activar el modo "atrapado"
  2335 00000E58 C605(FC220000)01                mov byte [ball_caught], 1
  2336                                          
  2337                                          ; Guardar la posición X actual de la bola como offset
  2338 00000E5F 488B05(DF140000)                mov rax, [ball_x_pos]           ; Posición X actual de la bola
  2339 00000E66 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2340 00000E6D 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2341 00000E73 488905(FF220000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2342                                          
  2343 00000E7A EB17                            jmp .end
  2344                                  
  2345                                      .normal_bounce:
  2346 00000E7C 48F71D(F7140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una paleta
  2347 00000E83 EB0E                            jmp .end
  2348                                  
  2349                                  
  2350                                      .update_position:
  2351 00000E85 4C8905(DF140000)                mov [ball_x_pos], r8
  2352 00000E8C 4C890D(E7140000)                mov [ball_y_pos], r9
  2353                                  
  2354                                      .end:
  2355 00000E93 C3                              ret
  2356                                  
  2357                                  
  2358                                  move_ball_2:
  2359                                  
  2360 00000E94 803D(FD220000)01            cmp byte [ball_caught_2], 1
  2361 00000E9B 0F849D000000                je .move_with_pallet
  2362                                  
  2363 00000EA1 803D(21150000)00            cmp byte [ball2_moving], 0
  2364 00000EA8 0F84B8010000                je .end
  2365                                  
  2366                                      ; Incrementar contador de velocidad
  2367 00000EAE 48FF05(F3220000)            inc qword [speed_counter]
  2368                                      
  2369                                      ; Verificar si debemos mover la bola en este ciclo
  2370 00000EB5 488B05(F3220000)            mov rax, [speed_counter]
  2371 00000EBC 483B05(E3220000)            cmp rax, [ball_speed]
  2372 00000EC3 0F8C9D010000                jl .end
  2373                                      
  2374                                      ; Resetear contador de velocidad
  2375 00000EC9 48C705(F3220000)00-         mov qword [speed_counter], 0
  2375 00000ED1 000000             
  2376                                  
  2377                                      ; Borrar la posición actual de la bola
  2378 00000ED4 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2379 00000EDB 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2380 00000EE2 4981C0[400A0000]            add r8, board
  2381 00000EE9 4C89C9                      mov rcx, r9
  2382 00000EEC B852000000                  mov rax, column_cells + 2
  2383 00000EF1 48F7E9                      imul rcx
  2384 00000EF4 4901C0                      add r8, rax
  2385 00000EF7 41C60020                    mov byte [r8], char_space
  2386                                  
  2387                                      ; Calcular siguiente posición X
  2388 00000EFB 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2389 00000F02 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2390 00000F09 488B05(11150000)            mov rax, [ball2_direction_x]
  2391 00000F10 4901C0                      add r8, rax               ; Nueva posición X
  2392                                  
  2393                                      ; Calcular la dirección de memoria para la siguiente posición
  2394 00000F13 4D89C2                      mov r10, r8
  2395 00000F16 4981C2[400A0000]            add r10, board
  2396 00000F1D 4C89C9                      mov rcx, r9
  2397 00000F20 B852000000                  mov rax, column_cells + 2
  2398 00000F25 48F7E9                      imul rcx
  2399 00000F28 4901C2                      add r10, rax
  2400                                  
  2401                                      ; Verificar si hay una X en la siguiente posición X
  2402 00000F2B 418A02                      mov al, [r10]
  2403 00000F2E 3C58                        cmp al, 'X'
  2404 00000F30 7565                        jne .check_block_x
  2405 00000F32 48F71D(11150000)            neg qword [ball2_direction_x]  ; Cambiar dirección X si hay una X
  2406 00000F39 E928010000                  jmp .end
  2407                                  
  2408                                      .move_with_pallet:
  2409                                          ; Borrar la posición actual de la bola
  2410 00000F3E 4C8B05(01150000)                mov r8, [ball2_x_pos]
  2411 00000F45 4C8B0D(09150000)                mov r9, [ball2_y_pos]
  2412 00000F4C 4D89C2                          mov r10, r8
  2413 00000F4F 4981C2[400A0000]                add r10, board
  2414 00000F56 4C89C9                          mov rcx, r9
  2415 00000F59 B852000000                      mov rax, column_cells + 2
  2416 00000F5E 48F7E9                          imul rcx
  2417 00000F61 4901C2                          add r10, rax
  2418 00000F64 41C60220                        mov byte [r10], char_space
  2419                                  
  2420                                          ; Actualizar posición X basada en la paleta
  2421 00000F68 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2422 00000F6F 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2423 00000F76 4C0305(FF220000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2424 00000F7D 4C8905(01150000)                mov [ball2_x_pos], r8          ; Guardar nueva posición X
  2425                                  
  2426                                          ; Mantener la bola una posición arriba de la paleta
  2427 00000F84 4C8B0D(09150000)                mov r9, [ball2_y_pos]          ; Mantener la misma altura
  2428 00000F8B 4C890D(09150000)                mov [ball2_y_pos], r9          ; Actualizar posición Y
  2429                                  
  2430 00000F92 E9CF000000                      jmp .end
  2431                                  
  2432                                  
  2433                                      .check_block_x:
  2434                                          ; Verificar colisión con bloques en X
  2435 00000F97 4150                            push r8     ; Guardar registros que usa check_block_collision
  2436 00000F99 4151                            push r9
  2437 00000F9B 4152                            push r10
  2438 00000F9D E81F090000                      call check_block_collision
  2439 00000FA2 415A                            pop r10
  2440 00000FA4 4159                            pop r9
  2441 00000FA6 4158                            pop r8
  2442 00000FA8 4885C0                          test rax, rax
  2443 00000FAB 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2444 00000FAD 48F71D(11150000)                neg qword [ball2_direction_x]  ; Si hay colisión, rebotar
  2445 00000FB4 E9AD000000                      jmp .end
  2446                                  
  2447                                      .check_paddle_x:
  2448                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2449 00000FB9 41803A3D                        cmp byte [r10], char_equal
  2450 00000FBD 750C                            jne .check_y_movement
  2451 00000FBF 48F71D(11150000)                neg qword [ball2_direction_x]  ; Cambiar dirección X si hay una paleta
  2452 00000FC6 E99B000000                      jmp .end
  2453                                  
  2454                                      .check_y_movement:
  2455                                          ; Calcular siguiente posición Y
  2456 00000FCB 488B05(19150000)                mov rax, [ball2_direction_y]
  2457 00000FD2 4901C1                          add r9, rax                  ; Nueva posición Y
  2458                                  
  2459                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2460 00000FD5 4D89C2                          mov r10, r8
  2461 00000FD8 4981C2[400A0000]                add r10, board
  2462 00000FDF 4C89C9                          mov rcx, r9
  2463 00000FE2 B852000000                      mov rax, column_cells + 2
  2464 00000FE7 48F7E9                          imul rcx
  2465 00000FEA 4901C2                          add r10, rax
  2466                                  
  2467                                          ; Verificar si hay una X en la siguiente posición Y
  2468 00000FED 418A02                          mov al, [r10]
  2469 00000FF0 3C58                            cmp al, 'X'
  2470 00000FF2 7509                            jne .check_block_y
  2471 00000FF4 48F71D(19150000)                neg qword [ball2_direction_y]  ; Cambiar dirección Y si hay una X
  2472 00000FFB EB69                            jmp .end
  2473                                  
  2474                                      .check_block_y:
  2475                                          ; Verificar colisión con bloques en Y
  2476 00000FFD 4150                            push r8     ; Guardar registros que usa check_block_collision
  2477 00000FFF 4151                            push r9
  2478 00001001 4152                            push r10
  2479 00001003 E8B9080000                      call check_block_collision
  2480 00001008 415A                            pop r10
  2481 0000100A 4159                            pop r9
  2482 0000100C 4158                            pop r8
  2483 0000100E 4885C0                          test rax, rax
  2484 00001011 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2485 00001013 48F71D(19150000)                neg qword [ball2_direction_y]  ; Si hay colisión, rebotar
  2486 0000101A EB4A                            jmp .end
  2487                                  
  2488                                      .check_paddle_y:
  2489                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2490 0000101C 41803A3D                        cmp byte [r10], char_equal
  2491 00001020 7536                            jne .update_position
  2492                                  
  2493                                          ; Verificar si el poder catch está activo
  2494 00001022 803D(FB220000)01                cmp byte [catch_power_active], 1
  2495 00001029 7524                            jne .normal_bounce
  2496                                  
  2497                                          ; Activar el modo "atrapado"
  2498 0000102B C605(FD220000)01                mov byte [ball_caught_2], 1
  2499                                          
  2500                                          ; Guardar la posición X actual de la bola como offset
  2501 00001032 488B05(01150000)                mov rax, [ball2_x_pos]           ; Posición X actual de la bola
  2502 00001039 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2503 00001040 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2504 00001046 488905(FF220000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2505                                          
  2506 0000104D EB17                            jmp .end
  2507                                  
  2508                                      .normal_bounce:
  2509 0000104F 48F71D(19150000)                neg qword [ball2_direction_y]  ; Cambiar dirección Y si hay una paleta
  2510 00001056 EB0E                            jmp .end
  2511                                  
  2512                                  
  2513                                      .update_position:
  2514 00001058 4C8905(01150000)                mov [ball2_x_pos], r8
  2515 0000105F 4C890D(09150000)                mov [ball2_y_pos], r9
  2516                                  
  2517                                      .end:
  2518 00001066 C3                              ret
  2519                                  
  2520                                  move_ball_3:
  2521                                  
  2522 00001067 803D(FE220000)01            cmp byte [ball_caught_3], 1
  2523 0000106E 0F849D000000                je .move_with_pallet
  2524                                  
  2525 00001074 803D(43150000)00            cmp byte [ball3_moving], 0
  2526 0000107B 0F84B8010000                je .end
  2527                                  
  2528                                      ; Incrementar contador de velocidad
  2529 00001081 48FF05(F3220000)            inc qword [speed_counter]
  2530                                      
  2531                                      ; Verificar si debemos mover la bola en este ciclo
  2532 00001088 488B05(F3220000)            mov rax, [speed_counter]
  2533 0000108F 483B05(E3220000)            cmp rax, [ball_speed]
  2534 00001096 0F8C9D010000                jl .end
  2535                                      
  2536                                      ; Resetear contador de velocidad
  2537 0000109C 48C705(F3220000)00-         mov qword [speed_counter], 0
  2537 000010A4 000000             
  2538                                  
  2539                                      ; Borrar la posición actual de la bola
  2540 000010A7 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2541 000010AE 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2542 000010B5 4981C0[400A0000]            add r8, board
  2543 000010BC 4C89C9                      mov rcx, r9
  2544 000010BF B852000000                  mov rax, column_cells + 2
  2545 000010C4 48F7E9                      imul rcx
  2546 000010C7 4901C0                      add r8, rax
  2547 000010CA 41C60020                    mov byte [r8], char_space
  2548                                  
  2549                                      ; Calcular siguiente posición X
  2550 000010CE 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2551 000010D5 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2552 000010DC 488B05(33150000)            mov rax, [ball3_direction_x]
  2553 000010E3 4901C0                      add r8, rax               ; Nueva posición X
  2554                                  
  2555                                      ; Calcular la dirección de memoria para la siguiente posición
  2556 000010E6 4D89C2                      mov r10, r8
  2557 000010E9 4981C2[400A0000]            add r10, board
  2558 000010F0 4C89C9                      mov rcx, r9
  2559 000010F3 B852000000                  mov rax, column_cells + 2
  2560 000010F8 48F7E9                      imul rcx
  2561 000010FB 4901C2                      add r10, rax
  2562                                  
  2563                                      ; Verificar si hay una X en la siguiente posición X
  2564 000010FE 418A02                      mov al, [r10]
  2565 00001101 3C58                        cmp al, 'X'
  2566 00001103 7565                        jne .check_block_x
  2567 00001105 48F71D(33150000)            neg qword [ball3_direction_x]  ; Cambiar dirección X si hay una X
  2568 0000110C E928010000                  jmp .end
  2569                                  
  2570                                      .move_with_pallet:
  2571                                          ; Borrar la posición actual de la bola
  2572 00001111 4C8B05(23150000)                mov r8, [ball3_x_pos]
  2573 00001118 4C8B0D(2B150000)                mov r9, [ball3_y_pos]
  2574 0000111F 4D89C2                          mov r10, r8
  2575 00001122 4981C2[400A0000]                add r10, board
  2576 00001129 4C89C9                          mov rcx, r9
  2577 0000112C B852000000                      mov rax, column_cells + 2
  2578 00001131 48F7E9                          imul rcx
  2579 00001134 4901C2                          add r10, rax
  2580 00001137 41C60220                        mov byte [r10], char_space
  2581                                  
  2582                                          ; Actualizar posición X basada en la paleta
  2583 0000113B 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2584 00001142 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2585 00001149 4C0305(FF220000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2586 00001150 4C8905(23150000)                mov [ball3_x_pos], r8          ; Guardar nueva posición X
  2587                                  
  2588                                          ; Mantener la bola una posición arriba de la paleta
  2589 00001157 4C8B0D(2B150000)                mov r9, [ball3_y_pos]          ; Mantener la misma altura
  2590 0000115E 4C890D(2B150000)                mov [ball3_y_pos], r9          ; Actualizar posición Y
  2591                                  
  2592 00001165 E9CF000000                      jmp .end
  2593                                  
  2594                                  
  2595                                      .check_block_x:
  2596                                          ; Verificar colisión con bloques en X
  2597 0000116A 4150                            push r8     ; Guardar registros que usa check_block_collision
  2598 0000116C 4151                            push r9
  2599 0000116E 4152                            push r10
  2600 00001170 E84C070000                      call check_block_collision
  2601 00001175 415A                            pop r10
  2602 00001177 4159                            pop r9
  2603 00001179 4158                            pop r8
  2604 0000117B 4885C0                          test rax, rax
  2605 0000117E 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2606 00001180 48F71D(33150000)                neg qword [ball3_direction_x]  ; Si hay colisión, rebotar
  2607 00001187 E9AD000000                      jmp .end
  2608                                  
  2609                                      .check_paddle_x:
  2610                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2611 0000118C 41803A3D                        cmp byte [r10], char_equal
  2612 00001190 750C                            jne .check_y_movement
  2613 00001192 48F71D(33150000)                neg qword [ball3_direction_x]  ; Cambiar dirección X si hay una paleta
  2614 00001199 E99B000000                      jmp .end
  2615                                  
  2616                                      .check_y_movement:
  2617                                          ; Calcular siguiente posición Y
  2618 0000119E 488B05(3B150000)                mov rax, [ball3_direction_y]
  2619 000011A5 4901C1                          add r9, rax                  ; Nueva posición Y
  2620                                  
  2621                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2622 000011A8 4D89C2                          mov r10, r8
  2623 000011AB 4981C2[400A0000]                add r10, board
  2624 000011B2 4C89C9                          mov rcx, r9
  2625 000011B5 B852000000                      mov rax, column_cells + 2
  2626 000011BA 48F7E9                          imul rcx
  2627 000011BD 4901C2                          add r10, rax
  2628                                  
  2629                                          ; Verificar si hay una X en la siguiente posición Y
  2630 000011C0 418A02                          mov al, [r10]
  2631 000011C3 3C58                            cmp al, 'X'
  2632 000011C5 7509                            jne .check_block_y
  2633 000011C7 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Cambiar dirección Y si hay una X
  2634 000011CE EB69                            jmp .end
  2635                                  
  2636                                      .check_block_y:
  2637                                          ; Verificar colisión con bloques en Y
  2638 000011D0 4150                            push r8     ; Guardar registros que usa check_block_collision
  2639 000011D2 4151                            push r9
  2640 000011D4 4152                            push r10
  2641 000011D6 E8E6060000                      call check_block_collision
  2642 000011DB 415A                            pop r10
  2643 000011DD 4159                            pop r9
  2644 000011DF 4158                            pop r8
  2645 000011E1 4885C0                          test rax, rax
  2646 000011E4 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2647 000011E6 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Si hay colisión, rebotar
  2648 000011ED EB4A                            jmp .end
  2649                                  
  2650                                      .check_paddle_y:
  2651                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2652 000011EF 41803A3D                        cmp byte [r10], char_equal
  2653 000011F3 7536                            jne .update_position
  2654                                  
  2655                                          ; Verificar si el poder catch está activo
  2656 000011F5 803D(FB220000)01                cmp byte [catch_power_active], 1
  2657 000011FC 7524                            jne .normal_bounce
  2658                                  
  2659                                          ; Activar el modo "atrapado"
  2660 000011FE C605(FE220000)01                mov byte [ball_caught_3], 1
  2661                                          
  2662                                          ; Guardar la posición X actual de la bola como offset
  2663 00001205 488B05(23150000)                mov rax, [ball3_x_pos]           ; Posición X actual de la bola
  2664 0000120C 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2665 00001213 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2666 00001219 488905(FF220000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2667                                          
  2668 00001220 EB17                            jmp .end
  2669                                  
  2670                                      .normal_bounce:
  2671 00001222 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Cambiar dirección Y si hay una paleta
  2672 00001229 EB0E                            jmp .end
  2673                                  
  2674                                  
  2675                                      .update_position:
  2676 0000122B 4C8905(23150000)                mov [ball3_x_pos], r8
  2677 00001232 4C890D(2B150000)                mov [ball3_y_pos], r9
  2678                                  
  2679                                      .end:
  2680 00001239 C3                              ret
  2681                                  
  2682                                  ; Nueva función para procesar la tecla C cuando la bola está atrapada
  2683                                  ; Procesar la tecla 'c' cuando el poder de atrapar está activo
  2684                                  process_catch_release:
  2685 0000123A 55                          push rbp
  2686 0000123B 4889E5                      mov  rbp, rsp
  2687                                  
  2688                                      ; Verificar si el poder está activo
  2689 0000123E 803D(FB220000)01            cmp byte [catch_power_active], 1
  2690 00001245 0F8586000000                jne .no_catch_power
  2691                                  
  2692                                      ; Verificar si se presionó 'c'
  2693 0000124B 803D(07230000)63            cmp byte [last_key], 'c'
  2694 00001252 757D                        jne .no_catch_power
  2695                                  
  2696                                      ; Ahora revisamos bola 1
  2697 00001254 803D(FC220000)01            cmp byte [ball_caught], 1
  2698 0000125B 751F                        jne .check_ball2
  2699                                      ; Suelta la bola 1
  2700 0000125D C605(FC220000)00            mov byte [ball_caught], 0
  2701 00001264 48C705(EF140000)01-         mov qword [ball_direction_x], 1
  2701 0000126C 000000             
  2702 0000126F 48C705(F7140000)FF-         mov qword [ball_direction_y], -1
  2702 00001277 FFFFFF             
  2703 0000127A EB4E                        jmp .finish
  2704                                  
  2705                                  .check_ball2:
  2706 0000127C 803D(FD220000)01            cmp byte [ball_caught_2], 1
  2707 00001283 751F                        jne .check_ball3
  2708                                      ; Suelta la bola 2
  2709 00001285 C605(FD220000)00            mov byte [ball_caught_2], 0
  2710 0000128C 48C705(11150000)01-         mov qword [ball2_direction_x], 1
  2710 00001294 000000             
  2711 00001297 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  2711 0000129F FFFFFF             
  2712 000012A2 EB26                        jmp .finish
  2713                                  
  2714                                  .check_ball3:
  2715 000012A4 803D(FE220000)01            cmp byte [ball_caught_3], 1
  2716 000012AB 751D                        jne .finish
  2717                                      ; Suelta la bola 3
  2718 000012AD C605(FE220000)00            mov byte [ball_caught_3], 0
  2719 000012B4 48C705(33150000)01-         mov qword [ball3_direction_x], 1
  2719 000012BC 000000             
  2720 000012BF 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  2720 000012C7 FFFFFF             
  2721                                  
  2722                                  .finish:
  2723                                      ; Limpiar la tecla
  2724 000012CA C605(07230000)00            mov byte [last_key], 0
  2725                                  
  2726                                  .no_catch_power:
  2727 000012D1 5D                          pop rbp
  2728 000012D2 C3                          ret
  2729                                  
  2730                                  
  2731                                  
  2732                                  display_level_number:
  2733 000012D3 55                          push rbp
  2734 000012D4 4889E5                      mov rbp, rsp
  2735                                      
  2736                                      ; Limpiar la pantalla primero
  2737                                      print clear, clear_length
    82 000012D7 B801000000          <1>  mov eax, sys_write
    83 000012DC BF01000000          <1>  mov edi, 1
    84 000012E1 48BE-               <1>  mov rsi, %1
    84 000012E3 [1000000000000000]  <1>
    85 000012EB BA07000000          <1>  mov edx, %2
    86 000012F0 0F05                <1>  syscall
  2738                                      
  2739                                      ; Calcular la posición central para el mensaje
  2740                                      ; Para el mensaje "NIVEL X", necesitamos centrar 7 caracteres
  2741 000012F2 B850000000                  mov rax, column_cells
  2742 000012F7 4883E807                    sub rax, 7                  ; longitud de "NIVEL X"
  2743 000012FB 48D1E8                      shr rax, 1                  ; dividir por 2 para centrar
  2744                                      
  2745                                      ; Calcular la fila central
  2746 000012FE BB20000000                  mov rbx, row_cells
  2747 00001303 48D1EB                      shr rbx, 1                  ; dividir por 2 para obtener la fila central
  2748                                      
  2749                                      ; Calcular el offset en el buffer
  2750 00001306 B952000000                  mov rcx, column_cells + 2   ; ancho total de una línea incluyendo newline
  2751 0000130B 48F7E3                      mul rbx                     ; multiplicar por la fila central
  2752 0000130E 4801D8                      add rax, rbx                ; añadir el offset horizontal
  2753                                      
  2754                                      ; Escribir "NIVEL " en la posición calculada
  2755 00001311 488DB8[400A0000]            lea rdi, [board + rax]
  2756 00001318 48BE-                       mov rsi, level_msg
  2756 0000131A [A414000000000000] 
  2757 00001322 B906000000                  mov rcx, level_msg_len
  2758 00001327 F3A4                        rep movsb
  2759                                      
  2760                                      ; Escribir el número del nivel
  2761 00001329 8A05(79150000)              mov al, [current_level]
  2762 0000132F 0430                        add al, '0'                 ; convertir a ASCII
  2763 00001331 8807                        mov [rdi], al
  2764                                      
  2765                                      ; Mostrar el board con el mensaje
  2766                                      print board, board_size
    82 00001333 B801000000          <1>  mov eax, sys_write
    83 00001338 BF01000000          <1>  mov edi, 1
    84 0000133D 48BE-               <1>  mov rsi, %1
    84 0000133F [400A000000000000]  <1>
    85 00001347 BA400A0000          <1>  mov edx, %2
    86 0000134C 0F05                <1>  syscall
  2767                                      
  2768                                      ; Esperar un segundo
  2769 0000134E B823000000                  mov rax, sys_nanosleep
  2770 00001353 48BF-                       mov rdi, level_display_time
  2770 00001355 [AF14000000000000] 
  2771 0000135D 4831F6                      xor rsi, rsi
  2772 00001360 0F05                        syscall
  2773                                      
  2774 00001362 5D                          pop rbp
  2775 00001363 C3                          ret
  2776                                  
  2777                                  ; Función para inicializar un tablero vacío
  2778                                  init_empty_board:
  2779 00001364 56                          push rsi
  2780 00001365 57                          push rdi
  2781 00001366 51                          push rcx
  2782 00001367 50                          push rax
  2783                                  
  2784 00001368 488D35(00000000)            lea rsi, [board_template]   ; Copiar la plantilla del tablero
  2785 0000136F 488D3D(400A0000)            lea rdi, [board]            ; Destino: el tablero actual
  2786 00001376 B9400A0000                  mov rcx, board_template_size
  2787 0000137B F3A4                        rep movsb                   ; Copiar el tablero
  2788                                  
  2789 0000137D 58                          pop rax
  2790 0000137E 59                          pop rcx
  2791 0000137F 5F                          pop rdi
  2792 00001380 5E                          pop rsi
  2793 00001381 C3                          ret
  2794                                  
  2795                                  
  2796                                  init_level:
  2797                                            ; Asegurarse que las otras bolas están desactivadas
  2798 00001382 C605(22150000)00            mov byte [ball2_active], 0
  2799 00001389 C605(44150000)00            mov byte [ball3_active], 0
  2800 00001390 C605(08230000)00            mov byte [laser_power_active], 0
  2801 00001397 E816F4FFFF                  call clear_lasers
  2802 0000139C 488B05(CF140000)            mov rax, [default_pallet_size]
  2803 000013A3 488905(C7140000)            mov [pallet_size], rax
  2804 000013AA 48C705(E3220000)01-         mov qword [ball_speed], 1    ; Restaurar velocidad normal
  2804 000013B2 000000             
  2805                                  
  2806                                      ; 1) Copiamos board_template en board para que quede "virgen"
  2807                                          ; Reiniciar letras activas
  2808 000013B5 488D3D(3C210000)            lea rdi, [letters_map]
  2809 000013BC B990010000                  mov rcx, 100 * 4             ; Cada letra ocupa 4 bytes, limpiar 100 letras
  2810 000013C1 4831C0                      xor rax, rax
  2811 000013C4 F3AA                        rep stosb                    ; Llenar con ceros
  2812                                      
  2813                                      ; Inicializar dirección de la bola (derecha y arriba)
  2814 000013C6 48C705(EF140000)01-         mov qword [ball_direction_x], 1    ; Dirección hacia la derecha (1 = derecha, -1 = izquierda)
  2814 000013CE 000000             
  2815 000013D1 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Dirección hacia arriba (-1 = arriba, 1 = abajo)
  2815 000013D9 FFFFFF             
  2816                                  
  2817                                  
  2818                                      ; Reiniciar contador de letras activas
  2819 000013DC 4831C0                      xor rax, rax
  2820 000013DF 8805(CC220000)              mov [letters_count], al
  2821                                  
  2822                                      ; Reiniciar última letra capturada
  2823 000013E5 C605(CD220000)20            mov byte [last_letter], ' '
  2824 000013EC C605(46200000)00            mov byte [destroyed_blocks], 0 
  2825 000013F3 E86CFFFFFF                  call init_empty_board
  2826 000013F8 E8D6FEFFFF                  call display_level_number
  2827 000013FD E8E8050000                  call init_enemies
  2828                                      
  2829 00001402 56                          push rsi
  2830 00001403 57                          push rdi
  2831 00001404 51                          push rcx
  2832 00001405 50                          push rax
  2833                                  
  2834 00001406 488D35(00000000)            lea rsi, [board_template]
  2835 0000140D 488D3D(400A0000)            lea rdi, [board]
  2836 00001414 B9400A0000                  mov rcx, board_template_size
  2837 00001419 F3A4                        rep movsb                 ; Copiamos la plantilla a board
  2838                                  
  2839 0000141B 58                          pop rax
  2840 0000141C 59                          pop rcx
  2841 0000141D 5F                          pop rdi
  2842 0000141E 5E                          pop rsi
  2843                                  
  2844 0000141F B90A000000                  mov rcx, 10
  2845 00001424 4831C0                      xor rax, rax
  2846 00001427 488D3D(E9200000)            lea rdi, [enemy_spawns_triggered]
  2847 0000142E F3AA                        rep stosb      
  2848                                  
  2849                                      ; Verificar el nivel actual y cargar los bloques correspondientes
  2850 00001430 803D(79150000)01            cmp byte [current_level], 1
  2851 00001437 7431                        je .level1
  2852 00001439 803D(79150000)02            cmp byte [current_level], 2
  2853 00001440 7454                        je .level2
  2854 00001442 803D(79150000)03            cmp byte [current_level], 3
  2855 00001449 7477                        je .level3
  2856 0000144B 803D(79150000)04            cmp byte [current_level], 4
  2857 00001452 0F8492000000                je .level4
  2858 00001458 803D(79150000)05            cmp byte [current_level], 5
  2859 0000145F 0F84B0000000                je .level5
  2860 00001465 E9D3000000                  jmp .done
  2861                                  
  2862                                  
  2863                                  
  2864                                      .level1:
  2865 0000146A C605(7A150000)4E                mov byte [blocks_remaining], level1_blocks_count
  2866 00001471 4831C9                          xor rcx, rcx             
  2867                                          .init_loop1:
  2868 00001474 4883F94E                            cmp rcx, level1_blocks_count
  2869 00001478 0F8DBF000000                        jge .done
  2870 0000147E 4889C8                              mov rax, rcx         
  2871 00001481 486BC005                            imul rax, 5         ; en vez de shl rax,2
  2872 00001485 8A90[7E150000]                      mov dl, byte [level1_blocks + rax + 3]  
  2873 0000148B 8891[761F0000]                      mov byte [block_states + rcx], dl
  2874 00001491 48FFC1                              inc rcx
  2875 00001494 EBDE                                jmp .init_loop1
  2876                                  
  2877                                      .level2:
  2878 00001496 C605(7A150000)5B                mov byte [blocks_remaining], level2_blocks_count
  2879 0000149D 4831C9                          xor rcx, rcx             
  2880                                          .init_loop2:
  2881 000014A0 4883F95B                            cmp rcx, level2_blocks_count
  2882 000014A4 0F8D93000000                        jge .done
  2883 000014AA 4889C8                              mov rax, rcx         
  2884 000014AD 486BC005                            imul rax, 5         ; en vez de shl rax,2
  2885 000014B1 8A90[04170000]                      mov dl, byte [level2_blocks + rax + 3]  
  2886 000014B7 8891[761F0000]                      mov byte [block_states + rcx], dl
  2887 000014BD 48FFC1                              inc rcx
  2888 000014C0 EBDE                                jmp .init_loop2
  2889                                      .level3:
  2890 000014C2 C605(7A150000)68                mov byte [blocks_remaining], level3_blocks_count
  2891 000014C9 4831C9                          xor rcx, rcx             
  2892                                          .init_loop3:
  2893 000014CC 4883F968                            cmp rcx, level3_blocks_count
  2894 000014D0 7D6B                                jge .done
  2895 000014D2 4889C8                              mov rax, rcx         
  2896 000014D5 486BC005                            imul rax, 5         ; en vez de shl rax,2
  2897 000014D9 8A90[CB180000]                      mov dl, byte [level3_blocks + rax + 3]  
  2898 000014DF 8891[761F0000]                      mov byte [block_states + rcx], dl
  2899 000014E5 48FFC1                              inc rcx
  2900 000014E8 EBE2                                jmp .init_loop3
  2901                                  
  2902                                      .level4:
  2903 000014EA C605(7A150000)8C                mov byte [blocks_remaining], level4_blocks_count
  2904 000014F1 4831C9                          xor rcx, rcx             
  2905                                          .init_loop4:
  2906 000014F4 4881F98C000000                      cmp rcx, level4_blocks_count
  2907 000014FB 7D40                                jge .done
  2908 000014FD 4889C8                              mov rax, rcx         
  2909 00001500 486BC005                            imul rax, 5         ; en vez de shl rax,2
  2910 00001504 8A90[D31A0000]                      mov dl, byte [level4_blocks + rax + 3]  
  2911 0000150A 8891[761F0000]                      mov byte [block_states + rcx], dl
  2912 00001510 48FFC1                              inc rcx
  2913 00001513 EBDF                                jmp .init_loop4
  2914                                  
  2915                                      .level5:
  2916 00001515 C605(7A150000)62                mov byte [blocks_remaining], level5_blocks_count
  2917 0000151C 4831C9                          xor rcx, rcx             
  2918                                          .init_loop5:
  2919 0000151F 4883F962                            cmp rcx, level5_blocks_count
  2920 00001523 7D18                                jge .done
  2921 00001525 4889C8                              mov rax, rcx         
  2922 00001528 486BC005                            imul rax, 5         ; en vez de shl rax,2
  2923 0000152C 8A90[8F1D0000]                      mov dl, byte [level5_blocks + rax + 3]  
  2924 00001532 8891[761F0000]                      mov byte [block_states + rcx], dl
  2925 00001538 48FFC1                              inc rcx
  2926 0000153B EBE2                                jmp .init_loop5
  2927                                      .done:
  2928 0000153D C3                              ret
  2929                                  
  2930                                  
  2931                                  ; Función para verificar y manejar la transición de nivel
  2932                                  check_level_complete:
  2933                                      ; Verificar si quedan bloques
  2934 0000153E 803D(7A150000)00            cmp byte [blocks_remaining], 0
  2935 00001545 753C                        jne .not_complete
  2936                                      
  2937                                      ; Incrementar el nivel
  2938 00001547 FE05(79150000)              inc byte [current_level]
  2939                                      
  2940                                      ; Verificar si hemos completado todos los niveles (asumiendo 2 niveles por ahora)
  2941 0000154D 803D(79150000)06            cmp byte [current_level], 6
  2942 00001554 742E                        je game_win
  2943                                      
  2944                                      ; Reinicializar el juego para el siguiente nivel
  2945 00001556 E827FEFFFF                  call init_level
  2946                                      
  2947                                      ; Reinicializar la posición de la bola y la paleta
  2948 0000155B 48C705(DF140000)28-         mov qword [ball_x_pos], 40
  2948 00001563 000000             
  2949 00001566 48C705(E7140000)1C-         mov qword [ball_y_pos], 28
  2949 0000156E 000000             
  2950 00001571 C605(FF140000)00            mov byte [ball_moving], 0
  2951 00001578 48C705(BF140000)-           mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  2951 0000157F [B0130000]         
  2952                                      
  2953                                      .not_complete:
  2954 00001583 C3                              ret
  2955                                  
  2956                                      ; Nueva función para manejar la victoria del juego
  2957                                  game_win:
  2958                                      ; Limpiar la pantalla primero
  2959                                      print clear, clear_length
    82 00001584 B801000000          <1>  mov eax, sys_write
    83 00001589 BF01000000          <1>  mov edi, 1
    84 0000158E 48BE-               <1>  mov rsi, %1
    84 00001590 [1000000000000000]  <1>
    85 00001598 BA07000000          <1>  mov edx, %2
    86 0000159D 0F05                <1>  syscall
  2960                                      
  2961                                      ; Mensaje de victoria
  2962 0000159F 488B05(3E200000)            mov rax, [current_score]    ; Obtener el puntaje final
  2963 000015A6 48BF-                       mov rdi, number_buffer      ; Convertir a string
  2963 000015A8 [4720000000000000] 
  2964 000015B0 E8B4010000                  call number_to_string
  2965                                      
  2966                                      ; Definir mensaje de victoria
  2967                                      section .data
  2968 0000246D C2A146656C69636964-             win_msg: db "¡Felicidades! ¡Has ganado!", 0xA, 0xD
  2968 00002476 616465732120C2A148-
  2968 0000247F 61732067616E61646F-
  2968 00002488 210A0D             
  2969                                          win_msg_len: equ $ - win_msg
  2970 0000248B 50756E74616A652066-             score_msg: db "Puntaje final: "
  2970 00002494 696E616C3A20       
  2971                                          score_msg_len: equ $ - score_msg
  2972                                      section .text
  2973                                      
  2974                                      ; Imprimir mensajes
  2975                                      print win_msg, win_msg_len
    82 000015B5 B801000000          <1>  mov eax, sys_write
    83 000015BA BF01000000          <1>  mov edi, 1
    84 000015BF 48BE-               <1>  mov rsi, %1
    84 000015C1 [6D24000000000000]  <1>
    85 000015C9 BA1E000000          <1>  mov edx, %2
    86 000015CE 0F05                <1>  syscall
  2976                                      print score_msg, score_msg_len
    82 000015D0 B801000000          <1>  mov eax, sys_write
    83 000015D5 BF01000000          <1>  mov edi, 1
    84 000015DA 48BE-               <1>  mov rsi, %1
    84 000015DC [8B24000000000000]  <1>
    85 000015E4 BA0F000000          <1>  mov edx, %2
    86 000015E9 0F05                <1>  syscall
  2977                                      print number_buffer, 20
    82 000015EB B801000000          <1>  mov eax, sys_write
    83 000015F0 BF01000000          <1>  mov edi, 1
    84 000015F5 48BE-               <1>  mov rsi, %1
    84 000015F7 [4720000000000000]  <1>
    85 000015FF BA14000000          <1>  mov edx, %2
    86 00001604 0F05                <1>  syscall
  2978                                      
  2979                                      ; Esperar un momento antes de salir
  2980 00001606 48C705EFE9FFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  2980 0000160F 0000               
  2981 00001611 48C705ECE9FFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  2981 0000161A 0000               
  2982                                      sleeptime
    98 0000161C B823000000          <1>  mov eax, sys_nanosleep
    99 00001621 48BF-               <1>  mov rdi, timespec
    99 00001623 [0000000000000000]  <1>
   100 0000162B 31F6                <1>  xor esi, esi
   101 0000162D 0F05                <1>  syscall
  2983                                      
  2984 0000162F E9490B0000                  jmp exit
  2985                                  
  2986                                  ; Función para imprimir los bloques
  2987                                  ; Función modificada para imprimir bloques
  2988                                  
  2989                                  ; Primero, agreguemos una función para obtener el puntero a los bloques del nivel actual
  2990                                  get_current_level_blocks:
  2991 00001634 803D(79150000)01            cmp byte [current_level], 1
  2992 0000163B 7428                        je .level1
  2993 0000163D 803D(79150000)02            cmp byte [current_level], 2
  2994 00001644 7427                        je .level2
  2995 00001646 803D(79150000)03            cmp byte [current_level], 3
  2996 0000164D 7426                        je .level3
  2997 0000164F 803D(79150000)04            cmp byte [current_level], 4
  2998 00001656 7425                        je .level4
  2999 00001658 803D(79150000)05            cmp byte [current_level], 5
  3000 0000165F 7424                        je .level5
  3001                                      ; Si llegamos aquí, hay un error en el nivel
  3002 00001661 4831C0                      xor rax, rax
  3003 00001664 C3                          ret
  3004                                  
  3005                                      .level1:
  3006 00001665 488D05(7B150000)                lea rax, [level1_blocks]
  3007 0000166C C3                              ret
  3008                                      .level2:
  3009 0000166D 488D05(01170000)                lea rax, [level2_blocks]
  3010 00001674 C3                              ret
  3011                                      .level3:
  3012 00001675 488D05(C8180000)                lea rax, [level3_blocks]
  3013 0000167C C3                              ret
  3014                                      .level4:
  3015 0000167D 488D05(D01A0000)                lea rax, [level4_blocks]
  3016 00001684 C3                              ret
  3017                                      .level5:
  3018 00001685 488D05(8C1D0000)                lea rax, [level5_blocks]
  3019 0000168C C3                              ret
  3020                                  ; Función para obtener la cantidad de bloques del nivel actual
  3021                                  get_current_level_count:
  3022 0000168D 803D(79150000)01            cmp byte [current_level], 1
  3023 00001694 7428                        je .level1
  3024 00001696 803D(79150000)02            cmp byte [current_level], 2
  3025 0000169D 7425                        je .level2
  3026 0000169F 803D(79150000)03            cmp byte [current_level], 3
  3027 000016A6 7422                        je .level3
  3028 000016A8 803D(79150000)04            cmp byte [current_level], 4
  3029 000016AF 741F                        je .level4
  3030 000016B1 803D(79150000)05            cmp byte [current_level], 5
  3031 000016B8 741C                        je .level5
  3032                                      ; Si llegamos aquí, hay un error en el nivel
  3033 000016BA 4831C0                      xor rax, rax
  3034 000016BD C3                          ret
  3035                                  
  3036                                      .level1:
  3037 000016BE B84E000000                      mov rax, level1_blocks_count
  3038 000016C3 C3                              ret
  3039                                      .level2:
  3040 000016C4 B85B000000                      mov rax, level2_blocks_count
  3041 000016C9 C3                              ret
  3042                                      .level3:
  3043 000016CA B868000000                      mov rax, level3_blocks_count
  3044 000016CF C3                              ret
  3045                                      .level4:
  3046 000016D0 B88C000000                      mov rax, level4_blocks_count
  3047 000016D5 C3                              ret
  3048                                      .level5:
  3049 000016D6 B862000000                      mov rax, level5_blocks_count
  3050 000016DB C3                              ret
  3051                                  
  3052                                  
  3053                                  print_blocks:
  3054 000016DC 55                          push rbp
  3055 000016DD 4889E5                      mov rbp, rsp
  3056                                      
  3057                                      ; Obtener puntero a los bloques del nivel actual
  3058 000016E0 E84FFFFFFF                  call get_current_level_blocks
  3059 000016E5 4989C5                      mov r13, rax                  ; Guardar puntero a los bloques en r13
  3060                                      
  3061                                      ; Obtener cantidad de bloques del nivel actual
  3062 000016E8 E8A0FFFFFF                  call get_current_level_count
  3063 000016ED 4989C6                      mov r14, rax                  ; Guardar cantidad de bloques en r14
  3064                                      
  3065 000016F0 4D31E4                      xor r12, r12                  ; Índice del bloque actual
  3066                                      
  3067                                      .print_loop:
  3068 000016F3 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
  3069 000016F6 7D6F                            jge .end
  3070                                          
  3071                                          ; Verificar si el bloque está activo
  3072 000016F8 490FB68424-                     movzx rax, byte [block_states + r12]
  3072 000016FD [761F0000]         
  3073 00001701 4885C0                          test rax, rax
  3074 00001704 745C                            jz .next_block
  3075                                          
  3076                                          ; Obtener posición y tipo del bloque usando r13
  3077 00001706 4C89E0                          mov rax, r12
  3078 00001709 486BC005                        imul rax, 5
  3079 0000170D 4C01E8                          add rax, r13
  3080 00001710 448A00                          mov r8b, [rax]        ; X position
  3081 00001713 448A4801                        mov r9b, [rax + 1]    ; Y position
  3082 00001717 448A5002                        mov r10b, [rax + 2]   ; Tipo de bloque
  3083                                  
  3084                                          ; El resto de la lógica de impresión permanece igual
  3085 0000171B 4D0FB6C0                        movzx r8, r8b
  3086 0000171F 4D0FB6C9                        movzx r9, r9b
  3087 00001723 4981C0[400A0000]                add r8, board
  3088 0000172A B852000000                      mov rax, column_cells + 2
  3089 0000172F 49F7E1                          mul r9
  3090 00001732 4901C0                          add r8, rax
  3091                                          
  3092 00001735 B906000000                      mov rcx, block_length
  3093 0000173A 48BE-                           mov rsi, block_type_1
  3093 0000173C [5515000000000000] 
  3094 00001744 490FB6C2                        movzx rax, r10b
  3095 00001748 48FFC8                          dec rax
  3096 0000174B 486BC006                        imul rax, block_length
  3097 0000174F 4801C6                          add rsi, rax
  3098                                          
  3099                                      .print_block_chars:
  3100 00001752 8A06                            mov al, [rsi]
  3101 00001754 418800                          mov [r8], al
  3102 00001757 48FFC6                          inc rsi
  3103 0000175A 49FFC0                          inc r8
  3104 0000175D 48FFC9                          dec rcx
  3105 00001760 75F0                            jnz .print_block_chars
  3106                                          
  3107                                      .next_block:
  3108 00001762 49FFC4                          inc r12
  3109 00001765 EB8C                            jmp .print_loop
  3110                                          
  3111                                      .end:
  3112 00001767 5D                              pop rbp
  3113 00001768 C3                              ret
  3114                                  
  3115                                  ; Función para convertir número a string
  3116                                  ; Input: RAX = número a convertir
  3117                                  ; RDI = buffer donde escribir el string
  3118                                  number_to_string:
  3119 00001769 53                          push rbx
  3120 0000176A 52                          push rdx
  3121 0000176B 56                          push rsi
  3122 0000176C BB0A000000                  mov rbx, 10          ; Divisor
  3123 00001771 B900000000                  mov rcx, 0          ; Contador de dígitos
  3124                                      
  3125                                      ; Si el número es 0, manejarlo especialmente
  3126 00001776 4885C0                      test rax, rax
  3127 00001779 7509                        jnz .convert_loop
  3128 0000177B C60730                      mov byte [rdi], '0'
  3129 0000177E C6470100                    mov byte [rdi + 1], 0
  3130 00001782 EB20                        jmp .end
  3131                                      
  3132                                      .convert_loop:
  3133 00001784 4831D2                          xor rdx, rdx    ; Limpiar RDX para la división
  3134 00001787 48F7F3                          div rbx         ; RAX/10, cociente en RAX, residuo en RDX
  3135 0000178A 80C230                          add dl, '0'     ; Convertir a ASCII
  3136 0000178D 52                              push rdx        ; Guardar el dígito
  3137 0000178E 48FFC1                          inc rcx         ; Incrementar contador
  3138 00001791 4885C0                          test rax, rax   ; Verificar si quedan más dígitos
  3139 00001794 75EE                            jnz .convert_loop
  3140                                          
  3141                                      .write_loop:
  3142 00001796 5A                              pop rdx         ; Obtener dígito
  3143 00001797 8817                            mov [rdi], dl   ; Escribir al buffer
  3144 00001799 48FFC7                          inc rdi         ; Siguiente posición
  3145 0000179C 48FFC9                          dec rcx         ; Decrementar contador
  3146 0000179F 75F5                            jnz .write_loop
  3147                                          
  3148 000017A1 C60700                      mov byte [rdi], 0   ; Null terminator
  3149                                      
  3150                                      .end:
  3151 000017A4 5E                          pop rsi
  3152 000017A5 5A                          pop rdx
  3153 000017A6 5B                          pop rbx
  3154 000017A7 C3                          ret
  3155                                  
  3156                                  ; Función para imprimir los labels
  3157                                  print_labels:
  3158 000017A8 55                          push rbp
  3159 000017A9 4889E5                      mov rbp, rsp
  3160                                  
  3161                                      ; Crear buffer temporal
  3162 000017AC 4883EC20                    sub rsp, 32
  3163                                  
  3164                                      ; Copiar labels a buffer temporal
  3165 000017B0 4889E7                      mov rdi, rsp
  3166 000017B3 488D35(F3200000)            lea rsi, [score_label]
  3167 000017BA B917000000                  mov rcx, score_label_len
  3168 000017BF F3A4                        rep movsb
  3169                                  
  3170                                      ; Convertir score a string
  3171 000017C1 488B05(3E200000)            mov rax, [current_score]
  3172 000017C8 48BF-                       mov rdi, number_buffer
  3172 000017CA [4720000000000000] 
  3173 000017D2 E892FFFFFF                  call number_to_string
  3174                                  
  3175                                      ; Calcular longitud del número
  3176 000017D7 B900000000                  mov rcx, 0
  3177 000017DC 48BF-                       mov rdi, number_buffer
  3177 000017DE [4720000000000000] 
  3178                                      .count_loop:
  3179 000017E6 803C0F00                        cmp byte [rdi + rcx], 0
  3180 000017EA 7405                            je .count_done
  3181 000017EC 48FFC1                          inc rcx
  3182 000017EF EBF5                            jmp .count_loop
  3183                                      .count_done:
  3184                                  
  3185                                      ; Insertar el número en la posición correcta, alineado a la derecha
  3186 000017F1 4889E7                      mov rdi, rsp
  3187 000017F4 4883C70A                    add rdi, score_pos           ; Moverse a la posición del número
  3188 000017F8 BE0A000000                  mov rsi, 10                  ; Espacio reservado para el número
  3189 000017FD 4829CE                      sub rsi, rcx                 ; Calcular padding necesario
  3190                                      .pad_loop:
  3191 00001800 4885F6                          test rsi, rsi
  3192 00001803 740B                            jz .pad_done
  3193 00001805 C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  3194 00001808 48FFC7                          inc rdi
  3195 0000180B 48FFCE                          dec rsi
  3196 0000180E EBF0                            jmp .pad_loop
  3197                                      .pad_done:
  3198                                  
  3199                                      ; Copiar el número
  3200 00001810 48BE-                       mov rsi, number_buffer
  3200 00001812 [4720000000000000] 
  3201 0000181A F3A4                        rep movsb
  3202                                  
  3203                                      ; Imprimir el buffer completo
  3204                                      print rsp, score_label_len
    82 0000181C B801000000          <1>  mov eax, sys_write
    83 00001821 BF01000000          <1>  mov edi, 1
    84 00001826 4889E6              <1>  mov rsi, %1
    85 00001829 BA17000000          <1>  mov edx, %2
    86 0000182E 0F05                <1>  syscall
  3205                                  
  3206                                      ; Repetir proceso para bloques destruidos
  3207 00001830 4889E7                      mov rdi, rsp
  3208 00001833 488D35(0A210000)            lea rsi, [blocks_label]
  3209 0000183A B91B000000                  mov rcx, blocks_label_len
  3210 0000183F F3A4                        rep movsb
  3211                                  
  3212                                      ; Verificar que el `[` esté en su posición correcta
  3213 00001841 4889E7                      mov rdi, rsp
  3214 00001844 4883C713                    add rdi, blocks_pos - 1  ; Posición exacta donde debe ir el '['
  3215 00001848 C6075B                      mov byte [rdi], '['      ; Garantizar que el `[` esté presente
  3216                                  
  3217                                      ; Convertir bloques destruidos a string
  3218 0000184B 480FB605(46200000)          movzx rax, byte [destroyed_blocks]
  3219 00001853 48BF-                       mov rdi, number_buffer
  3219 00001855 [4720000000000000] 
  3220 0000185D E807FFFFFF                  call number_to_string
  3221                                  
  3222                                      ; Calcular longitud del número
  3223 00001862 B900000000                  mov rcx, 0
  3224 00001867 48BF-                       mov rdi, number_buffer
  3224 00001869 [4720000000000000] 
  3225                                      .count_loop2:
  3226 00001871 803C0F00                        cmp byte [rdi + rcx], 0
  3227 00001875 7405                            je .count_done2
  3228 00001877 48FFC1                          inc rcx
  3229 0000187A EBF5                            jmp .count_loop2
  3230                                      .count_done2:
  3231                                  
  3232                                      ; Insertar el número en la posición correcta, alineado a la derecha
  3233 0000187C 4889E7                      mov rdi, rsp
  3234 0000187F 4883C714                    add rdi, blocks_pos         ; Moverse a la posición del número
  3235 00001883 BE03000000                  mov rsi, 3                  ; Espacio reservado para el número
  3236 00001888 4829CE                      sub rsi, rcx                ; Calcular padding necesario
  3237                                      .pad_loop2:
  3238 0000188B 4885F6                          test rsi, rsi
  3239 0000188E 740B                            jz .pad_done2
  3240 00001890 C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  3241 00001893 48FFC7                          inc rdi
  3242 00001896 48FFCE                          dec rsi
  3243 00001899 EBF0                            jmp .pad_loop2
  3244                                      .pad_done2:
  3245                                  
  3246                                      ; Copiar el número
  3247 0000189B 48BE-                       mov rsi, number_buffer
  3247 0000189D [4720000000000000] 
  3248 000018A5 F3A4                        rep movsb
  3249                                  
  3250                                      ; Imprimir el buffer completo
  3251                                      print rsp, blocks_label_len
    82 000018A7 B801000000          <1>  mov eax, sys_write
    83 000018AC BF01000000          <1>  mov edi, 1
    84 000018B1 4889E6              <1>  mov rsi, %1
    85 000018B4 BA1B000000          <1>  mov edx, %2
    86 000018B9 0F05                <1>  syscall
  3252                                  
  3253                                      ; Restaurar stack
  3254 000018BB 4883C420                    add rsp, 32
  3255 000018BF 5D                          pop rbp
  3256 000018C0 C3                          ret
  3257                                  
  3258                                  
  3259                                  
  3260                                  check_block_collision:
  3261 000018C1 55                          push rbp
  3262 000018C2 4889E5                      mov rbp, rsp
  3263                                  
  3264                                      ; Almacenar el carácter en la posición r10 (pos. de la bola en board[])
  3265 000018C5 418A02                      mov al, [r10]
  3266                                  
  3267                                      ; Verificar si el carácter es un bloque
  3268 000018C8 3C55                        cmp al, 'U'  
  3269 000018CA 7419                        je .possible
  3270 000018CC 3C4F                        cmp al, 'O'  
  3271 000018CE 7415                        je .possible
  3272 000018D0 3C44                        cmp al, 'D'  
  3273 000018D2 7411                        je .possible
  3274 000018D4 3C4C                        cmp al, 'L'  
  3275 000018D6 740D                        je .possible
  3276 000018D8 3C56                        cmp al, 'V'  
  3277 000018DA 7409                        je .possible
  3278 000018DC 3C38                        cmp al, '8'  
  3279 000018DE 7405                        je .possible
  3280                                  
  3281                                      ; No es bloque, salir
  3282 000018E0 4831C0                      xor rax, rax
  3283 000018E3 5D                          pop rbp
  3284 000018E4 C3                          ret
  3285                                  
  3286                                  .possible:
  3287 000018E5 53                          push rbx
  3288 000018E6 57                          push rdi
  3289 000018E7 56                          push rsi
  3290 000018E8 4154                        push r12
  3291 000018EA 4155                        push r13
  3292 000018EC 4156                        push r14
  3293 000018EE 4157                        push r15
  3294                                  
  3295                                      ; 1) Obtener base de los bloques del nivel actual
  3296 000018F0 E83FFDFFFF                  call get_current_level_blocks
  3297 000018F5 4989C5                      mov r13, rax  ; (r13) = base de levelX_blocks
  3298                                  
  3299                                      ; 2) Obtener la cantidad de bloques
  3300 000018F8 E890FDFFFF                  call get_current_level_count
  3301 000018FD 4989C6                      mov r14, rax
  3302                                  
  3303 00001900 4D31E4                      xor r12, r12  ; Índice del bloque actual
  3304                                  
  3305                                  .find_block_loop:
  3306 00001903 4D39F4                      cmp r12, r14
  3307 00001906 0F8DCE000000                jge .no_block_found  ; Se acabaron los bloques
  3308                                  
  3309                                      ; Calcular puntero base del bloque actual en levelX_blocks
  3310 0000190C 4C89E0                      mov rax, r12
  3311 0000190F 486BC005                    imul rax, 5            ; (x, y, tipo, durabilidad_inicial, letra)
  3312 00001913 4C01E8                      add rax, r13
  3313 00001916 4989C7                      mov r15, rax           ; r15 apunta a los datos del bloque actual
  3314                                  
  3315                                      ; --- Aquí la diferencia: la durabilidad no la leemos de [r15+3], sino de block_states[r12]
  3316 00001919 490FB69C24-                 movzx rbx, byte [block_states + r12]  ; Durabilidad "viva" en block_states
  3316 0000191E [761F0000]         
  3317 00001922 4885DB                      test rbx, rbx
  3318 00001925 0F84A7000000                jz .next_block  ; si durabilidad=0 => bloque destruido => ignorar
  3319                                  
  3320                                      ; Obtener coordenadas
  3321 0000192B 418A17                      mov dl, [r15]         ; x
  3322 0000192E 418A4F01                    mov cl, [r15 + 1]     ; y
  3323                                  
  3324                                      ; Calcular posición en el board
  3325 00001932 488D3D(400A0000)            lea rdi, [board]
  3326 00001939 4831C0                      xor rax, rax
  3327 0000193C B850000000                  mov rax, column_cells
  3328 00001941 4883C002                    add rax, 2
  3329 00001945 480FB6C9                    movzx rcx, cl         ; y
  3330 00001949 480FAFC1                    imul rax, rcx
  3331 0000194D 4801C7                      add rdi, rax
  3332 00001950 480FB6C2                    movzx rax, dl         ; x
  3333 00001954 4801C7                      add rdi, rax
  3334                                  
  3335                                      ; Guardar la posición base del bloque
  3336 00001957 57                          push rdi
  3337                                  
  3338                                      ; Verificar si la bola (r10) está dentro de [rdi .. rdi+block_length)
  3339 00001958 4939FA                      cmp r10, rdi
  3340 0000195B 7274                        jb .skip_collision
  3341 0000195D 488D5F06                    lea rbx, [rdi + block_length]
  3342 00001961 4939DA                      cmp r10, rbx
  3343 00001964 736B                        jae .skip_collision
  3344                                  
  3345                                      ; ------- Hay colisión, reducir durabilidad en block_states
  3346 00001966 41FE8C24[761F0000]          dec byte [block_states + r12]
  3347                                      ; Volver a cargar durabilidad
  3348 0000196E 490FB69C24-                 movzx rbx, byte [block_states + r12]
  3348 00001973 [761F0000]         
  3349 00001977 4885DB                      test rbx, rbx
  3350 0000197A 754D                        jnz .update_display  ; si no llegó a 0 => solo "golpeado"
  3351                                  
  3352                                      ; >>> Llegó a 0 => Bloque destruido
  3353 0000197C 5F                          pop rdi  ; recuperar puntero base del bloque en board
  3354 0000197D B906000000                  mov rcx, block_length
  3355                                  .clear_loop:
  3356 00001982 C60720                      mov byte [rdi], ' '
  3357 00001985 48FFC7                      inc rdi
  3358 00001988 E2F8                        loop .clear_loop
  3359                                  
  3360                                      ; Dibujar letra del bloque destruido
  3361 0000198A 418A4704                    mov al, [r15 + 4]  ; Obtener la letra asociada
  3362 0000198E 4883EF06                    sub rdi, block_length
  3363 00001992 8807                        mov [rdi], al      ; Escribir la letra en la posición inicial
  3364                                      ; Después de escribir la letra en el tablero
  3365 00001994 418A4704                    mov al, [r15 + 4]      ; Obtener la letra
  3366 00001998 4D0FB607                    movzx r8, byte [r15]   ; Posición x del bloque
  3367 0000199C 4D0FB64F01                  movzx r9, byte [r15 + 1] ; Posición y del bloque
  3368 000019A1 E8C3EAFFFF                  call register_letter
  3369                                      ; Actualizar contadores globales
  3370 000019A6 FE0D(7A150000)              dec byte [blocks_remaining]
  3371 000019AC FE05(46200000)              inc byte [destroyed_blocks]
  3372                                  
  3373                                      ; Sumar puntos según el tipo
  3374 000019B2 490FB64702                  movzx rax, byte [r15 + 2]  ; tipo del bloque original
  3375 000019B7 486BC00A                    imul rax, 10
  3376 000019BB 480105(3E200000)            add [current_score], rax
  3377                                  
  3378 000019C2 B801000000                  mov rax, 1  ; colisión con destrucción
  3379 000019C7 EB14                        jmp .end_pop
  3380                                  
  3381                                  .update_display:
  3382                                      ; => durabilidad >0, se podría actualizar el "look" del bloque
  3383 000019C9 B801000000                  mov rax, 1  ; colisión con "rebote"  
  3384 000019CE 5F                          pop rdi     ; pop que quedó pendiente
  3385 000019CF EB0C                        jmp .end_pop
  3386                                  
  3387                                  .skip_collision:
  3388 000019D1 5F                          pop rdi     ; si no hubo colisión, quita de la pila
  3389                                  .next_block:
  3390 000019D2 49FFC4                      inc r12
  3391 000019D5 E929FFFFFF                  jmp .find_block_loop
  3392                                  
  3393                                  .no_block_found:
  3394 000019DA 4831C0                      xor rax, rax  ; 0 => no hubo colisión
  3395                                  
  3396                                  .end_pop:
  3397 000019DD 415F                        pop r15
  3398 000019DF 415E                        pop r14
  3399 000019E1 415D                        pop r13
  3400 000019E3 415C                        pop r12
  3401 000019E5 5E                          pop rsi
  3402 000019E6 5F                          pop rdi
  3403 000019E7 5B                          pop rbx
  3404 000019E8 5D                          pop rbp
  3405 000019E9 C3                          ret
  3406                                  
  3407                                  
  3408                                  
  3409                                  init_enemies:
  3410 000019EA 55                          push rbp
  3411 000019EB 4889E5                      mov rbp, rsp
  3412                                      ; Reiniciar contadores de movimiento
  3413 000019EE C605(89200000)00            mov byte [enemy_move_total], 0
  3414 000019F5 C605(8A200000)00            mov byte [enemy_target], 0 ; Inicialmente persigue la bola
  3415                                      ; Limpiar estado previo de enemigos
  3416 000019FC B90A000000                  mov rcx, 10 ; Máximo 10 enemigos
  3417 00001A01 488D3D(60200000)            lea rdi, [enemies]
  3418 00001A08 30C0                        xor al, al
  3419 00001A0A F3AA                        rep stosb ; Limpiar datos de enemigos
  3420                                      
  3421                                      ; Marcar todos los enemigos como inactivos
  3422 00001A0C 488D3D(E9200000)            lea rdi, [enemy_spawns_triggered]
  3423 00001A13 30C0                        xor al, al
  3424 00001A15 B90A000000                  mov rcx, 10
  3425 00001A1A F3AA                        rep stosb ; Todos los enemigos no han sido activados aún
  3426                                  
  3427 00001A1C 5D                          pop rbp
  3428 00001A1D C3                          ret
  3429                                  
  3430                                  
  3431                                  random_move_enemy:
  3432 00001A1E 55                          push rbp
  3433 00001A1F 4889E5                      mov  rbp, rsp
  3434 00001A22 53                          push rbx
  3435 00001A23 52                          push rdx
  3436 00001A24 57                          push rdi
  3437                                  
  3438                                      ; r12 = índice del enemigo
  3439                                      ; 1) obtener puntero al enemigo i
  3440 00001A25 4C89E0                      mov rax, r12
  3441 00001A28 486BC003                    imul rax, 3
  3442 00001A2C 488D98[60200000]            lea rbx, [enemies + rax]     ; rbx => &enemies[r12]
  3443                                  
  3444                                      ; 2) Cargar X, Y actuales (NO SE BORRA AQUÍ TODAVÍA)
  3445 00001A33 4C0FB603                    movzx r8, byte [rbx]         ; r8 = X actual
  3446 00001A37 4C0FB64B01                  movzx r9, byte [rbx + 1]     ; r9 = Y actual
  3447                                  
  3448                                      ; 3) Generar "movimiento aleatorio" => tomamos [enemy_move_counter] & 3
  3449 00001A3C 480FB605(87200000)          movzx rax, byte [enemy_move_counter]
  3450 00001A44 4883E003                    and rax, 3
  3451                                  
  3452 00001A48 4883F800                    cmp rax, 0
  3453 00001A4C 741B                        je .try_left
  3454 00001A4E 4883F801                    cmp rax, 1
  3455 00001A52 7410                        je .try_right
  3456 00001A54 4883F802                    cmp rax, 2
  3457 00001A58 7405                        je .try_up
  3458                                      ; si es 3 => mover abajo
  3459                                  .try_down:
  3460 00001A5A 49FFC1                      inc r9
  3461 00001A5D EB0D                        jmp .check_valid
  3462                                  
  3463                                  .try_up:
  3464 00001A5F 49FFC9                      dec r9
  3465 00001A62 EB08                        jmp .check_valid
  3466                                  
  3467                                  .try_right:
  3468 00001A64 49FFC0                      inc r8
  3469 00001A67 EB03                        jmp .check_valid
  3470                                  
  3471                                  .try_left:
  3472 00001A69 49FFC8                      dec r8
  3473                                  
  3474                                  .check_valid:
  3475                                      ; 4) Verificar límites
  3476 00001A6C 4983F801                    cmp r8, 1                    
  3477 00001A70 0F8EA4000000                jle .invalid_move
  3478 00001A76 4983F850                    cmp r8, column_cells        
  3479 00001A7A 0F8D9A000000                jge .invalid_move
  3480 00001A80 4983F901                    cmp r9, 1                    
  3481 00001A84 0F8E90000000                jle .invalid_move
  3482 00001A8A 4983F920                    cmp r9, row_cells          
  3483 00001A8E 0F8D86000000                jge .invalid_move
  3484                                  
  3485                                      ; 5) Verificar colisión con bloques/enemigos
  3486 00001A94 4150                        push r8
  3487 00001A96 4151                        push r9
  3488 00001A98 B850000000                  mov rax, column_cells
  3489 00001A9D 4883C002                    add rax, 2
  3490 00001AA1 49F7E1                      mul r9
  3491 00001AA4 4C01C0                      add rax, r8
  3492 00001AA7 488DB8[400A0000]            lea rdi, [board + rax]
  3493 00001AAE 8A07                        mov al, [rdi]
  3494                                  
  3495                                      ; Revisa si es bloque o borde
  3496 00001AB0 3C55                        cmp al, 'U'
  3497 00001AB2 7462                        je .pop_and_invalid
  3498 00001AB4 3C4F                        cmp al, 'O'
  3499 00001AB6 745E                        je .pop_and_invalid
  3500 00001AB8 3C44                        cmp al, 'D'
  3501 00001ABA 745A                        je .pop_and_invalid
  3502 00001ABC 3C4C                        cmp al, 'L'
  3503 00001ABE 7456                        je .pop_and_invalid
  3504 00001AC0 3C56                        cmp al, 'V'
  3505 00001AC2 7452                        je .pop_and_invalid
  3506 00001AC4 3C38                        cmp al, '8'
  3507 00001AC6 744E                        je .pop_and_invalid
  3508 00001AC8 3C58                        cmp al, 'X'
  3509 00001ACA 744A                        je .pop_and_invalid
  3510                                  
  3511                                      ; Revisa si hay enemigo
  3512 00001ACC 3C40                        cmp al, '@'
  3513 00001ACE 7446                        je .pop_and_invalid
  3514 00001AD0 3C23                        cmp al, '#'
  3515 00001AD2 7442                        je .pop_and_invalid
  3516 00001AD4 3C24                        cmp al, '$'
  3517 00001AD6 743E                        je .pop_and_invalid
  3518 00001AD8 3C26                        cmp al, '&'
  3519 00001ADA 743A                        je .pop_and_invalid
  3520                                  
  3521 00001ADC E8A0020000                  call check_enemy_at_position
  3522 00001AE1 4883F801                    cmp rax, 1
  3523 00001AE5 742F                        je .pop_and_invalid
  3524                                  
  3525                                      ; ------------------------------
  3526                                      ; SI LLEGAMOS AQUI => POSICIÓN NUEVA ES VÁLIDA
  3527                                      ; AHORA SÍ BORRAMOS LA POSICIÓN ANTIGUA:
  3528                                      ; ------------------------------
  3529 00001AE7 4159                        pop r9
  3530 00001AE9 4158                        pop r8
  3531                                  
  3532                                      ; (A) Borrar la posición antigua en el board
  3533                                      ;    (X,Y) originales estaban en [rbx], [rbx+1].
  3534 00001AEB 4C0FB613                    movzx r10, byte [rbx]   ; oldX
  3535 00001AEF 4C0FB65B01                  movzx r11, byte [rbx+1] ; oldY
  3536 00001AF4 B850000000                  mov rax, column_cells
  3537 00001AF9 4883C002                    add rax, 2
  3538 00001AFD 49F7E3                      mul r11
  3539 00001B00 4C01D0                      add rax, r10
  3540 00001B03 488DB8[400A0000]            lea rdi, [board + rax]
  3541 00001B0A C60720                      mov byte [rdi], ' '     ; BORRA la posición vieja
  3542                                  
  3543                                      ; (B) Guardar la nueva X,Y en la estructura
  3544 00001B0D 448803                      mov byte [rbx], r8b
  3545 00001B10 44884B01                    mov byte [rbx + 1], r9b
  3546                                  
  3547 00001B14 EB0D                        jmp .done
  3548                                  
  3549                                  .pop_and_invalid:
  3550 00001B16 4159                        pop r9
  3551 00001B18 4158                        pop r8
  3552                                  
  3553                                  .invalid_move:
  3554                                      ; Restablecer la posición X,Y en [rbx], [rbx+1] (no se borró la vieja)
  3555 00001B1A 4C0FB603                    movzx r8, byte [rbx]
  3556 00001B1E 4C0FB64B01                  movzx r9, byte [rbx + 1]
  3557                                      ; Se queda donde estaba
  3558                                  .done:
  3559 00001B23 5F                          pop rdi
  3560 00001B24 5A                          pop rdx
  3561 00001B25 5B                          pop rbx
  3562 00001B26 5D                          pop rbp
  3563 00001B27 C3                          ret
  3564                                  
  3565                                  
  3566                                  ; Función para mover enemigos
  3567                                  move_enemies:
  3568 00001B28 55                          push rbp
  3569 00001B29 4889E5                      mov rbp, rsp
  3570                                      
  3571                                      ; Incrementar contador de movimiento
  3572 00001B2C FE05(87200000)              inc byte [enemy_move_counter]
  3573 00001B32 480FB605(87200000)          movzx rax, byte [enemy_move_counter]
  3574 00001B3A 3A05(88200000)              cmp al, [enemy_move_delay]
  3575 00001B40 0F8539020000                jne .end
  3576                                      
  3577                                      ; Resetear contador
  3578 00001B46 C605(87200000)00            mov byte [enemy_move_counter], 0
  3579                                      
  3580 00001B4D 4D31E4                      xor r12, r12                    ; Índice del enemigo
  3581                                      
  3582                                      .enemy_loop:
  3583 00001B50 4983FC0A                        cmp r12, 10                     ; Máximo 10 enemigos
  3584 00001B54 0F8D25020000                    jge .end
  3585                                          
  3586                                          ; Calcular offset del enemigo actual
  3587 00001B5A 4C89E0                          mov rax, r12
  3588 00001B5D 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  3589 00001B61 488DB0[60200000]                lea rsi, [enemies + rax]
  3590                                          
  3591                                          ; Verificar si el enemigo está activo
  3592 00001B68 807E0201                        cmp byte [rsi + 2], 1
  3593 00001B6C 0F8505020000                    jne .next_enemy
  3594                                          
  3595                                          ; Obtener posición actual
  3596 00001B72 4C0FB606                        movzx r8, byte [rsi]            ; X
  3597 00001B76 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  3598                                          
  3599 00001B7B 488D3D(3F240000)                lea rdi, [enemy_last_x]
  3600 00001B82 4C01E7                          add rdi, r12
  3601 00001B85 8A07                            mov al, [rdi]             ; al = last_x
  3602                                  
  3603 00001B87 488D15(49240000)                lea rdx, [enemy_last_y]
  3604 00001B8E 4C01E2                          add rdx, r12
  3605 00001B91 8A22                            mov ah, [rdx]             ; ah = last_y
  3606                                  
  3607                                          ; r8 = X actual del enemigo
  3608                                          ; r9 = Y actual del enemigo
  3609                                  
  3610                                          ; *** En lugar de cmp ah, r9b => hacemos lo siguiente:
  3611 00001B93 88E2                            mov dl, ah      ; dl = old_Y
  3612 00001B95 4488CB                          mov bl, r9b     ; bl = new_Y
  3613 00001B98 38DA                            cmp dl, bl
  3614 00001B9A 752C                            jne .not_stuck
  3615                                  
  3616                                          ; => SI son iguales => pasa al siguiente check
  3617 00001B9C 88C2                            mov dl, al      ; dl = old_X
  3618 00001B9E 4488C3                          mov bl, r8b     ; bl = new_X
  3619 00001BA1 38DA                            cmp dl, bl
  3620 00001BA3 7523                            jne .not_stuck
  3621                                  
  3622                                          ; => MISMA POSICIÓN (STUCK)
  3623 00001BA5 488D1D(53240000)                lea rbx, [enemy_stuck_count]
  3624 00001BAC 4C01E3                          add rbx, r12
  3625 00001BAF FE03                            inc byte [rbx]              ; Aumentar contador de “pegarse”
  3626                                  
  3627                                          ; Verificar si supera umbral, digamos 3
  3628 00001BB1 480FB60B                        movzx rcx, byte [rbx]
  3629 00001BB5 4883F902                        cmp rcx, 2
  3630 00001BB9 7C34                            jl .check_normal_move       ; Si aún no llega a 3, seguir normal
  3631                                  
  3632                                          ; SI LLEGA A 3, FORZAR UN MOVIMIENTO ALEATORIO:
  3633                                          ;  1) resetear el stuck_count
  3634 00001BBB C60300                          mov byte [rbx], 0
  3635                                  
  3636                                          ;  2) cambiar random
  3637 00001BBE E85BFEFFFF                      call random_move_enemy        ; (Ver ejemplo de abajo)
  3638 00001BC3 E9AF010000                      jmp .next_enemy
  3639                                  
  3640                                      .not_stuck:
  3641                                          ; => Se movió
  3642 00001BC8 488D1D(53240000)                lea rbx, [enemy_stuck_count]
  3643 00001BCF 4C01E3                          add rbx, r12
  3644 00001BD2 C60300                          mov byte [rbx], 0            ; Resetear
  3645                                  
  3646                                          ; Guardar su nueva posición en “last_x, last_y”
  3647 00001BD5 488D3D(3F240000)                lea rdi, [enemy_last_x]
  3648 00001BDC 4C01E7                          add rdi, r12
  3649 00001BDF 448807                          mov [rdi], r8b
  3650                                          
  3651 00001BE2 488D3D(49240000)                lea rdi, [enemy_last_y]
  3652 00001BE9 4C01E7                          add rdi, r12
  3653 00001BEC 44880F                          mov [rdi], r9b
  3654                                  
  3655                                          ; Limpiar posición actual antes de mover
  3656                                      .check_normal_move:
  3657 00001BEF 4150                            push r8
  3658 00001BF1 4151                            push r9
  3659 00001BF3 B850000000                      mov rax, column_cells
  3660 00001BF8 4883C002                        add rax, 2
  3661 00001BFC 49F7E1                          mul r9
  3662 00001BFF 4C01C0                          add rax, r8
  3663 00001C02 488DB8[400A0000]                lea rdi, [board + rax]
  3664 00001C09 C60720                          mov byte [rdi], ' '         ; Limpiar rastro
  3665 00001C0C 4159                            pop r9
  3666 00001C0E 4158                            pop r8
  3667                                  
  3668                                          ; Determinar comportamiento basado en índice
  3669 00001C10 4C89E0                          mov rax, r12
  3670 00001C13 4883E001                        and rax, 1                      ; 0 para índices pares, 1 para impares
  3671 00001C17 4885C0                          test rax, rax
  3672 00001C1A 7402                            jz .chase_ball
  3673 00001C1C EB31                            jmp .chase_paddle             ; Si es 1, perseguir paleta
  3674                                          
  3675                                          ; Perseguir bola (comportamiento original)
  3676                                      .chase_ball:
  3677 00001C1E 4C8B15(DF140000)                mov r10, [ball_x_pos]
  3678 00001C25 4D39D0                          cmp r8, r10
  3679 00001C28 0F8F96000000                    jg .move_left
  3680 00001C2E 0F8C95000000                    jl .move_right
  3681                                          
  3682 00001C34 4C8B15(E7140000)                mov r10, [ball_y_pos]
  3683 00001C3B 4D39D1                          cmp r9, r10
  3684 00001C3E 0F8F8A000000                    jg .move_up
  3685 00001C44 0F8C89000000                    jl .move_down
  3686 00001C4A E9A5000000                      jmp .check_collision
  3687                                          
  3688                                      .chase_paddle:
  3689                                          ; Obtener la posición X actual de la paleta
  3690 00001C4F 4C8B15(BF140000)                mov r10, [pallet_position]
  3691 00001C56 4981EA[400A0000]                sub r10, board              ; Convertir a offset relativo
  3692                                          
  3693                                          ; Calcular la posición X real de la paleta
  3694 00001C5D 4C89D0                          mov rax, r10
  3695 00001C60 BB50000000                      mov rbx, column_cells
  3696 00001C65 4883C302                        add rbx, 2                  ; Añadir newline chars
  3697 00001C69 4831D2                          xor rdx, rdx
  3698 00001C6C 48F7F3                          div rbx                     ; rax = y, rdx = x
  3699                                          
  3700                                          ; rdx ahora contiene la posición X de la paleta
  3701                                          ; Añadir la mitad del tamaño de la paleta para apuntar al centro
  3702 00001C6F 488B0D(C7140000)                mov rcx, [pallet_size]
  3703 00001C76 48D1E9                          shr rcx, 1                  ; Dividir por 2
  3704 00001C79 4801CA                          add rdx, rcx
  3705                                          
  3706                                          ; Comparar con posición X del enemigo y mover gradualmente
  3707 00001C7C 4939D0                          cmp r8, rdx
  3708 00001C7F 7404                            je .check_y_paddle          ; Si está en la misma X, verificar Y
  3709 00001C81 7F41                            jg .move_left              ; Si está a la derecha, mover izquierda
  3710 00001C83 7C44                            jl .move_right             ; Si está a la izquierda, mover derecha
  3711                                  
  3712                                      .check_y_paddle:
  3713                                          ; La Y de la paleta siempre es row_cells - 2
  3714 00001C85 41BA20000000                    mov r10, row_cells
  3715 00001C8B 4983EA02                        sub r10, 2
  3716                                          
  3717                                          ; Comparar con posición Y del enemigo y mover gradualmente
  3718 00001C8F 4D39D1                          cmp r9, r10
  3719 00001C92 7404                            je .no_movement            ; Si está en la misma Y, no mover
  3720 00001C94 7F38                            jg .move_up               ; Si está abajo, mover arriba
  3721 00001C96 7C3B                            jl .move_down             ; Si está arriba, mover abajo
  3722                                          
  3723                                      .no_movement:
  3724 00001C98 EB5A                            jmp .check_collision
  3725                                  
  3726                                      ; También agregar una nueva sección para el movimiento suave
  3727                                      .smooth_transition:
  3728                                          ; Si el enemigo está muy lejos de su objetivo, limitar el movimiento
  3729 00001C9A 8A05(8A200000)                  mov al, [enemy_target]
  3730 00001CA0 84C0                            test al, al
  3731 00001CA2 7450                            jz .check_collision        ; Si persigue la bola, movimiento normal
  3732                                          
  3733                                          ; Verificar distancia en X
  3734 00001CA4 4989D2                          mov r10, rdx              ; Posición X objetivo
  3735 00001CA7 4D29C2                          sub r10, r8               ; Calcular diferencia
  3736 00001CAA 4983FA05                        cmp r10, 5               ; Si la diferencia es mayor a 5
  3737 00001CAE 7F08                            jg .limit_right_movement  ; Limitar movimiento a la derecha
  3738 00001CB0 4983FAFB                        cmp r10, -5              ; Si la diferencia es menor a -5
  3739 00001CB4 7C08                            jl .limit_left_movement   ; Limitar movimiento a la izquierda
  3740 00001CB6 EB3C                            jmp .check_collision
  3741                                          
  3742                                      .limit_right_movement:
  3743 00001CB8 4983C002                        add r8, 2                ; Mover solo 2 unidades a la derecha
  3744 00001CBC EB36                            jmp .check_collision
  3745                                          
  3746                                      .limit_left_movement:
  3747 00001CBE 4983E802                        sub r8, 2                ; Mover solo 2 unidades a la izquierda
  3748 00001CC2 EB30                            jmp .check_collision
  3749                                      .move_left:
  3750 00001CC4 49FFC8                          dec r8
  3751 00001CC7 EB0F                            jmp .check_vertical
  3752                                          
  3753                                      .move_right:
  3754 00001CC9 49FFC0                          inc r8
  3755 00001CCC EB0A                            jmp .check_vertical
  3756                                          
  3757                                      .move_up:
  3758 00001CCE 49FFC9                          dec r9
  3759 00001CD1 EB21                            jmp .check_collision
  3760                                          
  3761                                      .move_down:
  3762 00001CD3 49FFC1                          inc r9
  3763 00001CD6 EB1C                            jmp .check_collision
  3764                                          
  3765                                      .check_vertical:
  3766 00001CD8 8A05(8A200000)                  mov al, [enemy_target]
  3767 00001CDE 84C0                            test al, al
  3768 00001CE0 0F8569FFFFFF                    jnz .chase_paddle         ; Si persigue paleta, volver a su lógica
  3769 00001CE6 4C8B15(E7140000)                mov r10, [ball_y_pos]     ; Si no, seguir persiguiendo la bola
  3770 00001CED 4D39D1                          cmp r9, r10
  3771 00001CF0 7FDC                            jg .move_up
  3772 00001CF2 7CDF                            jl .move_down
  3773                                          
  3774                                      .check_collision:
  3775                                          ; Verificar colisión con bordes
  3776 00001CF4 4983F801                        cmp r8, 1                       ; Borde izquierdo
  3777 00001CF8 7E7D                            jle .next_enemy
  3778 00001CFA 4983F850                        cmp r8, column_cells
  3779 00001CFE 7D77                            jge .next_enemy
  3780 00001D00 4983F901                        cmp r9, 1                       ; Borde superior
  3781 00001D04 7E71                            jle .next_enemy
  3782 00001D06 4983F920                        cmp r9, row_cells
  3783 00001D0A 7D6B                            jge .next_enemy
  3784                                          
  3785                                          ; Verificar colisión con bloques antes de moverse
  3786 00001D0C 4150                            push r8
  3787 00001D0E 4151                            push r9
  3788 00001D10 4152                            push r10
  3789                                          
  3790                                          ; Calcular posición en el tablero para verificar
  3791 00001D12 B850000000                      mov rax, column_cells
  3792 00001D17 4883C002                        add rax, 2
  3793 00001D1B 49F7E1                          mul r9
  3794 00001D1E 4C01C0                          add rax, r8
  3795 00001D21 4C8D90[400A0000]                lea r10, [board + rax]
  3796                                          
  3797                                          ; Verificar si hay un bloque en la nueva posición
  3798 00001D28 418A02                          mov al, [r10]
  3799 00001D2B 3C55                            cmp al, 'U'
  3800 00001D2D 7442                            je .invalid_move
  3801 00001D2F 3C4F                            cmp al, 'O'
  3802 00001D31 743E                            je .invalid_move
  3803 00001D33 3C44                            cmp al, 'D'
  3804 00001D35 743A                            je .invalid_move
  3805 00001D37 3C4C                            cmp al, 'L'
  3806 00001D39 7436                            je .invalid_move
  3807 00001D3B 3C56                            cmp al, 'V'
  3808 00001D3D 7432                            je .invalid_move
  3809 00001D3F 3C38                            cmp al, '8'
  3810 00001D41 742E                            je .invalid_move
  3811 00001D43 3C58                            cmp al, 'X'
  3812 00001D45 742A                            je .invalid_move
  3813 00001D47 3C40                            cmp al, '@'                 ; Enemigo nivel 1 y 5
  3814 00001D49 7426                            je .invalid_move
  3815 00001D4B 3C23                            cmp al, '#'                 ; Enemigo nivel 2
  3816 00001D4D 7422                            je .invalid_move
  3817 00001D4F 3C24                            cmp al, '$'                 ; Enemigo nivel 3
  3818 00001D51 741E                            je .invalid_move
  3819 00001D53 3C26                            cmp al, '&'                 ; Enemigo nivel 4
  3820 00001D55 741A                            je .invalid_move
  3821                                          
  3822 00001D57 E825000000                      call check_enemy_at_position
  3823 00001D5C 4883F801                        cmp rax, 1
  3824 00001D60 740F                            je .invalid_move
  3825 00001D62 415A                            pop r10
  3826 00001D64 4159                            pop r9
  3827 00001D66 4158                            pop r8
  3828                                          
  3829                                          ; Guardar nueva posición si es válida
  3830 00001D68 448806                          mov [rsi], r8b
  3831 00001D6B 44884E01                        mov [rsi + 1], r9b
  3832 00001D6F EB06                            jmp .next_enemy
  3833                                          
  3834                                      .invalid_move:
  3835 00001D71 415A                            pop r10
  3836 00001D73 4159                            pop r9
  3837 00001D75 4158                            pop r8
  3838                                          
  3839                                      .next_enemy:
  3840 00001D77 49FFC4                          inc r12
  3841 00001D7A E9D1FDFFFF                      jmp .enemy_loop
  3842                                          
  3843                                      .end:
  3844 00001D7F 5D                              pop rbp
  3845 00001D80 C3                              ret
  3846                                  
  3847                                  check_enemy_at_position:
  3848 00001D81 55                          push rbp
  3849 00001D82 4889E5                      mov rbp, rsp
  3850                                      
  3851                                      ; Parámetros esperados en r8 (X) y r9 (Y)
  3852 00001D85 B850000000                  mov rax, column_cells
  3853 00001D8A 4883C002                    add rax, 2
  3854 00001D8E 49F7E1                      mul r9
  3855 00001D91 4C01C0                      add rax, r8
  3856 00001D94 488DB8[400A0000]            lea rdi, [board + rax]
  3857 00001D9B 480FB607                    movzx rax, byte [rdi]
  3858                                      
  3859                                      ; Verificar todos los caracteres de enemigos
  3860 00001D9F 3C40                        cmp al, '@'
  3861 00001DA1 7411                        je .enemy_found
  3862 00001DA3 3C23                        cmp al, '#'
  3863 00001DA5 740D                        je .enemy_found
  3864 00001DA7 3C24                        cmp al, '$'
  3865 00001DA9 7409                        je .enemy_found
  3866 00001DAB 3C26                        cmp al, '&'
  3867 00001DAD 7405                        je .enemy_found
  3868                                      
  3869 00001DAF 4831C0                      xor rax, rax    ; No hay enemigo (retorna 0)
  3870 00001DB2 EB05                        jmp .end
  3871                                      
  3872                                  .enemy_found:
  3873 00001DB4 B801000000                  mov rax, 1      ; Hay enemigo (retorna 1)
  3874                                      
  3875                                  .end:
  3876 00001DB9 5D                          pop rbp
  3877 00001DBA C3                          ret
  3878                                  
  3879                                  get_current_spawn_points:
  3880 00001DBB 55                          push rbp
  3881 00001DBC 4889E5                      mov rbp, rsp
  3882                                      
  3883 00001DBF 480FB605(79150000)          movzx rax, byte [current_level]
  3884 00001DC7 48FFC8                      dec rax                         ; Ajustar para índice base 0
  3885 00001DCA 488B04C5[BE200000]          mov rax, [spawn_points_table + rax * 8]
  3886                                      
  3887 00001DD2 5D                          pop rbp
  3888 00001DD3 C3                          ret
  3889                                  
  3890                                  ; Función para verificar si debe aparecer un nuevo enemigo
  3891                                  check_enemy_spawn:
  3892 00001DD4 55                          push rbp
  3893 00001DD5 4889E5                      mov rbp, rsp
  3894                                      
  3895                                      ; Obtener spawn points del nivel actual
  3896 00001DD8 E8DEFFFFFF                  call get_current_spawn_points
  3897 00001DDD 4989C4                      mov r12, rax                    ; r12 = puntero a spawn points
  3898                                      
  3899                                      ; Obtener cantidad de bloques destruidos
  3900 00001DE0 4C0FB62D(46200000)          movzx r13, byte [destroyed_blocks]
  3901                                      
  3902                                      ; Verificar cada punto de spawn
  3903 00001DE8 4831C9                      xor rcx, rcx                    ; Índice del enemigo
  3904                                      
  3905                                      .check_loop:
  3906 00001DEB 4883F90A                        cmp rcx, 10                     ; Máximo 10 enemigos
  3907 00001DEF 7D4E                            jge .end
  3908                                          
  3909                                          ; Verificar si este spawn point ya fue usado
  3910 00001DF1 80B9[E9200000]01                cmp byte [enemy_spawns_triggered + rcx], 1
  3911 00001DF8 7440                            je .next_enemy
  3912                                          
  3913                                          ; Verificar si este enemigo ya está activo
  3914 00001DFA 4889C8                          mov rax, rcx
  3915 00001DFD 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  3916 00001E01 488DB0[60200000]                lea rsi, [enemies + rax]
  3917 00001E08 807E0201                        cmp byte [rsi + 2], 1          ; Verificar si está activo
  3918 00001E0C 742C                            je .next_enemy
  3919                                          
  3920                                          ; Verificar si debemos spawnear este enemigo
  3921 00001E0E 490FB6040C                      movzx rax, byte [r12 + rcx]    ; Obtener punto de spawn
  3922 00001E13 4939C5                          cmp r13, rax                   ; Comparar con bloques destruidos
  3923 00001E16 7522                            jne .next_enemy
  3924                                          
  3925                                          ; Marcar este spawn point como usado
  3926 00001E18 C681[E9200000]01                mov byte [enemy_spawns_triggered + rcx], 1
  3927                                          
  3928                                          ; Spawner nuevo enemigo
  3929 00001E1F B004                            mov al, 4
  3930 00001E21 00C8                            add al, cl       ; con 'rcx' como índice
  3931 00001E23 8806                            mov [rsi], al
  3932 00001E25 C6460102                        mov byte [rsi+1], 2
  3933 00001E29 C6460201                        mov byte [rsi+2], 1
  3934                                  
  3935                                          ; Inicializar comportamiento
  3936 00001E2D 4889C8                          mov rax, rcx
  3937 00001E30 4883E001                        and rax, 1                     ; Alternar comportamiento basado en índice par/impar
  3938 00001E34 8805(E8200000)                  mov [current_behavior], al      ; 0 = persigue bola, 1 = persigue paleta
  3939                                          
  3940                                      .next_enemy:
  3941 00001E3A 48FFC1                          inc rcx
  3942 00001E3D EBAC                            jmp .check_loop
  3943                                          
  3944                                      .end:
  3945 00001E3F 5D                              pop rbp
  3946 00001E40 C3                              ret
  3947                                  
  3948                                  
  3949                                  ; Función para dibujar enemigos
  3950                                  print_enemies:
  3951 00001E41 55                          push rbp
  3952 00001E42 4889E5                      mov rbp, rsp
  3953                                      
  3954 00001E45 4D31E4                      xor r12, r12                    ; Índice del enemigo
  3955                                      
  3956                                      .print_loop:
  3957 00001E48 4983FC0A                        cmp r12, 10                      ; Máximo 5 enemigos
  3958 00001E4C 7D4B                            jge .end
  3959                                          
  3960                                          ; Calcular offset del enemigo actual
  3961 00001E4E 4C89E0                          mov rax, r12
  3962 00001E51 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  3963 00001E55 488DB0[60200000]                lea rsi, [enemies + rax]
  3964                                          
  3965                                          ; Verificar si el enemigo está activo
  3966 00001E5C 807E0201                        cmp byte [rsi + 2], 1
  3967 00001E60 7532                            jne .next_enemy
  3968                                          
  3969                                          ; Calcular posición en el tablero
  3970 00001E62 4C0FB606                        movzx r8, byte [rsi]            ; X
  3971 00001E66 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  3972                                          
  3973                                          ; Calcular offset en el tablero
  3974 00001E6B B850000000                      mov rax, column_cells
  3975 00001E70 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  3976 00001E74 49F7E1                          mul r9
  3977 00001E77 4C01C0                          add rax, r8
  3978 00001E7A 488DB8[400A0000]                lea rdi, [board + rax]
  3979                                          
  3980                                          ; Obtener carácter del enemigo según el nivel
  3981 00001E81 480FB605(79150000)              movzx rax, byte [current_level]
  3982 00001E89 48FFC8                          dec rax                         ; Ajustar para índice base 0
  3983 00001E8C 8A80[5B200000]                  mov al, [enemy_chars + rax]
  3984                                          
  3985                                          ; Dibujar enemigo
  3986 00001E92 8807                            mov [rdi], al
  3987                                          
  3988                                      .next_enemy:
  3989 00001E94 49FFC4                          inc r12
  3990 00001E97 EBAF                            jmp .print_loop
  3991                                          
  3992                                      .end:
  3993 00001E99 5D                              pop rbp
  3994 00001E9A C3                              ret
  3995                                  
  3996                                  ; Función para verificar colisión con enemigos
  3997                                  ; Función para verificar colisión con enemigos
  3998                                  check_enemy_collision:
  3999 00001E9B 55                          push rbp
  4000 00001E9C 4889E5                      mov rbp, rsp
  4001                                      
  4002 00001E9F 4D31E4                      xor r12, r12                    ; Índice del enemigo
  4003 00001EA2 4831C0                      xor rax, rax                    ; Valor de retorno (0 = no colisión)
  4004                                      
  4005                                      .check_loop:
  4006 00001EA5 4983FC05                        cmp r12, 5                      ; Máximo 5 enemigos
  4007 00001EA9 0F8DE9000000                    jge .end
  4008                                          
  4009                                          ; Calcular offset del enemigo actual
  4010 00001EAF 4C89E1                          mov rcx, r12
  4011 00001EB2 486BC903                        imul rcx, 3                     ; Cada enemigo ocupa 3 bytes
  4012 00001EB6 488DB1[60200000]                lea rsi, [enemies + rcx]
  4013                                          
  4014                                          ; Verificar si el enemigo está activo
  4015 00001EBD 807E0201                        cmp byte [rsi + 2], 1
  4016 00001EC1 0F85C9000000                    jne .next_enemy
  4017                                          
  4018                                          ; Verificar colisión con la bola
  4019 00001EC7 4C0FB606                        movzx r8, byte [rsi]            ; X enemigo
  4020 00001ECB 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y enemigo
  4021                                          
  4022                                          ; Verificar si la bola está en el rango del enemigo (considerando el enemigo como un área)
  4023 00001ED0 4C8B15(DF140000)                mov r10, [ball_x_pos]
  4024 00001ED7 4C8B1D(E7140000)                mov r11, [ball_y_pos]
  4025                                          
  4026                                          ; Comprobar colisión vertical (misma columna)
  4027 00001EDE 4D39C2                          cmp r10, r8
  4028 00001EE1 7525                            jne .check_horizontal
  4029 00001EE3 4D29CB                          sub r11, r9
  4030 00001EE6 4983FB01                        cmp r11, 1
  4031 00001EEA 7F1C                            jg .check_horizontal
  4032 00001EEC 4983FBFF                        cmp r11, -1
  4033 00001EF0 7C16                            jl .check_horizontal
  4034                                          
  4035                                          ; Colisión vertical detectada
  4036 00001EF2 E8A3000000                      call destroy_enemy
  4037 00001EF7 48F71D(F7140000)                neg qword [ball_direction_y]    ; Invertir dirección vertical
  4038 00001EFE B801000000                      mov rax, 1
  4039 00001F03 E990000000                      jmp .end
  4040                                          
  4041                                      .check_horizontal:
  4042                                          ; Comprobar colisión horizontal (misma fila)
  4043 00001F08 4C8B15(DF140000)                mov r10, [ball_x_pos]
  4044 00001F0F 4C8B1D(E7140000)                mov r11, [ball_y_pos]
  4045 00001F16 4D39CB                          cmp r11, r9
  4046 00001F19 7522                            jne .check_paddle
  4047 00001F1B 4D29C2                          sub r10, r8
  4048 00001F1E 4983FA01                        cmp r10, 1
  4049 00001F22 7F19                            jg .check_paddle
  4050 00001F24 4983FAFF                        cmp r10, -1
  4051 00001F28 7C13                            jl .check_paddle
  4052                                          
  4053                                          ; Colisión horizontal detectada
  4054 00001F2A E86B000000                      call destroy_enemy
  4055 00001F2F 48F71D(EF140000)                neg qword [ball_direction_x]    ; Invertir dirección horizontal
  4056 00001F36 B801000000                      mov rax, 1
  4057 00001F3B EB5B                            jmp .end
  4058                                          
  4059                                      .check_paddle:
  4060                                          ; Verificar colisión con la paleta
  4061 00001F3D 4C8B15(BF140000)                mov r10, [pallet_position]
  4062 00001F44 4981EA[400A0000]                sub r10, board
  4063 00001F4B 4C89D0                          mov rax, r10
  4064 00001F4E 41BB50000000                    mov r11, column_cells
  4065 00001F54 4983C302                        add r11, 2
  4066 00001F58 4831D2                          xor rdx, rdx
  4067 00001F5B 49F7F3                          div r11                     ; División para obtener la posición Y
  4068 00001F5E 4989D3                          mov r11, rdx               ; X de la paleta en r11
  4069                                          
  4070 00001F61 488B0D(C7140000)                mov rcx, [pallet_size]     ; Obtener el tamaño de la paleta
  4071                                          
  4072                                          ; Verificar si el enemigo está en la misma fila que la paleta
  4073 00001F68 41BD20000000                    mov r13, row_cells
  4074 00001F6E 4983ED02                        sub r13, 2                 ; Y de la paleta
  4075 00001F72 4D39E9                          cmp r9, r13               ; Comparar Y del enemigo con Y de la paleta
  4076 00001F75 7519                            jne .next_enemy
  4077                                          
  4078                                          ; Verificar si el enemigo está dentro del rango X de la paleta
  4079 00001F77 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X inicial de la paleta
  4080 00001F7A 7C14                            jl .next_enemy
  4081                                          
  4082 00001F7C 4901CB                          add r11, rcx              ; Añadir el tamaño de la paleta
  4083 00001F7F 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X final de la paleta
  4084 00001F82 7F0C                            jg .next_enemy
  4085                                          
  4086                                          ; Si llegamos aquí, hay colisión con la paleta
  4087 00001F84 E811000000                      call destroy_enemy        ; Destruir el enemigo
  4088 00001F89 B801000000                      mov rax, 1                ; Indicar que hubo colisión
  4089 00001F8E EB08                            jmp .end
  4090                                          
  4091                                      .next_enemy:
  4092 00001F90 49FFC4                          inc r12
  4093 00001F93 E90DFFFFFF                      jmp .check_loop
  4094                                          
  4095                                      .end:
  4096 00001F98 5D                              pop rbp
  4097 00001F99 C3                              ret
  4098                                  
  4099                                  ; Función para destruir un enemigo
  4100                                  destroy_enemy:
  4101                                      ; Desactivar enemigo
  4102 00001F9A C6460200                    mov byte [rsi + 2], 0   ; Marcar enemigo como inactivo
  4103                                  
  4104                                      ; Sumar puntos por destruir enemigo
  4105 00001F9E 488B05(7F200000)            mov rax, [enemy_points]
  4106 00001FA5 480105(3E200000)            add [current_score], rax
  4107                                  
  4108                                      ; No tocar bloques destruidos aquí
  4109 00001FAC C3                          ret
  4110                                  
  4111                                  
  4112                                  _start:
  4113 00001FAD E879E1FFFF              	call canonical_off
  4114 00001FB2 E853010000              	call start_screen
  4115 00001FB7 E8C6F3FFFF                  call init_level
  4116 00001FBC E829FAFFFF                  call init_enemies
  4117 00001FC1 EB00                    	jmp .main_loop
  4118                                  	
  4119                                  
  4120                                      .main_loop:
  4121 00001FC3 E8E0F7FFFF                      call print_labels
  4122 00001FC8 E80FF7FFFF                      call print_blocks
  4123 00001FCD E868E5FFFF                      call move_letters
  4124 00001FD2 E827E8FFFF                      call update_lasers
  4125 00001FD7 E8D3E4FFFF                      call print_letters
  4126 00001FDC E8C8EBFFFF                      call print_pallet
  4127                                          
  4128                                          ; Mover bola principal solo si está activa
  4129 00001FE1 803D(00150000)01                cmp byte [ball_active], 1
  4130 00001FE8 7505                            jne .skip_ball1
  4131 00001FEA E8D2ECFFFF                          call move_ball
  4132                                          .skip_ball1:
  4133                                  
  4134                                          ; Mover bola 2 si está activa
  4135 00001FEF 803D(22150000)01                cmp byte [ball2_active], 1
  4136 00001FF6 7505                            jne .skip_ball2
  4137 00001FF8 E897EEFFFF                          call move_ball_2
  4138                                          .skip_ball2:
  4139                                  
  4140                                          ; Mover bola 3 si está activa
  4141 00001FFD 803D(44150000)01                cmp byte [ball3_active], 1
  4142 00002004 7505                            jne .skip_ball3
  4143 00002006 E85CF0FFFF                          call move_ball_3
  4144                                          .skip_ball3:
  4145                                  
  4146 0000200B E8E6E2FFFF                      call check_bottom_collision    ; Nueva función que maneja todas las bolas
  4147 00002010 E8C8E1FFFF                      call print_lives
  4148                                  
  4149                                          ; Imprimir solo las bolas activas
  4150 00002015 803D(00150000)01                cmp byte [ball_active], 1
  4151 0000201C 7505                            jne .no_pb1
  4152 0000201E E80EEBFFFF                          call print_ball
  4153                                          .no_pb1:
  4154                                  
  4155 00002023 803D(22150000)01                cmp byte [ball2_active], 1
  4156 0000202A 7505                            jne .no_pb2
  4157 0000202C E828EBFFFF                          call print_ball_2
  4158                                          .no_pb2:
  4159                                  
  4160 00002031 803D(44150000)01                cmp byte [ball3_active], 1
  4161 00002038 7505                            jne .no_pb3
  4162 0000203A E842EBFFFF                          call print_ball_3
  4163                                          .no_pb3:
  4164                                  
  4165 0000203F E8FAF4FFFF                      call check_level_complete
  4166 00002044 E88BFDFFFF                      call check_enemy_spawn
  4167 00002049 E8DAFAFFFF                      call move_enemies
  4168 0000204E E848FEFFFF                      call check_enemy_collision
  4169 00002053 E8E9FDFFFF                      call print_enemies
  4170                                  		print board, board_size				
    82 00002058 B801000000          <1>  mov eax, sys_write
    83 0000205D BF01000000          <1>  mov edi, 1
    84 00002062 48BE-               <1>  mov rsi, %1
    84 00002064 [400A000000000000]  <1>
    85 0000206C BA400A0000          <1>  mov edx, %2
    86 00002071 0F05                <1>  syscall
  4171                                  		;setnonblocking	
  4172                                  	.read_more:	
  4173                                  	    getchar	
    90 00002073 B800000000          <1>  mov rax, sys_read
    91 00002078 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 0000207D 48BE-               <1>  mov rsi, input_char
    92 0000207F [0000000000000000]  <1>
    93 00002087 BA01000000          <1>  mov rdx, 1
    94 0000208C 0F05                <1>  syscall
  4174 0000208E 4883F801                	    cmp rax, 1
  4175 00002092 7543                    	    jne .done
  4176                                  	
  4177 00002094 8A05(00000000)          	    mov al, [input_char]
  4178 0000209A 8805(07230000)          	    mov [last_key], al      ; Registrar la última tecla presionada
  4179                                  	
  4180 000020A0 3C61                    	    cmp al, 'a'
  4181 000020A2 750E                    	    jne .not_left
  4182 000020A4 48C7C7FFFFFFFF          	    mov rdi, left_direction
  4183 000020AB E82EEBFFFF              	    call move_pallet
  4184 000020B0 EB25                    	    jmp .done
  4185                                  	
  4186                                      .not_left:
  4187 000020B2 3C64                    	    cmp al, 'd'
  4188 000020B4 750C                    	    jne .not_right
  4189 000020B6 BF01000000              	    mov rdi, right_direction
  4190 000020BB E81EEBFFFF              	    call move_pallet
  4191 000020C0 EB15                    	    jmp .done
  4192                                  	
  4193                                      .not_right:
  4194 000020C2 3C63                    	    cmp al, 'c'             ; Verificar si se presionó la tecla 'c'
  4195 000020C4 740A                    	    je .release_ball        ; Si sí, liberar la bola
  4196                                  	
  4197 000020C6 3C71                    	    cmp al, 'q' 
  4198 000020C8 0F84AF000000            	    je exit
  4199 000020CE EBA3                    	    jmp .read_more
  4200                                  	
  4201                                      .release_ball:
  4202 000020D0 E865F1FFFF              	    call process_catch_release
  4203 000020D5 EB00                    	    jmp .done
  4204                                  	
  4205                                      .done:
  4206                                  	    sleeptime
    98 000020D7 B823000000          <1>  mov eax, sys_nanosleep
    99 000020DC 48BF-               <1>  mov rdi, timespec
    99 000020DE [0000000000000000]  <1>
   100 000020E6 31F6                <1>  xor esi, esi
   101 000020E8 0F05                <1>  syscall
  4207                                  	    print clear, clear_length
    82 000020EA B801000000          <1>  mov eax, sys_write
    83 000020EF BF01000000          <1>  mov edi, 1
    84 000020F4 48BE-               <1>  mov rsi, %1
    84 000020F6 [1000000000000000]  <1>
    85 000020FE BA07000000          <1>  mov edx, %2
    86 00002103 0F05                <1>  syscall
  4208 00002105 E9B9FEFFFF              	    jmp .main_loop
  4209                                  
  4210                                  
  4211                                  
  4212                                  
  4213                                  start_screen:
  4214                                      print clear, clear_length    ; Limpiamos la pantalla primero
    82 0000210A B801000000          <1>  mov eax, sys_write
    83 0000210F BF01000000          <1>  mov edi, 1
    84 00002114 48BE-               <1>  mov rsi, %1
    84 00002116 [1000000000000000]  <1>
    85 0000211E BA07000000          <1>  mov edx, %2
    86 00002123 0F05                <1>  syscall
  4215                                      print msg1, msg1_length
    82 00002125 B801000000          <1>  mov eax, sys_write
    83 0000212A BF01000000          <1>  mov edi, 1
    84 0000212F 48BE-               <1>  mov rsi, %1
    84 00002131 [1700000000000000]  <1>
    85 00002139 BA14010000          <1>  mov edx, %2
    86 0000213E 0F05                <1>  syscall
  4216                                      
  4217                                      .wait_for_key:              ; Agregamos una etiqueta para esperar la tecla
  4218                                          getchar                 ; Esperamos una tecla
    90 00002140 B800000000          <1>  mov rax, sys_read
    91 00002145 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 0000214A 48BE-               <1>  mov rsi, input_char
    92 0000214C [0000000000000000]  <1>
    93 00002154 BA01000000          <1>  mov rdx, 1
    94 00002159 0F05                <1>  syscall
  4219 0000215B 4883F801                        cmp rax, 1             ; Verificamos si se leyó un carácter
  4220 0000215F 75DF                            jne .wait_for_key      ; Si no se leyó, seguimos esperando
  4221                                          
  4222                                      print clear, clear_length   ; Limpiamos la pantalla antes de salir
    82 00002161 B801000000          <1>  mov eax, sys_write
    83 00002166 BF01000000          <1>  mov edi, 1
    84 0000216B 48BE-               <1>  mov rsi, %1
    84 0000216D [1000000000000000]  <1>
    85 00002175 BA07000000          <1>  mov edx, %2
    86 0000217A 0F05                <1>  syscall
  4223 0000217C C3                          ret
  4224                                  
  4225                                  exit: 
  4226 0000217D E8EBDFFFFF              	call canonical_on
  4227 00002182 B83C000000              	mov    rax, 60
  4228 00002187 BF00000000                  mov    rdi, 0
  4229 0000218C 0F05                        syscall
  4230                                  
