     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  sys_read: equ 0	
     7                                  sys_write:	equ 1
     8                                  sys_nanosleep:	equ 35
     9                                  sys_time:	equ 201
    10                                  sys_fcntl:	equ 72
    11                                  
    12                                  
    13                                  STDIN_FILENO: equ 0
    14                                  
    15                                  F_SETFL:	equ 0x0004
    16                                  O_NONBLOCK: equ 0x0004
    17                                  
    18                                  ;screen clean definition
    19                                  row_cells:	equ 32	; set to any (reasonable) value you wish
    20                                  column_cells: 	equ 80 ; set to any (reasonable) value you wish
    21                                  array_length:	equ row_cells * column_cells + row_cells ; cells are mapped to bytes in the array and a new line char ends each row
    22                                  
    23                                  ;This is regarding the sleep time
    24                                  timespec:
    25 00000000 0000000000000000            tv_sec  dq 0
    26 00000008 00C2EB0B00000000            tv_nsec dq 200000000
    27                                  
    28                                  
    29                                  ;This is for cleaning up the screen
    30 00000010 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"
    31                                  clear_length:	equ $-clear
    32                                  	
    33                                  	
    34                                  
    35                                  ; Start Message
    36 00000017 202020202020202054-     msg1: db "        TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    36 00000020 45434E4F4C4F474943-
    36 00000029 4F20444520434F5354-
    36 00000032 412052494341202020-
    36 0000003B 20202020200A0D     
    37 00000042 202020202020202041-     msg2: db "        ARQUITECTURA DE COMPUTADORAS I        ", 0xA, 0xD
    37 0000004B 525155495445435455-
    37 00000054 524120444520434F4D-
    37 0000005D 50555441444F524153-
    37 00000066 204920202020202020-
    37 0000006F 200A0D             
    38 00000072 202020202020202045-     msg3: db "        ESTUDIANTE: HENRY NUNEZ PEREZ        ", 0xA, 0xD
    38 0000007B 5354554449414E5445-
    38 00000084 3A2048454E5259204E-
    38 0000008D 554E455A2050455245-
    38 00000096 5A2020202020202020-
    38 0000009F 0A0D               
    39 000000A1 202020202020202050-     msg4: db "        PROFESOR: ERNESTO RIVERA ALVARADO        ", 0xA, 0xD
    39 000000AA 524F4645534F523A20-
    39 000000B3 45524E4553544F2052-
    39 000000BC 495645524120414C56-
    39 000000C5 415241444F20202020-
    39 000000CE 202020200A0D       
    40 000000D4 202020202020202041-     msg5: db "        ARKANOID RETRO        ", 0xA, 0xD
    40 000000DD 524B414E4F49442052-
    40 000000E6 4554524F2020202020-
    40 000000EF 2020200A0D         
    41 000000F4 202020202020202050-     msg6: db "        PRESIONE CUALQUIER TECLA PARA INICIAR        ", 0xA, 0xD
    41 000000FD 524553494F4E452043-
    41 00000106 55414C515549455220-
    41 0000010F 5445434C4120504152-
    41 00000118 4120494E4943494152-
    41 00000121 20202020202020200A-
    41 0000012A 0D                 
    42                                  msg1_length: equ $-msg1
    43                                  msg2_length: equ $-msg2
    44                                  msg3_length: equ $-msg3
    45                                  msg4_length: equ $-msg4
    46                                  msg5_length: equ $-msg5
    47                                  msg6_length: equ $-msg6
    48                                  
    49                                  ; Usefull macros
    50                                  
    51                                  
    52                                  
    53                                  %macro setnonblocking 0
    54                                  	mov rax, sys_fcntl
    55                                      mov rdi, STDIN_FILENO
    56                                      mov rsi, F_SETFL
    57                                      mov rdx, O_NONBLOCK
    58                                      syscall
    59                                  %endmacro
    60                                  
    61                                  %macro unsetnonblocking 0
    62                                  	mov rax, sys_fcntl
    63                                      mov rdi, STDIN_FILENO
    64                                      mov rsi, F_SETFL
    65                                      mov rdx, 0
    66                                      syscall
    67                                  %endmacro
    68                                  
    69                                  %macro full_line 0
    70                                      times column_cells db "X"
    71                                      db 0x0a, 0xD
    72                                  %endmacro
    73                                  
    74                                  %macro hollow_line 0
    75                                      db "X"
    76                                      times column_cells-2 db " "
    77                                      db "X", 0x0a, 0xD
    78                                  %endmacro
    79                                  
    80                                  
    81                                  %macro print 2
    82                                  	mov eax, sys_write
    83                                  	mov edi, 1 	; stdout
    84                                  	mov rsi, %1
    85                                  	mov edx, %2
    86                                  	syscall
    87                                  %endmacro
    88                                  
    89                                  %macro getchar 0
    90                                  	mov     rax, sys_read
    91                                      mov     rdi, STDIN_FILENO
    92                                      mov     rsi, input_char
    93                                      mov     rdx, 1 ; number of bytes
    94                                      syscall         ;read text input from keyboard
    95                                  %endmacro
    96                                  
    97                                  %macro sleeptime 0
    98                                  	mov eax, sys_nanosleep
    99                                  	mov rdi, timespec
   100                                  	xor esi, esi		; ignore remaining time in case of call interruption
   101                                  	syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   102                                  %endmacro
   103                                  
   104                                  
   105                                  
   106                                  global _start
   107                                  
   108                                  section .bss
   109                                  
   110 00000000 ??                      input_char: resb 1
   111                                  
   112                                  section .data
   113                                  
   114                                  	; Guardamos la plantilla del tablero (32 filas)
   115                                      board_template:
   116                                          full_line
    70 00000000 58<rep 50h>         <1>  times column_cells db "X"
    71 00000050 0A0D                <1>  db 0x0a, 0xD
   117                                          %rep 30
   118                                          hollow_line
   119                                          %endrep
   118                              <1>  hollow_line
    75 00000052 58                  <2>  db "X"
    76 00000053 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000A1 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000A4 58                  <2>  db "X"
    76 000000A5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000F3 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000F6 58                  <2>  db "X"
    76 000000F7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000145 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000148 58                  <2>  db "X"
    76 00000149 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000197 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000019A 58                  <2>  db "X"
    76 0000019B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000001E9 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000001EC 58                  <2>  db "X"
    76 000001ED 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000023B 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000023E 58                  <2>  db "X"
    76 0000023F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000028D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000290 58                  <2>  db "X"
    76 00000291 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000002DF 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000002E2 58                  <2>  db "X"
    76 000002E3 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000331 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000334 58                  <2>  db "X"
    76 00000335 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000383 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000386 58                  <2>  db "X"
    76 00000387 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000003D5 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000003D8 58                  <2>  db "X"
    76 000003D9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000427 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000042A 58                  <2>  db "X"
    76 0000042B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000479 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000047C 58                  <2>  db "X"
    76 0000047D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000004CB 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000004CE 58                  <2>  db "X"
    76 000004CF 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000051D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000520 58                  <2>  db "X"
    76 00000521 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000056F 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000572 58                  <2>  db "X"
    76 00000573 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000005C1 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005C4 58                  <2>  db "X"
    76 000005C5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000613 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000616 58                  <2>  db "X"
    76 00000617 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000665 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000668 58                  <2>  db "X"
    76 00000669 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000006B7 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000006BA 58                  <2>  db "X"
    76 000006BB 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000709 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000070C 58                  <2>  db "X"
    76 0000070D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000075B 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000075E 58                  <2>  db "X"
    76 0000075F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007AD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000007B0 58                  <2>  db "X"
    76 000007B1 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007FF 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000802 58                  <2>  db "X"
    76 00000803 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000851 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000854 58                  <2>  db "X"
    76 00000855 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008A3 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008A6 58                  <2>  db "X"
    76 000008A7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008F5 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008F8 58                  <2>  db "X"
    76 000008F9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000947 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000094A 58                  <2>  db "X"
    76 0000094B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000999 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000099C 58                  <2>  db "X"
    76 0000099D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000009EB 580A0D              <2>  db "X", 0x0a, 0xD
   120                                          full_line
    70 000009EE 58<rep 50h>         <1>  times column_cells db "X"
    71 00000A3E 0A0D                <1>  db 0x0a, 0xD
   121                                      board_template_size: equ $ - board_template
   122                                  
   123                                      ; Espacio real que se usará en la ejecución
   124 00000A40 00<rep A40h>                board: times board_template_size db 0
   125                                      board_size: equ board_template_size
   126                                  
   127                                  	; Added for the terminal issue
   128 00001480 00<rep 24h>             	termios:        times 36 db 0
   129                                  	stdin:          equ 0
   130                                  	ICANON:         equ 1<<1
   131                                  	ECHO:           equ 1<<3
   132                                  	VTIME: 			equ 5
   133                                  	VMIN:			equ 6
   134                                  	CC_C:			equ 18
   135                                  
   136                                  section .text
   137                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   138                                  canonical_off:
   139 0000012B E86F000000                      call read_stdin_termios
   140                                  
   141                                          ; clear canonical bit in local mode flags
   142 00000130 50                              push rax
   143 00000131 B802000000                      mov eax, ICANON
   144 00000136 F7D0                            not eax
   145 00000138 2105(8C140000)                  and [termios+12], eax
   146 0000013E C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   147 00000145 C605(98140000)00        		mov byte[termios+CC_C+VMIN], 0
   148 0000014C 58                              pop rax
   149                                  
   150 0000014D E86C000000                      call write_stdin_termios
   151 00000152 C3                              ret
   152                                  
   153                                  echo_off:
   154 00000153 E847000000                      call read_stdin_termios
   155                                  
   156                                          ; clear echo bit in local mode flags
   157 00000158 50                              push rax
   158 00000159 B808000000                      mov eax, ECHO
   159 0000015E F7D0                            not eax
   160 00000160 2105(8C140000)                  and [termios+12], eax
   161 00000166 58                              pop rax
   162                                  
   163 00000167 E852000000                      call write_stdin_termios
   164 0000016C C3                              ret
   165                                  
   166                                  canonical_on:
   167 0000016D E82D000000                      call read_stdin_termios
   168                                  
   169                                          ; set canonical bit in local mode flags
   170 00000172 830D(8C140000)02                or dword [termios+12], ICANON
   171 00000179 C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   172 00000180 C605(98140000)01        		mov byte[termios+CC_C+VMIN], 1
   173 00000187 E832000000                      call write_stdin_termios
   174 0000018C C3                              ret
   175                                  
   176                                  echo_on:
   177 0000018D E80D000000                      call read_stdin_termios
   178                                  
   179                                          ; set echo bit in local mode flags
   180 00000192 830D(8C140000)08                or dword [termios+12], ECHO
   181                                  
   182 00000199 E820000000                      call write_stdin_termios
   183 0000019E C3                              ret
   184                                  
   185                                  read_stdin_termios:
   186 0000019F 50                              push rax
   187 000001A0 53                              push rbx
   188 000001A1 51                              push rcx
   189 000001A2 52                              push rdx
   190                                  
   191 000001A3 B836000000                      mov eax, 36h
   192 000001A8 BB00000000                      mov ebx, stdin
   193 000001AD B901540000                      mov ecx, 5401h
   194 000001B2 BA[80140000]                    mov edx, termios
   195 000001B7 CD80                            int 80h
   196                                  
   197 000001B9 5A                              pop rdx
   198 000001BA 59                              pop rcx
   199 000001BB 5B                              pop rbx
   200 000001BC 58                              pop rax
   201 000001BD C3                              ret
   202                                  
   203                                  write_stdin_termios:
   204 000001BE 50                              push rax
   205 000001BF 53                              push rbx
   206 000001C0 51                              push rcx
   207 000001C1 52                              push rdx
   208                                  
   209 000001C2 B836000000                      mov eax, 36h
   210 000001C7 BB00000000                      mov ebx, stdin
   211 000001CC B902540000                      mov ecx, 5402h
   212 000001D1 BA[80140000]                    mov edx, termios
   213 000001D6 CD80                            int 80h
   214                                  
   215 000001D8 5A                              pop rdx
   216 000001D9 59                              pop rcx
   217 000001DA 5B                              pop rbx
   218 000001DB 58                              pop rax
   219 000001DC C3                              ret
   220                                  
   221                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   222                                  
   223                                  char_equal: equ 61
   224                                  char_space: equ 32
   225                                  char_O: equ 79
   226                                  left_direction: equ -1
   227                                  right_direction: equ 1
   228                                  
   229                                  
   230                                  section .data
   231 000014A4 [B213000000000000]      	pallet_position dq board + 40 + 29 * (column_cells +2)
   232 000014AC 0300000000000000        	pallet_size dq 3
   233                                  
   234 000014B4 2800000000000000        	ball_x_pos: dq 40
   235 000014BC 1C00000000000000        	ball_y_pos: dq 28
   236 000014C4 0100000000000000            ball_direction_x dq 1    ; 1 = derecha, -1 = izquierda
   237 000014CC FFFFFFFFFFFFFFFF            ball_direction_y dq -1   ; -1 = arriba, 1 = abajo
   238 000014D4 00                          ball_moving db 0         ; 0 = estática, 1 = en movimiento
   239                                  
   240                                  ; Definir los límites de la pantalla o área de juego
   241                                      board_top_left_x equ 1
   242                                      board_top_left_y equ 1
   243                                      board_bottom_right_x equ column_cells - 1
   244                                      board_bottom_right_y equ row_cells
   245                                  
   246                                      ; Limites laterales
   247                                      left_edge equ board_top_left_x               ; Límite izquierdo en la primera columna
   248                                      right_edge equ board_bottom_right_x         ; Límite derecho en la última columna
   249                                  
   250                                      ; O también puedes hacerlo así si prefieres usando las coordenadas en memoria para obtener la ubicación exacta:
   251 000014D5 [920A000000000000]          left_edge_position dq board + (board_top_left_y * (column_cells + 2)) ; Coordenada de la parte izquierda del marco
   252 000014DD [E00A000000000000]          right_edge_position dq board + (board_top_left_y * (column_cells + 2) + board_bottom_right_x - 1) ; Coordenada de la parte derecha del marco
   253                                  
   254                                      ; Definición de tipos de bloques
   255 000014E5 55555555                    block_type_1: db "UUUU"    ; Durabilidad 1
   256 000014E9 4F4F4F4F                    block_type_2: db "OOOO"    ; Durabilidad 2
   257 000014ED 44444444                    block_type_3: db "DDDD"    ; Durabilidad 3
   258 000014F1 4C4C4C4C                    block_type_4: db "LLLL"    ; Durabilidad 4
   259 000014F5 56565656                    block_type_5: db "VVVV"    ; Durabilidad 5
   260 000014F9 38383838                    block_type_6: db "8888"    ; Durabilidad 6
   261                                      block_length: equ 4        ; Longitud de cada bloque
   262                                  
   263                                      ; Estructura para el nivel actual
   264 000014FD 01                          current_level db 1
   265 000014FE 00                          blocks_remaining db 0
   266                                  
   267                                      ; Definición del nivel 1 (ejemplo con múltiples bloques)
   268                                      ; Formato: x_pos, y_pos, tipo_bloque, durabilidad_actual
   269                                      level1_blocks:
   270                                          ; Tercera fila (tipo 3)
   271 000014FF 3C070301                        db 60, 7, 3, 1    ; Bloque 7
   272                                      level1_blocks_count equ 1   ; Cantidad total de bloques
   273                                  
   274                                      ; Nivel 2: Bloques de prueba
   275                                      level2_blocks:
   276 00001503 3C070102                        db 60, 7, 1, 2    ; Un bloque simple en el nivel 2
   277 00001507 3F090102                        db 63, 9, 1, 2    ; Un bloque simple en el nivel 2
   278                                      level2_blocks_count equ 2
   279                                  
   280                                  
   281                                      ; Array para mantener el estado de los bloques
   282 0000150B 00<rep 64h>                 block_states: times 100 db 0  ; Durabilidad actual de cada bloque
   283                                  
   284                                  section .text
   285                                  
   286                                  ;	Function: print_ball
   287                                  ; This function displays the position of the ball
   288                                  ; Arguments: none
   289                                  ;
   290                                  ; Return:
   291                                  ;	Void
   292                                  print_ball:
   293 000001DD 4C8B05(B4140000)        	mov r8, [ball_x_pos]
   294 000001E4 4C8B0D(BC140000)        	mov r9, [ball_y_pos]
   295 000001EB 4981C0[400A0000]        	add r8, board
   296                                  
   297 000001F2 4C89C9                  	mov rcx, r9
   298 000001F5 B852000000              	mov rax, column_cells + 2
   299 000001FA 48F7E9                  	imul rcx
   300                                  	
   301 000001FD 4901C0                  	add r8, rax
   302 00000200 41C6004F                	mov byte [r8], char_O
   303 00000204 C3                      	ret
   304                                  
   305                                  	
   306                                  	;mov rax, board + r8 + r9 * (column_cells + 2)
   307                                  	
   308                                  
   309                                  
   310                                  
   311                                  ;	Function: print_pallet
   312                                  ; This function moves the pallet in the game
   313                                  ; Arguments: none
   314                                  ;
   315                                  ; Return;
   316                                  ;	void
   317                                  print_pallet:
   318 00000205 4C8B05(A4140000)        	mov r8, [pallet_position]
   319 0000020C 488B0D(AC140000)        	mov rcx, [pallet_size]
   320                                  	.write_pallet:
   321 00000213 41C6003D                		mov byte [r8], char_equal
   322 00000217 49FFC0                  		inc r8
   323 0000021A 48FFC9                  		dec rcx
   324 0000021D 75F4                    		jnz .write_pallet
   325                                  
   326 0000021F C3                      	ret
   327                                  	
   328                                  ;	Function: move_pallet
   329                                  ; This function is in charge of moving the pallet in a given direction
   330                                  ; Arguments:
   331                                  ;	rdi: left direction or right direction
   332                                  ;
   333                                  ; Return:
   334                                  ;	void
   335                                  move_pallet:
   336                                      
   337 00000220 803D(D4140000)00            cmp byte [ball_moving], 0
   338 00000227 7507                        jne .continue_movement
   339 00000229 C605(D4140000)01            mov byte [ball_moving], 1
   340                                  
   341                                      .continue_movement:
   342 00000230 4883FFFF                        cmp rdi, left_direction
   343 00000234 7531                            jne .move_right
   344                                  
   345                                          .move_left:
   346                                              ; Verificar si la siguiente posición sería una X (borde izquierdo)
   347 00000236 4C8B05(A4140000)                    mov r8, [pallet_position]
   348 0000023D 49FFC8                              dec r8              ; Verificar la posición a la izquierda
   349 00000240 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
   350 00000243 3C58                                cmp al, 'X'        ; Comparar si es una X
   351 00000245 744D                                je .end            ; Si es X, no mover
   352                                              
   353 00000247 4C8B05(A4140000)                    mov r8, [pallet_position]
   354 0000024E 4C8B0D(AC140000)                    mov r9, [pallet_size]
   355 00000255 43C64408FF20                        mov byte [r8 + r9 - 1], char_space  ; Borrar último carácter de la paleta
   356 0000025B 49FFC8                              dec r8
   357 0000025E 4C8905(A4140000)                    mov [pallet_position], r8
   358 00000265 EB2D                                jmp .end
   359                                              
   360                                          .move_right:
   361                                              ; Verificar si la siguiente posición después de la paleta sería una X
   362 00000267 4C8B05(A4140000)                    mov r8, [pallet_position]
   363 0000026E 4C8B0D(AC140000)                    mov r9, [pallet_size]
   364 00000275 4D01C8                              add r8, r9         ; Moverse al final de la paleta
   365 00000278 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
   366 0000027B 3C58                                cmp al, 'X'        ; Comparar si es una X
   367 0000027D 7415                                je .end            ; Si es X, no mover
   368                                              
   369 0000027F 4C8B05(A4140000)                    mov r8, [pallet_position]
   370 00000286 41C60020                            mov byte [r8], char_space
   371 0000028A 49FFC0                              inc r8
   372 0000028D 4C8905(A4140000)                    mov [pallet_position], r8
   373                                          .end:
   374 00000294 C3                                  ret
   375                                  
   376                                  move_ball:
   377                                      ; Si la bola no está en movimiento, no hacer nada
   378 00000295 803D(D4140000)00            cmp byte [ball_moving], 0
   379 0000029C 0F8406010000                je .end
   380                                  
   381                                      ; Borrar la posición actual de la bola
   382 000002A2 4C8B05(B4140000)            mov r8, [ball_x_pos]
   383 000002A9 4C8B0D(BC140000)            mov r9, [ball_y_pos]
   384 000002B0 4981C0[400A0000]            add r8, board
   385 000002B7 4C89C9                      mov rcx, r9
   386 000002BA B852000000                  mov rax, column_cells + 2
   387 000002BF 48F7E9                      imul rcx
   388 000002C2 4901C0                      add r8, rax
   389 000002C5 41C60020                    mov byte [r8], char_space    ; Borrar la bola actual
   390                                  
   391                                      ; Calcular siguiente posición X
   392 000002C9 4C8B05(B4140000)            mov r8, [ball_x_pos]
   393 000002D0 4C8B0D(BC140000)            mov r9, [ball_y_pos]
   394 000002D7 488B05(C4140000)            mov rax, [ball_direction_x]
   395 000002DE 4901C0                      add r8, rax                  ; Nueva posición X
   396                                  
   397                                      ; Calcular la dirección de memoria para la siguiente posición
   398 000002E1 4D89C2                      mov r10, r8
   399 000002E4 4981C2[400A0000]            add r10, board
   400 000002EB 4C89C9                      mov rcx, r9
   401 000002EE B852000000                  mov rax, column_cells + 2
   402 000002F3 48F7E9                      imul rcx
   403 000002F6 4901C2                      add r10, rax
   404                                  
   405                                      ; Verificar si hay una X en la siguiente posición X
   406 000002F9 418A02                      mov al, [r10]
   407 000002FC 3C58                        cmp al, 'X'
   408 000002FE 750C                        jne .check_block_x
   409 00000300 48F71D(C4140000)            neg qword [ball_direction_x]  ; Cambiar dirección X si hay una X
   410 00000307 E99C000000                  jmp .end
   411                                  
   412                                      .check_block_x:
   413                                          ; Verificar colisión con bloques en X
   414 0000030C 4150                            push r8     ; Guardar registros que usa check_block_collision
   415 0000030E 4151                            push r9
   416 00000310 4152                            push r10
   417 00000312 E82E020000                      call check_block_collision
   418 00000317 415A                            pop r10
   419 00000319 4159                            pop r9
   420 0000031B 4158                            pop r8
   421 0000031D 4885C0                          test rax, rax
   422 00000320 7409                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
   423 00000322 48F71D(C4140000)                neg qword [ball_direction_x]  ; Si hay colisión, rebotar
   424 00000329 EB7D                            jmp .end
   425                                  
   426                                      .check_paddle_x:
   427                                          ; Verificar si hay una paleta (=) en la siguiente posición X
   428 0000032B 41803A3D                        cmp byte [r10], char_equal
   429 0000032F 7509                            jne .check_y_movement
   430 00000331 48F71D(C4140000)                neg qword [ball_direction_x]  ; Cambiar dirección X si hay una paleta
   431 00000338 EB6E                            jmp .end
   432                                  
   433                                      .check_y_movement:
   434                                          ; Calcular siguiente posición Y
   435 0000033A 488B05(CC140000)                mov rax, [ball_direction_y]
   436 00000341 4901C1                          add r9, rax                  ; Nueva posición Y
   437                                  
   438                                          ; Calcular la dirección de memoria para la siguiente posición Y
   439 00000344 4D89C2                          mov r10, r8
   440 00000347 4981C2[400A0000]                add r10, board
   441 0000034E 4C89C9                          mov rcx, r9
   442 00000351 B852000000                      mov rax, column_cells + 2
   443 00000356 48F7E9                          imul rcx
   444 00000359 4901C2                          add r10, rax
   445                                  
   446                                          ; Verificar si hay una X en la siguiente posición Y
   447 0000035C 418A02                          mov al, [r10]
   448 0000035F 3C58                            cmp al, 'X'
   449 00000361 7509                            jne .check_block_y
   450 00000363 48F71D(CC140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una X
   451 0000036A EB3C                            jmp .end
   452                                  
   453                                      .check_block_y:
   454                                          ; Verificar colisión con bloques en Y
   455 0000036C 4150                            push r8     ; Guardar registros que usa check_block_collision
   456 0000036E 4151                            push r9
   457 00000370 4152                            push r10
   458 00000372 E8CE010000                      call check_block_collision
   459 00000377 415A                            pop r10
   460 00000379 4159                            pop r9
   461 0000037B 4158                            pop r8
   462 0000037D 4885C0                          test rax, rax
   463 00000380 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
   464 00000382 48F71D(CC140000)                neg qword [ball_direction_y]  ; Si hay colisión, rebotar
   465 00000389 EB1D                            jmp .end
   466                                  
   467                                      .check_paddle_y:
   468                                      ; Verificar si hay una paleta (=) en la siguiente posición Y
   469 0000038B 41803A3D                    cmp byte [r10], char_equal
   470 0000038F 7509                        jne .update_position
   471 00000391 48F71D(CC140000)            neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una paleta
   472 00000398 EB0E                        jmp .end
   473                                  
   474                                  
   475                                      .update_position:
   476 0000039A 4C8905(B4140000)                mov [ball_x_pos], r8
   477 000003A1 4C890D(BC140000)                mov [ball_y_pos], r9
   478                                  
   479                                      .end:
   480 000003A8 C3                              ret
   481                                  
   482                                  ; Función para inicializar el nivel
   483                                  ; Función para inicializar el nivel
   484                                  init_level:
   485                                      ; 1) Copiamos board_template en board para que quede "virgen"
   486 000003A9 56                          push rsi
   487 000003AA 57                          push rdi
   488 000003AB 51                          push rcx
   489 000003AC 50                          push rax
   490                                  
   491 000003AD 488D35(00000000)            lea rsi, [board_template]
   492 000003B4 488D3D(400A0000)            lea rdi, [board]
   493 000003BB B9400A0000                  mov rcx, board_template_size
   494 000003C0 F3A4                        rep movsb                 ; Copiamos la plantilla a board
   495                                  
   496 000003C2 58                          pop rax
   497 000003C3 59                          pop rcx
   498 000003C4 5F                          pop rdi
   499 000003C5 5E                          pop rsi
   500                                  
   501                                      ; Verificar el nivel actual y cargar los bloques correspondientes
   502 000003C6 803D(FD140000)01            cmp byte [current_level], 1
   503 000003CD 740B                        je .level1
   504 000003CF 803D(FD140000)02            cmp byte [current_level], 2
   505 000003D6 742A                        je .level2
   506 000003D8 EB50                        jmp .done
   507                                  
   508                                      .level1:
   509 000003DA C605(FE140000)01                mov byte [blocks_remaining], level1_blocks_count
   510 000003E1 4831C9                          xor rcx, rcx             
   511                                          .init_loop1:
   512 000003E4 4883F901                            cmp rcx, level1_blocks_count
   513 000003E8 7D40                                jge .done
   514 000003EA 4889C8                              mov rax, rcx         
   515 000003ED 48C1E002                            shl rax, 2          
   516 000003F1 8A90[02150000]                      mov dl, byte [level1_blocks + rax + 3]  
   517 000003F7 8891[0B150000]                      mov byte [block_states + rcx], dl
   518 000003FD 48FFC1                              inc rcx
   519 00000400 EBE2                                jmp .init_loop1
   520                                  
   521                                      .level2:
   522 00000402 C605(FE140000)02                mov byte [blocks_remaining], level2_blocks_count
   523 00000409 4831C9                          xor rcx, rcx             
   524                                          .init_loop2:
   525 0000040C 4883F902                            cmp rcx, level2_blocks_count
   526 00000410 7D18                                jge .done
   527 00000412 4889C8                              mov rax, rcx         
   528 00000415 48C1E002                            shl rax, 2          
   529 00000419 8A90[06150000]                      mov dl, byte [level2_blocks + rax + 3]  
   530 0000041F 8891[0B150000]                      mov byte [block_states + rcx], dl
   531 00000425 48FFC1                              inc rcx
   532 00000428 EBE2                                jmp .init_loop2
   533                                  
   534                                      .done:
   535 0000042A C3                              ret
   536                                  
   537                                  
   538                                  ; Función para verificar y manejar la transición de nivel
   539                                  check_level_complete:
   540                                      ; Verificar si quedan bloques
   541 0000042B 803D(FE140000)00            cmp byte [blocks_remaining], 0
   542 00000432 753C                        jne .not_complete
   543                                      
   544                                      ; Incrementar el nivel
   545 00000434 FE05(FD140000)              inc byte [current_level]
   546                                      
   547                                      ; Verificar si hemos completado todos los niveles (asumiendo 2 niveles por ahora)
   548 0000043A 803D(FD140000)03            cmp byte [current_level], 3
   549 00000441 742E                        je game_win
   550                                      
   551                                      ; Reinicializar el juego para el siguiente nivel
   552 00000443 E861FFFFFF                  call init_level
   553                                      
   554                                      ; Reinicializar la posición de la bola y la paleta
   555 00000448 48C705(B4140000)28-         mov qword [ball_x_pos], 40
   555 00000450 000000             
   556 00000453 48C705(BC140000)1C-         mov qword [ball_y_pos], 28
   556 0000045B 000000             
   557 0000045E C605(D4140000)00            mov byte [ball_moving], 0
   558 00000465 48C705(A4140000)-           mov qword [pallet_position], board + 40 + 29 * (column_cells + 2)
   558 0000046C [B2130000]         
   559                                      
   560                                      .not_complete:
   561 00000470 C3                              ret
   562                                  
   563                                      ; Nueva función para manejar la victoria del juego
   564                                      game_win:
   565                                          ; Aquí puedes agregar lógica para mostrar un mensaje de victoria
   566                                          ; y terminar el juego o reiniciarlo
   567 00000471 E9E8020000                      jmp exit
   568                                  
   569                                  ; Función para imprimir los bloques
   570                                  ; Función modificada para imprimir bloques
   571                                  
   572                                  ; Primero, agreguemos una función para obtener el puntero a los bloques del nivel actual
   573                                  get_current_level_blocks:
   574 00000476 803D(FD140000)01            cmp byte [current_level], 1
   575 0000047D 740D                        je .level1
   576 0000047F 803D(FD140000)02            cmp byte [current_level], 2
   577 00000486 740C                        je .level2
   578                                      ; Si llegamos aquí, hay un error en el nivel
   579 00000488 4831C0                      xor rax, rax
   580 0000048B C3                          ret
   581                                  
   582                                      .level1:
   583 0000048C 488D05(FF140000)                lea rax, [level1_blocks]
   584 00000493 C3                              ret
   585                                  
   586                                      .level2:
   587 00000494 488D05(03150000)                lea rax, [level2_blocks]
   588 0000049B C3                              ret
   589                                  
   590                                  ; Función para obtener la cantidad de bloques del nivel actual
   591                                  get_current_level_count:
   592 0000049C 803D(FD140000)01            cmp byte [current_level], 1
   593 000004A3 740D                        je .level1
   594 000004A5 803D(FD140000)02            cmp byte [current_level], 2
   595 000004AC 740A                        je .level2
   596                                      ; Si llegamos aquí, hay un error en el nivel
   597 000004AE 4831C0                      xor rax, rax
   598 000004B1 C3                          ret
   599                                  
   600                                      .level1:
   601 000004B2 B801000000                      mov rax, level1_blocks_count
   602 000004B7 C3                              ret
   603                                  
   604                                      .level2:
   605 000004B8 B802000000                      mov rax, level2_blocks_count
   606 000004BD C3                              ret
   607                                  
   608                                  print_blocks:
   609 000004BE 55                          push rbp
   610 000004BF 4889E5                      mov rbp, rsp
   611                                      
   612                                      ; Obtener puntero a los bloques del nivel actual
   613 000004C2 E8AFFFFFFF                  call get_current_level_blocks
   614 000004C7 4989C5                      mov r13, rax                  ; Guardar puntero a los bloques en r13
   615                                      
   616                                      ; Obtener cantidad de bloques del nivel actual
   617 000004CA E8CDFFFFFF                  call get_current_level_count
   618 000004CF 4989C6                      mov r14, rax                  ; Guardar cantidad de bloques en r14
   619                                      
   620 000004D2 4D31E4                      xor r12, r12                  ; Índice del bloque actual
   621                                      
   622                                      .print_loop:
   623 000004D5 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
   624 000004D8 7D69                            jge .end
   625                                          
   626                                          ; Verificar si el bloque está activo
   627 000004DA 490FB68424-                     movzx rax, byte [block_states + r12]
   627 000004DF [0B150000]         
   628 000004E3 4885C0                          test rax, rax
   629 000004E6 7456                            jz .next_block
   630                                          
   631                                          ; Obtener posición y tipo del bloque usando r13
   632 000004E8 478A44A500                      mov r8b, [r13 + r12 * 4]      ; X position
   633 000004ED 478A4CA501                      mov r9b, [r13 + r12 * 4 + 1]  ; Y position
   634 000004F2 478A54A502                      mov r10b, [r13 + r12 * 4 + 2] ; Tipo de bloque
   635                                          
   636                                          ; El resto de la lógica de impresión permanece igual
   637 000004F7 4D0FB6C0                        movzx r8, r8b
   638 000004FB 4D0FB6C9                        movzx r9, r9b
   639 000004FF 4981C0[400A0000]                add r8, board
   640 00000506 B852000000                      mov rax, column_cells + 2
   641 0000050B 49F7E1                          mul r9
   642 0000050E 4901C0                          add r8, rax
   643                                          
   644 00000511 B904000000                      mov rcx, block_length
   645 00000516 48BE-                           mov rsi, block_type_1
   645 00000518 [E514000000000000] 
   646 00000520 490FB6C2                        movzx rax, r10b
   647 00000524 48FFC8                          dec rax
   648 00000527 486BC004                        imul rax, block_length
   649 0000052B 4801C6                          add rsi, rax
   650                                          
   651                                      .print_block_chars:
   652 0000052E 8A06                            mov al, [rsi]
   653 00000530 418800                          mov [r8], al
   654 00000533 48FFC6                          inc rsi
   655 00000536 49FFC0                          inc r8
   656 00000539 48FFC9                          dec rcx
   657 0000053C 75F0                            jnz .print_block_chars
   658                                          
   659                                      .next_block:
   660 0000053E 49FFC4                          inc r12
   661 00000541 EB92                            jmp .print_loop
   662                                          
   663                                      .end:
   664 00000543 5D                              pop rbp
   665 00000544 C3                              ret
   666                                  
   667                                  
   668                                  ; Función modificada para detectar colisión
   669                                  ; Función mejorada para detectar colisión y manejar la física
   670                                  ; Función corregida para manejar colisiones con bloques completos
   671                                  ;---------------------------------------------------------
   672                                  ; check_block_collision:
   673                                  ;   Detecta si en la posición r10 (que apunta a board[])
   674                                  ;   hay un bloque ("UUUU","OOOO","DDDD","LLLL","VVVV","8888").
   675                                  ;   De ser así, localiza qué bloque es, lo "destruye" y
   676                                  ;   retorna 1 para indicar colisión. Si no encuentra bloque,
   677                                  ;   retorna 0.
   678                                  ;---------------------------------------------------------
   679                                  ;--------------------------------------
   680                                  ; check_block_collision
   681                                  ;--------------------------------------
   682                                  ; Actualizar check_block_collision para usar el nivel actual
   683                                  check_block_collision:
   684 00000545 55                          push rbp
   685 00000546 4889E5                      mov rbp, rsp
   686                                  
   687 00000549 418A02                      mov al, [r10]
   688                                  
   689                                      ; Verificación de caracteres igual que antes...
   690 0000054C 3C55                        cmp al, 'U'  
   691 0000054E 7419                        je .possible
   692 00000550 3C4F                        cmp al, 'O'  
   693 00000552 7415                        je .possible
   694 00000554 3C44                        cmp al, 'D'  
   695 00000556 7411                        je .possible
   696 00000558 3C4C                        cmp al, 'L'  
   697 0000055A 740D                        je .possible
   698 0000055C 3C56                        cmp al, 'V'  
   699 0000055E 7409                        je .possible
   700 00000560 3C38                        cmp al, '8'  
   701 00000562 7405                        je .possible
   702                                  
   703 00000564 4831C0                      xor rax, rax
   704 00000567 5D                          pop rbp
   705 00000568 C3                          ret
   706                                  
   707                                      .possible:
   708 00000569 53                              push rbx
   709 0000056A 57                              push rdi
   710 0000056B 56                              push rsi
   711 0000056C 4154                            push r12
   712                                  
   713                                          ; Obtener puntero a los bloques del nivel actual
   714 0000056E E803FFFFFF                      call get_current_level_blocks
   715 00000573 4989C5                          mov r13, rax                  ; Guardar puntero a los bloques
   716                                          
   717                                          ; Obtener cantidad de bloques del nivel actual
   718 00000576 E821FFFFFF                      call get_current_level_count
   719 0000057B 4989C6                          mov r14, rax                  ; Guardar cantidad de bloques
   720                                  
   721 0000057E 4D31E4                          xor r12, r12
   722                                      .find_block_loop:
   723 00000581 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
   724 00000584 0F8D8C000000                    jge .no_block_found
   725                                  
   726                                          ; El resto de la lógica de verificación de colisiones...
   727 0000058A 418A9C24[0B150000]              mov bl, [block_states + r12]
   728 00000592 84DB                            test bl, bl
   729 00000594 7478                            jz .next_block
   730                                  
   731                                          ; Usar r13 para acceder a los bloques del nivel actual
   732 00000596 4C89E8                          mov rax, r13
   733 00000599 4D6BE404                        imul r12, 4
   734 0000059D 4C01E0                          add rax, r12
   735 000005A0 8A10                            mov dl, [rax]       ; x
   736 000005A2 8A4801                          mov cl, [rax+1]     ; y
   737                                  
   738                                          ; Revertir r12
   739 000005A5 4D89E4                          mov r12, r12
   740 000005A8 49C1EC02                        shr r12, 2
   741                                  
   742                                          ; La misma lógica de detección de colisiones...
   743 000005AC 488D3D(400A0000)                lea rdi, [board]
   744 000005B3 4831C0                          xor rax, rax
   745 000005B6 B852000000                      mov rax, column_cells + 2
   746 000005BB 480FB6C9                        movzx rcx, cl
   747 000005BF 480FAFC1                        imul rax, rcx
   748 000005C3 4801C7                          add rdi, rax
   749 000005C6 480FB6C2                        movzx rax, dl
   750 000005CA 4801C7                          add rdi, rax
   751                                  
   752 000005CD 4939FA                          cmp r10, rdi
   753 000005D0 723C                            jb .next_block
   754 000005D2 488D5F04                        lea rbx, [rdi + 4]
   755 000005D6 4939DA                          cmp r10, rbx
   756 000005D9 7333                            jae .next_block
   757                                  
   758                                          ; Manejo de colisión igual que antes...
   759 000005DB 41FE8C24[0B150000]              dec byte [block_states + r12]
   760 000005E3 418A9C24[0B150000]              mov bl, [block_states + r12]
   761 000005EB 84DB                            test bl, bl
   762 000005ED 7513                            jnz .still_alive
   763                                  
   764 000005EF B904000000                      mov rcx, 4
   765                                      .erase_block_chars:
   766 000005F4 C60720                          mov byte [rdi], char_space
   767 000005F7 48FFC7                          inc rdi
   768 000005FA E2F8                            loop .erase_block_chars
   769                                  
   770 000005FC FE0D(FE140000)                  dec byte [blocks_remaining]
   771                                  
   772                                      .still_alive:
   773 00000602 B801000000                      mov rax, 1
   774 00000607 415C                            pop r12
   775 00000609 5E                              pop rsi
   776 0000060A 5F                              pop rdi
   777 0000060B 5B                              pop rbx
   778 0000060C 5D                              pop rbp
   779 0000060D C3                              ret
   780                                  
   781                                      .next_block:
   782 0000060E 49FFC4                          inc r12
   783 00000611 E96BFFFFFF                      jmp .find_block_loop
   784                                  
   785                                      .no_block_found:
   786 00000616 4831C0                          xor rax, rax
   787 00000619 415C                            pop r12
   788 0000061B 5E                              pop rsi
   789 0000061C 5F                              pop rdi
   790 0000061D 5B                              pop rbx
   791 0000061E 5D                              pop rbp
   792 0000061F C3                              ret
   793                                  
   794                                  
   795                                  
   796                                  _start:
   797 00000620 E806FBFFFF              	call canonical_off
   798 00000625 E8C1000000              	call start_screen
   799 0000062A E87AFDFFFF                  call init_level
   800 0000062F EB00                    	jmp .main_loop
   801                                  	
   802                                  
   803                                  	.main_loop:
   804 00000631 E8CFFBFFFF              		call print_pallet
   805 00000636 E85AFCFFFF                      call move_ball
   806 0000063B E87EFEFFFF                      call print_blocks
   807 00000640 E8E6FDFFFF                      call check_level_complete
   808 00000645 E893FBFFFF              		call print_ball
   809                                  		print board, board_size				
    82 0000064A B801000000          <1>  mov eax, sys_write
    83 0000064F BF01000000          <1>  mov edi, 1
    84 00000654 48BE-               <1>  mov rsi, %1
    84 00000656 [400A000000000000]  <1>
    85 0000065E BA400A0000          <1>  mov edx, %2
    86 00000663 0F05                <1>  syscall
   810                                  		;setnonblocking	
   811                                  	.read_more:	
   812                                  		getchar	
    90 00000665 B800000000          <1>  mov rax, sys_read
    91 0000066A BF00000000          <1>  mov rdi, STDIN_FILENO
    92 0000066F 48BE-               <1>  mov rsi, input_char
    92 00000671 [0000000000000000]  <1>
    93 00000679 BA01000000          <1>  mov rdx, 1
    94 0000067E 0F05                <1>  syscall
   813                                  		
   814 00000680 4883F801                		cmp rax, 1
   815 00000684 7532                        	jne .done
   816                                  		
   817 00000686 8A05(00000000)          		mov al,[input_char]
   818                                  
   819 0000068C 3C61                    		cmp al, 'a'
   820 0000068E 750E                    	    jne .not_left
   821 00000690 48C7C7FFFFFFFF          	    mov rdi, left_direction
   822 00000697 E884FBFFFF              		call move_pallet
   823 0000069C EB1A                    	    jmp .done
   824                                  		
   825                                  		.not_left:
   826 0000069E 3C64                    		 	cmp al, 'd'
   827 000006A0 750C                    	    	jne .not_right
   828 000006A2 BF01000000              			mov rdi, right_direction
   829 000006A7 E874FBFFFF              	    	call move_pallet
   830 000006AC EB0A                        		jmp .done		
   831                                  
   832                                  		.not_right:
   833                                  
   834 000006AE 3C71                        		cmp al, 'q'
   835 000006B0 0F84A8000000                		je exit
   836                                  
   837 000006B6 EBAD                    			jmp .read_more
   838                                  		
   839                                  		.done:	
   840                                  			;unsetnonblocking		
   841                                  			sleeptime	
    98 000006B8 B823000000          <1>  mov eax, sys_nanosleep
    99 000006BD 48BF-               <1>  mov rdi, timespec
    99 000006BF [0000000000000000]  <1>
   100 000006C7 31F6                <1>  xor esi, esi
   101 000006C9 0F05                <1>  syscall
   842                                  			print clear, clear_length
    82 000006CB B801000000          <1>  mov eax, sys_write
    83 000006D0 BF01000000          <1>  mov edi, 1
    84 000006D5 48BE-               <1>  mov rsi, %1
    84 000006D7 [1000000000000000]  <1>
    85 000006DF BA07000000          <1>  mov edx, %2
    86 000006E4 0F05                <1>  syscall
   843 000006E6 E946FFFFFF                  		jmp .main_loop
   844                                  
   845                                  
   846                                  
   847                                  start_screen:
   848                                      print clear, clear_length    ; Limpiamos la pantalla primero
    82 000006EB B801000000          <1>  mov eax, sys_write
    83 000006F0 BF01000000          <1>  mov edi, 1
    84 000006F5 48BE-               <1>  mov rsi, %1
    84 000006F7 [1000000000000000]  <1>
    85 000006FF BA07000000          <1>  mov edx, %2
    86 00000704 0F05                <1>  syscall
   849                                      print msg1, msg1_length
    82 00000706 B801000000          <1>  mov eax, sys_write
    83 0000070B BF01000000          <1>  mov edi, 1
    84 00000710 48BE-               <1>  mov rsi, %1
    84 00000712 [1700000000000000]  <1>
    85 0000071A BA14010000          <1>  mov edx, %2
    86 0000071F 0F05                <1>  syscall
   850                                      
   851                                      .wait_for_key:              ; Agregamos una etiqueta para esperar la tecla
   852                                          getchar                 ; Esperamos una tecla
    90 00000721 B800000000          <1>  mov rax, sys_read
    91 00000726 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 0000072B 48BE-               <1>  mov rsi, input_char
    92 0000072D [0000000000000000]  <1>
    93 00000735 BA01000000          <1>  mov rdx, 1
    94 0000073A 0F05                <1>  syscall
   853 0000073C 4883F801                        cmp rax, 1             ; Verificamos si se leyó un carácter
   854 00000740 75DF                            jne .wait_for_key      ; Si no se leyó, seguimos esperando
   855                                          
   856                                      print clear, clear_length   ; Limpiamos la pantalla antes de salir
    82 00000742 B801000000          <1>  mov eax, sys_write
    83 00000747 BF01000000          <1>  mov edi, 1
    84 0000074C 48BE-               <1>  mov rsi, %1
    84 0000074E [1000000000000000]  <1>
    85 00000756 BA07000000          <1>  mov edx, %2
    86 0000075B 0F05                <1>  syscall
   857 0000075D C3                          ret
   858                                  
   859                                  exit: 
   860 0000075E E80AFAFFFF              	call canonical_on
   861 00000763 B83C000000              	mov    rax, 60
   862 00000768 BF00000000                  mov    rdi, 0
   863 0000076D 0F05                        syscall
   864                                  
