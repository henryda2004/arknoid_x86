     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  sys_read: equ 0	
     7                                  sys_write:	equ 1
     8                                  sys_nanosleep:	equ 35
     9                                  sys_time:	equ 201
    10                                  sys_fcntl:	equ 72
    11                                  
    12                                  
    13                                  STDIN_FILENO: equ 0
    14                                  
    15                                  F_SETFL:	equ 0x0004
    16                                  O_NONBLOCK: equ 0x0004
    17                                  
    18                                  ;screen clean definition
    19                                  row_cells:	equ 32	; set to any (reasonable) value you wish
    20                                  column_cells: 	equ 78 ; set to any (reasonable) value you wish
    21                                  array_length:	equ row_cells * column_cells + row_cells ; cells are mapped to bytes in the array and a new line char ends each row
    22                                  
    23                                  ;This is regarding the sleep time
    24                                  timespec:
    25 00000000 0000000000000000            tv_sec  dq 0
    26 00000008 00C2EB0B00000000            tv_nsec dq 200000000
    27                                  
    28                                  
    29                                  ;This is for cleaning up the screen
    30 00000010 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"
    31                                  clear_length:	equ $-clear
    32                                  	
    33                                  	
    34                                  
    35                                  ; Start Message
    36 00000017 202020202020202054-     msg1: db "        TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    36 00000020 45434E4F4C4F474943-
    36 00000029 4F20444520434F5354-
    36 00000032 412052494341202020-
    36 0000003B 20202020200A0D     
    37 00000042 202020202020202041-     msg2: db "        ARQUITECTURA DE COMPUTADORAS I        ", 0xA, 0xD
    37 0000004B 525155495445435455-
    37 00000054 524120444520434F4D-
    37 0000005D 50555441444F524153-
    37 00000066 204920202020202020-
    37 0000006F 200A0D             
    38 00000072 202020202020202045-     msg3: db "        ESTUDIANTE: HENRY NUNEZ PEREZ        ", 0xA, 0xD
    38 0000007B 5354554449414E5445-
    38 00000084 3A2048454E5259204E-
    38 0000008D 554E455A2050455245-
    38 00000096 5A2020202020202020-
    38 0000009F 0A0D               
    39 000000A1 202020202020202050-     msg4: db "        PROFESOR: ERNESTO RIVERA ALVARADO        ", 0xA, 0xD
    39 000000AA 524F4645534F523A20-
    39 000000B3 45524E4553544F2052-
    39 000000BC 495645524120414C56-
    39 000000C5 415241444F20202020-
    39 000000CE 202020200A0D       
    40 000000D4 202020202020202041-     msg5: db "        ARKANOID RETRO        ", 0xA, 0xD
    40 000000DD 524B414E4F49442052-
    40 000000E6 4554524F2020202020-
    40 000000EF 2020200A0D         
    41 000000F4 202020202020202050-     msg6: db "        PRESIONE CUALQUIER TECLA PARA INICIAR        ", 0xA, 0xD
    41 000000FD 524553494F4E452043-
    41 00000106 55414C515549455220-
    41 0000010F 5445434C4120504152-
    41 00000118 4120494E4943494152-
    41 00000121 20202020202020200A-
    41 0000012A 0D                 
    42                                  msg1_length: equ $-msg1
    43                                  msg2_length: equ $-msg2
    44                                  msg3_length: equ $-msg3
    45                                  msg4_length: equ $-msg4
    46                                  msg5_length: equ $-msg5
    47                                  msg6_length: equ $-msg6
    48                                  
    49                                  ; Usefull macros
    50                                  
    51                                  
    52                                  
    53                                  %macro setnonblocking 0
    54                                  	mov rax, sys_fcntl
    55                                      mov rdi, STDIN_FILENO
    56                                      mov rsi, F_SETFL
    57                                      mov rdx, O_NONBLOCK
    58                                      syscall
    59                                  %endmacro
    60                                  
    61                                  %macro unsetnonblocking 0
    62                                  	mov rax, sys_fcntl
    63                                      mov rdi, STDIN_FILENO
    64                                      mov rsi, F_SETFL
    65                                      mov rdx, 0
    66                                      syscall
    67                                  %endmacro
    68                                  
    69                                  %macro full_line 0
    70                                      times column_cells db "X"
    71                                      db 0x0a, 0xD
    72                                  %endmacro
    73                                  
    74                                  %macro hollow_line 0
    75                                      db "X"
    76                                      times column_cells-2 db " "
    77                                      db "X", 0x0a, 0xD
    78                                  %endmacro
    79                                  
    80                                  
    81                                  %macro print 2
    82                                  	mov eax, sys_write
    83                                  	mov edi, 1 	; stdout
    84                                  	mov rsi, %1
    85                                  	mov edx, %2
    86                                  	syscall
    87                                  %endmacro
    88                                  
    89                                  %macro getchar 0
    90                                  	mov     rax, sys_read
    91                                      mov     rdi, STDIN_FILENO
    92                                      mov     rsi, input_char
    93                                      mov     rdx, 1 ; number of bytes
    94                                      syscall         ;read text input from keyboard
    95                                  %endmacro
    96                                  
    97                                  %macro sleeptime 0
    98                                  	mov eax, sys_nanosleep
    99                                  	mov rdi, timespec
   100                                  	xor esi, esi		; ignore remaining time in case of call interruption
   101                                  	syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   102                                  %endmacro
   103                                  
   104                                  
   105                                  
   106                                  global _start
   107                                  
   108                                  section .bss
   109                                  
   110 00000000 ??                      input_char: resb 1
   111                                  
   112                                  section .data
   113                                  
   114                                  	; Guardamos la plantilla del tablero (32 filas)
   115                                      board_template:
   116                                          full_line
    70 00000000 58<rep 4Eh>         <1>  times column_cells db "X"
    71 0000004E 0A0D                <1>  db 0x0a, 0xD
   117                                          %rep 30
   118                                          hollow_line
   119                                          %endrep
   118                              <1>  hollow_line
    75 00000050 58                  <2>  db "X"
    76 00000051 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000009D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000A0 58                  <2>  db "X"
    76 000000A1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000000ED 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000F0 58                  <2>  db "X"
    76 000000F1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000013D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000140 58                  <2>  db "X"
    76 00000141 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000018D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000190 58                  <2>  db "X"
    76 00000191 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000001DD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000001E0 58                  <2>  db "X"
    76 000001E1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000022D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000230 58                  <2>  db "X"
    76 00000231 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000027D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000280 58                  <2>  db "X"
    76 00000281 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000002CD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000002D0 58                  <2>  db "X"
    76 000002D1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000031D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000320 58                  <2>  db "X"
    76 00000321 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000036D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000370 58                  <2>  db "X"
    76 00000371 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000003BD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000003C0 58                  <2>  db "X"
    76 000003C1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000040D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000410 58                  <2>  db "X"
    76 00000411 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000045D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000460 58                  <2>  db "X"
    76 00000461 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000004AD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000004B0 58                  <2>  db "X"
    76 000004B1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000004FD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000500 58                  <2>  db "X"
    76 00000501 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000054D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000550 58                  <2>  db "X"
    76 00000551 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000059D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005A0 58                  <2>  db "X"
    76 000005A1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000005ED 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005F0 58                  <2>  db "X"
    76 000005F1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000063D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000640 58                  <2>  db "X"
    76 00000641 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000068D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000690 58                  <2>  db "X"
    76 00000691 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000006DD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000006E0 58                  <2>  db "X"
    76 000006E1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000072D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000730 58                  <2>  db "X"
    76 00000731 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000077D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000780 58                  <2>  db "X"
    76 00000781 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000007CD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000007D0 58                  <2>  db "X"
    76 000007D1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000081D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000820 58                  <2>  db "X"
    76 00000821 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000086D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000870 58                  <2>  db "X"
    76 00000871 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000008BD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008C0 58                  <2>  db "X"
    76 000008C1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000090D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000910 58                  <2>  db "X"
    76 00000911 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000095D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000960 58                  <2>  db "X"
    76 00000961 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000009AD 580A0D              <2>  db "X", 0x0a, 0xD
   120                                          full_line
    70 000009B0 58<rep 4Eh>         <1>  times column_cells db "X"
    71 000009FE 0A0D                <1>  db 0x0a, 0xD
   121                                      board_template_size: equ $ - board_template
   122                                  
   123                                      ; Espacio real que se usará en la ejecución
   124 00000A00 00<rep A00h>                board: times board_template_size db 0
   125                                      board_size: equ board_template_size
   126                                  
   127                                  	; Added for the terminal issue
   128 00001400 00<rep 24h>             	termios:        times 36 db 0
   129                                  	stdin:          equ 0
   130                                  	ICANON:         equ 1<<1
   131                                  	ECHO:           equ 1<<3
   132                                  	VTIME: 			equ 5
   133                                  	VMIN:			equ 6
   134                                  	CC_C:			equ 18
   135                                  
   136                                  section .text
   137                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   138                                  canonical_off:
   139 0000012B E86F000000                      call read_stdin_termios
   140                                  
   141                                          ; clear canonical bit in local mode flags
   142 00000130 50                              push rax
   143 00000131 B802000000                      mov eax, ICANON
   144 00000136 F7D0                            not eax
   145 00000138 2105(0C140000)                  and [termios+12], eax
   146 0000013E C605(17140000)00        		mov byte[termios+CC_C+VTIME], 0
   147 00000145 C605(18140000)00        		mov byte[termios+CC_C+VMIN], 0
   148 0000014C 58                              pop rax
   149                                  
   150 0000014D E86C000000                      call write_stdin_termios
   151 00000152 C3                              ret
   152                                  
   153                                  echo_off:
   154 00000153 E847000000                      call read_stdin_termios
   155                                  
   156                                          ; clear echo bit in local mode flags
   157 00000158 50                              push rax
   158 00000159 B808000000                      mov eax, ECHO
   159 0000015E F7D0                            not eax
   160 00000160 2105(0C140000)                  and [termios+12], eax
   161 00000166 58                              pop rax
   162                                  
   163 00000167 E852000000                      call write_stdin_termios
   164 0000016C C3                              ret
   165                                  
   166                                  canonical_on:
   167 0000016D E82D000000                      call read_stdin_termios
   168                                  
   169                                          ; set canonical bit in local mode flags
   170 00000172 830D(0C140000)02                or dword [termios+12], ICANON
   171 00000179 C605(17140000)00        		mov byte[termios+CC_C+VTIME], 0
   172 00000180 C605(18140000)01        		mov byte[termios+CC_C+VMIN], 1
   173 00000187 E832000000                      call write_stdin_termios
   174 0000018C C3                              ret
   175                                  
   176                                  echo_on:
   177 0000018D E80D000000                      call read_stdin_termios
   178                                  
   179                                          ; set echo bit in local mode flags
   180 00000192 830D(0C140000)08                or dword [termios+12], ECHO
   181                                  
   182 00000199 E820000000                      call write_stdin_termios
   183 0000019E C3                              ret
   184                                  
   185                                  read_stdin_termios:
   186 0000019F 50                              push rax
   187 000001A0 53                              push rbx
   188 000001A1 51                              push rcx
   189 000001A2 52                              push rdx
   190                                  
   191 000001A3 B836000000                      mov eax, 36h
   192 000001A8 BB00000000                      mov ebx, stdin
   193 000001AD B901540000                      mov ecx, 5401h
   194 000001B2 BA[00140000]                    mov edx, termios
   195 000001B7 CD80                            int 80h
   196                                  
   197 000001B9 5A                              pop rdx
   198 000001BA 59                              pop rcx
   199 000001BB 5B                              pop rbx
   200 000001BC 58                              pop rax
   201 000001BD C3                              ret
   202                                  
   203                                  write_stdin_termios:
   204 000001BE 50                              push rax
   205 000001BF 53                              push rbx
   206 000001C0 51                              push rcx
   207 000001C1 52                              push rdx
   208                                  
   209 000001C2 B836000000                      mov eax, 36h
   210 000001C7 BB00000000                      mov ebx, stdin
   211 000001CC B902540000                      mov ecx, 5402h
   212 000001D1 BA[00140000]                    mov edx, termios
   213 000001D6 CD80                            int 80h
   214                                  
   215 000001D8 5A                              pop rdx
   216 000001D9 59                              pop rcx
   217 000001DA 5B                              pop rbx
   218 000001DB 58                              pop rax
   219 000001DC C3                              ret
   220                                  
   221                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   222                                  
   223                                  char_equal: equ 61
   224                                  char_space: equ 32
   225                                  char_O: equ 79
   226                                  left_direction: equ -1
   227                                  right_direction: equ 1
   228                                  
   229                                  
   230                                  section .data
   231                                  
   232                                  ; Mensajes para los niveles
   233 00001424 4E4956454C20                level_msg: db "NIVEL "
   234                                      level_msg_len: equ $ - level_msg
   235 0000142A 31                          level_1_char: db "1"
   236 0000142B 32                          level_2_char: db "2"
   237 0000142C 33                          level_3_char: db "3"
   238 0000142D 34                          level_4_char: db "4"
   239 0000142E 35                          level_5_char: db "5"
   240                                      level_char_len: equ 1
   241                                  
   242                                      ; Timespec para la pausa del mensaje de nivel
   243                                      level_display_time:
   244 0000142F 0100000000000000                lvl_tv_sec dq 1           ; 1 segundo
   245 00001437 0000000000000000                lvl_tv_nsec dq 0
   246                                          
   247 0000143F [3813000000000000]      	pallet_position dq board + 40 + 29 * (column_cells +2)
   248 00001447 0500000000000000        	pallet_size dq 5
   249                                  
   250 0000144F 2800000000000000        	ball_x_pos: dq 40
   251 00001457 1C00000000000000        	ball_y_pos: dq 28
   252 0000145F 0100000000000000            ball_direction_x dq 1    ; 1 = derecha, -1 = izquierda
   253 00001467 FFFFFFFFFFFFFFFF            ball_direction_y dq -1   ; -1 = arriba, 1 = abajo
   254 0000146F 00                          ball_moving db 0         ; 0 = estática, 1 = en movimiento
   255                                  
   256                                  ; Definir los límites de la pantalla o área de juego
   257                                      board_top_left_x equ 1
   258                                      board_top_left_y equ 1
   259                                      board_bottom_right_x equ column_cells - 1
   260                                      board_bottom_right_y equ row_cells
   261                                  
   262                                      ; Limites laterales
   263                                      left_edge equ board_top_left_x               ; Límite izquierdo en la primera columna
   264                                      right_edge equ board_bottom_right_x         ; Límite derecho en la última columna
   265                                  
   266                                      ; O también puedes hacerlo así si prefieres usando las coordenadas en memoria para obtener la ubicación exacta:
   267 00001470 [500A000000000000]          left_edge_position dq board + (board_top_left_y * (column_cells + 2)) ; Coordenada de la parte izquierda del marco
   268 00001478 [9C0A000000000000]          right_edge_position dq board + (board_top_left_y * (column_cells + 2) + board_bottom_right_x - 1) ; Coordenada de la parte derecha del marco
   269                                  
   270                                      ; Definición de tipos de bloques
   271 00001480 555555555555                block_type_1: db "UUUUUU"    ; Durabilidad 1
   272 00001486 4F4F4F4F4F4F                block_type_2: db "OOOOOO"    ; Durabilidad 2
   273 0000148C 444444444444                block_type_3: db "DDDDDD"    ; Durabilidad 3
   274 00001492 4C4C4C4C4C4C                block_type_4: db "LLLLLL"    ; Durabilidad 4
   275 00001498 565656565656                block_type_5: db "VVVVVV"    ; Durabilidad 5
   276 0000149E 383838383838                block_type_6: db "888888"    ; Durabilidad 6
   277                                      block_length: equ 6        ; Longitud de cada bloque
   278                                  
   279                                      ; Estructura para el nivel actual
   280 000014A4 01                          current_level db 1
   281 000014A5 00                          blocks_remaining db 0
   282                                  
   283                                      ; Definición del nivel 1 (ejemplo con múltiples bloques)
   284                                      ; Formato: x_pos, y_pos, tipo_bloque, durabilidad_actual
   285                                          level1_blocks:
   286                                          ; Tercera fila (tipo 3)
   287 000014A6 3C060301                        db 60, 6, 3, 1    ; Bloque 7
   288 000014AA 38070301                        db 56, 7, 3, 1    ; Bloque 7
   289 000014AE 3C090101                        db 60, 9, 1, 1    ; Bloque 7
   290                                      level1_blocks_count equ 3   ; Cantidad total de bloques
   291                                  
   292                                      ; Nivel 2: Bloques de prueba
   293                                      level2_blocks:
   294 000014B2 3C070101                        db 60, 7, 1, 1    ; Un bloque simple en el nivel 2   ; Un bloque simple en el nivel 2
   295                                      level2_blocks_count equ 1
   296                                  
   297                                      ; Nivel 3
   298                                      level3_blocks:
   299 000014B6 3C070201                        db 60, 7, 2, 1    ; Bloque 1
   300                                  
   301                                      level3_blocks_count equ 1
   302                                  
   303                                      ; Nivel 4
   304                                      level4_blocks:
   305 000014BA 3C070401                        db 60, 7, 4, 1    ; Bloque 1
   306                                      level4_blocks_count equ 1
   307                                  
   308                                      ; Nivel 5
   309                                      level5_blocks:
   310 000014BE 3C070501                        db 60, 7, 5, 1    ; Bloque 1
   311                                      level5_blocks_count equ 1
   312                                  
   313                                      ; Array para mantener el estado de los bloques
   314 000014C2 00<rep 64h>                 block_states: times 100 db 0  ; Durabilidad actual de cada bloque
   315                                  
   316 00001526 50756E74616A653A20          score_label db "Puntaje: "
   317                                      score_label_len equ $ - score_label
   318 0000152F 426C6F717565732064-         blocks_label db "Bloques destruidos: "
   318 00001538 657374727569646F73-
   318 00001541 3A20               
   319                                      blocks_label_len equ $ - blocks_label
   320                                      
   321                                      ; Variables para almacenar los valores
   322 00001543 0000000000000000            current_score dq 0          ; Score actual
   323 0000154B 00                          destroyed_blocks db 0       ; Bloques destruidos en el nivel actual
   324                                      
   325                                      ; Buffer para convertir números a string
   326 0000154C 00<rep 14h>                 number_buffer: times 20 db 0
   327                                  
   328                                  section .text
   329                                  
   330                                  ;	Function: print_ball
   331                                  ; This function displays the position of the ball
   332                                  ; Arguments: none
   333                                  ;
   334                                  ; Return:
   335                                  ;	Void
   336                                  print_ball:
   337 000001DD 4C8B05(4F140000)        	mov r8, [ball_x_pos]
   338 000001E4 4C8B0D(57140000)        	mov r9, [ball_y_pos]
   339 000001EB 4981C0[000A0000]        	add r8, board
   340                                  
   341 000001F2 4C89C9                  	mov rcx, r9
   342 000001F5 B850000000              	mov rax, column_cells + 2
   343 000001FA 48F7E9                  	imul rcx
   344                                  	
   345 000001FD 4901C0                  	add r8, rax
   346 00000200 41C6004F                	mov byte [r8], char_O
   347 00000204 C3                      	ret
   348                                  
   349                                  	
   350                                  	;mov rax, board + r8 + r9 * (column_cells + 2)
   351                                  	
   352                                  
   353                                  
   354                                  
   355                                  ;	Function: print_pallet
   356                                  ; This function moves the pallet in the game
   357                                  ; Arguments: none
   358                                  ;
   359                                  ; Return;
   360                                  ;	void
   361                                  print_pallet:
   362 00000205 4C8B05(3F140000)        	mov r8, [pallet_position]
   363 0000020C 488B0D(47140000)        	mov rcx, [pallet_size]
   364                                  	.write_pallet:
   365 00000213 41C6003D                		mov byte [r8], char_equal
   366 00000217 49FFC0                  		inc r8
   367 0000021A 48FFC9                  		dec rcx
   368 0000021D 75F4                    		jnz .write_pallet
   369                                  
   370 0000021F C3                      	ret
   371                                  	
   372                                  ;	Function: move_pallet
   373                                  ; This function is in charge of moving the pallet in a given direction
   374                                  ; Arguments:
   375                                  ;	rdi: left direction or right direction
   376                                  ;
   377                                  ; Return:
   378                                  ;	void
   379                                  move_pallet:
   380                                      
   381 00000220 803D(6F140000)00            cmp byte [ball_moving], 0
   382 00000227 7507                        jne .continue_movement
   383 00000229 C605(6F140000)01            mov byte [ball_moving], 1
   384                                  
   385                                      .continue_movement:
   386 00000230 4883FFFF                        cmp rdi, left_direction
   387 00000234 7531                            jne .move_right
   388                                  
   389                                          .move_left:
   390                                              ; Verificar si la siguiente posición sería una X (borde izquierdo)
   391 00000236 4C8B05(3F140000)                    mov r8, [pallet_position]
   392 0000023D 49FFC8                              dec r8              ; Verificar la posición a la izquierda
   393 00000240 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
   394 00000243 3C58                                cmp al, 'X'        ; Comparar si es una X
   395 00000245 744D                                je .end            ; Si es X, no mover
   396                                              
   397 00000247 4C8B05(3F140000)                    mov r8, [pallet_position]
   398 0000024E 4C8B0D(47140000)                    mov r9, [pallet_size]
   399 00000255 43C64408FF20                        mov byte [r8 + r9 - 1], char_space  ; Borrar último carácter de la paleta
   400 0000025B 49FFC8                              dec r8
   401 0000025E 4C8905(3F140000)                    mov [pallet_position], r8
   402 00000265 EB2D                                jmp .end
   403                                              
   404                                          .move_right:
   405                                              ; Verificar si la siguiente posición después de la paleta sería una X
   406 00000267 4C8B05(3F140000)                    mov r8, [pallet_position]
   407 0000026E 4C8B0D(47140000)                    mov r9, [pallet_size]
   408 00000275 4D01C8                              add r8, r9         ; Moverse al final de la paleta
   409 00000278 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
   410 0000027B 3C58                                cmp al, 'X'        ; Comparar si es una X
   411 0000027D 7415                                je .end            ; Si es X, no mover
   412                                              
   413 0000027F 4C8B05(3F140000)                    mov r8, [pallet_position]
   414 00000286 41C60020                            mov byte [r8], char_space
   415 0000028A 49FFC0                              inc r8
   416 0000028D 4C8905(3F140000)                    mov [pallet_position], r8
   417                                          .end:
   418 00000294 C3                                  ret
   419                                  
   420                                  move_ball:
   421                                      ; Si la bola no está en movimiento, no hacer nada
   422 00000295 803D(6F140000)00            cmp byte [ball_moving], 0
   423 0000029C 0F8406010000                je .end
   424                                  
   425                                      ; Borrar la posición actual de la bola
   426 000002A2 4C8B05(4F140000)            mov r8, [ball_x_pos]
   427 000002A9 4C8B0D(57140000)            mov r9, [ball_y_pos]
   428 000002B0 4981C0[000A0000]            add r8, board
   429 000002B7 4C89C9                      mov rcx, r9
   430 000002BA B850000000                  mov rax, column_cells + 2
   431 000002BF 48F7E9                      imul rcx
   432 000002C2 4901C0                      add r8, rax
   433 000002C5 41C60020                    mov byte [r8], char_space    ; Borrar la bola actual
   434                                  
   435                                      ; Calcular siguiente posición X
   436 000002C9 4C8B05(4F140000)            mov r8, [ball_x_pos]
   437 000002D0 4C8B0D(57140000)            mov r9, [ball_y_pos]
   438 000002D7 488B05(5F140000)            mov rax, [ball_direction_x]
   439 000002DE 4901C0                      add r8, rax                  ; Nueva posición X
   440                                  
   441                                      ; Calcular la dirección de memoria para la siguiente posición
   442 000002E1 4D89C2                      mov r10, r8
   443 000002E4 4981C2[000A0000]            add r10, board
   444 000002EB 4C89C9                      mov rcx, r9
   445 000002EE B850000000                  mov rax, column_cells + 2
   446 000002F3 48F7E9                      imul rcx
   447 000002F6 4901C2                      add r10, rax
   448                                  
   449                                      ; Verificar si hay una X en la siguiente posición X
   450 000002F9 418A02                      mov al, [r10]
   451 000002FC 3C58                        cmp al, 'X'
   452 000002FE 750C                        jne .check_block_x
   453 00000300 48F71D(5F140000)            neg qword [ball_direction_x]  ; Cambiar dirección X si hay una X
   454 00000307 E99C000000                  jmp .end
   455                                  
   456                                      .check_block_x:
   457                                          ; Verificar colisión con bloques en X
   458 0000030C 4150                            push r8     ; Guardar registros que usa check_block_collision
   459 0000030E 4151                            push r9
   460 00000310 4152                            push r10
   461 00000312 E824050000                      call check_block_collision
   462 00000317 415A                            pop r10
   463 00000319 4159                            pop r9
   464 0000031B 4158                            pop r8
   465 0000031D 4885C0                          test rax, rax
   466 00000320 7409                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
   467 00000322 48F71D(5F140000)                neg qword [ball_direction_x]  ; Si hay colisión, rebotar
   468 00000329 EB7D                            jmp .end
   469                                  
   470                                      .check_paddle_x:
   471                                          ; Verificar si hay una paleta (=) en la siguiente posición X
   472 0000032B 41803A3D                        cmp byte [r10], char_equal
   473 0000032F 7509                            jne .check_y_movement
   474 00000331 48F71D(5F140000)                neg qword [ball_direction_x]  ; Cambiar dirección X si hay una paleta
   475 00000338 EB6E                            jmp .end
   476                                  
   477                                      .check_y_movement:
   478                                          ; Calcular siguiente posición Y
   479 0000033A 488B05(67140000)                mov rax, [ball_direction_y]
   480 00000341 4901C1                          add r9, rax                  ; Nueva posición Y
   481                                  
   482                                          ; Calcular la dirección de memoria para la siguiente posición Y
   483 00000344 4D89C2                          mov r10, r8
   484 00000347 4981C2[000A0000]                add r10, board
   485 0000034E 4C89C9                          mov rcx, r9
   486 00000351 B850000000                      mov rax, column_cells + 2
   487 00000356 48F7E9                          imul rcx
   488 00000359 4901C2                          add r10, rax
   489                                  
   490                                          ; Verificar si hay una X en la siguiente posición Y
   491 0000035C 418A02                          mov al, [r10]
   492 0000035F 3C58                            cmp al, 'X'
   493 00000361 7509                            jne .check_block_y
   494 00000363 48F71D(67140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una X
   495 0000036A EB3C                            jmp .end
   496                                  
   497                                      .check_block_y:
   498                                          ; Verificar colisión con bloques en Y
   499 0000036C 4150                            push r8     ; Guardar registros que usa check_block_collision
   500 0000036E 4151                            push r9
   501 00000370 4152                            push r10
   502 00000372 E8C4040000                      call check_block_collision
   503 00000377 415A                            pop r10
   504 00000379 4159                            pop r9
   505 0000037B 4158                            pop r8
   506 0000037D 4885C0                          test rax, rax
   507 00000380 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
   508 00000382 48F71D(67140000)                neg qword [ball_direction_y]  ; Si hay colisión, rebotar
   509 00000389 EB1D                            jmp .end
   510                                  
   511                                      .check_paddle_y:
   512                                      ; Verificar si hay una paleta (=) en la siguiente posición Y
   513 0000038B 41803A3D                    cmp byte [r10], char_equal
   514 0000038F 7509                        jne .update_position
   515 00000391 48F71D(67140000)            neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una paleta
   516 00000398 EB0E                        jmp .end
   517                                  
   518                                  
   519                                      .update_position:
   520 0000039A 4C8905(4F140000)                mov [ball_x_pos], r8
   521 000003A1 4C890D(57140000)                mov [ball_y_pos], r9
   522                                  
   523                                      .end:
   524 000003A8 C3                              ret
   525                                  
   526                                  ; Función para inicializar el nivel
   527                                  ; Función para inicializar el nivel
   528                                  ; Función para mostrar el número de nivel
   529                                  display_level_number:
   530 000003A9 55                          push rbp
   531 000003AA 4889E5                      mov rbp, rsp
   532                                      
   533                                      ; Limpiar la pantalla primero
   534                                      print clear, clear_length
    82 000003AD B801000000          <1>  mov eax, sys_write
    83 000003B2 BF01000000          <1>  mov edi, 1
    84 000003B7 48BE-               <1>  mov rsi, %1
    84 000003B9 [1000000000000000]  <1>
    85 000003C1 BA07000000          <1>  mov edx, %2
    86 000003C6 0F05                <1>  syscall
   535                                      
   536                                      ; Calcular la posición central para el mensaje
   537                                      ; Para el mensaje "NIVEL X", necesitamos centrar 7 caracteres
   538 000003C8 B84E000000                  mov rax, column_cells
   539 000003CD 4883E807                    sub rax, 7                  ; longitud de "NIVEL X"
   540 000003D1 48D1E8                      shr rax, 1                  ; dividir por 2 para centrar
   541                                      
   542                                      ; Calcular la fila central
   543 000003D4 BB20000000                  mov rbx, row_cells
   544 000003D9 48D1EB                      shr rbx, 1                  ; dividir por 2 para obtener la fila central
   545                                      
   546                                      ; Calcular el offset en el buffer
   547 000003DC B950000000                  mov rcx, column_cells + 2   ; ancho total de una línea incluyendo newline
   548 000003E1 48F7E3                      mul rbx                     ; multiplicar por la fila central
   549 000003E4 4801D8                      add rax, rbx                ; añadir el offset horizontal
   550                                      
   551                                      ; Escribir "NIVEL " en la posición calculada
   552 000003E7 488DB8[000A0000]            lea rdi, [board + rax]
   553 000003EE 48BE-                       mov rsi, level_msg
   553 000003F0 [2414000000000000] 
   554 000003F8 B906000000                  mov rcx, level_msg_len
   555 000003FD F3A4                        rep movsb
   556                                      
   557                                      ; Escribir el número del nivel
   558 000003FF 8A05(A4140000)              mov al, [current_level]
   559 00000405 0430                        add al, '0'                 ; convertir a ASCII
   560 00000407 8807                        mov [rdi], al
   561                                      
   562                                      ; Mostrar el board con el mensaje
   563                                      print board, board_size
    82 00000409 B801000000          <1>  mov eax, sys_write
    83 0000040E BF01000000          <1>  mov edi, 1
    84 00000413 48BE-               <1>  mov rsi, %1
    84 00000415 [000A000000000000]  <1>
    85 0000041D BA000A0000          <1>  mov edx, %2
    86 00000422 0F05                <1>  syscall
   564                                      
   565                                      ; Esperar un segundo
   566 00000424 B823000000                  mov rax, sys_nanosleep
   567 00000429 48BF-                       mov rdi, level_display_time
   567 0000042B [2F14000000000000] 
   568 00000433 4831F6                      xor rsi, rsi
   569 00000436 0F05                        syscall
   570                                      
   571 00000438 5D                          pop rbp
   572 00000439 C3                          ret
   573                                  
   574                                  ; Función para inicializar un tablero vacío
   575                                  init_empty_board:
   576 0000043A 56                          push rsi
   577 0000043B 57                          push rdi
   578 0000043C 51                          push rcx
   579 0000043D 50                          push rax
   580                                  
   581 0000043E 488D35(00000000)            lea rsi, [board_template]   ; Copiar la plantilla del tablero
   582 00000445 488D3D(000A0000)            lea rdi, [board]            ; Destino: el tablero actual
   583 0000044C B9000A0000                  mov rcx, board_template_size
   584 00000451 F3A4                        rep movsb                   ; Copiar el tablero
   585                                  
   586 00000453 58                          pop rax
   587 00000454 59                          pop rcx
   588 00000455 5F                          pop rdi
   589 00000456 5E                          pop rsi
   590 00000457 C3                          ret
   591                                  
   592                                  
   593                                  init_level:
   594                                      ; 1) Copiamos board_template en board para que quede "virgen"
   595 00000458 C605(4B150000)00            mov byte [destroyed_blocks], 0 
   596 0000045F E8D6FFFFFF                  call init_empty_board
   597 00000464 E840FFFFFF                  call display_level_number
   598                                      
   599 00000469 56                          push rsi
   600 0000046A 57                          push rdi
   601 0000046B 51                          push rcx
   602 0000046C 50                          push rax
   603                                  
   604 0000046D 488D35(00000000)            lea rsi, [board_template]
   605 00000474 488D3D(000A0000)            lea rdi, [board]
   606 0000047B B9000A0000                  mov rcx, board_template_size
   607 00000480 F3A4                        rep movsb                 ; Copiamos la plantilla a board
   608                                  
   609 00000482 58                          pop rax
   610 00000483 59                          pop rcx
   611 00000484 5F                          pop rdi
   612 00000485 5E                          pop rsi
   613                                  
   614                                      ; Verificar el nivel actual y cargar los bloques correspondientes
   615 00000486 803D(A4140000)01            cmp byte [current_level], 1
   616 0000048D 7431                        je .level1
   617 0000048F 803D(A4140000)02            cmp byte [current_level], 2
   618 00000496 7454                        je .level2
   619 00000498 803D(A4140000)03            cmp byte [current_level], 3
   620 0000049F 7477                        je .level3
   621 000004A1 803D(A4140000)04            cmp byte [current_level], 4
   622 000004A8 0F8492000000                je .level4
   623 000004AE 803D(A4140000)05            cmp byte [current_level], 5
   624 000004B5 0F84AD000000                je .level5
   625 000004BB E9D0000000                  jmp .done
   626                                  
   627                                      .level1:
   628 000004C0 C605(A5140000)03                mov byte [blocks_remaining], level1_blocks_count
   629 000004C7 4831C9                          xor rcx, rcx             
   630                                          .init_loop1:
   631 000004CA 4883F903                            cmp rcx, level1_blocks_count
   632 000004CE 0F8DBC000000                        jge .done
   633 000004D4 4889C8                              mov rax, rcx         
   634 000004D7 48C1E002                            shl rax, 2          
   635 000004DB 8A90[A9140000]                      mov dl, byte [level1_blocks + rax + 3]  
   636 000004E1 8891[C2140000]                      mov byte [block_states + rcx], dl
   637 000004E7 48FFC1                              inc rcx
   638 000004EA EBDE                                jmp .init_loop1
   639                                  
   640                                      .level2:
   641 000004EC C605(A5140000)01                mov byte [blocks_remaining], level2_blocks_count
   642 000004F3 4831C9                          xor rcx, rcx             
   643                                          .init_loop2:
   644 000004F6 4883F901                            cmp rcx, level2_blocks_count
   645 000004FA 0F8D90000000                        jge .done
   646 00000500 4889C8                              mov rax, rcx         
   647 00000503 48C1E002                            shl rax, 2          
   648 00000507 8A90[B5140000]                      mov dl, byte [level2_blocks + rax + 3]  
   649 0000050D 8891[C2140000]                      mov byte [block_states + rcx], dl
   650 00000513 48FFC1                              inc rcx
   651 00000516 EBDE                                jmp .init_loop2
   652                                      .level3:
   653 00000518 C605(A5140000)01                mov byte [blocks_remaining], level3_blocks_count
   654 0000051F 4831C9                          xor rcx, rcx             
   655                                          .init_loop3:
   656 00000522 4883F901                            cmp rcx, level3_blocks_count
   657 00000526 7D68                                jge .done
   658 00000528 4889C8                              mov rax, rcx         
   659 0000052B 48C1E002                            shl rax, 2          
   660 0000052F 8A90[B9140000]                      mov dl, byte [level3_blocks + rax + 3]  
   661 00000535 8891[C2140000]                      mov byte [block_states + rcx], dl
   662 0000053B 48FFC1                              inc rcx
   663 0000053E EBE2                                jmp .init_loop3
   664                                  
   665                                      .level4:
   666 00000540 C605(A5140000)01                mov byte [blocks_remaining], level4_blocks_count
   667 00000547 4831C9                          xor rcx, rcx             
   668                                          .init_loop4:
   669 0000054A 4883F901                            cmp rcx, level4_blocks_count
   670 0000054E 7D40                                jge .done
   671 00000550 4889C8                              mov rax, rcx         
   672 00000553 48C1E002                            shl rax, 2          
   673 00000557 8A90[BD140000]                      mov dl, byte [level4_blocks + rax + 3]  
   674 0000055D 8891[C2140000]                      mov byte [block_states + rcx], dl
   675 00000563 48FFC1                              inc rcx
   676 00000566 EBE2                                jmp .init_loop4
   677                                  
   678                                      .level5:
   679 00000568 C605(A5140000)01                mov byte [blocks_remaining], level5_blocks_count
   680 0000056F 4831C9                          xor rcx, rcx             
   681                                          .init_loop5:
   682 00000572 4883F901                            cmp rcx, level5_blocks_count
   683 00000576 7D18                                jge .done
   684 00000578 4889C8                              mov rax, rcx         
   685 0000057B 48C1E002                            shl rax, 2          
   686 0000057F 8A90[C1140000]                      mov dl, byte [level5_blocks + rax + 3]  
   687 00000585 8891[C2140000]                      mov byte [block_states + rcx], dl
   688 0000058B 48FFC1                              inc rcx
   689 0000058E EBE2                                jmp .init_loop5
   690                                      .done:
   691 00000590 C3                              ret
   692                                  
   693                                  
   694                                  ; Función para verificar y manejar la transición de nivel
   695                                  check_level_complete:
   696                                      ; Verificar si quedan bloques
   697 00000591 803D(A5140000)00            cmp byte [blocks_remaining], 0
   698 00000598 753C                        jne .not_complete
   699                                      
   700                                      ; Incrementar el nivel
   701 0000059A FE05(A4140000)              inc byte [current_level]
   702                                      
   703                                      ; Verificar si hemos completado todos los niveles (asumiendo 2 niveles por ahora)
   704 000005A0 803D(A4140000)06            cmp byte [current_level], 6
   705 000005A7 742E                        je game_win
   706                                      
   707                                      ; Reinicializar el juego para el siguiente nivel
   708 000005A9 E8AAFEFFFF                  call init_level
   709                                      
   710                                      ; Reinicializar la posición de la bola y la paleta
   711 000005AE 48C705(4F140000)28-         mov qword [ball_x_pos], 40
   711 000005B6 000000             
   712 000005B9 48C705(57140000)1C-         mov qword [ball_y_pos], 28
   712 000005C1 000000             
   713 000005C4 C605(6F140000)00            mov byte [ball_moving], 0
   714 000005CB 48C705(3F140000)-           mov qword [pallet_position], board + 40 + 29 * (column_cells + 2)
   714 000005D2 [38130000]         
   715                                      
   716                                      .not_complete:
   717 000005D6 C3                              ret
   718                                  
   719                                      ; Nueva función para manejar la victoria del juego
   720                                      game_win:
   721                                          ; Aquí puedes agregar lógica para mostrar un mensaje de victoria
   722                                          ; y terminar el juego o reiniciarlo
   723 000005D7 E9A1040000                      jmp exit
   724                                  
   725                                  ; Función para imprimir los bloques
   726                                  ; Función modificada para imprimir bloques
   727                                  
   728                                  ; Primero, agreguemos una función para obtener el puntero a los bloques del nivel actual
   729                                  get_current_level_blocks:
   730 000005DC 803D(A4140000)01            cmp byte [current_level], 1
   731 000005E3 7428                        je .level1
   732 000005E5 803D(A4140000)02            cmp byte [current_level], 2
   733 000005EC 7427                        je .level2
   734 000005EE 803D(A4140000)03            cmp byte [current_level], 3
   735 000005F5 7426                        je .level3
   736 000005F7 803D(A4140000)04            cmp byte [current_level], 4
   737 000005FE 7425                        je .level4
   738 00000600 803D(A4140000)05            cmp byte [current_level], 5
   739 00000607 7424                        je .level5
   740                                      ; Si llegamos aquí, hay un error en el nivel
   741 00000609 4831C0                      xor rax, rax
   742 0000060C C3                          ret
   743                                  
   744                                      .level1:
   745 0000060D 488D05(A6140000)                lea rax, [level1_blocks]
   746 00000614 C3                              ret
   747                                      .level2:
   748 00000615 488D05(B2140000)                lea rax, [level2_blocks]
   749 0000061C C3                              ret
   750                                      .level3:
   751 0000061D 488D05(B6140000)                lea rax, [level3_blocks]
   752 00000624 C3                              ret
   753                                      .level4:
   754 00000625 488D05(BA140000)                lea rax, [level4_blocks]
   755 0000062C C3                              ret
   756                                      .level5:
   757 0000062D 488D05(BE140000)                lea rax, [level5_blocks]
   758 00000634 C3                              ret
   759                                  ; Función para obtener la cantidad de bloques del nivel actual
   760                                  get_current_level_count:
   761 00000635 803D(A4140000)01            cmp byte [current_level], 1
   762 0000063C 7428                        je .level1
   763 0000063E 803D(A4140000)02            cmp byte [current_level], 2
   764 00000645 7425                        je .level2
   765 00000647 803D(A4140000)03            cmp byte [current_level], 3
   766 0000064E 7422                        je .level3
   767 00000650 803D(A4140000)04            cmp byte [current_level], 4
   768 00000657 741F                        je .level4
   769 00000659 803D(A4140000)05            cmp byte [current_level], 5
   770 00000660 741C                        je .level5
   771                                      ; Si llegamos aquí, hay un error en el nivel
   772 00000662 4831C0                      xor rax, rax
   773 00000665 C3                          ret
   774                                  
   775                                      .level1:
   776 00000666 B803000000                      mov rax, level1_blocks_count
   777 0000066B C3                              ret
   778                                      .level2:
   779 0000066C B801000000                      mov rax, level2_blocks_count
   780 00000671 C3                              ret
   781                                      .level3:
   782 00000672 B801000000                      mov rax, level3_blocks_count
   783 00000677 C3                              ret
   784                                      .level4:
   785 00000678 B801000000                      mov rax, level4_blocks_count
   786 0000067D C3                              ret
   787                                      .level5:
   788 0000067E B801000000                      mov rax, level5_blocks_count
   789 00000683 C3                              ret
   790                                  
   791                                  
   792                                  print_blocks:
   793 00000684 55                          push rbp
   794 00000685 4889E5                      mov rbp, rsp
   795                                      
   796                                      ; Obtener puntero a los bloques del nivel actual
   797 00000688 E84FFFFFFF                  call get_current_level_blocks
   798 0000068D 4989C5                      mov r13, rax                  ; Guardar puntero a los bloques en r13
   799                                      
   800                                      ; Obtener cantidad de bloques del nivel actual
   801 00000690 E8A0FFFFFF                  call get_current_level_count
   802 00000695 4989C6                      mov r14, rax                  ; Guardar cantidad de bloques en r14
   803                                      
   804 00000698 4D31E4                      xor r12, r12                  ; Índice del bloque actual
   805                                      
   806                                      .print_loop:
   807 0000069B 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
   808 0000069E 7D69                            jge .end
   809                                          
   810                                          ; Verificar si el bloque está activo
   811 000006A0 490FB68424-                     movzx rax, byte [block_states + r12]
   811 000006A5 [C2140000]         
   812 000006A9 4885C0                          test rax, rax
   813 000006AC 7456                            jz .next_block
   814                                          
   815                                          ; Obtener posición y tipo del bloque usando r13
   816 000006AE 478A44A500                      mov r8b, [r13 + r12 * 4]      ; X position
   817 000006B3 478A4CA501                      mov r9b, [r13 + r12 * 4 + 1]  ; Y position
   818 000006B8 478A54A502                      mov r10b, [r13 + r12 * 4 + 2] ; Tipo de bloque
   819                                          
   820                                          ; El resto de la lógica de impresión permanece igual
   821 000006BD 4D0FB6C0                        movzx r8, r8b
   822 000006C1 4D0FB6C9                        movzx r9, r9b
   823 000006C5 4981C0[000A0000]                add r8, board
   824 000006CC B850000000                      mov rax, column_cells + 2
   825 000006D1 49F7E1                          mul r9
   826 000006D4 4901C0                          add r8, rax
   827                                          
   828 000006D7 B906000000                      mov rcx, block_length
   829 000006DC 48BE-                           mov rsi, block_type_1
   829 000006DE [8014000000000000] 
   830 000006E6 490FB6C2                        movzx rax, r10b
   831 000006EA 48FFC8                          dec rax
   832 000006ED 486BC006                        imul rax, block_length
   833 000006F1 4801C6                          add rsi, rax
   834                                          
   835                                      .print_block_chars:
   836 000006F4 8A06                            mov al, [rsi]
   837 000006F6 418800                          mov [r8], al
   838 000006F9 48FFC6                          inc rsi
   839 000006FC 49FFC0                          inc r8
   840 000006FF 48FFC9                          dec rcx
   841 00000702 75F0                            jnz .print_block_chars
   842                                          
   843                                      .next_block:
   844 00000704 49FFC4                          inc r12
   845 00000707 EB92                            jmp .print_loop
   846                                          
   847                                      .end:
   848 00000709 5D                              pop rbp
   849 0000070A C3                              ret
   850                                  
   851                                  ; Función para convertir número a string
   852                                  ; Input: RAX = número a convertir
   853                                  ; RDI = buffer donde escribir el string
   854                                  number_to_string:
   855 0000070B 53                          push rbx
   856 0000070C 52                          push rdx
   857 0000070D 56                          push rsi
   858 0000070E BB0A000000                  mov rbx, 10          ; Divisor
   859 00000713 B900000000                  mov rcx, 0          ; Contador de dígitos
   860                                      
   861                                      ; Si el número es 0, manejarlo especialmente
   862 00000718 4885C0                      test rax, rax
   863 0000071B 7509                        jnz .convert_loop
   864 0000071D C60730                      mov byte [rdi], '0'
   865 00000720 C6470100                    mov byte [rdi + 1], 0
   866 00000724 EB20                        jmp .end
   867                                      
   868                                      .convert_loop:
   869 00000726 4831D2                          xor rdx, rdx    ; Limpiar RDX para la división
   870 00000729 48F7F3                          div rbx         ; RAX/10, cociente en RAX, residuo en RDX
   871 0000072C 80C230                          add dl, '0'     ; Convertir a ASCII
   872 0000072F 52                              push rdx        ; Guardar el dígito
   873 00000730 48FFC1                          inc rcx         ; Incrementar contador
   874 00000733 4885C0                          test rax, rax   ; Verificar si quedan más dígitos
   875 00000736 75EE                            jnz .convert_loop
   876                                          
   877                                      .write_loop:
   878 00000738 5A                              pop rdx         ; Obtener dígito
   879 00000739 8817                            mov [rdi], dl   ; Escribir al buffer
   880 0000073B 48FFC7                          inc rdi         ; Siguiente posición
   881 0000073E 48FFC9                          dec rcx         ; Decrementar contador
   882 00000741 75F5                            jnz .write_loop
   883                                          
   884 00000743 C60700                      mov byte [rdi], 0   ; Null terminator
   885                                      
   886                                      .end:
   887 00000746 5E                          pop rsi
   888 00000747 5A                          pop rdx
   889 00000748 5B                          pop rbx
   890 00000749 C3                          ret
   891                                  
   892                                  ; Función para imprimir los labels
   893                                  print_labels:
   894 0000074A 55                          push rbp
   895 0000074B 4889E5                      mov rbp, rsp
   896                                      
   897                                      ; Guardar el score en string
   898 0000074E 488B05(43150000)            mov rax, [current_score]
   899 00000755 48BF-                       mov rdi, number_buffer
   899 00000757 [4C15000000000000] 
   900 0000075F E8A7FFFFFF                  call number_to_string
   901                                      
   902                                      ; Imprimir score label
   903                                      print score_label, score_label_len
    82 00000764 B801000000          <1>  mov eax, sys_write
    83 00000769 BF01000000          <1>  mov edi, 1
    84 0000076E 48BE-               <1>  mov rsi, %1
    84 00000770 [2615000000000000]  <1>
    85 00000778 BA09000000          <1>  mov edx, %2
    86 0000077D 0F05                <1>  syscall
   904                                      print number_buffer, 20
    82 0000077F B801000000          <1>  mov eax, sys_write
    83 00000784 BF01000000          <1>  mov edi, 1
    84 00000789 48BE-               <1>  mov rsi, %1
    84 0000078B [4C15000000000000]  <1>
    85 00000793 BA14000000          <1>  mov edx, %2
    86 00000798 0F05                <1>  syscall
   905                                      
   906                                      ; Nueva línea
   907 0000079A C605(4C150000)0A            mov byte [number_buffer], 0xA
   908 000007A1 C605(4D150000)0D            mov byte [number_buffer + 1], 0xD
   909                                      print number_buffer, 2
    82 000007A8 B801000000          <1>  mov eax, sys_write
    83 000007AD BF01000000          <1>  mov edi, 1
    84 000007B2 48BE-               <1>  mov rsi, %1
    84 000007B4 [4C15000000000000]  <1>
    85 000007BC BA02000000          <1>  mov edx, %2
    86 000007C1 0F05                <1>  syscall
   910                                      
   911                                      ; Convertir bloques destruidos a string
   912 000007C3 480FB605(4B150000)          movzx rax, byte [destroyed_blocks]
   913 000007CB 48BF-                       mov rdi, number_buffer
   913 000007CD [4C15000000000000] 
   914 000007D5 E831FFFFFF                  call number_to_string
   915                                      
   916                                      ; Imprimir label de bloques destruidos
   917                                      print blocks_label, blocks_label_len
    82 000007DA B801000000          <1>  mov eax, sys_write
    83 000007DF BF01000000          <1>  mov edi, 1
    84 000007E4 48BE-               <1>  mov rsi, %1
    84 000007E6 [2F15000000000000]  <1>
    85 000007EE BA14000000          <1>  mov edx, %2
    86 000007F3 0F05                <1>  syscall
   918                                      print number_buffer, 20
    82 000007F5 B801000000          <1>  mov eax, sys_write
    83 000007FA BF01000000          <1>  mov edi, 1
    84 000007FF 48BE-               <1>  mov rsi, %1
    84 00000801 [4C15000000000000]  <1>
    85 00000809 BA14000000          <1>  mov edx, %2
    86 0000080E 0F05                <1>  syscall
   919                                      
   920                                      ; Nueva línea
   921 00000810 C605(4C150000)0A            mov byte [number_buffer], 0xA
   922 00000817 C605(4D150000)0D            mov byte [number_buffer + 1], 0xD
   923                                      print number_buffer, 2
    82 0000081E B801000000          <1>  mov eax, sys_write
    83 00000823 BF01000000          <1>  mov edi, 1
    84 00000828 48BE-               <1>  mov rsi, %1
    84 0000082A [4C15000000000000]  <1>
    85 00000832 BA02000000          <1>  mov edx, %2
    86 00000837 0F05                <1>  syscall
   924                                      
   925 00000839 5D                          pop rbp
   926 0000083A C3                          ret
   927                                  
   928                                  ; Función modificada para detectar colisión
   929                                  ; Función mejorada para detectar colisión y manejar la física
   930                                  ; Función corregida para manejar colisiones con bloques completos
   931                                  ;---------------------------------------------------------
   932                                  ; check_block_collision:
   933                                  ;   Detecta si en la posición r10 (que apunta a board[])
   934                                  ;   hay un bloque ("UUUU","OOOO","DDDD","LLLL","VVVV","8888").
   935                                  ;   De ser así, localiza qué bloque es, lo "destruye" y
   936                                  ;   retorna 1 para indicar colisión. Si no encuentra bloque,
   937                                  ;   retorna 0.
   938                                  ;---------------------------------------------------------
   939                                  ;--------------------------------------
   940                                  ; check_block_collision
   941                                  ;--------------------------------------
   942                                  ; Actualizar check_block_collision para usar el nivel actual
   943                                  check_block_collision:
   944 0000083B 55                          push rbp
   945 0000083C 4889E5                      mov rbp, rsp
   946                                  
   947 0000083F 418A02                      mov al, [r10]
   948                                  
   949                                      ; Verificación de caracteres igual que antes...
   950 00000842 3C55                        cmp al, 'U'  
   951 00000844 7419                        je .possible
   952 00000846 3C4F                        cmp al, 'O'  
   953 00000848 7415                        je .possible
   954 0000084A 3C44                        cmp al, 'D'  
   955 0000084C 7411                        je .possible
   956 0000084E 3C4C                        cmp al, 'L'  
   957 00000850 740D                        je .possible
   958 00000852 3C56                        cmp al, 'V'  
   959 00000854 7409                        je .possible
   960 00000856 3C38                        cmp al, '8'  
   961 00000858 7405                        je .possible
   962                                  
   963 0000085A 4831C0                      xor rax, rax
   964 0000085D 5D                          pop rbp
   965 0000085E C3                          ret
   966                                  
   967                                      .possible:
   968 0000085F 53                              push rbx
   969 00000860 57                              push rdi
   970 00000861 56                              push rsi
   971 00000862 4154                            push r12
   972                                  
   973                                          ; Obtener puntero a los bloques del nivel actual
   974 00000864 E873FDFFFF                      call get_current_level_blocks
   975 00000869 4989C5                          mov r13, rax                  ; Guardar puntero a los bloques
   976                                          
   977                                          ; Obtener cantidad de bloques del nivel actual
   978 0000086C E8C4FDFFFF                      call get_current_level_count
   979 00000871 4989C6                          mov r14, rax                  ; Guardar cantidad de bloques
   980                                  
   981 00000874 4D31E4                          xor r12, r12
   982                                      .find_block_loop:
   983 00000877 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
   984 0000087A 0F8DB0000000                    jge .no_block_found
   985                                  
   986                                          ; El resto de la lógica de verificación de colisiones...
   987 00000880 418A9C24[C2140000]              mov bl, [block_states + r12]
   988 00000888 84DB                            test bl, bl
   989 0000088A 0F8498000000                    jz .next_block
   990                                  
   991                                          ; Usar r13 para acceder a los bloques del nivel actual
   992 00000890 4C89E8                          mov rax, r13
   993 00000893 4D6BE404                        imul r12, 4
   994 00000897 4C01E0                          add rax, r12
   995 0000089A 8A10                            mov dl, [rax]       ; x
   996 0000089C 8A4801                          mov cl, [rax+1]     ; y
   997                                  
   998                                          ; Revertir r12
   999 0000089F 4D89E4                          mov r12, r12
  1000 000008A2 49C1EC02                        shr r12, 2
  1001                                  
  1002                                          ; La misma lógica de detección de colisiones...
  1003 000008A6 488D3D(000A0000)                lea rdi, [board]
  1004 000008AD 4831C0                          xor rax, rax
  1005 000008B0 B850000000                      mov rax, column_cells + 2
  1006 000008B5 480FB6C9                        movzx rcx, cl
  1007 000008B9 480FAFC1                        imul rax, rcx
  1008 000008BD 4801C7                          add rdi, rax
  1009 000008C0 480FB6C2                        movzx rax, dl
  1010 000008C4 4801C7                          add rdi, rax
  1011                                  
  1012 000008C7 4939FA                          cmp r10, rdi
  1013 000008CA 725C                            jb .next_block
  1014 000008CC 488D5F06                        lea rbx, [rdi + 6]
  1015 000008D0 4939DA                          cmp r10, rbx
  1016 000008D3 7353                            jae .next_block
  1017                                  
  1018                                          ; Manejo de colisión igual que antes...
  1019 000008D5 41FE8C24[C2140000]              dec byte [block_states + r12]
  1020 000008DD 418A9C24[C2140000]              mov bl, [block_states + r12]
  1021 000008E5 84DB                            test bl, bl
  1022 000008E7 7533                            jnz .still_alive
  1023                                  
  1024 000008E9 B906000000                      mov rcx, block_length
  1025                                      .erase_block_chars:
  1026 000008EE C60720                          mov byte [rdi], char_space
  1027 000008F1 48FFC7                          inc rdi
  1028 000008F4 E2F8                            loop .erase_block_chars
  1029                                  
  1030 000008F6 FE0D(A5140000)                  dec byte [blocks_remaining]
  1031 000008FC FE05(4B150000)                  inc byte [destroyed_blocks]     ; Incrementar contador de bloques destruidos
  1032                                      
  1033                                          ; Calcular puntos basado en la durabilidad original del bloque
  1034 00000902 4C89E0                          mov rax, r12                    ; Índice del bloque
  1035 00000905 486BC004                        imul rax, 4                     ; Multiplicar por 4 (tamaño de cada entrada)
  1036 00000909 4C01E8                          add rax, r13                    ; Agregar base de los bloques
  1037 0000090C 480FB64002                      movzx rax, byte [rax + 2]       ; Obtener tipo de bloque (durabilidad original)
  1038 00000911 486BC00A                        imul rax, 10                    ; Multiplicar por 10
  1039 00000915 480105(43150000)                add [current_score], rax        ; Agregar al score total
  1040                                  
  1041                                      .still_alive:
  1042 0000091C B801000000                      mov rax, 1
  1043 00000921 415C                            pop r12
  1044 00000923 5E                              pop rsi
  1045 00000924 5F                              pop rdi
  1046 00000925 5B                              pop rbx
  1047 00000926 5D                              pop rbp
  1048 00000927 C3                              ret
  1049                                  
  1050                                      .next_block:
  1051 00000928 49FFC4                          inc r12
  1052 0000092B E947FFFFFF                      jmp .find_block_loop
  1053                                  
  1054                                      .no_block_found:
  1055 00000930 4831C0                          xor rax, rax
  1056 00000933 415C                            pop r12
  1057 00000935 5E                              pop rsi
  1058 00000936 5F                              pop rdi
  1059 00000937 5B                              pop rbx
  1060 00000938 5D                              pop rbp
  1061 00000939 C3                              ret
  1062                                  
  1063                                  
  1064                                  
  1065                                  _start:
  1066 0000093A E8ECF7FFFF              	call canonical_off
  1067 0000093F E8C6000000              	call start_screen
  1068 00000944 E80FFBFFFF                  call init_level
  1069 00000949 EB00                    	jmp .main_loop
  1070                                  	
  1071                                  
  1072                                  	.main_loop:
  1073 0000094B E8FAFDFFFF                      call print_labels
  1074 00000950 E8B0F8FFFF              		call print_pallet
  1075 00000955 E83BF9FFFF                      call move_ball
  1076 0000095A E825FDFFFF                      call print_blocks
  1077 0000095F E82DFCFFFF                      call check_level_complete
  1078 00000964 E874F8FFFF              		call print_ball
  1079                                  		print board, board_size				
    82 00000969 B801000000          <1>  mov eax, sys_write
    83 0000096E BF01000000          <1>  mov edi, 1
    84 00000973 48BE-               <1>  mov rsi, %1
    84 00000975 [000A000000000000]  <1>
    85 0000097D BA000A0000          <1>  mov edx, %2
    86 00000982 0F05                <1>  syscall
  1080                                  		;setnonblocking	
  1081                                  	.read_more:	
  1082                                  		getchar	
    90 00000984 B800000000          <1>  mov rax, sys_read
    91 00000989 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 0000098E 48BE-               <1>  mov rsi, input_char
    92 00000990 [0000000000000000]  <1>
    93 00000998 BA01000000          <1>  mov rdx, 1
    94 0000099D 0F05                <1>  syscall
  1083                                  		
  1084 0000099F 4883F801                		cmp rax, 1
  1085 000009A3 7532                        	jne .done
  1086                                  		
  1087 000009A5 8A05(00000000)          		mov al,[input_char]
  1088                                  
  1089 000009AB 3C61                    		cmp al, 'a'
  1090 000009AD 750E                    	    jne .not_left
  1091 000009AF 48C7C7FFFFFFFF          	    mov rdi, left_direction
  1092 000009B6 E865F8FFFF              		call move_pallet
  1093 000009BB EB1A                    	    jmp .done
  1094                                  		
  1095                                  		.not_left:
  1096 000009BD 3C64                    		 	cmp al, 'd'
  1097 000009BF 750C                    	    	jne .not_right
  1098 000009C1 BF01000000              			mov rdi, right_direction
  1099 000009C6 E855F8FFFF              	    	call move_pallet
  1100 000009CB EB0A                        		jmp .done		
  1101                                  
  1102                                  		.not_right:
  1103                                  
  1104 000009CD 3C71                        		cmp al, 'q'
  1105 000009CF 0F84A8000000                		je exit
  1106                                  
  1107 000009D5 EBAD                    			jmp .read_more
  1108                                  		
  1109                                  		.done:	
  1110                                  			;unsetnonblocking		
  1111                                  			sleeptime	
    98 000009D7 B823000000          <1>  mov eax, sys_nanosleep
    99 000009DC 48BF-               <1>  mov rdi, timespec
    99 000009DE [0000000000000000]  <1>
   100 000009E6 31F6                <1>  xor esi, esi
   101 000009E8 0F05                <1>  syscall
  1112                                  			print clear, clear_length
    82 000009EA B801000000          <1>  mov eax, sys_write
    83 000009EF BF01000000          <1>  mov edi, 1
    84 000009F4 48BE-               <1>  mov rsi, %1
    84 000009F6 [1000000000000000]  <1>
    85 000009FE BA07000000          <1>  mov edx, %2
    86 00000A03 0F05                <1>  syscall
  1113 00000A05 E941FFFFFF                  		jmp .main_loop
  1114                                  
  1115                                  
  1116                                  
  1117                                  start_screen:
  1118                                      print clear, clear_length    ; Limpiamos la pantalla primero
    82 00000A0A B801000000          <1>  mov eax, sys_write
    83 00000A0F BF01000000          <1>  mov edi, 1
    84 00000A14 48BE-               <1>  mov rsi, %1
    84 00000A16 [1000000000000000]  <1>
    85 00000A1E BA07000000          <1>  mov edx, %2
    86 00000A23 0F05                <1>  syscall
  1119                                      print msg1, msg1_length
    82 00000A25 B801000000          <1>  mov eax, sys_write
    83 00000A2A BF01000000          <1>  mov edi, 1
    84 00000A2F 48BE-               <1>  mov rsi, %1
    84 00000A31 [1700000000000000]  <1>
    85 00000A39 BA14010000          <1>  mov edx, %2
    86 00000A3E 0F05                <1>  syscall
  1120                                      
  1121                                      .wait_for_key:              ; Agregamos una etiqueta para esperar la tecla
  1122                                          getchar                 ; Esperamos una tecla
    90 00000A40 B800000000          <1>  mov rax, sys_read
    91 00000A45 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 00000A4A 48BE-               <1>  mov rsi, input_char
    92 00000A4C [0000000000000000]  <1>
    93 00000A54 BA01000000          <1>  mov rdx, 1
    94 00000A59 0F05                <1>  syscall
  1123 00000A5B 4883F801                        cmp rax, 1             ; Verificamos si se leyó un carácter
  1124 00000A5F 75DF                            jne .wait_for_key      ; Si no se leyó, seguimos esperando
  1125                                          
  1126                                      print clear, clear_length   ; Limpiamos la pantalla antes de salir
    82 00000A61 B801000000          <1>  mov eax, sys_write
    83 00000A66 BF01000000          <1>  mov edi, 1
    84 00000A6B 48BE-               <1>  mov rsi, %1
    84 00000A6D [1000000000000000]  <1>
    85 00000A75 BA07000000          <1>  mov edx, %2
    86 00000A7A 0F05                <1>  syscall
  1127 00000A7C C3                          ret
  1128                                  
  1129                                  exit: 
  1130 00000A7D E8EBF6FFFF              	call canonical_on
  1131 00000A82 B83C000000              	mov    rax, 60
  1132 00000A87 BF00000000                  mov    rdi, 0
  1133 00000A8C 0F05                        syscall
  1134                                  
