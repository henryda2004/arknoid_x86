     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  sys_read: equ 0	
     7                                  sys_write:	equ 1
     8                                  sys_nanosleep:	equ 35
     9                                  sys_time:	equ 201
    10                                  sys_fcntl:	equ 72
    11                                  
    12                                  
    13                                  STDIN_FILENO: equ 0
    14                                  
    15                                  F_SETFL:	equ 0x0004
    16                                  O_NONBLOCK: equ 0x0004
    17                                  
    18                                  ;screen clean definition
    19                                  row_cells:	equ 32	; set to any (reasonable) value you wish
    20                                  column_cells: 	equ 78 ; set to any (reasonable) value you wish
    21                                  array_length:	equ row_cells * column_cells + row_cells ; cells are mapped to bytes in the array and a new line char ends each row
    22                                  
    23                                  ;This is regarding the sleep time
    24                                  timespec:
    25 00000000 0000000000000000            tv_sec  dq 0
    26 00000008 00C2EB0B00000000            tv_nsec dq 200000000
    27                                  
    28                                  
    29                                  ;This is for cleaning up the screen
    30 00000010 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"
    31                                  clear_length:	equ $-clear
    32                                  	
    33                                  	
    34                                  
    35                                  ; Start Message
    36 00000017 202020202020202054-     msg1: db "        TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    36 00000020 45434E4F4C4F474943-
    36 00000029 4F20444520434F5354-
    36 00000032 412052494341202020-
    36 0000003B 20202020200A0D     
    37 00000042 202020202020202041-     msg2: db "        ARQUITECTURA DE COMPUTADORAS I        ", 0xA, 0xD
    37 0000004B 525155495445435455-
    37 00000054 524120444520434F4D-
    37 0000005D 50555441444F524153-
    37 00000066 204920202020202020-
    37 0000006F 200A0D             
    38 00000072 202020202020202045-     msg3: db "        ESTUDIANTE: HENRY NUNEZ PEREZ        ", 0xA, 0xD
    38 0000007B 5354554449414E5445-
    38 00000084 3A2048454E5259204E-
    38 0000008D 554E455A2050455245-
    38 00000096 5A2020202020202020-
    38 0000009F 0A0D               
    39 000000A1 202020202020202050-     msg4: db "        PROFESOR: ERNESTO RIVERA ALVARADO        ", 0xA, 0xD
    39 000000AA 524F4645534F523A20-
    39 000000B3 45524E4553544F2052-
    39 000000BC 495645524120414C56-
    39 000000C5 415241444F20202020-
    39 000000CE 202020200A0D       
    40 000000D4 202020202020202041-     msg5: db "        ARKANOID RETRO        ", 0xA, 0xD
    40 000000DD 524B414E4F49442052-
    40 000000E6 4554524F2020202020-
    40 000000EF 2020200A0D         
    41 000000F4 202020202020202050-     msg6: db "        PRESIONE CUALQUIER TECLA PARA INICIAR        ", 0xA, 0xD
    41 000000FD 524553494F4E452043-
    41 00000106 55414C515549455220-
    41 0000010F 5445434C4120504152-
    41 00000118 4120494E4943494152-
    41 00000121 20202020202020200A-
    41 0000012A 0D                 
    42                                  msg1_length: equ $-msg1
    43                                  msg2_length: equ $-msg2
    44                                  msg3_length: equ $-msg3
    45                                  msg4_length: equ $-msg4
    46                                  msg5_length: equ $-msg5
    47                                  msg6_length: equ $-msg6
    48                                  
    49                                  ; Usefull macros
    50                                  
    51                                  
    52                                  
    53                                  %macro setnonblocking 0
    54                                  	mov rax, sys_fcntl
    55                                      mov rdi, STDIN_FILENO
    56                                      mov rsi, F_SETFL
    57                                      mov rdx, O_NONBLOCK
    58                                      syscall
    59                                  %endmacro
    60                                  
    61                                  %macro unsetnonblocking 0
    62                                  	mov rax, sys_fcntl
    63                                      mov rdi, STDIN_FILENO
    64                                      mov rsi, F_SETFL
    65                                      mov rdx, 0
    66                                      syscall
    67                                  %endmacro
    68                                  
    69                                  %macro full_line 0
    70                                      times column_cells db "X"
    71                                      db 0x0a, 0xD
    72                                  %endmacro
    73                                  
    74                                  %macro hollow_line 0
    75                                      db "X"
    76                                      times column_cells-2 db " "
    77                                      db "X", 0x0a, 0xD
    78                                  %endmacro
    79                                  
    80                                  
    81                                  %macro print 2
    82                                  	mov eax, sys_write
    83                                  	mov edi, 1 	; stdout
    84                                  	mov rsi, %1
    85                                  	mov edx, %2
    86                                  	syscall
    87                                  %endmacro
    88                                  
    89                                  %macro getchar 0
    90                                  	mov     rax, sys_read
    91                                      mov     rdi, STDIN_FILENO
    92                                      mov     rsi, input_char
    93                                      mov     rdx, 1 ; number of bytes
    94                                      syscall         ;read text input from keyboard
    95                                  %endmacro
    96                                  
    97                                  %macro sleeptime 0
    98                                  	mov eax, sys_nanosleep
    99                                  	mov rdi, timespec
   100                                  	xor esi, esi		; ignore remaining time in case of call interruption
   101                                  	syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   102                                  %endmacro
   103                                  
   104                                  
   105                                  
   106                                  global _start
   107                                  
   108                                  section .bss
   109                                  
   110 00000000 ??                      input_char: resb 1
   111                                  
   112                                  section .data
   113                                  
   114                                  	; Guardamos la plantilla del tablero (32 filas)
   115                                      board_template:
   116                                          full_line
    70 00000000 58<rep 4Eh>         <1>  times column_cells db "X"
    71 0000004E 0A0D                <1>  db 0x0a, 0xD
   117                                          %rep 30
   118                                          hollow_line
   119                                          %endrep
   118                              <1>  hollow_line
    75 00000050 58                  <2>  db "X"
    76 00000051 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000009D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000A0 58                  <2>  db "X"
    76 000000A1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000000ED 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000F0 58                  <2>  db "X"
    76 000000F1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000013D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000140 58                  <2>  db "X"
    76 00000141 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000018D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000190 58                  <2>  db "X"
    76 00000191 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000001DD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000001E0 58                  <2>  db "X"
    76 000001E1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000022D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000230 58                  <2>  db "X"
    76 00000231 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000027D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000280 58                  <2>  db "X"
    76 00000281 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000002CD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000002D0 58                  <2>  db "X"
    76 000002D1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000031D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000320 58                  <2>  db "X"
    76 00000321 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000036D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000370 58                  <2>  db "X"
    76 00000371 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000003BD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000003C0 58                  <2>  db "X"
    76 000003C1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000040D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000410 58                  <2>  db "X"
    76 00000411 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000045D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000460 58                  <2>  db "X"
    76 00000461 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000004AD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000004B0 58                  <2>  db "X"
    76 000004B1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000004FD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000500 58                  <2>  db "X"
    76 00000501 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000054D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000550 58                  <2>  db "X"
    76 00000551 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000059D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005A0 58                  <2>  db "X"
    76 000005A1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000005ED 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005F0 58                  <2>  db "X"
    76 000005F1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000063D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000640 58                  <2>  db "X"
    76 00000641 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000068D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000690 58                  <2>  db "X"
    76 00000691 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000006DD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000006E0 58                  <2>  db "X"
    76 000006E1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000072D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000730 58                  <2>  db "X"
    76 00000731 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000077D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000780 58                  <2>  db "X"
    76 00000781 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000007CD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000007D0 58                  <2>  db "X"
    76 000007D1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000081D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000820 58                  <2>  db "X"
    76 00000821 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000086D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000870 58                  <2>  db "X"
    76 00000871 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000008BD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008C0 58                  <2>  db "X"
    76 000008C1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000090D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000910 58                  <2>  db "X"
    76 00000911 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000095D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000960 58                  <2>  db "X"
    76 00000961 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000009AD 580A0D              <2>  db "X", 0x0a, 0xD
   120                                          full_line
    70 000009B0 58<rep 4Eh>         <1>  times column_cells db "X"
    71 000009FE 0A0D                <1>  db 0x0a, 0xD
   121                                      board_template_size: equ $ - board_template
   122                                  
   123                                      ; Espacio real que se usará en la ejecución
   124 00000A00 00<rep A00h>                board: times board_template_size db 0
   125                                      board_size: equ board_template_size
   126                                  
   127                                  	; Added for the terminal issue
   128 00001400 00<rep 24h>             	termios:        times 36 db 0
   129                                  	stdin:          equ 0
   130                                  	ICANON:         equ 1<<1
   131                                  	ECHO:           equ 1<<3
   132                                  	VTIME: 			equ 5
   133                                  	VMIN:			equ 6
   134                                  	CC_C:			equ 18
   135                                  
   136                                  section .text
   137                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   138                                  canonical_off:
   139 0000012B E86F000000                      call read_stdin_termios
   140                                  
   141                                          ; clear canonical bit in local mode flags
   142 00000130 50                              push rax
   143 00000131 B802000000                      mov eax, ICANON
   144 00000136 F7D0                            not eax
   145 00000138 2105(0C140000)                  and [termios+12], eax
   146 0000013E C605(17140000)00        		mov byte[termios+CC_C+VTIME], 0
   147 00000145 C605(18140000)00        		mov byte[termios+CC_C+VMIN], 0
   148 0000014C 58                              pop rax
   149                                  
   150 0000014D E86C000000                      call write_stdin_termios
   151 00000152 C3                              ret
   152                                  
   153                                  echo_off:
   154 00000153 E847000000                      call read_stdin_termios
   155                                  
   156                                          ; clear echo bit in local mode flags
   157 00000158 50                              push rax
   158 00000159 B808000000                      mov eax, ECHO
   159 0000015E F7D0                            not eax
   160 00000160 2105(0C140000)                  and [termios+12], eax
   161 00000166 58                              pop rax
   162                                  
   163 00000167 E852000000                      call write_stdin_termios
   164 0000016C C3                              ret
   165                                  
   166                                  canonical_on:
   167 0000016D E82D000000                      call read_stdin_termios
   168                                  
   169                                          ; set canonical bit in local mode flags
   170 00000172 830D(0C140000)02                or dword [termios+12], ICANON
   171 00000179 C605(17140000)00        		mov byte[termios+CC_C+VTIME], 0
   172 00000180 C605(18140000)01        		mov byte[termios+CC_C+VMIN], 1
   173 00000187 E832000000                      call write_stdin_termios
   174 0000018C C3                              ret
   175                                  
   176                                  echo_on:
   177 0000018D E80D000000                      call read_stdin_termios
   178                                  
   179                                          ; set echo bit in local mode flags
   180 00000192 830D(0C140000)08                or dword [termios+12], ECHO
   181                                  
   182 00000199 E820000000                      call write_stdin_termios
   183 0000019E C3                              ret
   184                                  
   185                                  read_stdin_termios:
   186 0000019F 50                              push rax
   187 000001A0 53                              push rbx
   188 000001A1 51                              push rcx
   189 000001A2 52                              push rdx
   190                                  
   191 000001A3 B836000000                      mov eax, 36h
   192 000001A8 BB00000000                      mov ebx, stdin
   193 000001AD B901540000                      mov ecx, 5401h
   194 000001B2 BA[00140000]                    mov edx, termios
   195 000001B7 CD80                            int 80h
   196                                  
   197 000001B9 5A                              pop rdx
   198 000001BA 59                              pop rcx
   199 000001BB 5B                              pop rbx
   200 000001BC 58                              pop rax
   201 000001BD C3                              ret
   202                                  
   203                                  write_stdin_termios:
   204 000001BE 50                              push rax
   205 000001BF 53                              push rbx
   206 000001C0 51                              push rcx
   207 000001C1 52                              push rdx
   208                                  
   209 000001C2 B836000000                      mov eax, 36h
   210 000001C7 BB00000000                      mov ebx, stdin
   211 000001CC B902540000                      mov ecx, 5402h
   212 000001D1 BA[00140000]                    mov edx, termios
   213 000001D6 CD80                            int 80h
   214                                  
   215 000001D8 5A                              pop rdx
   216 000001D9 59                              pop rcx
   217 000001DA 5B                              pop rbx
   218 000001DB 58                              pop rax
   219 000001DC C3                              ret
   220                                  
   221                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   222                                  
   223                                  char_equal: equ 61
   224                                  char_space: equ 32
   225                                  char_O: equ 79
   226                                  left_direction: equ -1
   227                                  right_direction: equ 1
   228                                  
   229                                  
   230                                  section .data
   231                                  
   232                                  ; Mensajes para los niveles
   233 00001424 4E4956454C20                level_msg: db "NIVEL "
   234                                      level_msg_len: equ $ - level_msg
   235 0000142A 31                          level_1_char: db "1"
   236 0000142B 32                          level_2_char: db "2"
   237 0000142C 33                          level_3_char: db "3"
   238 0000142D 34                          level_4_char: db "4"
   239 0000142E 35                          level_5_char: db "5"
   240                                      level_char_len: equ 1
   241                                  
   242                                      ; Timespec para la pausa del mensaje de nivel
   243                                      level_display_time:
   244 0000142F 0100000000000000                lvl_tv_sec dq 1           ; 1 segundo
   245 00001437 0000000000000000                lvl_tv_nsec dq 0
   246                                          
   247 0000143F [3613000000000000]      	pallet_position dq board + 38 + 29 * (column_cells +2)
   248 00001447 0500000000000000        	pallet_size dq 5
   249                                  
   250 0000144F 2800000000000000        	ball_x_pos: dq 40
   251 00001457 1C00000000000000        	ball_y_pos: dq 28
   252 0000145F 0100000000000000            ball_direction_x dq 1    ; 1 = derecha, -1 = izquierda
   253 00001467 FFFFFFFFFFFFFFFF            ball_direction_y dq -1   ; -1 = arriba, 1 = abajo
   254 0000146F 00                          ball_moving db 0         ; 0 = estática, 1 = en movimiento
   255                                  
   256                                  ; Definir los límites de la pantalla o área de juego
   257                                      board_top_left_x equ 1
   258                                      board_top_left_y equ 1
   259                                      board_bottom_right_x equ column_cells - 1
   260                                      board_bottom_right_y equ row_cells
   261                                  
   262                                      ; Limites laterales
   263                                      left_edge equ board_top_left_x               ; Límite izquierdo en la primera columna
   264                                      right_edge equ board_bottom_right_x         ; Límite derecho en la última columna
   265                                  
   266                                      ; O también puedes hacerlo así si prefieres usando las coordenadas en memoria para obtener la ubicación exacta:
   267 00001470 [500A000000000000]          left_edge_position dq board + (board_top_left_y * (column_cells + 2)) ; Coordenada de la parte izquierda del marco
   268 00001478 [9C0A000000000000]          right_edge_position dq board + (board_top_left_y * (column_cells + 2) + board_bottom_right_x - 1) ; Coordenada de la parte derecha del marco
   269                                  
   270                                      ; Definición de tipos de bloques
   271 00001480 555555555555                block_type_1: db "UUUUUU"    ; Durabilidad 1
   272 00001486 4F4F4F4F4F4F                block_type_2: db "OOOOOO"    ; Durabilidad 2
   273 0000148C 444444444444                block_type_3: db "DDDDDD"    ; Durabilidad 3
   274 00001492 4C4C4C4C4C4C                block_type_4: db "LLLLLL"    ; Durabilidad 4
   275 00001498 565656565656                block_type_5: db "VVVVVV"    ; Durabilidad 5
   276 0000149E 383838383838                block_type_6: db "888888"    ; Durabilidad 6
   277                                      block_length: equ 6        ; Longitud de cada bloque
   278                                  
   279                                      ; Estructura para el nivel actual
   280 000014A4 01                          current_level db 1
   281 000014A5 00                          blocks_remaining db 0
   282                                  
   283                                      ; Definición del nivel 1 (ejemplo con múltiples bloques)destroyed_blocks
   284                                      ; Formato: x_pos, y_pos, tipo_bloque, durabilidad_actual
   285                                      level1_blocks:
   286                                          ; Tercera fila (tipo 3)
   287 000014A6 3807030253                      db 56, 7, 3, 2, 'S'    ; Bloque 7
   288 000014AB 3D09030153                      db 61, 9, 3, 1, 'S'    ; Bloque 7
   289 000014B0 1207030153                      db 18, 7, 3, 1, 'S'    ; Bloque 7
   290                                      level1_blocks_count equ 3   ; Cantidad total de bloques
   291                                  
   292                                      ; Nivel 2: Bloques de prueba
   293                                      level2_blocks:
   294 000014B5 3C07010145                      db 60, 7, 1, 1, 'E'    ; Un bloque simple en el nivel 2   ; Un bloque simple en el nivel 2
   295                                      level2_blocks_count equ 1
   296                                  
   297                                      ; Nivel 3
   298                                      level3_blocks:
   299 000014BA 3C07020145                      db 60, 7, 2, 1, 'E'    ; Bloque 1
   300                                  
   301                                      level3_blocks_count equ 1
   302                                  
   303                                      ; Nivel 4
   304                                      level4_blocks:
   305 000014BF 3C07040145                      db 60, 7, 4, 1, 'E'    ; Bloque 1
   306                                      level4_blocks_count equ 1
   307                                  
   308                                      ; Nivel 5
   309                                      level5_blocks:
   310 000014C4 3C07050145                      db 60, 7, 5, 1, 'E'    ; Bloque 1
   311                                      level5_blocks_count equ 1
   312                                  
   313                                      ; Array para mantener el estado de los bloques
   314 000014C9 00<rep 64h>                 block_states: times 100 db 0  ; Durabilidad actual de cada bloque
   315                                  
   316                                      
   317                                      ; Variables para almacenar los valores
   318 0000152D 0000000000000000            current_score dq 0          ; Score actual
   319 00001535 00                          destroyed_blocks db 0       ; Bloques destruidos en el nivel actual
   320                                      
   321                                      ; Buffer para convertir números a string
   322 00001536 00<rep 14h>                 number_buffer: times 20 db 0
   323                                  
   324 0000154A 4023242640                  enemy_chars db "@", "#", "$", "&", "@"    ; El nivel 1 y 5 comparten el mismo caracter (@)
   325                                      
   326                                      ; Estructura para los enemigos (x, y, activo)
   327 0000154F 00<rep 1Eh>                 enemies: times 10 * 3 db 0     ; Máximo 5 enemigos, cada uno con 3 bytes (x, y, activo)
   328 0000156D 0A                          enemies_count db 10            ; Cantidad de enemigos activos
   329                                      
   330 0000156E 3200000000000000            enemy_points dq 50              ; Puntos por destruir un enemigo
   331 00001576 00                          enemy_move_counter db 0         ; Contador para controlar velocidad de movimiento
   332 00001577 02                          enemy_move_delay db 2           ; Mover enemigos cada N ciclos
   333 00001578 00                          enemy_move_total db 0      ; Contador total de movimientos
   334 00001579 00                          enemy_target db 0          ; 0 = persigue bola, 1 = persigue paleta
   335 0000157A 14                          MOVEMENT_THRESHOLD db 20   ; Número de movimientos antes de cambiar objetivo
   336                                   ;Formato: número de bloques destruidos necesario para que aparezca cada enemigo
   337                                      ; Añade esto en la sección .dataa
   338 0000157B 00010206080A0C0E10-         level1_spawn_points: db 0, 1, 2, 6, 8, 10, 12, 14, 16, 18    ; 10 enemigos, cada 2 bloques
   338 00001584 12                 
   339 00001585 01030507090B0D0F11-         level2_spawn_points: db 1, 3, 5, 7, 9, 11, 13, 15, 17, 19    ; 10 enemigos, cada 2 bloques
   339 0000158E 13                 
   340 0000158F 000306090C0F121518-         level3_spawn_points: db 0, 3, 6, 9, 12, 15, 18, 21, 24, 27   ; 10 enemigos, cada 3 bloques
   340 00001598 1B                 
   341 00001599 0104070A0D10131619-         level4_spawn_points: db 1, 4, 7, 10, 13, 16, 19, 22, 25, 28  ; 10 enemigos, cada 3 bloques
   341 000015A2 1C                 
   342 000015A3 00050A0F14191E2328-         level5_spawn_points: db 0, 5, 10, 15, 20, 25, 30, 35, 40, 45 ; 10 enemigos, cada 5 bloques
   342 000015AC 2D                 
   343                                          ; Arreglo de punteros a los spawn points de cada nivel
   344                                      spawn_points_table:
   345 000015AD [7B15000000000000]              dq level1_spawn_points
   346 000015B5 [8515000000000000]              dq level2_spawn_points
   347 000015BD [8F15000000000000]              dq level3_spawn_points
   348 000015C5 [9915000000000000]              dq level4_spawn_points
   349 000015CD [A315000000000000]              dq level5_spawn_points
   350                                  
   351                                      ; Variables para el comportamiento de enemigos
   352 000015D5 1E                          BEHAVIOR_CHANGE_TIME db 30    ; Ciclos antes de cambiar comportamiento
   353 000015D6 00                          behavior_counter db 0          ; Contador para cambio de comportamiento
   354 000015D7 00                          current_behavior db 0          ; 0 = persigue bola, 1 = persigue paleta
   355 000015D8 00<rep Ah>                  enemy_spawns_triggered: times 10 db 0  ; 0 = no spawned, 1 = spawned
   356                                  
   357 000015E2 50756E74616A653A20-         score_label: db "Puntaje: [          ]", 0xA, 0xD  ; 10 espacios para el número
   357 000015EB 5B2020202020202020-
   357 000015F4 20205D0A0D         
   358                                      score_label_len: equ $ - score_label
   359 000015F9 426C6F717565732064-         blocks_label: db "Bloques destruidos: [   ]", 0xA, 0xD  ; 3 espacios para el número
   359 00001602 657374727569646F73-
   359 0000160B 3A205B2020205D0A0D 
   360                                      blocks_label_len: equ $ - blocks_label
   361                                      
   362                                      ; Posición donde insertar los números en los labels
   363                                      score_pos equ 10    ; Posición después de "Puntaje: ["
   364                                      blocks_pos equ 20   ; Posición después de "Bloques destruidos: ["
   365                                      
   366                                      ; Definición de las vidas (x, y, estado)
   367                                      ; Formato: posición_x, posición_y, estado (1 = activa, 0 = inactiva)
   368                                      lives_data: 
   369 00001614 021E01                          db 2, 30, 1     ; Vida 1 (activa)
   370 00001617 041E01                          db 4, 30, 1     ; Vida 2 (activa)
   371 0000161A 061E01                          db 6, 30, 1     ; Vida 3 (inactiva)
   372 0000161D 081E01                          db 8, 30, 1     ; Vida 4 (inactiva)
   373 00001620 0A1E01                          db 10, 30, 1    ; Vida 5 (inactiva)
   374 00001623 0C1E01                          db 12, 30, 1    ; Vida 6 (inactiva)
   375 00001626 0E1E01                          db 14, 30, 1    ; Vida 7 (inactiva)
   376                                      lives_count equ 7    ; Total de vidas
   377 00001629 5E                          life_char db "^"    
   378 0000162A 07                          current_lives db 7   ; Contador de vidas activas actual
   379                                  
   380                                  ; Estructura para almacenar las letras y sus posiciones
   381                                      ; Formato: x, y, letra, activo (1 = activo, 0 = inactivo)
   382 0000162B 00<rep 190h>                letters_map: times 100 * 4 db 0  ; Espacio para 100 letras
   383 000017BB 00                          letters_count db 0   
   384                                  
   385                                  section .text
   386                                  
   387                                  ;	Function: print_ball
   388                                  ; This function displays the position of the ball
   389                                  ; Arguments: none
   390                                  ;
   391                                  ; Return:
   392                                  ;	Void
   393                                  
   394                                  ; Función para imprimir las vidas
   395                                  ; Función modificada para imprimir las vidas
   396                                  print_lives:
   397 000001DD 55                          push rbp
   398 000001DE 4889E5                      mov rbp, rsp
   399                                      
   400 000001E1 4D31E4                      xor r12, r12                    ; Índice de la vida actual
   401                                      
   402                                      .print_loop:
   403 000001E4 4983FC07                        cmp r12, lives_count
   404 000001E8 7D45                            jge .end
   405                                          
   406                                          ; Calcular offset de la vida actual
   407 000001EA 4C89E0                          mov rax, r12
   408 000001ED 486BC003                        imul rax, 3                     ; Cada vida ocupa 3 bytes (x, y, estado)
   409 000001F1 488DB0[14160000]                lea rsi, [lives_data + rax]
   410                                          
   411                                          ; Calcular posición en el tablero
   412 000001F8 4C0FB606                        movzx r8, byte [rsi]            ; X
   413 000001FC 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
   414                                          
   415                                          ; Calcular offset en el tablero
   416 00000201 B84E000000                      mov rax, column_cells
   417 00000206 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
   418 0000020A 49F7E1                          mul r9
   419 0000020D 4C01C0                          add rax, r8
   420 00000210 488DB8[000A0000]                lea rdi, [board + rax]
   421                                          
   422                                          ; Verificar estado de la vida y dibujar el carácter correspondiente
   423 00000217 807E0201                        cmp byte [rsi + 2], 1
   424 0000021B 7405                            je .draw_active
   425                                          
   426                                          ; Si está inactiva, dibujar espacio
   427 0000021D C60720                          mov byte [rdi], ' '
   428 00000220 EB08                            jmp .next_life
   429                                          
   430                                      .draw_active:
   431                                          ; Si está activa, dibujar el símbolo de vida
   432 00000222 8A05(29160000)                  mov al, [life_char]
   433 00000228 8807                            mov [rdi], al
   434                                          
   435                                      .next_life:
   436 0000022A 49FFC4                          inc r12
   437 0000022D EBB5                            jmp .print_loop
   438                                          
   439                                      .end:
   440 0000022F 5D                              pop rbp
   441 00000230 C3                              ret
   442                                  
   443                                  ; Función para desactivar una vida
   444                                  ; Función modificada para perder una vida
   445                                  lose_life:
   446 00000231 55                          push rbp
   447 00000232 4889E5                      mov rbp, rsp
   448                                      
   449                                      ; Verificar si aún quedan vidas
   450 00000235 803D(2A160000)00            cmp byte [current_lives], 0
   451 0000023C 0F8493000000                je .game_lost
   452                                      
   453                                      ; Encontrar la última vida activa
   454 00000242 B907000000                  mov rcx, lives_count
   455 00000247 48FFC9                      dec rcx                     ; Empezar desde la última vida
   456                                      
   457                                      .find_active_life:
   458 0000024A 4889C8                          mov rax, rcx
   459 0000024D 486BC003                        imul rax, 3            ; Cada vida ocupa 3 bytes
   460 00000251 488DB0[14160000]                lea rsi, [lives_data + rax]
   461 00000258 807E0201                        cmp byte [rsi + 2], 1  ; Verificar si está activa
   462 0000025C 7407                            je .deactivate_life
   463 0000025E 48FFC9                          dec rcx
   464 00000261 79E7                            jns .find_active_life  ; Continuar si no hemos llegado a -1
   465 00000263 EB70                            jmp .game_lost         ; Si no encontramos vidas activas
   466                                          
   467                                      .deactivate_life:
   468                                          ; Calcular posición correcta en el tablero para borrar la vida
   469 00000265 4C0FB606                        movzx r8, byte [rsi]            ; X
   470 00000269 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
   471                                          
   472                                          ; Calcular offset en el tablero: Y * (column_cells + 2) + X
   473 0000026E B84E000000                      mov rax, column_cells
   474 00000273 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
   475 00000277 49F7E1                          mul r9
   476 0000027A 4C01C0                          add rax, r8
   477 0000027D 488DB8[000A0000]                lea rdi, [board + rax]
   478                                          
   479                                          ; Borrar visualmente la vida
   480 00000284 C60720                          mov byte [rdi], ' '             
   481                                          
   482                                          ; Desactivar la vida en los datos
   483 00000287 C6460200                        mov byte [rsi + 2], 0          
   484 0000028B FE0D(2A160000)                  dec byte [current_lives]
   485                                          
   486                                          ; Borrar visualmente la paleta anterior
   487 00000291 4C8B05(3F140000)                mov r8, [pallet_position]
   488 00000298 488B0D(47140000)                mov rcx, [pallet_size]
   489                                          .erase_pallet_loop:
   490 0000029F 41C60020                            mov byte [r8], ' '          ; Reemplazar cada posición con un espacio
   491 000002A3 49FFC0                              inc r8
   492 000002A6 48FFC9                              dec rcx
   493 000002A9 75F4                                jnz .erase_pallet_loop
   494                                          
   495                                  
   496                                          ; Reiniciar posición de la bola y la paleta
   497 000002AB 48C705(4F140000)28-             mov qword [ball_x_pos], 40
   497 000002B3 000000             
   498 000002B6 48C705(57140000)1C-             mov qword [ball_y_pos], 28
   498 000002BE 000000             
   499 000002C1 C605(6F140000)00                mov byte [ball_moving], 0
   500 000002C8 48C705(3F140000)-               mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
   500 000002CF [36130000]         
   501                                          
   502 000002D3 EB07                            jmp .end
   503                                          
   504                                      .game_lost:
   505 000002D5 E81C000000                      call game_lost
   506 000002DA EB00                            jmp .end
   507                                          
   508                                      .end:
   509 000002DC 5D                              pop rbp
   510 000002DD C3                              ret
   511                                  ; Función modificada para verificar colisión con el borde inferior
   512                                  check_bottom_collision:
   513 000002DE 55                          push rbp
   514 000002DF 4889E5                      mov rbp, rsp
   515                                      
   516                                      ; Verificar si la bola está en la última fila (row_cells - 1)
   517 000002E2 488B05(57140000)            mov rax, [ball_y_pos]
   518 000002E9 4883F81E                    cmp rax, row_cells - 2
   519 000002ED 7505                        jne .no_collision
   520                                      
   521                                      ; Si hay colisión, perder una vida
   522 000002EF E83DFFFFFF                  call lose_life
   523                                      
   524                                      .no_collision:
   525 000002F4 5D                              pop rbp
   526 000002F5 C3                              ret
   527                                  
   528                                  ; Nueva función para game over
   529                                  game_lost:
   530                                      ; Limpiar la pantalla
   531                                      print clear, clear_length
    82 000002F6 B801000000          <1>  mov eax, sys_write
    83 000002FB BF01000000          <1>  mov edi, 1
    84 00000300 48BE-               <1>  mov rsi, %1
    84 00000302 [1000000000000000]  <1>
    85 0000030A BA07000000          <1>  mov edx, %2
    86 0000030F 0F05                <1>  syscall
   532                                      
   533                                      ; Mostrar mensaje de derrota
   534                                      section .data
   535 000017BC C2A148617320706572-             lost_msg: db "¡Has perdido!", 0xA, 0xD
   535 000017C5 6469646F210A0D     
   536                                          lost_msg_len: equ $ - lost_msg
   537                                      section .text
   538                                      
   539                                      ; Imprimir mensaje de derrota
   540                                      print lost_msg, lost_msg_len
    82 00000311 B801000000          <1>  mov eax, sys_write
    83 00000316 BF01000000          <1>  mov edi, 1
    84 0000031B 48BE-               <1>  mov rsi, %1
    84 0000031D [BC17000000000000]  <1>
    85 00000325 BA10000000          <1>  mov edx, %2
    86 0000032A 0F05                <1>  syscall
   541                                      print score_msg, score_msg_len
    82 0000032C B801000000          <1>  mov eax, sys_write
    83 00000331 BF01000000          <1>  mov edi, 1
    84 00000336 48BE-               <1>  mov rsi, %1
    84 00000338 [EA17000000000000]  <1>
    85 00000340 BA0F000000          <1>  mov edx, %2
    86 00000345 0F05                <1>  syscall
   542                                      
   543                                      ; Mostrar puntaje final
   544 00000347 488B05(2D150000)            mov rax, [current_score]
   545 0000034E 48BF-                       mov rdi, number_buffer
   545 00000350 [3615000000000000] 
   546 00000358 E884070000                  call number_to_string
   547                                      print number_buffer, 20
    82 0000035D B801000000          <1>  mov eax, sys_write
    83 00000362 BF01000000          <1>  mov edi, 1
    84 00000367 48BE-               <1>  mov rsi, %1
    84 00000369 [3615000000000000]  <1>
    85 00000371 BA14000000          <1>  mov edx, %2
    86 00000376 0F05                <1>  syscall
   548                                      
   549                                      ; Esperar un momento antes de salir
   550 00000378 48C7057DFCFFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
   550 00000381 0000               
   551 00000383 48C7057AFCFFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
   551 0000038C 0000               
   552                                      sleeptime
    98 0000038E B823000000          <1>  mov eax, sys_nanosleep
    99 00000393 48BF-               <1>  mov rdi, timespec
    99 00000395 [0000000000000000]  <1>
   100 0000039D 31F6                <1>  xor esi, esi
   101 0000039F 0F05                <1>  syscall
   553                                      
   554 000003A1 E9190F0000                  jmp exit
   555                                  
   556                                  
   557                                  ; Función para registrar una nueva letra en el mapa
   558                                  ; Entrada:
   559                                  ;   al - letra a registrar
   560                                  ;   r8b - posición x
   561                                  ;   r9b - posición y
   562                                  register_letter:
   563 000003A6 55                          push rbp
   564 000003A7 4889E5                      mov rbp, rsp
   565 000003AA 53                          push rbx
   566 000003AB 51                          push rcx
   567                                      
   568                                      ; Encontrar un espacio libre en el mapa
   569 000003AC 4831C9                      xor rcx, rcx
   570 000003AF 480FB615(BB170000)          movzx rdx, byte [letters_count]
   571                                      
   572                                      .find_slot:
   573 000003B7 4883F964                        cmp rcx, 100              ; Máximo de letras
   574 000003BB 7D27                            jge .end                  ; Si no hay espacio, salir
   575                                          
   576 000003BD 488D1C8D[2B160000]              lea rbx, [letters_map + rcx * 4]
   577 000003C5 807B0300                        cmp byte [rbx + 3], 0    ; Verificar si el slot está inactivo
   578 000003C9 7405                            je .found_slot
   579                                          
   580 000003CB 48FFC1                          inc rcx
   581 000003CE EBE7                            jmp .find_slot
   582                                          
   583                                      .found_slot:
   584                                          ; Guardar la información de la letra
   585 000003D0 448803                          mov [rbx], r8b           ; x
   586 000003D3 44884B01                        mov [rbx + 1], r9b       ; y
   587 000003D7 884302                          mov [rbx + 2], al        ; letra
   588 000003DA C6430301                        mov byte [rbx + 3], 1    ; marcar como activo
   589                                          
   590 000003DE FE05(BB170000)                  inc byte [letters_count]
   591                                          
   592                                      .end:
   593 000003E4 59                              pop rcx
   594 000003E5 5B                              pop rbx
   595 000003E6 5D                              pop rbp
   596 000003E7 C3                              ret
   597                                  
   598                                  ; Función para imprimir todas las letras registradas
   599                                  print_letters:
   600 000003E8 55                          push rbp
   601 000003E9 4889E5                      mov rbp, rsp
   602 000003EC 53                          push rbx
   603 000003ED 51                          push rcx
   604                                      
   605 000003EE 4831C9                      xor rcx, rcx
   606                                      
   607                                      .print_loop:
   608 000003F1 4883F964                        cmp rcx, 100              ; Máximo de letras
   609 000003F5 7D37                            jge .end
   610                                          
   611                                          ; Obtener puntero a la letra actual
   612 000003F7 488D1C8D[2B160000]              lea rbx, [letters_map + rcx * 4]
   613                                          
   614                                          ; Verificar si está activa
   615 000003FF 807B0300                        cmp byte [rbx + 3], 0
   616 00000403 7424                            je .next_letter
   617                                          
   618                                          ; Calcular posición en el tablero
   619 00000405 4C0FB603                        movzx r8, byte [rbx]      ; x
   620 00000409 4C0FB64B01                      movzx r9, byte [rbx + 1]  ; y
   621                                          
   622                                          ; Calcular offset en el tablero
   623 0000040E B84E000000                      mov rax, column_cells
   624 00000413 4883C002                        add rax, 2                ; Incluir caracteres de nueva línea
   625 00000417 49F7E1                          mul r9
   626 0000041A 4C01C0                          add rax, r8
   627 0000041D 488DB8[000A0000]                lea rdi, [board + rax]
   628                                          
   629                                          ; Imprimir la letra
   630 00000424 8A4302                          mov al, [rbx + 2]
   631 00000427 8807                            mov [rdi], al
   632                                          
   633                                      .next_letter:
   634 00000429 48FFC1                          inc rcx
   635 0000042C EBC3                            jmp .print_loop
   636                                          
   637                                      .end:
   638 0000042E 59                              pop rcx
   639 0000042F 5B                              pop rbx
   640 00000430 5D                              pop rbp
   641 00000431 C3                              ret
   642                                  
   643                                  ; Función para borrar una letra específica
   644                                  ; Entrada:
   645                                  ;   r8b - posición x
   646                                  ;   r9b - posición y
   647                                  remove_letter:
   648 00000432 55                          push rbp
   649 00000433 4889E5                      mov rbp, rsp
   650 00000436 53                          push rbx
   651 00000437 51                          push rcx
   652                                      
   653 00000438 4831C9                      xor rcx, rcx
   654                                      
   655                                      .find_loop:
   656 0000043B 4883F964                        cmp rcx, 100              ; Máximo de letras
   657 0000043F 7D2E                            jge .end
   658                                          
   659 00000441 488D1C8D[2B160000]              lea rbx, [letters_map + rcx * 4]
   660                                          
   661                                          ; Verificar si está activa y coincide la posición
   662 00000449 807B0300                        cmp byte [rbx + 3], 0
   663 0000044D 741B                            je .next_letter
   664                                          
   665 0000044F 8A03                            mov al, [rbx]
   666 00000451 4438C0                          cmp al, r8b
   667 00000454 7514                            jne .next_letter
   668                                          
   669 00000456 8A4301                          mov al, [rbx + 1]
   670 00000459 4438C8                          cmp al, r9b
   671 0000045C 750C                            jne .next_letter
   672                                          
   673                                          ; Encontrada la letra, desactivarla
   674 0000045E C6430300                        mov byte [rbx + 3], 0
   675 00000462 FE0D(BB170000)                  dec byte [letters_count]
   676 00000468 EB05                            jmp .end
   677                                          
   678                                      .next_letter:
   679 0000046A 48FFC1                          inc rcx
   680 0000046D EBCC                            jmp .find_loop
   681                                          
   682                                      .end:
   683 0000046F 59                              pop rcx
   684 00000470 5B                              pop rbx
   685 00000471 5D                              pop rbp
   686 00000472 C3                              ret
   687                                  ; Función para mover las letras hacia abajo
   688                                  move_letters:
   689 00000473 55                          push rbp
   690 00000474 4889E5                      mov rbp, rsp
   691 00000477 53                          push rbx
   692 00000478 57                          push rdi
   693 00000479 56                          push rsi
   694                                  
   695 0000047A 4831C9                      xor rcx, rcx                    ; Índice de la letra actual
   696                                  
   697                                      .move_loop:
   698 0000047D 4883F964                        cmp rcx, 100                ; Máximo 100 letras
   699 00000481 7D64                            jge .end                    ; Salir si todas las letras fueron procesadas
   700                                  
   701                                          ; Obtener puntero a la letra actual
   702 00000483 488D1C8D[2B160000]              lea rbx, [letters_map + rcx * 4]
   703                                  
   704                                          ; Verificar si la letra está activa
   705 0000048B 807B0300                        cmp byte [rbx + 3], 0
   706 0000048F 7451                            je .next_letter
   707                                  
   708                                          ; Obtener la posición actual de la letra
   709 00000491 4C0FB603                        movzx r8, byte [rbx]        ; X
   710 00000495 4C0FB64B01                      movzx r9, byte [rbx + 1]    ; Y
   711                                  
   712                                          ; Calcular la posición en el tablero para borrar la letra anterior
   713 0000049A B84E000000                      mov rax, column_cells
   714 0000049F 4883C002                        add rax, 2                  ; Incluye caracteres de nueva línea
   715 000004A3 49F7E1                          mul r9
   716 000004A6 4C01C0                          add rax, r8
   717 000004A9 488DB8[000A0000]                lea rdi, [board + rax]
   718 000004B0 C60720                          mov byte [rdi], ' '         ; Borra la letra en la posición anterior
   719                                  
   720                                          ; Incrementar la posición Y de la letra
   721 000004B3 FE4301                          inc byte [rbx + 1]
   722 000004B6 4C0FB64B01                      movzx r9, byte [rbx + 1]
   723                                  
   724                                          ; Verificar si la letra alcanzó el final del tablero
   725 000004BB 4983F91F                        cmp r9, row_cells - 1
   726 000004BF 7C06                            jl .draw_letter
   727                                  
   728                                          ; Desactivar la letra si llega al final
   729 000004C1 C6430300                        mov byte [rbx + 3], 0
   730 000004C5 EB1B                            jmp .next_letter
   731                                  
   732                                          .draw_letter:
   733                                              ; Calcular la nueva posición en el tablero
   734 000004C7 B84E000000                          mov rax, column_cells
   735 000004CC 4883C002                            add rax, 2
   736 000004D0 49F7E1                              mul r9
   737 000004D3 4C01C0                              add rax, r8
   738 000004D6 488DB8[000A0000]                    lea rdi, [board + rax]
   739                                  
   740                                              ; Dibujar la letra en la nueva posición
   741 000004DD 8A4302                              mov al, [rbx + 2]
   742 000004E0 8807                                mov [rdi], al
   743                                  
   744                                          .next_letter:
   745 000004E2 48FFC1                              inc rcx
   746 000004E5 EB96                                jmp .move_loop
   747                                  
   748                                      .end:
   749 000004E7 5E                              pop rsi
   750 000004E8 5F                              pop rdi
   751 000004E9 5B                              pop rbx
   752 000004EA 5D                              pop rbp
   753 000004EB C3                              ret
   754                                  
   755                                  print_ball:
   756 000004EC 4C8B05(4F140000)        	mov r8, [ball_x_pos]
   757 000004F3 4C8B0D(57140000)        	mov r9, [ball_y_pos]
   758 000004FA 4981C0[000A0000]        	add r8, board
   759                                  
   760 00000501 4C89C9                  	mov rcx, r9
   761 00000504 B850000000              	mov rax, column_cells + 2
   762 00000509 48F7E9                  	imul rcx
   763                                  	
   764 0000050C 4901C0                  	add r8, rax
   765 0000050F 41C6004F                	mov byte [r8], char_O
   766 00000513 C3                      	ret
   767                                  
   768                                  	
   769                                  	;mov rax, board + r8 + r9 * (column_cells + 2)
   770                                  	
   771                                  
   772                                  
   773                                  
   774                                  ;	Function: print_pallet
   775                                  ; This function moves the pallet in the game
   776                                  ; Arguments: none
   777                                  ;
   778                                  ; Return;
   779                                  ;	void
   780                                  print_pallet:
   781 00000514 4C8B05(3F140000)        	mov r8, [pallet_position]
   782 0000051B 488B0D(47140000)        	mov rcx, [pallet_size]
   783                                  	.write_pallet:
   784 00000522 41C6003D                		mov byte [r8], char_equal
   785 00000526 49FFC0                  		inc r8
   786 00000529 48FFC9                  		dec rcx
   787 0000052C 75F4                    		jnz .write_pallet
   788                                  
   789 0000052E C3                      	ret
   790                                  	
   791                                  ;	Function: move_pallet
   792                                  ; This function is in charge of moving the pallet in a given direction
   793                                  ; Arguments:
   794                                  ;	rdi: left direction or right direction
   795                                  ;
   796                                  ; Return:
   797                                  ;	void
   798                                  move_pallet:
   799                                      
   800 0000052F 803D(6F140000)00            cmp byte [ball_moving], 0
   801 00000536 7507                        jne .continue_movement
   802 00000538 C605(6F140000)01            mov byte [ball_moving], 1
   803                                  
   804                                      .continue_movement:
   805 0000053F 4883FFFF                        cmp rdi, left_direction
   806 00000543 7531                            jne .move_right
   807                                  
   808                                          .move_left:
   809                                              ; Verificar si la siguiente posición sería una X (borde izquierdo)
   810 00000545 4C8B05(3F140000)                    mov r8, [pallet_position]
   811 0000054C 49FFC8                              dec r8              ; Verificar la posición a la izquierda
   812 0000054F 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
   813 00000552 3C58                                cmp al, 'X'        ; Comparar si es una X
   814 00000554 744D                                je .end            ; Si es X, no mover
   815                                              
   816 00000556 4C8B05(3F140000)                    mov r8, [pallet_position]
   817 0000055D 4C8B0D(47140000)                    mov r9, [pallet_size]
   818 00000564 43C64408FF20                        mov byte [r8 + r9 - 1], char_space  ; Borrar último carácter de la paleta
   819 0000056A 49FFC8                              dec r8
   820 0000056D 4C8905(3F140000)                    mov [pallet_position], r8
   821 00000574 EB2D                                jmp .end
   822                                              
   823                                          .move_right:
   824                                              ; Verificar si la siguiente posición después de la paleta sería una X
   825 00000576 4C8B05(3F140000)                    mov r8, [pallet_position]
   826 0000057D 4C8B0D(47140000)                    mov r9, [pallet_size]
   827 00000584 4D01C8                              add r8, r9         ; Moverse al final de la paleta
   828 00000587 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
   829 0000058A 3C58                                cmp al, 'X'        ; Comparar si es una X
   830 0000058C 7415                                je .end            ; Si es X, no mover
   831                                              
   832 0000058E 4C8B05(3F140000)                    mov r8, [pallet_position]
   833 00000595 41C60020                            mov byte [r8], char_space
   834 00000599 49FFC0                              inc r8
   835 0000059C 4C8905(3F140000)                    mov [pallet_position], r8
   836                                          .end:
   837 000005A3 C3                                  ret
   838                                  
   839                                  move_ball:
   840                                      ; Si la bola no está en movimiento, no hacer nada
   841 000005A4 803D(6F140000)00            cmp byte [ball_moving], 0
   842 000005AB 0F8406010000                je .end
   843                                  
   844                                      ; Borrar la posición actual de la bola
   845 000005B1 4C8B05(4F140000)            mov r8, [ball_x_pos]
   846 000005B8 4C8B0D(57140000)            mov r9, [ball_y_pos]
   847 000005BF 4981C0[000A0000]            add r8, board
   848 000005C6 4C89C9                      mov rcx, r9
   849 000005C9 B850000000                  mov rax, column_cells + 2
   850 000005CE 48F7E9                      imul rcx
   851 000005D1 4901C0                      add r8, rax
   852 000005D4 41C60020                    mov byte [r8], char_space    ; Borrar la bola actual
   853                                  
   854                                      ; Calcular siguiente posición X
   855 000005D8 4C8B05(4F140000)            mov r8, [ball_x_pos]
   856 000005DF 4C8B0D(57140000)            mov r9, [ball_y_pos]
   857 000005E6 488B05(5F140000)            mov rax, [ball_direction_x]
   858 000005ED 4901C0                      add r8, rax                  ; Nueva posición X
   859                                  
   860                                      ; Calcular la dirección de memoria para la siguiente posición
   861 000005F0 4D89C2                      mov r10, r8
   862 000005F3 4981C2[000A0000]            add r10, board
   863 000005FA 4C89C9                      mov rcx, r9
   864 000005FD B850000000                  mov rax, column_cells + 2
   865 00000602 48F7E9                      imul rcx
   866 00000605 4901C2                      add r10, rax
   867                                  
   868                                      ; Verificar si hay una X en la siguiente posición X
   869 00000608 418A02                      mov al, [r10]
   870 0000060B 3C58                        cmp al, 'X'
   871 0000060D 750C                        jne .check_block_x
   872 0000060F 48F71D(5F140000)            neg qword [ball_direction_x]  ; Cambiar dirección X si hay una X
   873 00000616 E99C000000                  jmp .end
   874                                  
   875                                      .check_block_x:
   876                                          ; Verificar colisión con bloques en X
   877 0000061B 4150                            push r8     ; Guardar registros que usa check_block_collision
   878 0000061D 4151                            push r9
   879 0000061F 4152                            push r10
   880 00000621 E813060000                      call check_block_collision
   881 00000626 415A                            pop r10
   882 00000628 4159                            pop r9
   883 0000062A 4158                            pop r8
   884 0000062C 4885C0                          test rax, rax
   885 0000062F 7409                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
   886 00000631 48F71D(5F140000)                neg qword [ball_direction_x]  ; Si hay colisión, rebotar
   887 00000638 EB7D                            jmp .end
   888                                  
   889                                      .check_paddle_x:
   890                                          ; Verificar si hay una paleta (=) en la siguiente posición X
   891 0000063A 41803A3D                        cmp byte [r10], char_equal
   892 0000063E 7509                            jne .check_y_movement
   893 00000640 48F71D(5F140000)                neg qword [ball_direction_x]  ; Cambiar dirección X si hay una paleta
   894 00000647 EB6E                            jmp .end
   895                                  
   896                                      .check_y_movement:
   897                                          ; Calcular siguiente posición Y
   898 00000649 488B05(67140000)                mov rax, [ball_direction_y]
   899 00000650 4901C1                          add r9, rax                  ; Nueva posición Y
   900                                  
   901                                          ; Calcular la dirección de memoria para la siguiente posición Y
   902 00000653 4D89C2                          mov r10, r8
   903 00000656 4981C2[000A0000]                add r10, board
   904 0000065D 4C89C9                          mov rcx, r9
   905 00000660 B850000000                      mov rax, column_cells + 2
   906 00000665 48F7E9                          imul rcx
   907 00000668 4901C2                          add r10, rax
   908                                  
   909                                          ; Verificar si hay una X en la siguiente posición Y
   910 0000066B 418A02                          mov al, [r10]
   911 0000066E 3C58                            cmp al, 'X'
   912 00000670 7509                            jne .check_block_y
   913 00000672 48F71D(67140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una X
   914 00000679 EB3C                            jmp .end
   915                                  
   916                                      .check_block_y:
   917                                          ; Verificar colisión con bloques en Y
   918 0000067B 4150                            push r8     ; Guardar registros que usa check_block_collision
   919 0000067D 4151                            push r9
   920 0000067F 4152                            push r10
   921 00000681 E8B3050000                      call check_block_collision
   922 00000686 415A                            pop r10
   923 00000688 4159                            pop r9
   924 0000068A 4158                            pop r8
   925 0000068C 4885C0                          test rax, rax
   926 0000068F 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
   927 00000691 48F71D(67140000)                neg qword [ball_direction_y]  ; Si hay colisión, rebotar
   928 00000698 EB1D                            jmp .end
   929                                  
   930                                      .check_paddle_y:
   931                                      ; Verificar si hay una paleta (=) en la siguiente posición Y
   932 0000069A 41803A3D                    cmp byte [r10], char_equal
   933 0000069E 7509                        jne .update_position
   934 000006A0 48F71D(67140000)            neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una paleta
   935 000006A7 EB0E                        jmp .end
   936                                  
   937                                  
   938                                      .update_position:
   939 000006A9 4C8905(4F140000)                mov [ball_x_pos], r8
   940 000006B0 4C890D(57140000)                mov [ball_y_pos], r9
   941                                  
   942                                      .end:
   943 000006B7 C3                              ret
   944                                  
   945                                  ; Función para inicializar el nivel
   946                                  ; Función para inicializar el nivel
   947                                  ; Función para mostrar el número de nivel
   948                                  display_level_number:
   949 000006B8 55                          push rbp
   950 000006B9 4889E5                      mov rbp, rsp
   951                                      
   952                                      ; Limpiar la pantalla primero
   953                                      print clear, clear_length
    82 000006BC B801000000          <1>  mov eax, sys_write
    83 000006C1 BF01000000          <1>  mov edi, 1
    84 000006C6 48BE-               <1>  mov rsi, %1
    84 000006C8 [1000000000000000]  <1>
    85 000006D0 BA07000000          <1>  mov edx, %2
    86 000006D5 0F05                <1>  syscall
   954                                      
   955                                      ; Calcular la posición central para el mensaje
   956                                      ; Para el mensaje "NIVEL X", necesitamos centrar 7 caracteres
   957 000006D7 B84E000000                  mov rax, column_cells
   958 000006DC 4883E807                    sub rax, 7                  ; longitud de "NIVEL X"
   959 000006E0 48D1E8                      shr rax, 1                  ; dividir por 2 para centrar
   960                                      
   961                                      ; Calcular la fila central
   962 000006E3 BB20000000                  mov rbx, row_cells
   963 000006E8 48D1EB                      shr rbx, 1                  ; dividir por 2 para obtener la fila central
   964                                      
   965                                      ; Calcular el offset en el buffer
   966 000006EB B950000000                  mov rcx, column_cells + 2   ; ancho total de una línea incluyendo newline
   967 000006F0 48F7E3                      mul rbx                     ; multiplicar por la fila central
   968 000006F3 4801D8                      add rax, rbx                ; añadir el offset horizontal
   969                                      
   970                                      ; Escribir "NIVEL " en la posición calculada
   971 000006F6 488DB8[000A0000]            lea rdi, [board + rax]
   972 000006FD 48BE-                       mov rsi, level_msg
   972 000006FF [2414000000000000] 
   973 00000707 B906000000                  mov rcx, level_msg_len
   974 0000070C F3A4                        rep movsb
   975                                      
   976                                      ; Escribir el número del nivel
   977 0000070E 8A05(A4140000)              mov al, [current_level]
   978 00000714 0430                        add al, '0'                 ; convertir a ASCII
   979 00000716 8807                        mov [rdi], al
   980                                      
   981                                      ; Mostrar el board con el mensaje
   982                                      print board, board_size
    82 00000718 B801000000          <1>  mov eax, sys_write
    83 0000071D BF01000000          <1>  mov edi, 1
    84 00000722 48BE-               <1>  mov rsi, %1
    84 00000724 [000A000000000000]  <1>
    85 0000072C BA000A0000          <1>  mov edx, %2
    86 00000731 0F05                <1>  syscall
   983                                      
   984                                      ; Esperar un segundo
   985 00000733 B823000000                  mov rax, sys_nanosleep
   986 00000738 48BF-                       mov rdi, level_display_time
   986 0000073A [2F14000000000000] 
   987 00000742 4831F6                      xor rsi, rsi
   988 00000745 0F05                        syscall
   989                                      
   990 00000747 5D                          pop rbp
   991 00000748 C3                          ret
   992                                  
   993                                  ; Función para inicializar un tablero vacío
   994                                  init_empty_board:
   995 00000749 56                          push rsi
   996 0000074A 57                          push rdi
   997 0000074B 51                          push rcx
   998 0000074C 50                          push rax
   999                                  
  1000 0000074D 488D35(00000000)            lea rsi, [board_template]   ; Copiar la plantilla del tablero
  1001 00000754 488D3D(000A0000)            lea rdi, [board]            ; Destino: el tablero actual
  1002 0000075B B9000A0000                  mov rcx, board_template_size
  1003 00000760 F3A4                        rep movsb                   ; Copiar el tablero
  1004                                  
  1005 00000762 58                          pop rax
  1006 00000763 59                          pop rcx
  1007 00000764 5F                          pop rdi
  1008 00000765 5E                          pop rsi
  1009 00000766 C3                          ret
  1010                                  
  1011                                  
  1012                                  init_level:
  1013                                      ; 1) Copiamos board_template en board para que quede "virgen"
  1014 00000767 C605(35150000)00            mov byte [destroyed_blocks], 0 
  1015 0000076E E8D6FFFFFF                  call init_empty_board
  1016 00000773 E840FFFFFF                  call display_level_number
  1017 00000778 E8E5050000                  call init_enemies
  1018                                      
  1019 0000077D 56                          push rsi
  1020 0000077E 57                          push rdi
  1021 0000077F 51                          push rcx
  1022 00000780 50                          push rax
  1023                                  
  1024 00000781 488D35(00000000)            lea rsi, [board_template]
  1025 00000788 488D3D(000A0000)            lea rdi, [board]
  1026 0000078F B9000A0000                  mov rcx, board_template_size
  1027 00000794 F3A4                        rep movsb                 ; Copiamos la plantilla a board
  1028                                  
  1029 00000796 58                          pop rax
  1030 00000797 59                          pop rcx
  1031 00000798 5F                          pop rdi
  1032 00000799 5E                          pop rsi
  1033                                  
  1034 0000079A B90A000000                  mov rcx, 10
  1035 0000079F 4831C0                      xor rax, rax
  1036 000007A2 488D3D(D8150000)            lea rdi, [enemy_spawns_triggered]
  1037 000007A9 F3AA                        rep stosb      
  1038                                  
  1039                                      ; Verificar el nivel actual y cargar los bloques correspondientes
  1040 000007AB 803D(A4140000)01            cmp byte [current_level], 1
  1041 000007B2 7431                        je .level1
  1042 000007B4 803D(A4140000)02            cmp byte [current_level], 2
  1043 000007BB 7454                        je .level2
  1044 000007BD 803D(A4140000)03            cmp byte [current_level], 3
  1045 000007C4 7477                        je .level3
  1046 000007C6 803D(A4140000)04            cmp byte [current_level], 4
  1047 000007CD 0F8492000000                je .level4
  1048 000007D3 803D(A4140000)05            cmp byte [current_level], 5
  1049 000007DA 0F84AD000000                je .level5
  1050 000007E0 E9D0000000                  jmp .done
  1051                                  
  1052                                  
  1053                                  
  1054                                      .level1:
  1055 000007E5 C605(A5140000)03                mov byte [blocks_remaining], level1_blocks_count
  1056 000007EC 4831C9                          xor rcx, rcx             
  1057                                          .init_loop1:
  1058 000007EF 4883F903                            cmp rcx, level1_blocks_count
  1059 000007F3 0F8DBC000000                        jge .done
  1060 000007F9 4889C8                              mov rax, rcx         
  1061 000007FC 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1062 00000800 8A90[A9140000]                      mov dl, byte [level1_blocks + rax + 3]  
  1063 00000806 8891[C9140000]                      mov byte [block_states + rcx], dl
  1064 0000080C 48FFC1                              inc rcx
  1065 0000080F EBDE                                jmp .init_loop1
  1066                                  
  1067                                      .level2:
  1068 00000811 C605(A5140000)01                mov byte [blocks_remaining], level2_blocks_count
  1069 00000818 4831C9                          xor rcx, rcx             
  1070                                          .init_loop2:
  1071 0000081B 4883F901                            cmp rcx, level2_blocks_count
  1072 0000081F 0F8D90000000                        jge .done
  1073 00000825 4889C8                              mov rax, rcx         
  1074 00000828 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1075 0000082C 8A90[B8140000]                      mov dl, byte [level2_blocks + rax + 3]  
  1076 00000832 8891[C9140000]                      mov byte [block_states + rcx], dl
  1077 00000838 48FFC1                              inc rcx
  1078 0000083B EBDE                                jmp .init_loop2
  1079                                      .level3:
  1080 0000083D C605(A5140000)01                mov byte [blocks_remaining], level3_blocks_count
  1081 00000844 4831C9                          xor rcx, rcx             
  1082                                          .init_loop3:
  1083 00000847 4883F901                            cmp rcx, level3_blocks_count
  1084 0000084B 7D68                                jge .done
  1085 0000084D 4889C8                              mov rax, rcx         
  1086 00000850 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1087 00000854 8A90[BD140000]                      mov dl, byte [level3_blocks + rax + 3]  
  1088 0000085A 8891[C9140000]                      mov byte [block_states + rcx], dl
  1089 00000860 48FFC1                              inc rcx
  1090 00000863 EBE2                                jmp .init_loop3
  1091                                  
  1092                                      .level4:
  1093 00000865 C605(A5140000)01                mov byte [blocks_remaining], level4_blocks_count
  1094 0000086C 4831C9                          xor rcx, rcx             
  1095                                          .init_loop4:
  1096 0000086F 4883F901                            cmp rcx, level4_blocks_count
  1097 00000873 7D40                                jge .done
  1098 00000875 4889C8                              mov rax, rcx         
  1099 00000878 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1100 0000087C 8A90[C2140000]                      mov dl, byte [level4_blocks + rax + 3]  
  1101 00000882 8891[C9140000]                      mov byte [block_states + rcx], dl
  1102 00000888 48FFC1                              inc rcx
  1103 0000088B EBE2                                jmp .init_loop4
  1104                                  
  1105                                      .level5:
  1106 0000088D C605(A5140000)01                mov byte [blocks_remaining], level5_blocks_count
  1107 00000894 4831C9                          xor rcx, rcx             
  1108                                          .init_loop5:
  1109 00000897 4883F901                            cmp rcx, level5_blocks_count
  1110 0000089B 7D18                                jge .done
  1111 0000089D 4889C8                              mov rax, rcx         
  1112 000008A0 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1113 000008A4 8A90[C7140000]                      mov dl, byte [level5_blocks + rax + 3]  
  1114 000008AA 8891[C9140000]                      mov byte [block_states + rcx], dl
  1115 000008B0 48FFC1                              inc rcx
  1116 000008B3 EBE2                                jmp .init_loop5
  1117                                      .done:
  1118 000008B5 C3                              ret
  1119                                  
  1120                                  
  1121                                  ; Función para verificar y manejar la transición de nivel
  1122                                  check_level_complete:
  1123                                      ; Verificar si quedan bloques
  1124 000008B6 803D(A5140000)00            cmp byte [blocks_remaining], 0
  1125 000008BD 753C                        jne .not_complete
  1126                                      
  1127                                      ; Incrementar el nivel
  1128 000008BF FE05(A4140000)              inc byte [current_level]
  1129                                      
  1130                                      ; Verificar si hemos completado todos los niveles (asumiendo 2 niveles por ahora)
  1131 000008C5 803D(A4140000)06            cmp byte [current_level], 6
  1132 000008CC 742E                        je game_win
  1133                                      
  1134                                      ; Reinicializar el juego para el siguiente nivel
  1135 000008CE E894FEFFFF                  call init_level
  1136                                      
  1137                                      ; Reinicializar la posición de la bola y la paleta
  1138 000008D3 48C705(4F140000)28-         mov qword [ball_x_pos], 40
  1138 000008DB 000000             
  1139 000008DE 48C705(57140000)1C-         mov qword [ball_y_pos], 28
  1139 000008E6 000000             
  1140 000008E9 C605(6F140000)00            mov byte [ball_moving], 0
  1141 000008F0 48C705(3F140000)-           mov qword [pallet_position], board + 40 + 29 * (column_cells + 2)
  1141 000008F7 [38130000]         
  1142                                      
  1143                                      .not_complete:
  1144 000008FB C3                              ret
  1145                                  
  1146                                      ; Nueva función para manejar la victoria del juego
  1147                                  game_win:
  1148                                      ; Limpiar la pantalla primero
  1149                                      print clear, clear_length
    82 000008FC B801000000          <1>  mov eax, sys_write
    83 00000901 BF01000000          <1>  mov edi, 1
    84 00000906 48BE-               <1>  mov rsi, %1
    84 00000908 [1000000000000000]  <1>
    85 00000910 BA07000000          <1>  mov edx, %2
    86 00000915 0F05                <1>  syscall
  1150                                      
  1151                                      ; Mensaje de victoria
  1152 00000917 488B05(2D150000)            mov rax, [current_score]    ; Obtener el puntaje final
  1153 0000091E 48BF-                       mov rdi, number_buffer      ; Convertir a string
  1153 00000920 [3615000000000000] 
  1154 00000928 E8B4010000                  call number_to_string
  1155                                      
  1156                                      ; Definir mensaje de victoria
  1157                                      section .data
  1158 000017CC C2A146656C69636964-             win_msg: db "¡Felicidades! ¡Has ganado!", 0xA, 0xD
  1158 000017D5 616465732120C2A148-
  1158 000017DE 61732067616E61646F-
  1158 000017E7 210A0D             
  1159                                          win_msg_len: equ $ - win_msg
  1160 000017EA 50756E74616A652066-             score_msg: db "Puntaje final: "
  1160 000017F3 696E616C3A20       
  1161                                          score_msg_len: equ $ - score_msg
  1162                                      section .text
  1163                                      
  1164                                      ; Imprimir mensajes
  1165                                      print win_msg, win_msg_len
    82 0000092D B801000000          <1>  mov eax, sys_write
    83 00000932 BF01000000          <1>  mov edi, 1
    84 00000937 48BE-               <1>  mov rsi, %1
    84 00000939 [CC17000000000000]  <1>
    85 00000941 BA1E000000          <1>  mov edx, %2
    86 00000946 0F05                <1>  syscall
  1166                                      print score_msg, score_msg_len
    82 00000948 B801000000          <1>  mov eax, sys_write
    83 0000094D BF01000000          <1>  mov edi, 1
    84 00000952 48BE-               <1>  mov rsi, %1
    84 00000954 [EA17000000000000]  <1>
    85 0000095C BA0F000000          <1>  mov edx, %2
    86 00000961 0F05                <1>  syscall
  1167                                      print number_buffer, 20
    82 00000963 B801000000          <1>  mov eax, sys_write
    83 00000968 BF01000000          <1>  mov edi, 1
    84 0000096D 48BE-               <1>  mov rsi, %1
    84 0000096F [3615000000000000]  <1>
    85 00000977 BA14000000          <1>  mov edx, %2
    86 0000097C 0F05                <1>  syscall
  1168                                      
  1169                                      ; Esperar un momento antes de salir
  1170 0000097E 48C70577F6FFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  1170 00000987 0000               
  1171 00000989 48C70574F6FFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  1171 00000992 0000               
  1172                                      sleeptime
    98 00000994 B823000000          <1>  mov eax, sys_nanosleep
    99 00000999 48BF-               <1>  mov rdi, timespec
    99 0000099B [0000000000000000]  <1>
   100 000009A3 31F6                <1>  xor esi, esi
   101 000009A5 0F05                <1>  syscall
  1173                                      
  1174 000009A7 E913090000                  jmp exit
  1175                                  
  1176                                  ; Función para imprimir los bloques
  1177                                  ; Función modificada para imprimir bloques
  1178                                  
  1179                                  ; Primero, agreguemos una función para obtener el puntero a los bloques del nivel actual
  1180                                  get_current_level_blocks:
  1181 000009AC 803D(A4140000)01            cmp byte [current_level], 1
  1182 000009B3 7428                        je .level1
  1183 000009B5 803D(A4140000)02            cmp byte [current_level], 2
  1184 000009BC 7427                        je .level2
  1185 000009BE 803D(A4140000)03            cmp byte [current_level], 3
  1186 000009C5 7426                        je .level3
  1187 000009C7 803D(A4140000)04            cmp byte [current_level], 4
  1188 000009CE 7425                        je .level4
  1189 000009D0 803D(A4140000)05            cmp byte [current_level], 5
  1190 000009D7 7424                        je .level5
  1191                                      ; Si llegamos aquí, hay un error en el nivel
  1192 000009D9 4831C0                      xor rax, rax
  1193 000009DC C3                          ret
  1194                                  
  1195                                      .level1:
  1196 000009DD 488D05(A6140000)                lea rax, [level1_blocks]
  1197 000009E4 C3                              ret
  1198                                      .level2:
  1199 000009E5 488D05(B5140000)                lea rax, [level2_blocks]
  1200 000009EC C3                              ret
  1201                                      .level3:
  1202 000009ED 488D05(BA140000)                lea rax, [level3_blocks]
  1203 000009F4 C3                              ret
  1204                                      .level4:
  1205 000009F5 488D05(BF140000)                lea rax, [level4_blocks]
  1206 000009FC C3                              ret
  1207                                      .level5:
  1208 000009FD 488D05(C4140000)                lea rax, [level5_blocks]
  1209 00000A04 C3                              ret
  1210                                  ; Función para obtener la cantidad de bloques del nivel actual
  1211                                  get_current_level_count:
  1212 00000A05 803D(A4140000)01            cmp byte [current_level], 1
  1213 00000A0C 7428                        je .level1
  1214 00000A0E 803D(A4140000)02            cmp byte [current_level], 2
  1215 00000A15 7425                        je .level2
  1216 00000A17 803D(A4140000)03            cmp byte [current_level], 3
  1217 00000A1E 7422                        je .level3
  1218 00000A20 803D(A4140000)04            cmp byte [current_level], 4
  1219 00000A27 741F                        je .level4
  1220 00000A29 803D(A4140000)05            cmp byte [current_level], 5
  1221 00000A30 741C                        je .level5
  1222                                      ; Si llegamos aquí, hay un error en el nivel
  1223 00000A32 4831C0                      xor rax, rax
  1224 00000A35 C3                          ret
  1225                                  
  1226                                      .level1:
  1227 00000A36 B803000000                      mov rax, level1_blocks_count
  1228 00000A3B C3                              ret
  1229                                      .level2:
  1230 00000A3C B801000000                      mov rax, level2_blocks_count
  1231 00000A41 C3                              ret
  1232                                      .level3:
  1233 00000A42 B801000000                      mov rax, level3_blocks_count
  1234 00000A47 C3                              ret
  1235                                      .level4:
  1236 00000A48 B801000000                      mov rax, level4_blocks_count
  1237 00000A4D C3                              ret
  1238                                      .level5:
  1239 00000A4E B801000000                      mov rax, level5_blocks_count
  1240 00000A53 C3                              ret
  1241                                  
  1242                                  
  1243                                  print_blocks:
  1244 00000A54 55                          push rbp
  1245 00000A55 4889E5                      mov rbp, rsp
  1246                                      
  1247                                      ; Obtener puntero a los bloques del nivel actual
  1248 00000A58 E84FFFFFFF                  call get_current_level_blocks
  1249 00000A5D 4989C5                      mov r13, rax                  ; Guardar puntero a los bloques en r13
  1250                                      
  1251                                      ; Obtener cantidad de bloques del nivel actual
  1252 00000A60 E8A0FFFFFF                  call get_current_level_count
  1253 00000A65 4989C6                      mov r14, rax                  ; Guardar cantidad de bloques en r14
  1254                                      
  1255 00000A68 4D31E4                      xor r12, r12                  ; Índice del bloque actual
  1256                                      
  1257                                      .print_loop:
  1258 00000A6B 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
  1259 00000A6E 7D6F                            jge .end
  1260                                          
  1261                                          ; Verificar si el bloque está activo
  1262 00000A70 490FB68424-                     movzx rax, byte [block_states + r12]
  1262 00000A75 [C9140000]         
  1263 00000A79 4885C0                          test rax, rax
  1264 00000A7C 745C                            jz .next_block
  1265                                          
  1266                                          ; Obtener posición y tipo del bloque usando r13
  1267 00000A7E 4C89E0                          mov rax, r12
  1268 00000A81 486BC005                        imul rax, 5
  1269 00000A85 4C01E8                          add rax, r13
  1270 00000A88 448A00                          mov r8b, [rax]        ; X position
  1271 00000A8B 448A4801                        mov r9b, [rax + 1]    ; Y position
  1272 00000A8F 448A5002                        mov r10b, [rax + 2]   ; Tipo de bloque
  1273                                  
  1274                                          ; El resto de la lógica de impresión permanece igual
  1275 00000A93 4D0FB6C0                        movzx r8, r8b
  1276 00000A97 4D0FB6C9                        movzx r9, r9b
  1277 00000A9B 4981C0[000A0000]                add r8, board
  1278 00000AA2 B850000000                      mov rax, column_cells + 2
  1279 00000AA7 49F7E1                          mul r9
  1280 00000AAA 4901C0                          add r8, rax
  1281                                          
  1282 00000AAD B906000000                      mov rcx, block_length
  1283 00000AB2 48BE-                           mov rsi, block_type_1
  1283 00000AB4 [8014000000000000] 
  1284 00000ABC 490FB6C2                        movzx rax, r10b
  1285 00000AC0 48FFC8                          dec rax
  1286 00000AC3 486BC006                        imul rax, block_length
  1287 00000AC7 4801C6                          add rsi, rax
  1288                                          
  1289                                      .print_block_chars:
  1290 00000ACA 8A06                            mov al, [rsi]
  1291 00000ACC 418800                          mov [r8], al
  1292 00000ACF 48FFC6                          inc rsi
  1293 00000AD2 49FFC0                          inc r8
  1294 00000AD5 48FFC9                          dec rcx
  1295 00000AD8 75F0                            jnz .print_block_chars
  1296                                          
  1297                                      .next_block:
  1298 00000ADA 49FFC4                          inc r12
  1299 00000ADD EB8C                            jmp .print_loop
  1300                                          
  1301                                      .end:
  1302 00000ADF 5D                              pop rbp
  1303 00000AE0 C3                              ret
  1304                                  
  1305                                  ; Función para convertir número a string
  1306                                  ; Input: RAX = número a convertir
  1307                                  ; RDI = buffer donde escribir el string
  1308                                  number_to_string:
  1309 00000AE1 53                          push rbx
  1310 00000AE2 52                          push rdx
  1311 00000AE3 56                          push rsi
  1312 00000AE4 BB0A000000                  mov rbx, 10          ; Divisor
  1313 00000AE9 B900000000                  mov rcx, 0          ; Contador de dígitos
  1314                                      
  1315                                      ; Si el número es 0, manejarlo especialmente
  1316 00000AEE 4885C0                      test rax, rax
  1317 00000AF1 7509                        jnz .convert_loop
  1318 00000AF3 C60730                      mov byte [rdi], '0'
  1319 00000AF6 C6470100                    mov byte [rdi + 1], 0
  1320 00000AFA EB20                        jmp .end
  1321                                      
  1322                                      .convert_loop:
  1323 00000AFC 4831D2                          xor rdx, rdx    ; Limpiar RDX para la división
  1324 00000AFF 48F7F3                          div rbx         ; RAX/10, cociente en RAX, residuo en RDX
  1325 00000B02 80C230                          add dl, '0'     ; Convertir a ASCII
  1326 00000B05 52                              push rdx        ; Guardar el dígito
  1327 00000B06 48FFC1                          inc rcx         ; Incrementar contador
  1328 00000B09 4885C0                          test rax, rax   ; Verificar si quedan más dígitos
  1329 00000B0C 75EE                            jnz .convert_loop
  1330                                          
  1331                                      .write_loop:
  1332 00000B0E 5A                              pop rdx         ; Obtener dígito
  1333 00000B0F 8817                            mov [rdi], dl   ; Escribir al buffer
  1334 00000B11 48FFC7                          inc rdi         ; Siguiente posición
  1335 00000B14 48FFC9                          dec rcx         ; Decrementar contador
  1336 00000B17 75F5                            jnz .write_loop
  1337                                          
  1338 00000B19 C60700                      mov byte [rdi], 0   ; Null terminator
  1339                                      
  1340                                      .end:
  1341 00000B1C 5E                          pop rsi
  1342 00000B1D 5A                          pop rdx
  1343 00000B1E 5B                          pop rbx
  1344 00000B1F C3                          ret
  1345                                  
  1346                                  ; Función para imprimir los labels
  1347                                  print_labels:
  1348 00000B20 55                          push rbp
  1349 00000B21 4889E5                      mov rbp, rsp
  1350                                  
  1351                                      ; Crear buffer temporal
  1352 00000B24 4883EC20                    sub rsp, 32
  1353                                  
  1354                                      ; Copiar labels a buffer temporal
  1355 00000B28 4889E7                      mov rdi, rsp
  1356 00000B2B 488D35(E2150000)            lea rsi, [score_label]
  1357 00000B32 B917000000                  mov rcx, score_label_len
  1358 00000B37 F3A4                        rep movsb
  1359                                  
  1360                                      ; Convertir score a string
  1361 00000B39 488B05(2D150000)            mov rax, [current_score]
  1362 00000B40 48BF-                       mov rdi, number_buffer
  1362 00000B42 [3615000000000000] 
  1363 00000B4A E892FFFFFF                  call number_to_string
  1364                                  
  1365                                      ; Calcular longitud del número
  1366 00000B4F B900000000                  mov rcx, 0
  1367 00000B54 48BF-                       mov rdi, number_buffer
  1367 00000B56 [3615000000000000] 
  1368                                      .count_loop:
  1369 00000B5E 803C0F00                        cmp byte [rdi + rcx], 0
  1370 00000B62 7405                            je .count_done
  1371 00000B64 48FFC1                          inc rcx
  1372 00000B67 EBF5                            jmp .count_loop
  1373                                      .count_done:
  1374                                  
  1375                                      ; Insertar el número en la posición correcta, alineado a la derecha
  1376 00000B69 4889E7                      mov rdi, rsp
  1377 00000B6C 4883C70A                    add rdi, score_pos           ; Moverse a la posición del número
  1378 00000B70 BE0A000000                  mov rsi, 10                  ; Espacio reservado para el número
  1379 00000B75 4829CE                      sub rsi, rcx                 ; Calcular padding necesario
  1380                                      .pad_loop:
  1381 00000B78 4885F6                          test rsi, rsi
  1382 00000B7B 740B                            jz .pad_done
  1383 00000B7D C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  1384 00000B80 48FFC7                          inc rdi
  1385 00000B83 48FFCE                          dec rsi
  1386 00000B86 EBF0                            jmp .pad_loop
  1387                                      .pad_done:
  1388                                  
  1389                                      ; Copiar el número
  1390 00000B88 48BE-                       mov rsi, number_buffer
  1390 00000B8A [3615000000000000] 
  1391 00000B92 F3A4                        rep movsb
  1392                                  
  1393                                      ; Imprimir el buffer completo
  1394                                      print rsp, score_label_len
    82 00000B94 B801000000          <1>  mov eax, sys_write
    83 00000B99 BF01000000          <1>  mov edi, 1
    84 00000B9E 4889E6              <1>  mov rsi, %1
    85 00000BA1 BA17000000          <1>  mov edx, %2
    86 00000BA6 0F05                <1>  syscall
  1395                                  
  1396                                      ; Repetir proceso para bloques destruidos
  1397 00000BA8 4889E7                      mov rdi, rsp
  1398 00000BAB 488D35(F9150000)            lea rsi, [blocks_label]
  1399 00000BB2 B91B000000                  mov rcx, blocks_label_len
  1400 00000BB7 F3A4                        rep movsb
  1401                                  
  1402                                      ; Verificar que el `[` esté en su posición correcta
  1403 00000BB9 4889E7                      mov rdi, rsp
  1404 00000BBC 4883C713                    add rdi, blocks_pos - 1  ; Posición exacta donde debe ir el '['
  1405 00000BC0 C6075B                      mov byte [rdi], '['      ; Garantizar que el `[` esté presente
  1406                                  
  1407                                      ; Convertir bloques destruidos a string
  1408 00000BC3 480FB605(35150000)          movzx rax, byte [destroyed_blocks]
  1409 00000BCB 48BF-                       mov rdi, number_buffer
  1409 00000BCD [3615000000000000] 
  1410 00000BD5 E807FFFFFF                  call number_to_string
  1411                                  
  1412                                      ; Calcular longitud del número
  1413 00000BDA B900000000                  mov rcx, 0
  1414 00000BDF 48BF-                       mov rdi, number_buffer
  1414 00000BE1 [3615000000000000] 
  1415                                      .count_loop2:
  1416 00000BE9 803C0F00                        cmp byte [rdi + rcx], 0
  1417 00000BED 7405                            je .count_done2
  1418 00000BEF 48FFC1                          inc rcx
  1419 00000BF2 EBF5                            jmp .count_loop2
  1420                                      .count_done2:
  1421                                  
  1422                                      ; Insertar el número en la posición correcta, alineado a la derecha
  1423 00000BF4 4889E7                      mov rdi, rsp
  1424 00000BF7 4883C714                    add rdi, blocks_pos         ; Moverse a la posición del número
  1425 00000BFB BE03000000                  mov rsi, 3                  ; Espacio reservado para el número
  1426 00000C00 4829CE                      sub rsi, rcx                ; Calcular padding necesario
  1427                                      .pad_loop2:
  1428 00000C03 4885F6                          test rsi, rsi
  1429 00000C06 740B                            jz .pad_done2
  1430 00000C08 C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  1431 00000C0B 48FFC7                          inc rdi
  1432 00000C0E 48FFCE                          dec rsi
  1433 00000C11 EBF0                            jmp .pad_loop2
  1434                                      .pad_done2:
  1435                                  
  1436                                      ; Copiar el número
  1437 00000C13 48BE-                       mov rsi, number_buffer
  1437 00000C15 [3615000000000000] 
  1438 00000C1D F3A4                        rep movsb
  1439                                  
  1440                                      ; Imprimir el buffer completo
  1441                                      print rsp, blocks_label_len
    82 00000C1F B801000000          <1>  mov eax, sys_write
    83 00000C24 BF01000000          <1>  mov edi, 1
    84 00000C29 4889E6              <1>  mov rsi, %1
    85 00000C2C BA1B000000          <1>  mov edx, %2
    86 00000C31 0F05                <1>  syscall
  1442                                  
  1443                                      ; Restaurar stack
  1444 00000C33 4883C420                    add rsp, 32
  1445 00000C37 5D                          pop rbp
  1446 00000C38 C3                          ret
  1447                                  
  1448                                  
  1449                                  ; Función modificada para detectar colisión
  1450                                  ; Función mejorada para detectar colisión y manejar la física
  1451                                  ; Función corregida para manejar colisiones con bloques completos
  1452                                  ;---------------------------------------------------------
  1453                                  ; check_block_collision:
  1454                                  ;   Detecta si en la posición r10 (que apunta a board[])
  1455                                  ;   hay un bloque ("UUUU","OOOO","DDDD","LLLL","VVVV","8888").
  1456                                  ;   De ser así, localiza qué bloque es, lo "destruye" y
  1457                                  ;   retorna 1 para indicar colisión. Si no encuentra bloque,
  1458                                  ;   retorna 0.
  1459                                  ;---------------------------------------------------------
  1460                                  ;--------------------------------------
  1461                                  ; check_block_collision
  1462                                  ;--------------------------------------
  1463                                  ; Actualizar check_block_collision para usar el nivel actual
  1464                                  check_block_collision:
  1465 00000C39 55                          push rbp
  1466 00000C3A 4889E5                      mov rbp, rsp
  1467                                  
  1468                                      ; Almacenar el carácter en la posición r10 (pos. de la bola en board[])
  1469 00000C3D 418A02                      mov al, [r10]
  1470                                  
  1471                                      ; Verificar si el carácter es un bloque
  1472 00000C40 3C55                        cmp al, 'U'  
  1473 00000C42 7419                        je .possible
  1474 00000C44 3C4F                        cmp al, 'O'  
  1475 00000C46 7415                        je .possible
  1476 00000C48 3C44                        cmp al, 'D'  
  1477 00000C4A 7411                        je .possible
  1478 00000C4C 3C4C                        cmp al, 'L'  
  1479 00000C4E 740D                        je .possible
  1480 00000C50 3C56                        cmp al, 'V'  
  1481 00000C52 7409                        je .possible
  1482 00000C54 3C38                        cmp al, '8'  
  1483 00000C56 7405                        je .possible
  1484                                  
  1485                                      ; No es bloque, salir
  1486 00000C58 4831C0                      xor rax, rax
  1487 00000C5B 5D                          pop rbp
  1488 00000C5C C3                          ret
  1489                                  
  1490                                  .possible:
  1491 00000C5D 53                          push rbx
  1492 00000C5E 57                          push rdi
  1493 00000C5F 56                          push rsi
  1494 00000C60 4154                        push r12
  1495 00000C62 4155                        push r13
  1496 00000C64 4156                        push r14
  1497 00000C66 4157                        push r15
  1498                                  
  1499                                      ; 1) Obtener base de los bloques del nivel actual
  1500 00000C68 E83FFDFFFF                  call get_current_level_blocks
  1501 00000C6D 4989C5                      mov r13, rax  ; (r13) = base de levelX_blocks
  1502                                  
  1503                                      ; 2) Obtener la cantidad de bloques
  1504 00000C70 E890FDFFFF                  call get_current_level_count
  1505 00000C75 4989C6                      mov r14, rax
  1506                                  
  1507 00000C78 4D31E4                      xor r12, r12  ; Índice del bloque actual
  1508                                  
  1509                                  .find_block_loop:
  1510 00000C7B 4D39F4                      cmp r12, r14
  1511 00000C7E 0F8DCE000000                jge .no_block_found  ; Se acabaron los bloques
  1512                                  
  1513                                      ; Calcular puntero base del bloque actual en levelX_blocks
  1514 00000C84 4C89E0                      mov rax, r12
  1515 00000C87 486BC005                    imul rax, 5            ; (x, y, tipo, durabilidad_inicial, letra)
  1516 00000C8B 4C01E8                      add rax, r13
  1517 00000C8E 4989C7                      mov r15, rax           ; r15 apunta a los datos del bloque actual
  1518                                  
  1519                                      ; --- Aquí la diferencia: la durabilidad no la leemos de [r15+3], sino de block_states[r12]
  1520 00000C91 490FB69C24-                 movzx rbx, byte [block_states + r12]  ; Durabilidad "viva" en block_states
  1520 00000C96 [C9140000]         
  1521 00000C9A 4885DB                      test rbx, rbx
  1522 00000C9D 0F84A7000000                jz .next_block  ; si durabilidad=0 => bloque destruido => ignorar
  1523                                  
  1524                                      ; Obtener coordenadas
  1525 00000CA3 418A17                      mov dl, [r15]         ; x
  1526 00000CA6 418A4F01                    mov cl, [r15 + 1]     ; y
  1527                                  
  1528                                      ; Calcular posición en el board
  1529 00000CAA 488D3D(000A0000)            lea rdi, [board]
  1530 00000CB1 4831C0                      xor rax, rax
  1531 00000CB4 B84E000000                  mov rax, column_cells
  1532 00000CB9 4883C002                    add rax, 2
  1533 00000CBD 480FB6C9                    movzx rcx, cl         ; y
  1534 00000CC1 480FAFC1                    imul rax, rcx
  1535 00000CC5 4801C7                      add rdi, rax
  1536 00000CC8 480FB6C2                    movzx rax, dl         ; x
  1537 00000CCC 4801C7                      add rdi, rax
  1538                                  
  1539                                      ; Guardar la posición base del bloque
  1540 00000CCF 57                          push rdi
  1541                                  
  1542                                      ; Verificar si la bola (r10) está dentro de [rdi .. rdi+block_length)
  1543 00000CD0 4939FA                      cmp r10, rdi
  1544 00000CD3 7274                        jb .skip_collision
  1545 00000CD5 488D5F06                    lea rbx, [rdi + block_length]
  1546 00000CD9 4939DA                      cmp r10, rbx
  1547 00000CDC 736B                        jae .skip_collision
  1548                                  
  1549                                      ; ------- Hay colisión, reducir durabilidad en block_states
  1550 00000CDE 41FE8C24[C9140000]          dec byte [block_states + r12]
  1551                                      ; Volver a cargar durabilidad
  1552 00000CE6 490FB69C24-                 movzx rbx, byte [block_states + r12]
  1552 00000CEB [C9140000]         
  1553 00000CEF 4885DB                      test rbx, rbx
  1554 00000CF2 754D                        jnz .update_display  ; si no llegó a 0 => solo "golpeado"
  1555                                  
  1556                                      ; >>> Llegó a 0 => Bloque destruido
  1557 00000CF4 5F                          pop rdi  ; recuperar puntero base del bloque en board
  1558 00000CF5 B906000000                  mov rcx, block_length
  1559                                  .clear_loop:
  1560 00000CFA C60720                      mov byte [rdi], ' '
  1561 00000CFD 48FFC7                      inc rdi
  1562 00000D00 E2F8                        loop .clear_loop
  1563                                  
  1564                                      ; Dibujar letra del bloque destruido
  1565 00000D02 418A4704                    mov al, [r15 + 4]  ; Obtener la letra asociada
  1566 00000D06 4883EF06                    sub rdi, block_length
  1567 00000D0A 8807                        mov [rdi], al      ; Escribir la letra en la posición inicial
  1568                                      ; Después de escribir la letra en el tablero
  1569 00000D0C 418A4704                    mov al, [r15 + 4]      ; Obtener la letra
  1570 00000D10 4D0FB607                    movzx r8, byte [r15]   ; Posición x del bloque
  1571 00000D14 4D0FB64F01                  movzx r9, byte [r15 + 1] ; Posición y del bloque
  1572 00000D19 E888F6FFFF                  call register_letter
  1573                                      ; Actualizar contadores globales
  1574 00000D1E FE0D(A5140000)              dec byte [blocks_remaining]
  1575 00000D24 FE05(35150000)              inc byte [destroyed_blocks]
  1576                                  
  1577                                      ; Sumar puntos según el tipo
  1578 00000D2A 490FB64702                  movzx rax, byte [r15 + 2]  ; tipo del bloque original
  1579 00000D2F 486BC00A                    imul rax, 10
  1580 00000D33 480105(2D150000)            add [current_score], rax
  1581                                  
  1582 00000D3A B801000000                  mov rax, 1  ; colisión con destrucción
  1583 00000D3F EB14                        jmp .end_pop
  1584                                  
  1585                                  .update_display:
  1586                                      ; => durabilidad >0, se podría actualizar el "look" del bloque
  1587 00000D41 B801000000                  mov rax, 1  ; colisión con "rebote"  
  1588 00000D46 5F                          pop rdi     ; pop que quedó pendiente
  1589 00000D47 EB0C                        jmp .end_pop
  1590                                  
  1591                                  .skip_collision:
  1592 00000D49 5F                          pop rdi     ; si no hubo colisión, quita de la pila
  1593                                  .next_block:
  1594 00000D4A 49FFC4                      inc r12
  1595 00000D4D E929FFFFFF                  jmp .find_block_loop
  1596                                  
  1597                                  .no_block_found:
  1598 00000D52 4831C0                      xor rax, rax  ; 0 => no hubo colisión
  1599                                  
  1600                                  .end_pop:
  1601 00000D55 415F                        pop r15
  1602 00000D57 415E                        pop r14
  1603 00000D59 415D                        pop r13
  1604 00000D5B 415C                        pop r12
  1605 00000D5D 5E                          pop rsi
  1606 00000D5E 5F                          pop rdi
  1607 00000D5F 5B                          pop rbx
  1608 00000D60 5D                          pop rbp
  1609 00000D61 C3                          ret
  1610                                  
  1611                                  
  1612                                  
  1613                                  init_enemies:
  1614 00000D62 55                          push rbp
  1615 00000D63 4889E5                      mov rbp, rsp
  1616                                      ; Reiniciar contadores de movimiento
  1617 00000D66 C605(78150000)00            mov byte [enemy_move_total], 0
  1618 00000D6D C605(79150000)00            mov byte [enemy_target], 0 ; Inicialmente persigue la bola
  1619                                      ; Limpiar estado previo de enemigos
  1620 00000D74 B90A000000                  mov rcx, 10 ; Máximo 10 enemigos
  1621 00000D79 488D3D(4F150000)            lea rdi, [enemies]
  1622 00000D80 30C0                        xor al, al
  1623 00000D82 F3AA                        rep stosb ; Limpiar datos de enemigos
  1624                                      
  1625                                      ; Marcar todos los enemigos como inactivos
  1626 00000D84 488D3D(D8150000)            lea rdi, [enemy_spawns_triggered]
  1627 00000D8B 30C0                        xor al, al
  1628 00000D8D B90A000000                  mov rcx, 10
  1629 00000D92 F3AA                        rep stosb ; Todos los enemigos no han sido activados aún
  1630                                  
  1631 00000D94 5D                          pop rbp
  1632 00000D95 C3                          ret
  1633                                  
  1634                                  
  1635                                  ; Función para mover enemigos
  1636                                  move_enemies:
  1637 00000D96 55                          push rbp
  1638 00000D97 4889E5                      mov rbp, rsp
  1639                                      
  1640                                      ; Incrementar contador de movimiento
  1641 00000D9A FE05(76150000)              inc byte [enemy_move_counter]
  1642 00000DA0 480FB605(76150000)          movzx rax, byte [enemy_move_counter]
  1643 00000DA8 3A05(77150000)              cmp al, [enemy_move_delay]
  1644 00000DAE 0F85AA010000                jne .end
  1645                                      
  1646                                      ; Resetear contador
  1647 00000DB4 C605(76150000)00            mov byte [enemy_move_counter], 0
  1648                                      
  1649 00000DBB 4D31E4                      xor r12, r12                    ; Índice del enemigo
  1650                                      
  1651                                      .enemy_loop:
  1652 00000DBE 4983FC0A                        cmp r12, 10                     ; Máximo 10 enemigos
  1653 00000DC2 0F8D96010000                    jge .end
  1654                                          
  1655                                          ; Calcular offset del enemigo actual
  1656 00000DC8 4C89E0                          mov rax, r12
  1657 00000DCB 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  1658 00000DCF 488DB0[4F150000]                lea rsi, [enemies + rax]
  1659                                          
  1660                                          ; Verificar si el enemigo está activo
  1661 00000DD6 807E0201                        cmp byte [rsi + 2], 1
  1662 00000DDA 0F8576010000                    jne .next_enemy
  1663                                          
  1664                                          ; Obtener posición actual
  1665 00000DE0 4C0FB606                        movzx r8, byte [rsi]            ; X
  1666 00000DE4 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  1667                                          
  1668                                          ; Limpiar posición actual antes de mover
  1669 00000DE9 4150                            push r8
  1670 00000DEB 4151                            push r9
  1671 00000DED B84E000000                      mov rax, column_cells
  1672 00000DF2 4883C002                        add rax, 2
  1673 00000DF6 49F7E1                          mul r9
  1674 00000DF9 4C01C0                          add rax, r8
  1675 00000DFC 488DB8[000A0000]                lea rdi, [board + rax]
  1676 00000E03 C60720                          mov byte [rdi], ' '         ; Limpiar rastro
  1677 00000E06 4159                            pop r9
  1678 00000E08 4158                            pop r8
  1679                                  
  1680                                          ; Determinar comportamiento basado en índice
  1681 00000E0A 4C89E0                          mov rax, r12
  1682 00000E0D 4883E001                        and rax, 1                      ; 0 para índices pares, 1 para impares
  1683 00000E11 4885C0                          test rax, rax
  1684 00000E14 7402                            jz .chase_ball
  1685 00000E16 EB31                            jmp .chase_paddle             ; Si es 1, perseguir paleta
  1686                                          
  1687                                          ; Perseguir bola (comportamiento original)
  1688                                      .chase_ball:
  1689 00000E18 4C8B15(4F140000)                mov r10, [ball_x_pos]
  1690 00000E1F 4D39D0                          cmp r8, r10
  1691 00000E22 0F8F96000000                    jg .move_left
  1692 00000E28 0F8C95000000                    jl .move_right
  1693                                          
  1694 00000E2E 4C8B15(57140000)                mov r10, [ball_y_pos]
  1695 00000E35 4D39D1                          cmp r9, r10
  1696 00000E38 0F8F8A000000                    jg .move_up
  1697 00000E3E 0F8C89000000                    jl .move_down
  1698 00000E44 E9A5000000                      jmp .check_collision
  1699                                          
  1700                                      .chase_paddle:
  1701                                          ; Obtener la posición X actual de la paleta
  1702 00000E49 4C8B15(3F140000)                mov r10, [pallet_position]
  1703 00000E50 4981EA[000A0000]                sub r10, board              ; Convertir a offset relativo
  1704                                          
  1705                                          ; Calcular la posición X real de la paleta
  1706 00000E57 4C89D0                          mov rax, r10
  1707 00000E5A BB4E000000                      mov rbx, column_cells
  1708 00000E5F 4883C302                        add rbx, 2                  ; Añadir newline chars
  1709 00000E63 4831D2                          xor rdx, rdx
  1710 00000E66 48F7F3                          div rbx                     ; rax = y, rdx = x
  1711                                          
  1712                                          ; rdx ahora contiene la posición X de la paleta
  1713                                          ; Añadir la mitad del tamaño de la paleta para apuntar al centro
  1714 00000E69 488B0D(47140000)                mov rcx, [pallet_size]
  1715 00000E70 48D1E9                          shr rcx, 1                  ; Dividir por 2
  1716 00000E73 4801CA                          add rdx, rcx
  1717                                          
  1718                                          ; Comparar con posición X del enemigo y mover gradualmente
  1719 00000E76 4939D0                          cmp r8, rdx
  1720 00000E79 7404                            je .check_y_paddle          ; Si está en la misma X, verificar Y
  1721 00000E7B 7F41                            jg .move_left              ; Si está a la derecha, mover izquierda
  1722 00000E7D 7C44                            jl .move_right             ; Si está a la izquierda, mover derecha
  1723                                  
  1724                                      .check_y_paddle:
  1725                                          ; La Y de la paleta siempre es row_cells - 2
  1726 00000E7F 41BA20000000                    mov r10, row_cells
  1727 00000E85 4983EA02                        sub r10, 2
  1728                                          
  1729                                          ; Comparar con posición Y del enemigo y mover gradualmente
  1730 00000E89 4D39D1                          cmp r9, r10
  1731 00000E8C 7404                            je .no_movement            ; Si está en la misma Y, no mover
  1732 00000E8E 7F38                            jg .move_up               ; Si está abajo, mover arriba
  1733 00000E90 7C3B                            jl .move_down             ; Si está arriba, mover abajo
  1734                                          
  1735                                      .no_movement:
  1736 00000E92 EB5A                            jmp .check_collision
  1737                                  
  1738                                      ; También agregar una nueva sección para el movimiento suave
  1739                                      .smooth_transition:
  1740                                          ; Si el enemigo está muy lejos de su objetivo, limitar el movimiento
  1741 00000E94 8A05(79150000)                  mov al, [enemy_target]
  1742 00000E9A 84C0                            test al, al
  1743 00000E9C 7450                            jz .check_collision        ; Si persigue la bola, movimiento normal
  1744                                          
  1745                                          ; Verificar distancia en X
  1746 00000E9E 4989D2                          mov r10, rdx              ; Posición X objetivo
  1747 00000EA1 4D29C2                          sub r10, r8               ; Calcular diferencia
  1748 00000EA4 4983FA05                        cmp r10, 5               ; Si la diferencia es mayor a 5
  1749 00000EA8 7F08                            jg .limit_right_movement  ; Limitar movimiento a la derecha
  1750 00000EAA 4983FAFB                        cmp r10, -5              ; Si la diferencia es menor a -5
  1751 00000EAE 7C08                            jl .limit_left_movement   ; Limitar movimiento a la izquierda
  1752 00000EB0 EB3C                            jmp .check_collision
  1753                                          
  1754                                      .limit_right_movement:
  1755 00000EB2 4983C002                        add r8, 2                ; Mover solo 2 unidades a la derecha
  1756 00000EB6 EB36                            jmp .check_collision
  1757                                          
  1758                                      .limit_left_movement:
  1759 00000EB8 4983E802                        sub r8, 2                ; Mover solo 2 unidades a la izquierda
  1760 00000EBC EB30                            jmp .check_collision
  1761                                      .move_left:
  1762 00000EBE 49FFC8                          dec r8
  1763 00000EC1 EB0F                            jmp .check_vertical
  1764                                          
  1765                                      .move_right:
  1766 00000EC3 49FFC0                          inc r8
  1767 00000EC6 EB0A                            jmp .check_vertical
  1768                                          
  1769                                      .move_up:
  1770 00000EC8 49FFC9                          dec r9
  1771 00000ECB EB21                            jmp .check_collision
  1772                                          
  1773                                      .move_down:
  1774 00000ECD 49FFC1                          inc r9
  1775 00000ED0 EB1C                            jmp .check_collision
  1776                                          
  1777                                      .check_vertical:
  1778 00000ED2 8A05(79150000)                  mov al, [enemy_target]
  1779 00000ED8 84C0                            test al, al
  1780 00000EDA 0F8569FFFFFF                    jnz .chase_paddle         ; Si persigue paleta, volver a su lógica
  1781 00000EE0 4C8B15(57140000)                mov r10, [ball_y_pos]     ; Si no, seguir persiguiendo la bola
  1782 00000EE7 4D39D1                          cmp r9, r10
  1783 00000EEA 7FDC                            jg .move_up
  1784 00000EEC 7CDF                            jl .move_down
  1785                                          
  1786                                      .check_collision:
  1787                                          ; Verificar colisión con bordes
  1788 00000EEE 4983F801                        cmp r8, 1                       ; Borde izquierdo
  1789 00000EF2 7E62                            jle .next_enemy
  1790 00000EF4 4983F84E                        cmp r8, column_cells
  1791 00000EF8 7D5C                            jge .next_enemy
  1792 00000EFA 4983F901                        cmp r9, 1                       ; Borde superior
  1793 00000EFE 7E56                            jle .next_enemy
  1794 00000F00 4983F920                        cmp r9, row_cells
  1795 00000F04 7D50                            jge .next_enemy
  1796                                          
  1797                                          ; Verificar colisión con bloques antes de moverse
  1798 00000F06 4150                            push r8
  1799 00000F08 4151                            push r9
  1800 00000F0A 4152                            push r10
  1801                                          
  1802                                          ; Calcular posición en el tablero para verificar
  1803 00000F0C B84E000000                      mov rax, column_cells
  1804 00000F11 4883C002                        add rax, 2
  1805 00000F15 49F7E1                          mul r9
  1806 00000F18 4C01C0                          add rax, r8
  1807 00000F1B 4C8D90[000A0000]                lea r10, [board + rax]
  1808                                          
  1809                                          ; Verificar si hay un bloque en la nueva posición
  1810 00000F22 418A02                          mov al, [r10]
  1811 00000F25 3C55                            cmp al, 'U'
  1812 00000F27 7427                            je .invalid_move
  1813 00000F29 3C4F                            cmp al, 'O'
  1814 00000F2B 7423                            je .invalid_move
  1815 00000F2D 3C44                            cmp al, 'D'
  1816 00000F2F 741F                            je .invalid_move
  1817 00000F31 3C4C                            cmp al, 'L'
  1818 00000F33 741B                            je .invalid_move
  1819 00000F35 3C56                            cmp al, 'V'
  1820 00000F37 7417                            je .invalid_move
  1821 00000F39 3C38                            cmp al, '8'
  1822 00000F3B 7413                            je .invalid_move
  1823 00000F3D 3C58                            cmp al, 'X'
  1824 00000F3F 740F                            je .invalid_move
  1825                                          
  1826 00000F41 415A                            pop r10
  1827 00000F43 4159                            pop r9
  1828 00000F45 4158                            pop r8
  1829                                          
  1830                                          ; Guardar nueva posición si es válida
  1831 00000F47 448806                          mov [rsi], r8b
  1832 00000F4A 44884E01                        mov [rsi + 1], r9b
  1833 00000F4E EB06                            jmp .next_enemy
  1834                                          
  1835                                      .invalid_move:
  1836 00000F50 415A                            pop r10
  1837 00000F52 4159                            pop r9
  1838 00000F54 4158                            pop r8
  1839                                          
  1840                                      .next_enemy:
  1841 00000F56 49FFC4                          inc r12
  1842 00000F59 E960FEFFFF                      jmp .enemy_loop
  1843                                          
  1844                                      .end:
  1845 00000F5E 5D                              pop rbp
  1846 00000F5F C3                              ret
  1847                                  
  1848                                  get_current_spawn_points:
  1849 00000F60 55                          push rbp
  1850 00000F61 4889E5                      mov rbp, rsp
  1851                                      
  1852 00000F64 480FB605(A4140000)          movzx rax, byte [current_level]
  1853 00000F6C 48FFC8                      dec rax                         ; Ajustar para índice base 0
  1854 00000F6F 488B04C5[AD150000]          mov rax, [spawn_points_table + rax * 8]
  1855                                      
  1856 00000F77 5D                          pop rbp
  1857 00000F78 C3                          ret
  1858                                  
  1859                                  ; Función para verificar si debe aparecer un nuevo enemigo
  1860                                  check_enemy_spawn:
  1861 00000F79 55                          push rbp
  1862 00000F7A 4889E5                      mov rbp, rsp
  1863                                      
  1864                                      ; Obtener spawn points del nivel actual
  1865 00000F7D E8DEFFFFFF                  call get_current_spawn_points
  1866 00000F82 4989C4                      mov r12, rax                    ; r12 = puntero a spawn points
  1867                                      
  1868                                      ; Obtener cantidad de bloques destruidos
  1869 00000F85 4C0FB62D(35150000)          movzx r13, byte [destroyed_blocks]
  1870                                      
  1871                                      ; Verificar cada punto de spawn
  1872 00000F8D 4831C9                      xor rcx, rcx                    ; Índice del enemigo
  1873                                      
  1874                                      .check_loop:
  1875 00000F90 4883F90A                        cmp rcx, 10                     ; Máximo 10 enemigos
  1876 00000F94 7D4B                            jge .end
  1877                                          
  1878                                          ; Verificar si este spawn point ya fue usado
  1879 00000F96 80B9[D8150000]01                cmp byte [enemy_spawns_triggered + rcx], 1
  1880 00000F9D 743D                            je .next_enemy
  1881                                          
  1882                                          ; Verificar si este enemigo ya está activo
  1883 00000F9F 4889C8                          mov rax, rcx
  1884 00000FA2 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  1885 00000FA6 488DB0[4F150000]                lea rsi, [enemies + rax]
  1886 00000FAD 807E0201                        cmp byte [rsi + 2], 1          ; Verificar si está activo
  1887 00000FB1 7429                            je .next_enemy
  1888                                          
  1889                                          ; Verificar si debemos spawnear este enemigo
  1890 00000FB3 490FB6040C                      movzx rax, byte [r12 + rcx]    ; Obtener punto de spawn
  1891 00000FB8 4939C5                          cmp r13, rax                   ; Comparar con bloques destruidos
  1892 00000FBB 751F                            jne .next_enemy
  1893                                          
  1894                                          ; Marcar este spawn point como usado
  1895 00000FBD C681[D8150000]01                mov byte [enemy_spawns_triggered + rcx], 1
  1896                                          
  1897                                          ; Spawner nuevo enemigo
  1898 00000FC4 C60628                          mov byte [rsi], 40             ; X inicial
  1899 00000FC7 C6460102                        mov byte [rsi + 1], 2          ; Y inicial
  1900 00000FCB C6460201                        mov byte [rsi + 2], 1          ; Activar enemigo
  1901                                          
  1902                                          ; Inicializar comportamiento
  1903 00000FCF 4889C8                          mov rax, rcx
  1904 00000FD2 4883E001                        and rax, 1                     ; Alternar comportamiento basado en índice par/impar
  1905 00000FD6 8805(D7150000)                  mov [current_behavior], al      ; 0 = persigue bola, 1 = persigue paleta
  1906                                          
  1907                                      .next_enemy:
  1908 00000FDC 48FFC1                          inc rcx
  1909 00000FDF EBAF                            jmp .check_loop
  1910                                          
  1911                                      .end:
  1912 00000FE1 5D                              pop rbp
  1913 00000FE2 C3                              ret
  1914                                  
  1915                                  
  1916                                  ; Función para dibujar enemigos
  1917                                  print_enemies:
  1918 00000FE3 55                          push rbp
  1919 00000FE4 4889E5                      mov rbp, rsp
  1920                                      
  1921 00000FE7 4D31E4                      xor r12, r12                    ; Índice del enemigo
  1922                                      
  1923                                      .print_loop:
  1924 00000FEA 4983FC0A                        cmp r12, 10                      ; Máximo 5 enemigos
  1925 00000FEE 7D4B                            jge .end
  1926                                          
  1927                                          ; Calcular offset del enemigo actual
  1928 00000FF0 4C89E0                          mov rax, r12
  1929 00000FF3 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  1930 00000FF7 488DB0[4F150000]                lea rsi, [enemies + rax]
  1931                                          
  1932                                          ; Verificar si el enemigo está activo
  1933 00000FFE 807E0201                        cmp byte [rsi + 2], 1
  1934 00001002 7532                            jne .next_enemy
  1935                                          
  1936                                          ; Calcular posición en el tablero
  1937 00001004 4C0FB606                        movzx r8, byte [rsi]            ; X
  1938 00001008 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  1939                                          
  1940                                          ; Calcular offset en el tablero
  1941 0000100D B84E000000                      mov rax, column_cells
  1942 00001012 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  1943 00001016 49F7E1                          mul r9
  1944 00001019 4C01C0                          add rax, r8
  1945 0000101C 488DB8[000A0000]                lea rdi, [board + rax]
  1946                                          
  1947                                          ; Obtener carácter del enemigo según el nivel
  1948 00001023 480FB605(A4140000)              movzx rax, byte [current_level]
  1949 0000102B 48FFC8                          dec rax                         ; Ajustar para índice base 0
  1950 0000102E 8A80[4A150000]                  mov al, [enemy_chars + rax]
  1951                                          
  1952                                          ; Dibujar enemigo
  1953 00001034 8807                            mov [rdi], al
  1954                                          
  1955                                      .next_enemy:
  1956 00001036 49FFC4                          inc r12
  1957 00001039 EBAF                            jmp .print_loop
  1958                                          
  1959                                      .end:
  1960 0000103B 5D                              pop rbp
  1961 0000103C C3                              ret
  1962                                  
  1963                                  ; Función para verificar colisión con enemigos
  1964                                  ; Función para verificar colisión con enemigos
  1965                                  check_enemy_collision:
  1966 0000103D 55                          push rbp
  1967 0000103E 4889E5                      mov rbp, rsp
  1968                                      
  1969 00001041 4D31E4                      xor r12, r12                    ; Índice del enemigo
  1970 00001044 4831C0                      xor rax, rax                    ; Valor de retorno (0 = no colisión)
  1971                                      
  1972                                      .check_loop:
  1973 00001047 4983FC05                        cmp r12, 5                      ; Máximo 5 enemigos
  1974 0000104B 0F8DE9000000                    jge .end
  1975                                          
  1976                                          ; Calcular offset del enemigo actual
  1977 00001051 4C89E1                          mov rcx, r12
  1978 00001054 486BC903                        imul rcx, 3                     ; Cada enemigo ocupa 3 bytes
  1979 00001058 488DB1[4F150000]                lea rsi, [enemies + rcx]
  1980                                          
  1981                                          ; Verificar si el enemigo está activo
  1982 0000105F 807E0201                        cmp byte [rsi + 2], 1
  1983 00001063 0F85C9000000                    jne .next_enemy
  1984                                          
  1985                                          ; Verificar colisión con la bola
  1986 00001069 4C0FB606                        movzx r8, byte [rsi]            ; X enemigo
  1987 0000106D 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y enemigo
  1988                                          
  1989                                          ; Verificar si la bola está en el rango del enemigo (considerando el enemigo como un área)
  1990 00001072 4C8B15(4F140000)                mov r10, [ball_x_pos]
  1991 00001079 4C8B1D(57140000)                mov r11, [ball_y_pos]
  1992                                          
  1993                                          ; Comprobar colisión vertical (misma columna)
  1994 00001080 4D39C2                          cmp r10, r8
  1995 00001083 7525                            jne .check_horizontal
  1996 00001085 4D29CB                          sub r11, r9
  1997 00001088 4983FB01                        cmp r11, 1
  1998 0000108C 7F1C                            jg .check_horizontal
  1999 0000108E 4983FBFF                        cmp r11, -1
  2000 00001092 7C16                            jl .check_horizontal
  2001                                          
  2002                                          ; Colisión vertical detectada
  2003 00001094 E8A3000000                      call destroy_enemy
  2004 00001099 48F71D(67140000)                neg qword [ball_direction_y]    ; Invertir dirección vertical
  2005 000010A0 B801000000                      mov rax, 1
  2006 000010A5 E990000000                      jmp .end
  2007                                          
  2008                                      .check_horizontal:
  2009                                          ; Comprobar colisión horizontal (misma fila)
  2010 000010AA 4C8B15(4F140000)                mov r10, [ball_x_pos]
  2011 000010B1 4C8B1D(57140000)                mov r11, [ball_y_pos]
  2012 000010B8 4D39CB                          cmp r11, r9
  2013 000010BB 7522                            jne .check_paddle
  2014 000010BD 4D29C2                          sub r10, r8
  2015 000010C0 4983FA01                        cmp r10, 1
  2016 000010C4 7F19                            jg .check_paddle
  2017 000010C6 4983FAFF                        cmp r10, -1
  2018 000010CA 7C13                            jl .check_paddle
  2019                                          
  2020                                          ; Colisión horizontal detectada
  2021 000010CC E86B000000                      call destroy_enemy
  2022 000010D1 48F71D(5F140000)                neg qword [ball_direction_x]    ; Invertir dirección horizontal
  2023 000010D8 B801000000                      mov rax, 1
  2024 000010DD EB5B                            jmp .end
  2025                                          
  2026                                      .check_paddle:
  2027                                          ; Verificar colisión con la paleta
  2028 000010DF 4C8B15(3F140000)                mov r10, [pallet_position]
  2029 000010E6 4981EA[000A0000]                sub r10, board
  2030 000010ED 4C89D0                          mov rax, r10
  2031 000010F0 41BB4E000000                    mov r11, column_cells
  2032 000010F6 4983C302                        add r11, 2
  2033 000010FA 4831D2                          xor rdx, rdx
  2034 000010FD 49F7F3                          div r11                     ; División para obtener la posición Y
  2035 00001100 4989D3                          mov r11, rdx               ; X de la paleta en r11
  2036                                          
  2037 00001103 488B0D(47140000)                mov rcx, [pallet_size]     ; Obtener el tamaño de la paleta
  2038                                          
  2039                                          ; Verificar si el enemigo está en la misma fila que la paleta
  2040 0000110A 41BD20000000                    mov r13, row_cells
  2041 00001110 4983ED02                        sub r13, 2                 ; Y de la paleta
  2042 00001114 4D39E9                          cmp r9, r13               ; Comparar Y del enemigo con Y de la paleta
  2043 00001117 7519                            jne .next_enemy
  2044                                          
  2045                                          ; Verificar si el enemigo está dentro del rango X de la paleta
  2046 00001119 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X inicial de la paleta
  2047 0000111C 7C14                            jl .next_enemy
  2048                                          
  2049 0000111E 4901CB                          add r11, rcx              ; Añadir el tamaño de la paleta
  2050 00001121 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X final de la paleta
  2051 00001124 7F0C                            jg .next_enemy
  2052                                          
  2053                                          ; Si llegamos aquí, hay colisión con la paleta
  2054 00001126 E811000000                      call destroy_enemy        ; Destruir el enemigo
  2055 0000112B B801000000                      mov rax, 1                ; Indicar que hubo colisión
  2056 00001130 EB08                            jmp .end
  2057                                          
  2058                                      .next_enemy:
  2059 00001132 49FFC4                          inc r12
  2060 00001135 E90DFFFFFF                      jmp .check_loop
  2061                                          
  2062                                      .end:
  2063 0000113A 5D                              pop rbp
  2064 0000113B C3                              ret
  2065                                  
  2066                                  ; Función para destruir un enemigo
  2067                                  destroy_enemy:
  2068                                      ; Desactivar enemigo
  2069 0000113C C6460200                    mov byte [rsi + 2], 0   ; Marcar enemigo como inactivo
  2070                                  
  2071                                      ; Sumar puntos por destruir enemigo
  2072 00001140 488B05(6E150000)            mov rax, [enemy_points]
  2073 00001147 480105(2D150000)            add [current_score], rax
  2074                                  
  2075                                      ; No tocar bloques destruidos aquí
  2076 0000114E C3                          ret
  2077                                  
  2078                                  
  2079                                  _start:
  2080 0000114F E8D7EFFFFF              	call canonical_off
  2081 00001154 E8F3000000              	call start_screen
  2082 00001159 E809F6FFFF                  call init_level
  2083 0000115E E8FFFBFFFF                  call init_enemies
  2084 00001163 EB00                    	jmp .main_loop
  2085                                  	
  2086                                  
  2087                                  	.main_loop:
  2088 00001165 E8B6F9FFFF                      call print_labels
  2089 0000116A E8E5F8FFFF                      call print_blocks
  2090 0000116F E8FFF2FFFF                      call move_letters
  2091 00001174 E86FF2FFFF                      call print_letters
  2092 00001179 E896F3FFFF              		call print_pallet
  2093 0000117E E821F4FFFF                      call move_ball
  2094 00001183 E856F1FFFF                      call check_bottom_collision
  2095 00001188 E850F0FFFF                      call print_lives
  2096 0000118D E824F7FFFF                      call check_level_complete
  2097 00001192 E8E2FDFFFF                      call check_enemy_spawn
  2098 00001197 E8FAFBFFFF                      call move_enemies
  2099 0000119C E89CFEFFFF                      call check_enemy_collision
  2100 000011A1 E83DFEFFFF                      call print_enemies
  2101 000011A6 E841F3FFFF              		call print_ball
  2102                                  		print board, board_size				
    82 000011AB B801000000          <1>  mov eax, sys_write
    83 000011B0 BF01000000          <1>  mov edi, 1
    84 000011B5 48BE-               <1>  mov rsi, %1
    84 000011B7 [000A000000000000]  <1>
    85 000011BF BA000A0000          <1>  mov edx, %2
    86 000011C4 0F05                <1>  syscall
  2103                                  		;setnonblocking	
  2104                                  	.read_more:	
  2105                                  		getchar	
    90 000011C6 B800000000          <1>  mov rax, sys_read
    91 000011CB BF00000000          <1>  mov rdi, STDIN_FILENO
    92 000011D0 48BE-               <1>  mov rsi, input_char
    92 000011D2 [0000000000000000]  <1>
    93 000011DA BA01000000          <1>  mov rdx, 1
    94 000011DF 0F05                <1>  syscall
  2106                                  		
  2107 000011E1 4883F801                		cmp rax, 1
  2108 000011E5 7532                        	jne .done
  2109                                  		
  2110 000011E7 8A05(00000000)          		mov al,[input_char]
  2111                                  
  2112 000011ED 3C61                    		cmp al, 'a'
  2113 000011EF 750E                    	    jne .not_left
  2114 000011F1 48C7C7FFFFFFFF          	    mov rdi, left_direction
  2115 000011F8 E832F3FFFF              		call move_pallet
  2116 000011FD EB1A                    	    jmp .done
  2117                                  		
  2118                                  		.not_left:
  2119 000011FF 3C64                    		 	cmp al, 'd'
  2120 00001201 750C                    	    	jne .not_right
  2121 00001203 BF01000000              			mov rdi, right_direction
  2122 00001208 E822F3FFFF              	    	call move_pallet
  2123 0000120D EB0A                        		jmp .done		
  2124                                  
  2125                                  		.not_right:
  2126                                  
  2127 0000120F 3C71                        		cmp al, 'q'
  2128 00001211 0F84A8000000                		je exit
  2129                                  
  2130 00001217 EBAD                    			jmp .read_more
  2131                                  		
  2132                                  		.done:	
  2133                                  			;unsetnonblocking		
  2134                                  			sleeptime	
    98 00001219 B823000000          <1>  mov eax, sys_nanosleep
    99 0000121E 48BF-               <1>  mov rdi, timespec
    99 00001220 [0000000000000000]  <1>
   100 00001228 31F6                <1>  xor esi, esi
   101 0000122A 0F05                <1>  syscall
  2135                                  			print clear, clear_length
    82 0000122C B801000000          <1>  mov eax, sys_write
    83 00001231 BF01000000          <1>  mov edi, 1
    84 00001236 48BE-               <1>  mov rsi, %1
    84 00001238 [1000000000000000]  <1>
    85 00001240 BA07000000          <1>  mov edx, %2
    86 00001245 0F05                <1>  syscall
  2136 00001247 E919FFFFFF                  		jmp .main_loop
  2137                                  
  2138                                  
  2139                                  
  2140                                  start_screen:
  2141                                      print clear, clear_length    ; Limpiamos la pantalla primero
    82 0000124C B801000000          <1>  mov eax, sys_write
    83 00001251 BF01000000          <1>  mov edi, 1
    84 00001256 48BE-               <1>  mov rsi, %1
    84 00001258 [1000000000000000]  <1>
    85 00001260 BA07000000          <1>  mov edx, %2
    86 00001265 0F05                <1>  syscall
  2142                                      print msg1, msg1_length
    82 00001267 B801000000          <1>  mov eax, sys_write
    83 0000126C BF01000000          <1>  mov edi, 1
    84 00001271 48BE-               <1>  mov rsi, %1
    84 00001273 [1700000000000000]  <1>
    85 0000127B BA14010000          <1>  mov edx, %2
    86 00001280 0F05                <1>  syscall
  2143                                      
  2144                                      .wait_for_key:              ; Agregamos una etiqueta para esperar la tecla
  2145                                          getchar                 ; Esperamos una tecla
    90 00001282 B800000000          <1>  mov rax, sys_read
    91 00001287 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 0000128C 48BE-               <1>  mov rsi, input_char
    92 0000128E [0000000000000000]  <1>
    93 00001296 BA01000000          <1>  mov rdx, 1
    94 0000129B 0F05                <1>  syscall
  2146 0000129D 4883F801                        cmp rax, 1             ; Verificamos si se leyó un carácter
  2147 000012A1 75DF                            jne .wait_for_key      ; Si no se leyó, seguimos esperando
  2148                                          
  2149                                      print clear, clear_length   ; Limpiamos la pantalla antes de salir
    82 000012A3 B801000000          <1>  mov eax, sys_write
    83 000012A8 BF01000000          <1>  mov edi, 1
    84 000012AD 48BE-               <1>  mov rsi, %1
    84 000012AF [1000000000000000]  <1>
    85 000012B7 BA07000000          <1>  mov edx, %2
    86 000012BC 0F05                <1>  syscall
  2150 000012BE C3                          ret
  2151                                  
  2152                                  exit: 
  2153 000012BF E8A9EEFFFF              	call canonical_on
  2154 000012C4 B83C000000              	mov    rax, 60
  2155 000012C9 BF00000000                  mov    rdi, 0
  2156 000012CE 0F05                        syscall
  2157                                  
