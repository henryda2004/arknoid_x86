     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  sys_read: equ 0	
     7                                  sys_write:	equ 1
     8                                  sys_nanosleep:	equ 35
     9                                  sys_time:	equ 201
    10                                  sys_fcntl:	equ 72
    11                                  
    12                                  
    13                                  STDIN_FILENO: equ 0
    14                                  
    15                                  F_SETFL:	equ 0x0004
    16                                  O_NONBLOCK: equ 0x0004
    17                                  
    18                                  ;screen clean definition
    19                                  row_cells:	equ 32	; set to any (reasonable) value you wish
    20                                  column_cells: 	equ 80 ; set to any (reasonable) value you wish
    21                                  array_length:	equ row_cells * column_cells + row_cells ; cells are mapped to bytes in the array and a new line char ends each row
    22                                  
    23                                  ;This is regarding the sleep time
    24                                  timespec:
    25 00000000 0000000000000000            tv_sec  dq 0
    26 00000008 00C2EB0B00000000            tv_nsec dq 200000000
    27                                  
    28                                  
    29                                  ;This is for cleaning up the screen
    30 00000010 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"
    31                                  clear_length:	equ $-clear
    32                                  	
    33                                  	
    34                                  
    35                                  ; Start Message
    36 00000017 202020202020202054-     msg1: db "        TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    36 00000020 45434E4F4C4F474943-
    36 00000029 4F20444520434F5354-
    36 00000032 412052494341202020-
    36 0000003B 20202020200A0D     
    37 00000042 202020202020202041-     msg2: db "        ARQUITECTURA DE COMPUTADORAS I        ", 0xA, 0xD
    37 0000004B 525155495445435455-
    37 00000054 524120444520434F4D-
    37 0000005D 50555441444F524153-
    37 00000066 204920202020202020-
    37 0000006F 200A0D             
    38 00000072 202020202020202045-     msg3: db "        ESTUDIANTE: HENRY NUNEZ PEREZ        ", 0xA, 0xD
    38 0000007B 5354554449414E5445-
    38 00000084 3A2048454E5259204E-
    38 0000008D 554E455A2050455245-
    38 00000096 5A2020202020202020-
    38 0000009F 0A0D               
    39 000000A1 202020202020202050-     msg4: db "        PROFESOR: ERNESTO RIVERA ALVARADO        ", 0xA, 0xD
    39 000000AA 524F4645534F523A20-
    39 000000B3 45524E4553544F2052-
    39 000000BC 495645524120414C56-
    39 000000C5 415241444F20202020-
    39 000000CE 202020200A0D       
    40 000000D4 202020202020202041-     msg5: db "        ARKANOID RETRO        ", 0xA, 0xD
    40 000000DD 524B414E4F49442052-
    40 000000E6 4554524F2020202020-
    40 000000EF 2020200A0D         
    41 000000F4 202020202020202050-     msg6: db "        PRESIONE ENTER PARA INICIAR        ", 0xA, 0xD
    41 000000FD 524553494F4E452045-
    41 00000106 4E5445522050415241-
    41 0000010F 20494E494349415220-
    41 00000118 202020202020200A0D 
    42                                  msg1_length: equ $-msg1
    43                                  msg2_length: equ $-msg2
    44                                  msg3_length: equ $-msg3
    45                                  msg4_length: equ $-msg4
    46                                  msg5_length: equ $-msg5
    47                                  msg6_length: equ $-msg6
    48                                  
    49                                  ; Usefull macros
    50                                  
    51                                  
    52                                  
    53                                  %macro setnonblocking 0
    54                                  	mov rax, sys_fcntl
    55                                      mov rdi, STDIN_FILENO
    56                                      mov rsi, F_SETFL
    57                                      mov rdx, O_NONBLOCK
    58                                      syscall
    59                                  %endmacro
    60                                  
    61                                  %macro unsetnonblocking 0
    62                                  	mov rax, sys_fcntl
    63                                      mov rdi, STDIN_FILENO
    64                                      mov rsi, F_SETFL
    65                                      mov rdx, 0
    66                                      syscall
    67                                  %endmacro
    68                                  
    69                                  %macro full_line 0
    70                                      times column_cells db "X"
    71                                      db 0x0a, 0xD
    72                                  %endmacro
    73                                  
    74                                  %macro hollow_line 0
    75                                      db "X"
    76                                      times column_cells-2 db " "
    77                                      db "X", 0x0a, 0xD
    78                                  %endmacro
    79                                  
    80                                  
    81                                  %macro print 2
    82                                  	mov eax, sys_write
    83                                  	mov edi, 1 	; stdout
    84                                  	mov rsi, %1
    85                                  	mov edx, %2
    86                                  	syscall
    87                                  %endmacro
    88                                  
    89                                  %macro getchar 0
    90                                  	mov     rax, sys_read
    91                                      mov     rdi, STDIN_FILENO
    92                                      mov     rsi, input_char
    93                                      mov     rdx, 1 ; number of bytes
    94                                      syscall         ;read text input from keyboard
    95                                  %endmacro
    96                                  
    97                                  %macro sleeptime 0
    98                                  	mov eax, sys_nanosleep
    99                                  	mov rdi, timespec
   100                                  	xor esi, esi		; ignore remaining time in case of call interruption
   101                                  	syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   102                                  %endmacro
   103                                  
   104                                  
   105                                  
   106                                  global _start
   107                                  
   108                                  section .bss
   109                                  
   110 00000000 ??                      input_char: resb 1
   111                                  
   112                                  section .data
   113                                  
   114                                  	board:
   115                                  		full_line
    70 00000000 58<rep 50h>         <1>  times column_cells db "X"
    71 00000050 0A0D                <1>  db 0x0a, 0xD
   116                                          %rep 30
   117                                          hollow_line
   118                                          %endrep
   117                              <1>  hollow_line
    75 00000052 58                  <2>  db "X"
    76 00000053 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000A1 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 000000A4 58                  <2>  db "X"
    76 000000A5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000F3 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 000000F6 58                  <2>  db "X"
    76 000000F7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000145 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 00000148 58                  <2>  db "X"
    76 00000149 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000197 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 0000019A 58                  <2>  db "X"
    76 0000019B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000001E9 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 000001EC 58                  <2>  db "X"
    76 000001ED 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000023B 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 0000023E 58                  <2>  db "X"
    76 0000023F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000028D 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 00000290 58                  <2>  db "X"
    76 00000291 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000002DF 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 000002E2 58                  <2>  db "X"
    76 000002E3 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000331 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 00000334 58                  <2>  db "X"
    76 00000335 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000383 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 00000386 58                  <2>  db "X"
    76 00000387 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000003D5 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 000003D8 58                  <2>  db "X"
    76 000003D9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000427 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 0000042A 58                  <2>  db "X"
    76 0000042B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000479 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 0000047C 58                  <2>  db "X"
    76 0000047D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000004CB 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 000004CE 58                  <2>  db "X"
    76 000004CF 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000051D 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 00000520 58                  <2>  db "X"
    76 00000521 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000056F 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 00000572 58                  <2>  db "X"
    76 00000573 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000005C1 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 000005C4 58                  <2>  db "X"
    76 000005C5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000613 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 00000616 58                  <2>  db "X"
    76 00000617 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000665 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 00000668 58                  <2>  db "X"
    76 00000669 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000006B7 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 000006BA 58                  <2>  db "X"
    76 000006BB 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000709 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 0000070C 58                  <2>  db "X"
    76 0000070D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000075B 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 0000075E 58                  <2>  db "X"
    76 0000075F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007AD 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 000007B0 58                  <2>  db "X"
    76 000007B1 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007FF 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 00000802 58                  <2>  db "X"
    76 00000803 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000851 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 00000854 58                  <2>  db "X"
    76 00000855 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008A3 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 000008A6 58                  <2>  db "X"
    76 000008A7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008F5 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 000008F8 58                  <2>  db "X"
    76 000008F9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000947 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 0000094A 58                  <2>  db "X"
    76 0000094B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000999 580A0D              <2>  db "X", 0x0a, 0xD
   117                              <1>  hollow_line
    75 0000099C 58                  <2>  db "X"
    76 0000099D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000009EB 580A0D              <2>  db "X", 0x0a, 0xD
   119                                          full_line
    70 000009EE 58<rep 50h>         <1>  times column_cells db "X"
    71 00000A3E 0A0D                <1>  db 0x0a, 0xD
   120                                  	board_size:   equ   $ - board
   121                                  
   122                                  	; Added for the terminal issue
   123 00000A40 00<rep 24h>             	termios:        times 36 db 0
   124                                  	stdin:          equ 0
   125                                  	ICANON:         equ 1<<1
   126                                  	ECHO:           equ 1<<3
   127                                  	VTIME: 			equ 5
   128                                  	VMIN:			equ 6
   129                                  	CC_C:			equ 18
   130                                  
   131                                  section .text
   132                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   133                                  canonical_off:
   134 00000121 E86F000000                      call read_stdin_termios
   135                                  
   136                                          ; clear canonical bit in local mode flags
   137 00000126 50                              push rax
   138 00000127 B802000000                      mov eax, ICANON
   139 0000012C F7D0                            not eax
   140 0000012E 2105(4C0A0000)                  and [termios+12], eax
   141 00000134 C605(570A0000)00        		mov byte[termios+CC_C+VTIME], 0
   142 0000013B C605(580A0000)00        		mov byte[termios+CC_C+VMIN], 0
   143 00000142 58                              pop rax
   144                                  
   145 00000143 E86C000000                      call write_stdin_termios
   146 00000148 C3                              ret
   147                                  
   148                                  echo_off:
   149 00000149 E847000000                      call read_stdin_termios
   150                                  
   151                                          ; clear echo bit in local mode flags
   152 0000014E 50                              push rax
   153 0000014F B808000000                      mov eax, ECHO
   154 00000154 F7D0                            not eax
   155 00000156 2105(4C0A0000)                  and [termios+12], eax
   156 0000015C 58                              pop rax
   157                                  
   158 0000015D E852000000                      call write_stdin_termios
   159 00000162 C3                              ret
   160                                  
   161                                  canonical_on:
   162 00000163 E82D000000                      call read_stdin_termios
   163                                  
   164                                          ; set canonical bit in local mode flags
   165 00000168 830D(4C0A0000)02                or dword [termios+12], ICANON
   166 0000016F C605(570A0000)00        		mov byte[termios+CC_C+VTIME], 0
   167 00000176 C605(580A0000)01        		mov byte[termios+CC_C+VMIN], 1
   168 0000017D E832000000                      call write_stdin_termios
   169 00000182 C3                              ret
   170                                  
   171                                  echo_on:
   172 00000183 E80D000000                      call read_stdin_termios
   173                                  
   174                                          ; set echo bit in local mode flags
   175 00000188 830D(4C0A0000)08                or dword [termios+12], ECHO
   176                                  
   177 0000018F E820000000                      call write_stdin_termios
   178 00000194 C3                              ret
   179                                  
   180                                  read_stdin_termios:
   181 00000195 50                              push rax
   182 00000196 53                              push rbx
   183 00000197 51                              push rcx
   184 00000198 52                              push rdx
   185                                  
   186 00000199 B836000000                      mov eax, 36h
   187 0000019E BB00000000                      mov ebx, stdin
   188 000001A3 B901540000                      mov ecx, 5401h
   189 000001A8 BA[400A0000]                    mov edx, termios
   190 000001AD CD80                            int 80h
   191                                  
   192 000001AF 5A                              pop rdx
   193 000001B0 59                              pop rcx
   194 000001B1 5B                              pop rbx
   195 000001B2 58                              pop rax
   196 000001B3 C3                              ret
   197                                  
   198                                  write_stdin_termios:
   199 000001B4 50                              push rax
   200 000001B5 53                              push rbx
   201 000001B6 51                              push rcx
   202 000001B7 52                              push rdx
   203                                  
   204 000001B8 B836000000                      mov eax, 36h
   205 000001BD BB00000000                      mov ebx, stdin
   206 000001C2 B902540000                      mov ecx, 5402h
   207 000001C7 BA[400A0000]                    mov edx, termios
   208 000001CC CD80                            int 80h
   209                                  
   210 000001CE 5A                              pop rdx
   211 000001CF 59                              pop rcx
   212 000001D0 5B                              pop rbx
   213 000001D1 58                              pop rax
   214 000001D2 C3                              ret
   215                                  
   216                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   217                                  
   218                                  char_equal: equ 61
   219                                  char_space: equ 32
   220                                  char_O: equ 79
   221                                  left_direction: equ -1
   222                                  right_direction: equ 1
   223                                  
   224                                  
   225                                  section .data
   226 00000A64 [7209000000000000]      	pallet_position dq board + 40 + 29 * (column_cells +2)
   227 00000A6C 0300000000000000        	pallet_size dq 3
   228                                  
   229 00000A74 2800000000000000        	ball_x_pos: dq 40
   230 00000A7C 1C00000000000000        	ball_y_pos: dq 28
   231 00000A84 0100000000000000            ball_direction_x dq 1    ; 1 = derecha, -1 = izquierda
   232 00000A8C FFFFFFFFFFFFFFFF            ball_direction_y dq -1   ; -1 = arriba, 1 = abajo
   233 00000A94 00                          ball_moving db 0         ; 0 = estática, 1 = en movimiento
   234                                  
   235                                  ; Definir los límites de la pantalla o área de juego
   236                                      board_top_left_x equ 1
   237                                      board_top_left_y equ 1
   238                                      board_bottom_right_x equ column_cells - 1
   239                                      board_bottom_right_y equ row_cells
   240                                  
   241                                      ; Limites laterales
   242                                      left_edge equ board_top_left_x               ; Límite izquierdo en la primera columna
   243                                      right_edge equ board_bottom_right_x         ; Límite derecho en la última columna
   244                                  
   245                                      ; O también puedes hacerlo así si prefieres usando las coordenadas en memoria para obtener la ubicación exacta:
   246 00000A95 [5200000000000000]          left_edge_position dq board + (board_top_left_y * (column_cells + 2)) ; Coordenada de la parte izquierda del marco
   247 00000A9D [A000000000000000]          right_edge_position dq board + (board_top_left_y * (column_cells + 2) + board_bottom_right_x - 1) ; Coordenada de la parte derecha del marco
   248                                  
   249                                  section .text
   250                                  
   251                                  ;	Function: print_ball
   252                                  ; This function displays the position of the ball
   253                                  ; Arguments: none
   254                                  ;
   255                                  ; Return:
   256                                  ;	Void
   257                                  print_ball:
   258 000001D3 4C8B05(740A0000)        	mov r8, [ball_x_pos]
   259 000001DA 4C8B0D(7C0A0000)        	mov r9, [ball_y_pos]
   260 000001E1 4981C0[00000000]        	add r8, board
   261                                  
   262 000001E8 4C89C9                  	mov rcx, r9
   263 000001EB B852000000              	mov rax, column_cells + 2
   264 000001F0 48F7E9                  	imul rcx
   265                                  	
   266 000001F3 4901C0                  	add r8, rax
   267 000001F6 41C6004F                	mov byte [r8], char_O
   268 000001FA C3                      	ret
   269                                  
   270                                  	
   271                                  	;mov rax, board + r8 + r9 * (column_cells + 2)
   272                                  	
   273                                  
   274                                  
   275                                  
   276                                  ;	Function: print_pallet
   277                                  ; This function moves the pallet in the game
   278                                  ; Arguments: none
   279                                  ;
   280                                  ; Return;
   281                                  ;	void
   282                                  print_pallet:
   283 000001FB 4C8B05(640A0000)        	mov r8, [pallet_position]
   284 00000202 488B0D(6C0A0000)        	mov rcx, [pallet_size]
   285                                  	.write_pallet:
   286 00000209 41C6003D                		mov byte [r8], char_equal
   287 0000020D 49FFC0                  		inc r8
   288 00000210 48FFC9                  		dec rcx
   289 00000213 75F4                    		jnz .write_pallet
   290                                  
   291 00000215 C3                      	ret
   292                                  	
   293                                  ;	Function: move_pallet
   294                                  ; This function is in charge of moving the pallet in a given direction
   295                                  ; Arguments:
   296                                  ;	rdi: left direction or right direction
   297                                  ;
   298                                  ; Return:
   299                                  ;	void
   300                                  move_pallet:
   301                                      
   302 00000216 803D(940A0000)00            cmp byte [ball_moving], 0
   303 0000021D 7507                        jne .continue_movement
   304 0000021F C605(940A0000)01            mov byte [ball_moving], 1
   305                                  
   306                                      .continue_movement:
   307 00000226 4883FFFF                        cmp rdi, left_direction
   308 0000022A 7531                            jne .move_right
   309                                  
   310                                          .move_left:
   311                                              ; Verificar si la siguiente posición sería una X (borde izquierdo)
   312 0000022C 4C8B05(640A0000)                    mov r8, [pallet_position]
   313 00000233 49FFC8                              dec r8              ; Verificar la posición a la izquierda
   314 00000236 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
   315 00000239 3C58                                cmp al, 'X'        ; Comparar si es una X
   316 0000023B 744D                                je .end            ; Si es X, no mover
   317                                              
   318 0000023D 4C8B05(640A0000)                    mov r8, [pallet_position]
   319 00000244 4C8B0D(6C0A0000)                    mov r9, [pallet_size]
   320 0000024B 43C64408FF20                        mov byte [r8 + r9 - 1], char_space  ; Borrar último carácter de la paleta
   321 00000251 49FFC8                              dec r8
   322 00000254 4C8905(640A0000)                    mov [pallet_position], r8
   323 0000025B EB2D                                jmp .end
   324                                              
   325                                          .move_right:
   326                                              ; Verificar si la siguiente posición después de la paleta sería una X
   327 0000025D 4C8B05(640A0000)                    mov r8, [pallet_position]
   328 00000264 4C8B0D(6C0A0000)                    mov r9, [pallet_size]
   329 0000026B 4D01C8                              add r8, r9         ; Moverse al final de la paleta
   330 0000026E 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
   331 00000271 3C58                                cmp al, 'X'        ; Comparar si es una X
   332 00000273 7415                                je .end            ; Si es X, no mover
   333                                              
   334 00000275 4C8B05(640A0000)                    mov r8, [pallet_position]
   335 0000027C 41C60020                            mov byte [r8], char_space
   336 00000280 49FFC0                              inc r8
   337 00000283 4C8905(640A0000)                    mov [pallet_position], r8
   338                                          .end:
   339 0000028A C3                                  ret
   340                                  
   341                                  move_ball:
   342                                      ; Si la bola no está en movimiento, no hacer nada
   343 0000028B 803D(940A0000)00            cmp byte [ball_moving], 0
   344 00000292 0F84A7000000                je .end
   345                                  
   346                                      ; Borrar la posición actual de la bola
   347 00000298 4C8B05(740A0000)            mov r8, [ball_x_pos]
   348 0000029F 4C8B0D(7C0A0000)            mov r9, [ball_y_pos]
   349 000002A6 4981C0[00000000]            add r8, board
   350 000002AD 4C89C9                      mov rcx, r9
   351 000002B0 B852000000                  mov rax, column_cells + 2
   352 000002B5 48F7E9                      imul rcx
   353 000002B8 4901C0                      add r8, rax
   354 000002BB 41C60020                    mov byte [r8], char_space    ; Borrar la bola actual
   355                                  
   356                                      ; Calcular siguiente posición X
   357 000002BF 4C8B05(740A0000)            mov r8, [ball_x_pos]
   358 000002C6 4C8B0D(7C0A0000)            mov r9, [ball_y_pos]
   359 000002CD 488B05(840A0000)            mov rax, [ball_direction_x]
   360 000002D4 4901C0                      add r8, rax                  ; Nueva posición X
   361                                  
   362                                      ; Calcular la dirección de memoria para la siguiente posición
   363 000002D7 4D89C2                      mov r10, r8
   364 000002DA 4981C2[00000000]            add r10, board
   365 000002E1 4C89C9                      mov rcx, r9
   366 000002E4 B852000000                  mov rax, column_cells + 2
   367 000002E9 48F7E9                      imul rcx
   368 000002EC 4901C2                      add r10, rax
   369                                  
   370                                      ; Verificar si hay una X en la siguiente posición X
   371 000002EF 418A02                      mov al, [r10]
   372 000002F2 3C58                        cmp al, 'X'
   373 000002F4 7509                        jne .check_y_movement
   374 000002F6 48F71D(840A0000)            neg qword [ball_direction_x]  ; Cambiar dirección X si hay una X
   375 000002FD EB40                        jmp .end
   376                                  
   377                                      .check_y_movement:
   378                                          ; Calcular siguiente posición Y
   379 000002FF 488B05(8C0A0000)                mov rax, [ball_direction_y]
   380 00000306 4901C1                          add r9, rax                  ; Nueva posición Y
   381                                  
   382                                          ; Calcular la dirección de memoria para la siguiente posición Y
   383 00000309 4D89C2                          mov r10, r8
   384 0000030C 4981C2[00000000]                add r10, board
   385 00000313 4C89C9                          mov rcx, r9
   386 00000316 B852000000                      mov rax, column_cells + 2
   387 0000031B 48F7E9                          imul rcx
   388 0000031E 4901C2                          add r10, rax
   389                                  
   390                                          ; Verificar si hay una X en la siguiente posición Y
   391 00000321 418A02                          mov al, [r10]
   392 00000324 3C58                            cmp al, 'X'
   393 00000326 7509                            jne .update_position
   394 00000328 48F71D(8C0A0000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una X
   395 0000032F EB0E                            jmp .end
   396                                  
   397                                      .update_position:
   398 00000331 4C8905(740A0000)                mov [ball_x_pos], r8
   399 00000338 4C890D(7C0A0000)                mov [ball_y_pos], r9
   400                                  
   401                                      .end:
   402 0000033F C3                              ret
   403                                  
   404                                  _start:
   405 00000340 E8DCFDFFFF              	call canonical_off
   406 00000345 E8CF000000              	call start_screen
   407 0000034A EB00                    	jmp .main_loop
   408                                  	
   409                                  
   410                                  	.main_loop:
   411 0000034C E8AAFEFFFF              		call print_pallet
   412 00000351 E835FFFFFF                      call move_ball
   413 00000356 E878FEFFFF              		call print_ball
   414                                  		print board, board_size				
    82 0000035B B801000000          <1>  mov eax, sys_write
    83 00000360 BF01000000          <1>  mov edi, 1
    84 00000365 48BE-               <1>  mov rsi, %1
    84 00000367 [0000000000000000]  <1>
    85 0000036F BA400A0000          <1>  mov edx, %2
    86 00000374 0F05                <1>  syscall
   415                                  		;setnonblocking	
   416                                  	.read_more:	
   417                                  		getchar	
    90 00000376 B800000000          <1>  mov rax, sys_read
    91 0000037B BF00000000          <1>  mov rdi, STDIN_FILENO
    92 00000380 48BE-               <1>  mov rsi, input_char
    92 00000382 [0000000000000000]  <1>
    93 0000038A BA01000000          <1>  mov rdx, 1
    94 0000038F 0F05                <1>  syscall
   418                                  		
   419 00000391 4883F801                		cmp rax, 1
   420 00000395 7532                        	jne .done
   421                                  		
   422 00000397 8A05(00000000)          		mov al,[input_char]
   423                                  
   424 0000039D 3C61                    		cmp al, 'a'
   425 0000039F 750E                    	    jne .not_left
   426 000003A1 48C7C7FFFFFFFF          	    mov rdi, left_direction
   427 000003A8 E869FEFFFF              		call move_pallet
   428 000003AD EB1A                    	    jmp .done
   429                                  		
   430                                  		.not_left:
   431 000003AF 3C64                    		 	cmp al, 'd'
   432 000003B1 750C                    	    	jne .not_right
   433 000003B3 BF01000000              			mov rdi, right_direction
   434 000003B8 E859FEFFFF              	    	call move_pallet
   435 000003BD EB0A                        		jmp .done		
   436                                  
   437                                  		.not_right:
   438                                  
   439 000003BF 3C71                        		cmp al, 'q'
   440 000003C1 0F84C5000000                		je exit
   441                                  
   442 000003C7 EBAD                    			jmp .read_more
   443                                  		
   444                                  		.done:	
   445                                  			;unsetnonblocking		
   446                                  			sleeptime	
    98 000003C9 B823000000          <1>  mov eax, sys_nanosleep
    99 000003CE 48BF-               <1>  mov rdi, timespec
    99 000003D0 [0000000000000000]  <1>
   100 000003D8 31F6                <1>  xor esi, esi
   101 000003DA 0F05                <1>  syscall
   447                                  			print clear, clear_length
    82 000003DC B801000000          <1>  mov eax, sys_write
    83 000003E1 BF01000000          <1>  mov edi, 1
    84 000003E6 48BE-               <1>  mov rsi, %1
    84 000003E8 [1000000000000000]  <1>
    85 000003F0 BA07000000          <1>  mov edx, %2
    86 000003F5 0F05                <1>  syscall
   448 000003F7 E950FFFFFF                  		jmp .main_loop
   449                                  
   450                                  		print clear, clear_length
    82 000003FC B801000000          <1>  mov eax, sys_write
    83 00000401 BF01000000          <1>  mov edi, 1
    84 00000406 48BE-               <1>  mov rsi, %1
    84 00000408 [1000000000000000]  <1>
    85 00000410 BA07000000          <1>  mov edx, %2
    86 00000415 0F05                <1>  syscall
   451                                  		
   452 00000417 EB73                    		jmp exit
   453                                  
   454                                  
   455                                  start_screen:
   456                                      print clear, clear_length    ; Limpiamos la pantalla primero
    82 00000419 B801000000          <1>  mov eax, sys_write
    83 0000041E BF01000000          <1>  mov edi, 1
    84 00000423 48BE-               <1>  mov rsi, %1
    84 00000425 [1000000000000000]  <1>
    85 0000042D BA07000000          <1>  mov edx, %2
    86 00000432 0F05                <1>  syscall
   457                                      print msg1, msg1_length
    82 00000434 B801000000          <1>  mov eax, sys_write
    83 00000439 BF01000000          <1>  mov edi, 1
    84 0000043E 48BE-               <1>  mov rsi, %1
    84 00000440 [1700000000000000]  <1>
    85 00000448 BA0A010000          <1>  mov edx, %2
    86 0000044D 0F05                <1>  syscall
   458                                      
   459                                      .wait_for_key:              ; Agregamos una etiqueta para esperar la tecla
   460                                          getchar                 ; Esperamos una tecla
    90 0000044F B800000000          <1>  mov rax, sys_read
    91 00000454 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 00000459 48BE-               <1>  mov rsi, input_char
    92 0000045B [0000000000000000]  <1>
    93 00000463 BA01000000          <1>  mov rdx, 1
    94 00000468 0F05                <1>  syscall
   461 0000046A 4883F801                        cmp rax, 1             ; Verificamos si se leyó un carácter
   462 0000046E 75DF                            jne .wait_for_key      ; Si no se leyó, seguimos esperando
   463                                          
   464                                      print clear, clear_length   ; Limpiamos la pantalla antes de salir
    82 00000470 B801000000          <1>  mov eax, sys_write
    83 00000475 BF01000000          <1>  mov edi, 1
    84 0000047A 48BE-               <1>  mov rsi, %1
    84 0000047C [1000000000000000]  <1>
    85 00000484 BA07000000          <1>  mov edx, %2
    86 00000489 0F05                <1>  syscall
   465 0000048B C3                          ret
   466                                  
   467                                  exit: 
   468 0000048C E8D2FCFFFF              	call canonical_on
   469 00000491 B83C000000              	mov    rax, 60
   470 00000496 BF00000000                  mov    rdi, 0
   471 0000049B 0F05                        syscall
   472                                  
