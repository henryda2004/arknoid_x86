     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  sys_read: equ 0	
     7                                  sys_write:	equ 1
     8                                  sys_nanosleep:	equ 35
     9                                  sys_time:	equ 201
    10                                  sys_fcntl:	equ 72
    11                                  
    12                                  
    13                                  STDIN_FILENO: equ 0
    14                                  
    15                                  F_SETFL:	equ 0x0004
    16                                  O_NONBLOCK: equ 0x0004
    17                                  
    18                                  ;screen clean definition
    19                                  row_cells:	equ 32	; set to any (reasonable) value you wish
    20                                  column_cells: 	equ 78 ; set to any (reasonable) value you wish
    21                                  array_length:	equ row_cells * column_cells + row_cells ; cells are mapped to bytes in the array and a new line char ends each row
    22                                  
    23                                  ;This is regarding the sleep time
    24                                  timespec:
    25 00000000 0000000000000000            tv_sec  dq 0
    26 00000008 00C2EB0B00000000            tv_nsec dq 200000000
    27                                  
    28                                  
    29                                  ;This is for cleaning up the screen
    30 00000010 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"
    31                                  clear_length:	equ $-clear
    32                                  	
    33                                  	
    34                                  
    35                                  ; Start Message
    36 00000017 202020202020202054-     msg1: db "        TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    36 00000020 45434E4F4C4F474943-
    36 00000029 4F20444520434F5354-
    36 00000032 412052494341202020-
    36 0000003B 20202020200A0D     
    37 00000042 202020202020202041-     msg2: db "        ARQUITECTURA DE COMPUTADORAS I        ", 0xA, 0xD
    37 0000004B 525155495445435455-
    37 00000054 524120444520434F4D-
    37 0000005D 50555441444F524153-
    37 00000066 204920202020202020-
    37 0000006F 200A0D             
    38 00000072 202020202020202045-     msg3: db "        ESTUDIANTE: HENRY NUNEZ PEREZ        ", 0xA, 0xD
    38 0000007B 5354554449414E5445-
    38 00000084 3A2048454E5259204E-
    38 0000008D 554E455A2050455245-
    38 00000096 5A2020202020202020-
    38 0000009F 0A0D               
    39 000000A1 202020202020202050-     msg4: db "        PROFESOR: ERNESTO RIVERA ALVARADO        ", 0xA, 0xD
    39 000000AA 524F4645534F523A20-
    39 000000B3 45524E4553544F2052-
    39 000000BC 495645524120414C56-
    39 000000C5 415241444F20202020-
    39 000000CE 202020200A0D       
    40 000000D4 202020202020202041-     msg5: db "        ARKANOID RETRO        ", 0xA, 0xD
    40 000000DD 524B414E4F49442052-
    40 000000E6 4554524F2020202020-
    40 000000EF 2020200A0D         
    41 000000F4 202020202020202050-     msg6: db "        PRESIONE CUALQUIER TECLA PARA INICIAR        ", 0xA, 0xD
    41 000000FD 524553494F4E452043-
    41 00000106 55414C515549455220-
    41 0000010F 5445434C4120504152-
    41 00000118 4120494E4943494152-
    41 00000121 20202020202020200A-
    41 0000012A 0D                 
    42                                  msg1_length: equ $-msg1
    43                                  msg2_length: equ $-msg2
    44                                  msg3_length: equ $-msg3
    45                                  msg4_length: equ $-msg4
    46                                  msg5_length: equ $-msg5
    47                                  msg6_length: equ $-msg6
    48                                  
    49                                  ; Usefull macros
    50                                  
    51                                  
    52                                  
    53                                  %macro setnonblocking 0
    54                                  	mov rax, sys_fcntl
    55                                      mov rdi, STDIN_FILENO
    56                                      mov rsi, F_SETFL
    57                                      mov rdx, O_NONBLOCK
    58                                      syscall
    59                                  %endmacro
    60                                  
    61                                  %macro unsetnonblocking 0
    62                                  	mov rax, sys_fcntl
    63                                      mov rdi, STDIN_FILENO
    64                                      mov rsi, F_SETFL
    65                                      mov rdx, 0
    66                                      syscall
    67                                  %endmacro
    68                                  
    69                                  %macro full_line 0
    70                                      times column_cells db "X"
    71                                      db 0x0a, 0xD
    72                                  %endmacro
    73                                  
    74                                  %macro hollow_line 0
    75                                      db "X"
    76                                      times column_cells-2 db " "
    77                                      db "X", 0x0a, 0xD
    78                                  %endmacro
    79                                  
    80                                  
    81                                  %macro print 2
    82                                  	mov eax, sys_write
    83                                  	mov edi, 1 	; stdout
    84                                  	mov rsi, %1
    85                                  	mov edx, %2
    86                                  	syscall
    87                                  %endmacro
    88                                  
    89                                  %macro getchar 0
    90                                  	mov     rax, sys_read
    91                                      mov     rdi, STDIN_FILENO
    92                                      mov     rsi, input_char
    93                                      mov     rdx, 1 ; number of bytes
    94                                      syscall         ;read text input from keyboard
    95                                  %endmacro
    96                                  
    97                                  %macro sleeptime 0
    98                                  	mov eax, sys_nanosleep
    99                                  	mov rdi, timespec
   100                                  	xor esi, esi		; ignore remaining time in case of call interruption
   101                                  	syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   102                                  %endmacro
   103                                  
   104                                  
   105                                  
   106                                  global _start
   107                                  
   108                                  section .bss
   109                                  
   110 00000000 ??                      input_char: resb 1
   111                                  
   112                                  section .data
   113                                  
   114                                  	; Guardamos la plantilla del tablero (32 filas)
   115                                      board_template:
   116                                          full_line
    70 00000000 58<rep 4Eh>         <1>  times column_cells db "X"
    71 0000004E 0A0D                <1>  db 0x0a, 0xD
   117                                          %rep 30
   118                                          hollow_line
   119                                          %endrep
   118                              <1>  hollow_line
    75 00000050 58                  <2>  db "X"
    76 00000051 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000009D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000A0 58                  <2>  db "X"
    76 000000A1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000000ED 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000F0 58                  <2>  db "X"
    76 000000F1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000013D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000140 58                  <2>  db "X"
    76 00000141 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000018D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000190 58                  <2>  db "X"
    76 00000191 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000001DD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000001E0 58                  <2>  db "X"
    76 000001E1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000022D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000230 58                  <2>  db "X"
    76 00000231 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000027D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000280 58                  <2>  db "X"
    76 00000281 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000002CD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000002D0 58                  <2>  db "X"
    76 000002D1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000031D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000320 58                  <2>  db "X"
    76 00000321 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000036D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000370 58                  <2>  db "X"
    76 00000371 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000003BD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000003C0 58                  <2>  db "X"
    76 000003C1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000040D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000410 58                  <2>  db "X"
    76 00000411 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000045D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000460 58                  <2>  db "X"
    76 00000461 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000004AD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000004B0 58                  <2>  db "X"
    76 000004B1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000004FD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000500 58                  <2>  db "X"
    76 00000501 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000054D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000550 58                  <2>  db "X"
    76 00000551 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000059D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005A0 58                  <2>  db "X"
    76 000005A1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000005ED 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005F0 58                  <2>  db "X"
    76 000005F1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000063D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000640 58                  <2>  db "X"
    76 00000641 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000068D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000690 58                  <2>  db "X"
    76 00000691 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000006DD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000006E0 58                  <2>  db "X"
    76 000006E1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000072D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000730 58                  <2>  db "X"
    76 00000731 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000077D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000780 58                  <2>  db "X"
    76 00000781 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000007CD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000007D0 58                  <2>  db "X"
    76 000007D1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000081D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000820 58                  <2>  db "X"
    76 00000821 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000086D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000870 58                  <2>  db "X"
    76 00000871 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000008BD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008C0 58                  <2>  db "X"
    76 000008C1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000090D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000910 58                  <2>  db "X"
    76 00000911 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000095D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000960 58                  <2>  db "X"
    76 00000961 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000009AD 580A0D              <2>  db "X", 0x0a, 0xD
   120                                          full_line
    70 000009B0 58<rep 4Eh>         <1>  times column_cells db "X"
    71 000009FE 0A0D                <1>  db 0x0a, 0xD
   121                                      board_template_size: equ $ - board_template
   122                                  
   123                                      ; Espacio real que se usará en la ejecución
   124 00000A00 00<rep A00h>                board: times board_template_size db 0
   125                                      board_size: equ board_template_size
   126                                  
   127                                  	; Added for the terminal issue
   128 00001400 00<rep 24h>             	termios:        times 36 db 0
   129                                  	stdin:          equ 0
   130                                  	ICANON:         equ 1<<1
   131                                  	ECHO:           equ 1<<3
   132                                  	VTIME: 			equ 5
   133                                  	VMIN:			equ 6
   134                                  	CC_C:			equ 18
   135                                  
   136                                  section .text
   137                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   138                                  canonical_off:
   139 0000012B E86F000000                      call read_stdin_termios
   140                                  
   141                                          ; clear canonical bit in local mode flags
   142 00000130 50                              push rax
   143 00000131 B802000000                      mov eax, ICANON
   144 00000136 F7D0                            not eax
   145 00000138 2105(0C140000)                  and [termios+12], eax
   146 0000013E C605(17140000)00        		mov byte[termios+CC_C+VTIME], 0
   147 00000145 C605(18140000)00        		mov byte[termios+CC_C+VMIN], 0
   148 0000014C 58                              pop rax
   149                                  
   150 0000014D E86C000000                      call write_stdin_termios
   151 00000152 C3                              ret
   152                                  
   153                                  echo_off:
   154 00000153 E847000000                      call read_stdin_termios
   155                                  
   156                                          ; clear echo bit in local mode flags
   157 00000158 50                              push rax
   158 00000159 B808000000                      mov eax, ECHO
   159 0000015E F7D0                            not eax
   160 00000160 2105(0C140000)                  and [termios+12], eax
   161 00000166 58                              pop rax
   162                                  
   163 00000167 E852000000                      call write_stdin_termios
   164 0000016C C3                              ret
   165                                  
   166                                  canonical_on:
   167 0000016D E82D000000                      call read_stdin_termios
   168                                  
   169                                          ; set canonical bit in local mode flags
   170 00000172 830D(0C140000)02                or dword [termios+12], ICANON
   171 00000179 C605(17140000)00        		mov byte[termios+CC_C+VTIME], 0
   172 00000180 C605(18140000)01        		mov byte[termios+CC_C+VMIN], 1
   173 00000187 E832000000                      call write_stdin_termios
   174 0000018C C3                              ret
   175                                  
   176                                  echo_on:
   177 0000018D E80D000000                      call read_stdin_termios
   178                                  
   179                                          ; set echo bit in local mode flags
   180 00000192 830D(0C140000)08                or dword [termios+12], ECHO
   181                                  
   182 00000199 E820000000                      call write_stdin_termios
   183 0000019E C3                              ret
   184                                  
   185                                  read_stdin_termios:
   186 0000019F 50                              push rax
   187 000001A0 53                              push rbx
   188 000001A1 51                              push rcx
   189 000001A2 52                              push rdx
   190                                  
   191 000001A3 B836000000                      mov eax, 36h
   192 000001A8 BB00000000                      mov ebx, stdin
   193 000001AD B901540000                      mov ecx, 5401h
   194 000001B2 BA[00140000]                    mov edx, termios
   195 000001B7 CD80                            int 80h
   196                                  
   197 000001B9 5A                              pop rdx
   198 000001BA 59                              pop rcx
   199 000001BB 5B                              pop rbx
   200 000001BC 58                              pop rax
   201 000001BD C3                              ret
   202                                  
   203                                  write_stdin_termios:
   204 000001BE 50                              push rax
   205 000001BF 53                              push rbx
   206 000001C0 51                              push rcx
   207 000001C1 52                              push rdx
   208                                  
   209 000001C2 B836000000                      mov eax, 36h
   210 000001C7 BB00000000                      mov ebx, stdin
   211 000001CC B902540000                      mov ecx, 5402h
   212 000001D1 BA[00140000]                    mov edx, termios
   213 000001D6 CD80                            int 80h
   214                                  
   215 000001D8 5A                              pop rdx
   216 000001D9 59                              pop rcx
   217 000001DA 5B                              pop rbx
   218 000001DB 58                              pop rax
   219 000001DC C3                              ret
   220                                  
   221                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   222                                  
   223                                  char_equal: equ 61
   224                                  char_space: equ 32
   225                                  char_O: equ 79
   226                                  left_direction: equ -1
   227                                  right_direction: equ 1
   228                                  
   229                                  
   230                                  section .data
   231                                  
   232                                  ; Mensajes para los niveles
   233 00001424 4E4956454C20                level_msg: db "NIVEL "
   234                                      level_msg_len: equ $ - level_msg
   235 0000142A 31                          level_1_char: db "1"
   236 0000142B 32                          level_2_char: db "2"
   237 0000142C 33                          level_3_char: db "3"
   238 0000142D 34                          level_4_char: db "4"
   239 0000142E 35                          level_5_char: db "5"
   240                                      level_char_len: equ 1
   241                                  
   242                                      ; Timespec para la pausa del mensaje de nivel
   243                                      level_display_time:
   244 0000142F 0100000000000000                lvl_tv_sec dq 1           ; 1 segundo
   245 00001437 0000000000000000                lvl_tv_nsec dq 0
   246                                          
   247 0000143F [3613000000000000]      	pallet_position dq board + 38 + 29 * (column_cells +2)
   248 00001447 0500000000000000            pallet_size dq 5
   249 0000144F 0500000000000000            default_pallet_size dq 5    ; Tamaño normal de la paleta
   250 00001457 0700000000000000            extended_pallet_size dq 7   ; Tamaño extendido de la paleta
   251                                  
   252 0000145F 2800000000000000        	ball_x_pos: dq 40
   253 00001467 1C00000000000000        	ball_y_pos: dq 28
   254 0000146F 0100000000000000            ball_direction_x dq 1    ; 1 = derecha, -1 = izquierda
   255 00001477 FFFFFFFFFFFFFFFF            ball_direction_y dq -1   ; -1 = arriba, 1 = abajo
   256 0000147F 00                          ball_moving db 0         ; 0 = estática, 1 = en movimiento
   257                                  
   258                                  ; Definir los límites de la pantalla o área de juego
   259                                      board_top_left_x equ 1
   260                                      board_top_left_y equ 1
   261                                      board_bottom_right_x equ column_cells - 1
   262                                      board_bottom_right_y equ row_cells
   263                                  
   264                                      ; Limites laterales
   265                                      left_edge equ board_top_left_x               ; Límite izquierdo en la primera columna
   266                                      right_edge equ board_bottom_right_x         ; Límite derecho en la última columna
   267                                  
   268                                      ; O también puedes hacerlo así si prefieres usando las coordenadas en memoria para obtener la ubicación exacta:
   269 00001480 [500A000000000000]          left_edge_position dq board + (board_top_left_y * (column_cells + 2)) ; Coordenada de la parte izquierda del marco
   270 00001488 [9C0A000000000000]          right_edge_position dq board + (board_top_left_y * (column_cells + 2) + board_bottom_right_x - 1) ; Coordenada de la parte derecha del marco
   271                                  
   272                                      ; Definición de tipos de bloques
   273 00001490 555555555555                block_type_1: db "UUUUUU"    ; Durabilidad 1
   274 00001496 4F4F4F4F4F4F                block_type_2: db "OOOOOO"    ; Durabilidad 2
   275 0000149C 444444444444                block_type_3: db "DDDDDD"    ; Durabilidad 3
   276 000014A2 4C4C4C4C4C4C                block_type_4: db "LLLLLL"    ; Durabilidad 4
   277 000014A8 565656565656                block_type_5: db "VVVVVV"    ; Durabilidad 5
   278 000014AE 383838383838                block_type_6: db "888888"    ; Durabilidad 6
   279                                      block_length: equ 6        ; Longitud de cada bloque
   280                                  
   281                                      ; Estructura para el nivel actual
   282 000014B4 01                          current_level db 1
   283 000014B5 00                          blocks_remaining db 0
   284                                  
   285                                      ; Definición del nivel 1 (ejemplo con múltiples bloques)destroyed_blocks
   286                                      ; Formato: x_pos, y_pos, tipo_bloque, durabilidad_actual
   287                                      level1_blocks:
   288                                          ; Tercera fila (tipo 3)
   289 000014B6 3A07030143                      db 58, 7, 3, 1, 'C'    ; Bloque 7
   290 000014BB 3D09030153                      db 61, 9, 3, 1, 'S'    ; Bloque 7
   291 000014C0 1207030153                      db 18, 7, 3, 1, 'S'    ; Bloque 7
   292                                      level1_blocks_count equ 3   ; Cantidad total de bloques
   293                                  
   294                                      ; Nivel 2: Bloques de prueba
   295                                      level2_blocks:
   296 000014C5 3C07010145                      db 60, 7, 1, 1, 'E'    ; Un bloque simple en el nivel 2   ; Un bloque simple en el nivel 2
   297                                      level2_blocks_count equ 1
   298                                  
   299                                      ; Nivel 3
   300                                      level3_blocks:
   301 000014CA 3C07020145                      db 60, 7, 2, 1, 'E'    ; Bloque 1
   302                                  
   303                                      level3_blocks_count equ 1
   304                                  
   305                                      ; Nivel 4
   306                                      level4_blocks:
   307 000014CF 3C07040145                      db 60, 7, 4, 1, 'E'    ; Bloque 1
   308                                      level4_blocks_count equ 1
   309                                  
   310                                      ; Nivel 5
   311                                      level5_blocks:
   312 000014D4 3C07050145                      db 60, 7, 5, 1, 'E'    ; Bloque 1
   313                                      level5_blocks_count equ 1
   314                                  
   315                                      ; Array para mantener el estado de los bloques
   316 000014D9 00<rep 64h>                 block_states: times 100 db 0  ; Durabilidad actual de cada bloque
   317                                  
   318                                      
   319                                      ; Variables para almacenar los valores
   320 0000153D 0000000000000000            current_score dq 0          ; Score actual
   321 00001545 00                          destroyed_blocks db 0       ; Bloques destruidos en el nivel actual
   322                                      
   323                                      ; Buffer para convertir números a string
   324 00001546 00<rep 14h>                 number_buffer: times 20 db 0
   325                                  
   326 0000155A 4023242640                  enemy_chars db "@", "#", "$", "&", "@"    ; El nivel 1 y 5 comparten el mismo caracter (@)
   327                                      
   328                                      ; Estructura para los enemigos (x, y, activo)
   329 0000155F 00<rep 1Eh>                 enemies: times 10 * 3 db 0     ; Máximo 5 enemigos, cada uno con 3 bytes (x, y, activo)
   330 0000157D 0A                          enemies_count db 10            ; Cantidad de enemigos activos
   331                                      
   332 0000157E 3200000000000000            enemy_points dq 50              ; Puntos por destruir un enemigo
   333 00001586 00                          enemy_move_counter db 0         ; Contador para controlar velocidad de movimiento
   334 00001587 02                          enemy_move_delay db 2           ; Mover enemigos cada N ciclos
   335 00001588 00                          enemy_move_total db 0      ; Contador total de movimientos
   336 00001589 00                          enemy_target db 0          ; 0 = persigue bola, 1 = persigue paleta
   337 0000158A 14                          MOVEMENT_THRESHOLD db 20   ; Número de movimientos antes de cambiar objetivo
   338                                   ;Formato: número de bloques destruidos necesario para que aparezca cada enemigo
   339                                      ; Añade esto en la sección .dataa
   340 0000158B 00010206080A0C0E10-         level1_spawn_points: db 0, 1, 2, 6, 8, 10, 12, 14, 16, 18    ; 10 enemigos, cada 2 bloques
   340 00001594 12                 
   341 00001595 01030507090B0D0F11-         level2_spawn_points: db 1, 3, 5, 7, 9, 11, 13, 15, 17, 19    ; 10 enemigos, cada 2 bloques
   341 0000159E 13                 
   342 0000159F 000306090C0F121518-         level3_spawn_points: db 0, 3, 6, 9, 12, 15, 18, 21, 24, 27   ; 10 enemigos, cada 3 bloques
   342 000015A8 1B                 
   343 000015A9 0104070A0D10131619-         level4_spawn_points: db 1, 4, 7, 10, 13, 16, 19, 22, 25, 28  ; 10 enemigos, cada 3 bloques
   343 000015B2 1C                 
   344 000015B3 00050A0F14191E2328-         level5_spawn_points: db 0, 5, 10, 15, 20, 25, 30, 35, 40, 45 ; 10 enemigos, cada 5 bloques
   344 000015BC 2D                 
   345                                          ; Arreglo de punteros a los spawn points de cada nivel
   346                                      spawn_points_table:
   347 000015BD [8B15000000000000]              dq level1_spawn_points
   348 000015C5 [9515000000000000]              dq level2_spawn_points
   349 000015CD [9F15000000000000]              dq level3_spawn_points
   350 000015D5 [A915000000000000]              dq level4_spawn_points
   351 000015DD [B315000000000000]              dq level5_spawn_points
   352                                  
   353                                      ; Variables para el comportamiento de enemigos
   354 000015E5 1E                          BEHAVIOR_CHANGE_TIME db 30    ; Ciclos antes de cambiar comportamiento
   355 000015E6 00                          behavior_counter db 0          ; Contador para cambio de comportamiento
   356 000015E7 00                          current_behavior db 0          ; 0 = persigue bola, 1 = persigue paleta
   357 000015E8 00<rep Ah>                  enemy_spawns_triggered: times 10 db 0  ; 0 = no spawned, 1 = spawned
   358                                  
   359 000015F2 50756E74616A653A20-         score_label: db "Puntaje: [          ]", 0xA, 0xD  ; 10 espacios para el número
   359 000015FB 5B2020202020202020-
   359 00001604 20205D0A0D         
   360                                      score_label_len: equ $ - score_label
   361 00001609 426C6F717565732064-         blocks_label: db "Bloques destruidos: [   ]", 0xA, 0xD  ; 3 espacios para el número
   361 00001612 657374727569646F73-
   361 0000161B 3A205B2020205D0A0D 
   362                                      blocks_label_len: equ $ - blocks_label
   363                                      
   364                                      ; Posición donde insertar los números en los labels
   365                                      score_pos equ 10    ; Posición después de "Puntaje: ["
   366                                      blocks_pos equ 20   ; Posición después de "Bloques destruidos: ["
   367                                      
   368                                      ; Definición de las vidas (x, y, estado)
   369                                      ; Formato: posición_x, posición_y, estado (1 = activa, 0 = inactiva)
   370                                      lives_data: 
   371 00001624 021E01                          db 2, 30, 1     ; Vida 1 (activa)
   372 00001627 041E01                          db 4, 30, 1     ; Vida 2 (activa)
   373 0000162A 061E01                          db 6, 30, 1     ; Vida 3 (inactiva)
   374 0000162D 081E01                          db 8, 30, 1     ; Vida 4 (inactiva)
   375 00001630 0A1E00                          db 10, 30, 0    ; Vida 5 (inactiva)
   376 00001633 0C1E00                          db 12, 30, 0    ; Vida 6 (inactiva)
   377 00001636 0E1E00                          db 14, 30, 0    ; Vida 7 (inactiva)
   378                                      lives_count equ 7    ; Total de vidas
   379 00001639 5E                          life_char db "^"    
   380 0000163A 04                          current_lives db 4   ; Contador de vidas activas actual
   381                                  
   382                                  ; Estructura para almacenar las letras y sus posiciones
   383                                      ; Formato: x, y, letra, activo (1 = activo, 0 = inactivo)
   384 0000163B 00<rep 190h>                letters_map: times 100 * 4 db 0  ; Espacio para 100 letras
   385 000017CB 00                          letters_count db 0   
   386 000017CC 20                          last_letter db ' '    ; Variable para almacenar la última letra
   387 000017CD 506F64657220616374-         last_letter_msg db "Poder actual: [ ]", 0xA, 0xD  ; Mensaje para mostrar la última letra
   387 000017D6 75616C3A205B205D0A-
   387 000017DF 0D                 
   388                                      last_letter_msg_len equ $ - last_letter_msg
   389 000017E0 00                          current_power_processed db 0 ; 0 = no procesado, 1 = ya procesado
   390 000017E1 07                          max_lives db 7              ; Máximo número de vidas permitidas
   391 000017E2 0100000000000000            ball_speed dq 1             ; Velocidad normal de la bola
   392 000017EA 0200000000000000            slow_ball_speed dq 2        ; Velocidad lenta (se usará como divisor)
   393 000017F2 0000000000000000            speed_counter dq 0          ; Contador para ralentizar el movimiento
   394                                  
   395 000017FA 00                          catch_power_active db 0     ; 0 = inactivo, 1 = activo
   396 000017FB 00                          ball_caught db 0           ; 0 = no atrapada, 1 = atrapada
   397 000017FC 0000000000000000            ball_catch_offset dq 0     ; Offset respecto a la paleta cuando está atrapada
   398 00001804 00                          last_key db 0    ; Variable para almacenar la última tecla presionada
   399                                  
   400                                  
   401                                  section .text
   402                                  
   403                                  
   404                                  print_lives:
   405 000001DD 55                          push rbp
   406 000001DE 4889E5                      mov rbp, rsp
   407                                      
   408 000001E1 4D31E4                      xor r12, r12                    ; Índice de la vida actual
   409                                      
   410                                      .print_loop:
   411 000001E4 4983FC07                        cmp r12, lives_count
   412 000001E8 7D45                            jge .end
   413                                          
   414                                          ; Calcular offset de la vida actual
   415 000001EA 4C89E0                          mov rax, r12
   416 000001ED 486BC003                        imul rax, 3                     ; Cada vida ocupa 3 bytes (x, y, estado)
   417 000001F1 488DB0[24160000]                lea rsi, [lives_data + rax]
   418                                          
   419                                          ; Calcular posición en el tablero
   420 000001F8 4C0FB606                        movzx r8, byte [rsi]            ; X
   421 000001FC 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
   422                                          
   423                                          ; Calcular offset en el tablero
   424 00000201 B84E000000                      mov rax, column_cells
   425 00000206 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
   426 0000020A 49F7E1                          mul r9
   427 0000020D 4C01C0                          add rax, r8
   428 00000210 488DB8[000A0000]                lea rdi, [board + rax]
   429                                          
   430                                          ; Verificar estado de la vida y dibujar el carácter correspondiente
   431 00000217 807E0201                        cmp byte [rsi + 2], 1
   432 0000021B 7405                            je .draw_active
   433                                          
   434                                          ; Si está inactiva, dibujar espacio
   435 0000021D C60720                          mov byte [rdi], ' '
   436 00000220 EB08                            jmp .next_life
   437                                          
   438                                      .draw_active:
   439                                          ; Si está activa, dibujar el símbolo de vida
   440 00000222 8A05(39160000)                  mov al, [life_char]
   441 00000228 8807                            mov [rdi], al
   442                                          
   443                                      .next_life:
   444 0000022A 49FFC4                          inc r12
   445 0000022D EBB5                            jmp .print_loop
   446                                          
   447                                      .end:
   448 0000022F 5D                              pop rbp
   449 00000230 C3                              ret
   450                                  
   451                                  ; Función para desactivar una vida
   452                                  ; Función modificada para perder una vida
   453                                  lose_life:
   454 00000231 55                          push rbp
   455 00000232 4889E5                      mov rbp, rsp
   456                                      
   457                                      ; Verificar si aún quedan vidas
   458 00000235 803D(3A160000)00            cmp byte [current_lives], 0
   459 0000023C 0F8493000000                je .game_lost
   460                                      
   461                                      ; Encontrar la última vida activa
   462 00000242 B907000000                  mov rcx, lives_count
   463 00000247 48FFC9                      dec rcx                     ; Empezar desde la última vida
   464                                      
   465                                      .find_active_life:
   466 0000024A 4889C8                          mov rax, rcx
   467 0000024D 486BC003                        imul rax, 3            ; Cada vida ocupa 3 bytes
   468 00000251 488DB0[24160000]                lea rsi, [lives_data + rax]
   469 00000258 807E0201                        cmp byte [rsi + 2], 1  ; Verificar si está activa
   470 0000025C 7407                            je .deactivate_life
   471 0000025E 48FFC9                          dec rcx
   472 00000261 79E7                            jns .find_active_life  ; Continuar si no hemos llegado a -1
   473 00000263 EB70                            jmp .game_lost         ; Si no encontramos vidas activas
   474                                          
   475                                      .deactivate_life:
   476                                          ; Calcular posición correcta en el tablero para borrar la vida
   477 00000265 4C0FB606                        movzx r8, byte [rsi]            ; X
   478 00000269 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
   479                                          
   480                                          ; Calcular offset en el tablero: Y * (column_cells + 2) + X
   481 0000026E B84E000000                      mov rax, column_cells
   482 00000273 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
   483 00000277 49F7E1                          mul r9
   484 0000027A 4C01C0                          add rax, r8
   485 0000027D 488DB8[000A0000]                lea rdi, [board + rax]
   486                                          
   487                                          ; Borrar visualmente la vida
   488 00000284 C60720                          mov byte [rdi], ' '             
   489                                          
   490                                          ; Desactivar la vida en los datos
   491 00000287 C6460200                        mov byte [rsi + 2], 0          
   492 0000028B FE0D(3A160000)                  dec byte [current_lives]
   493                                          
   494                                          ; Borrar visualmente la paleta anterior
   495 00000291 4C8B05(3F140000)                mov r8, [pallet_position]
   496 00000298 488B0D(47140000)                mov rcx, [pallet_size]
   497                                          .erase_pallet_loop:
   498 0000029F 41C60020                            mov byte [r8], ' '          ; Reemplazar cada posición con un espacio
   499 000002A3 49FFC0                              inc r8
   500 000002A6 48FFC9                              dec rcx
   501 000002A9 75F4                                jnz .erase_pallet_loop
   502                                          
   503                                  
   504                                          ; Reiniciar posición de la bola y la paleta
   505 000002AB 48C705(5F140000)28-             mov qword [ball_x_pos], 40
   505 000002B3 000000             
   506 000002B6 48C705(67140000)1C-             mov qword [ball_y_pos], 28
   506 000002BE 000000             
   507 000002C1 C605(7F140000)00                mov byte [ball_moving], 0
   508 000002C8 48C705(3F140000)-               mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
   508 000002CF [36130000]         
   509                                          
   510 000002D3 EB07                            jmp .end
   511                                          
   512                                      .game_lost:
   513 000002D5 E81C000000                      call game_lost
   514 000002DA EB00                            jmp .end
   515                                          
   516                                      .end:
   517 000002DC 5D                              pop rbp
   518 000002DD C3                              ret
   519                                  ; Función modificada para verificar colisión con el borde inferior
   520                                  check_bottom_collision:
   521 000002DE 55                          push rbp
   522 000002DF 4889E5                      mov rbp, rsp
   523                                      
   524                                      ; Verificar si la bola está en la última fila (row_cells - 1)
   525 000002E2 488B05(67140000)            mov rax, [ball_y_pos]
   526 000002E9 4883F81E                    cmp rax, row_cells - 2
   527 000002ED 7505                        jne .no_collision
   528                                      
   529                                      ; Si hay colisión, perder una vida
   530 000002EF E83DFFFFFF                  call lose_life
   531                                      
   532                                      .no_collision:
   533 000002F4 5D                              pop rbp
   534 000002F5 C3                              ret
   535                                  
   536                                  ; Nueva función para game over
   537                                  game_lost:
   538                                      ; Limpiar la pantalla
   539                                      print clear, clear_length
    82 000002F6 B801000000          <1>  mov eax, sys_write
    83 000002FB BF01000000          <1>  mov edi, 1
    84 00000300 48BE-               <1>  mov rsi, %1
    84 00000302 [1000000000000000]  <1>
    85 0000030A BA07000000          <1>  mov edx, %2
    86 0000030F 0F05                <1>  syscall
   540                                      
   541                                      ; Mostrar mensaje de derrota
   542                                      section .data
   543 00001805 C2A148617320706572-             lost_msg: db "¡Has perdido!", 0xA, 0xD
   543 0000180E 6469646F210A0D     
   544                                          lost_msg_len: equ $ - lost_msg
   545                                      section .text
   546                                      
   547                                      ; Imprimir mensaje de derrota
   548                                      print lost_msg, lost_msg_len
    82 00000311 B801000000          <1>  mov eax, sys_write
    83 00000316 BF01000000          <1>  mov edi, 1
    84 0000031B 48BE-               <1>  mov rsi, %1
    84 0000031D [0518000000000000]  <1>
    85 00000325 BA10000000          <1>  mov edx, %2
    86 0000032A 0F05                <1>  syscall
   549                                      print score_msg, score_msg_len
    82 0000032C B801000000          <1>  mov eax, sys_write
    83 00000331 BF01000000          <1>  mov edi, 1
    84 00000336 48BE-               <1>  mov rsi, %1
    84 00000338 [3318000000000000]  <1>
    85 00000340 BA0F000000          <1>  mov edx, %2
    86 00000345 0F05                <1>  syscall
   550                                      
   551                                      ; Mostrar puntaje final
   552 00000347 488B05(3D150000)            mov rax, [current_score]
   553 0000034E 48BF-                       mov rdi, number_buffer
   553 00000350 [4615000000000000] 
   554 00000358 E8AC0A0000                  call number_to_string
   555                                      print number_buffer, 20
    82 0000035D B801000000          <1>  mov eax, sys_write
    83 00000362 BF01000000          <1>  mov edi, 1
    84 00000367 48BE-               <1>  mov rsi, %1
    84 00000369 [4615000000000000]  <1>
    85 00000371 BA14000000          <1>  mov edx, %2
    86 00000376 0F05                <1>  syscall
   556                                      
   557                                      ; Esperar un momento antes de salir
   558 00000378 48C7057DFCFFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
   558 00000381 0000               
   559 00000383 48C7057AFCFFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
   559 0000038C 0000               
   560                                      sleeptime
    98 0000038E B823000000          <1>  mov eax, sys_nanosleep
    99 00000393 48BF-               <1>  mov rdi, timespec
    99 00000395 [0000000000000000]  <1>
   100 0000039D 31F6                <1>  xor esi, esi
   101 0000039F 0F05                <1>  syscall
   561                                      
   562 000003A1 E941120000                  jmp exit
   563                                  
   564                                  
   565                                  ; Función para registrar una nueva letra en el mapa
   566                                  ; Entrada:
   567                                  ;   al - letra a registrar
   568                                  ;   r8b - posición x
   569                                  ;   r9b - posición y
   570                                  register_letter:
   571 000003A6 55                          push rbp
   572 000003A7 4889E5                      mov rbp, rsp
   573 000003AA 53                          push rbx
   574 000003AB 51                          push rcx
   575                                      
   576 000003AC 3C20                        cmp al, ' '
   577 000003AE 7438                        je .end
   578                                  
   579                                      ; Encontrar un espacio libre en el mapa
   580 000003B0 4831C9                      xor rcx, rcx
   581 000003B3 480FB615(CB170000)          movzx rdx, byte [letters_count]
   582                                      
   583                                      .find_slot:
   584 000003BB 4883F964                        cmp rcx, 100              ; Máximo de letras
   585 000003BF 7D27                            jge .end                  ; Si no hay espacio, salir
   586                                          
   587 000003C1 488D1C8D[3B160000]              lea rbx, [letters_map + rcx * 4]
   588 000003C9 807B0300                        cmp byte [rbx + 3], 0    ; Verificar si el slot está inactivo
   589 000003CD 7405                            je .found_slot
   590                                          
   591 000003CF 48FFC1                          inc rcx
   592 000003D2 EBE7                            jmp .find_slot
   593                                          
   594                                      .found_slot:
   595                                          ; Guardar la información de la letra
   596 000003D4 448803                          mov [rbx], r8b           ; x
   597 000003D7 44884B01                        mov [rbx + 1], r9b       ; y
   598 000003DB 884302                          mov [rbx + 2], al        ; letra
   599 000003DE C6430301                        mov byte [rbx + 3], 1    ; marcar como activo
   600                                          
   601 000003E2 FE05(CB170000)                  inc byte [letters_count]
   602                                          
   603                                      .end:
   604 000003E8 59                              pop rcx
   605 000003E9 5B                              pop rbx
   606 000003EA 5D                              pop rbp
   607 000003EB C3                              ret
   608                                  
   609                                  ; Función para imprimir todas las letras registradas
   610                                  print_letters:
   611 000003EC 55                          push rbp
   612 000003ED 4889E5                      mov rbp, rsp
   613 000003F0 53                          push rbx
   614 000003F1 51                          push rcx
   615                                      
   616 000003F2 4831C9                      xor rcx, rcx
   617                                      
   618                                      .print_loop:
   619 000003F5 4883F964                        cmp rcx, 100              ; Máximo de letras
   620 000003F9 7D37                            jge .end
   621                                          
   622                                          ; Obtener puntero a la letra actual
   623 000003FB 488D1C8D[3B160000]              lea rbx, [letters_map + rcx * 4]
   624                                          
   625                                          ; Verificar si está activa
   626 00000403 807B0300                        cmp byte [rbx + 3], 0
   627 00000407 7424                            je .next_letter
   628                                          
   629                                          ; Calcular posición en el tablero
   630 00000409 4C0FB603                        movzx r8, byte [rbx]      ; x
   631 0000040D 4C0FB64B01                      movzx r9, byte [rbx + 1]  ; y
   632                                          
   633                                          ; Calcular offset en el tablero
   634 00000412 B84E000000                      mov rax, column_cells
   635 00000417 4883C002                        add rax, 2                ; Incluir caracteres de nueva línea
   636 0000041B 49F7E1                          mul r9
   637 0000041E 4C01C0                          add rax, r8
   638 00000421 488DB8[000A0000]                lea rdi, [board + rax]
   639                                          
   640                                          ; Imprimir la letra
   641 00000428 8A4302                          mov al, [rbx + 2]
   642 0000042B 8807                            mov [rdi], al
   643                                          
   644                                      .next_letter:
   645 0000042D 48FFC1                          inc rcx
   646 00000430 EBC3                            jmp .print_loop
   647                                          
   648                                      .end:
   649 00000432 59                              pop rcx
   650 00000433 5B                              pop rbx
   651 00000434 5D                              pop rbp
   652 00000435 C3                              ret
   653                                  
   654                                  ; Función para borrar una letra específica
   655                                  ; Entrada:
   656                                  ;   r8b - posición x
   657                                  ;   r9b - posición y
   658                                  remove_letter:
   659 00000436 55                          push rbp
   660 00000437 4889E5                      mov rbp, rsp
   661 0000043A 53                          push rbx
   662 0000043B 51                          push rcx
   663                                      
   664 0000043C 4831C9                      xor rcx, rcx
   665                                      
   666                                      .find_loop:
   667 0000043F 4883F964                        cmp rcx, 100              ; Máximo de letras
   668 00000443 7D2E                            jge .end
   669                                          
   670 00000445 488D1C8D[3B160000]              lea rbx, [letters_map + rcx * 4]
   671                                          
   672                                          ; Verificar si está activa y coincide la posición
   673 0000044D 807B0300                        cmp byte [rbx + 3], 0
   674 00000451 741B                            je .next_letter
   675                                          
   676 00000453 8A03                            mov al, [rbx]
   677 00000455 4438C0                          cmp al, r8b
   678 00000458 7514                            jne .next_letter
   679                                          
   680 0000045A 8A4301                          mov al, [rbx + 1]
   681 0000045D 4438C8                          cmp al, r9b
   682 00000460 750C                            jne .next_letter
   683                                          
   684                                          ; Encontrada la letra, desactivarla
   685 00000462 C6430300                        mov byte [rbx + 3], 0
   686 00000466 FE0D(CB170000)                  dec byte [letters_count]
   687 0000046C EB05                            jmp .end
   688                                          
   689                                      .next_letter:
   690 0000046E 48FFC1                          inc rcx
   691 00000471 EBCC                            jmp .find_loop
   692                                          
   693                                      .end:
   694 00000473 59                              pop rcx
   695 00000474 5B                              pop rbx
   696 00000475 5D                              pop rbp
   697 00000476 C3                              ret
   698                                  ; Función para mover las letras hacia abajo
   699                                  move_letters:
   700 00000477 55                          push rbp
   701 00000478 4889E5                      mov rbp, rsp
   702 0000047B 53                          push rbx
   703 0000047C 57                          push rdi
   704 0000047D 56                          push rsi
   705 0000047E 4150                        push r8
   706 00000480 4151                        push r9
   707 00000482 4152                        push r10
   708 00000484 4153                        push r11
   709                                  
   710 00000486 4831C9                      xor rcx, rcx
   711                                  
   712                                      .move_loop:
   713 00000489 4883F964                        cmp rcx, 100
   714 0000048D 0F8D44010000                    jge .print_last_letter
   715                                          
   716 00000493 488D1C8D[3B160000]              lea rbx, [letters_map + rcx * 4]
   717 0000049B 807B0300                        cmp byte [rbx + 3], 0
   718 0000049F 0F842A010000                    je .next_letter
   719                                  
   720 000004A5 4C0FB603                        movzx r8, byte [rbx]
   721 000004A9 4C0FB64B01                      movzx r9, byte [rbx + 1]
   722                                  
   723 000004AE B84E000000                      mov rax, column_cells
   724 000004B3 4883C002                        add rax, 2
   725 000004B7 49F7E1                          mul r9
   726 000004BA 4C01C0                          add rax, r8
   727 000004BD 488DB8[000A0000]                lea rdi, [board + rax]
   728 000004C4 C60720                          mov byte [rdi], ' '
   729                                  
   730 000004C7 FE4301                          inc byte [rbx + 1]
   731 000004CA 4C0FB64B01                      movzx r9, byte [rbx + 1]
   732                                  
   733 000004CF 4983F91F                        cmp r9, row_cells - 1
   734 000004D3 7C09                            jl .check_pallet_collision
   735                                  
   736 000004D5 C6430300                        mov byte [rbx + 3], 0
   737 000004D9 E9F1000000                      jmp .next_letter
   738                                  
   739                                          .check_pallet_collision:
   740 000004DE B84E000000                          mov rax, column_cells
   741 000004E3 4883C002                            add rax, 2
   742 000004E7 49F7E1                              mul r9
   743 000004EA 4C01C0                              add rax, r8
   744 000004ED 488DB8[000A0000]                    lea rdi, [board + rax]
   745                                  
   746 000004F4 8A07                                mov al, [rdi]
   747 000004F6 3C20                                cmp al, ' '
   748 000004F8 0F84D1000000                        je .next_letter
   749 000004FE 3C3D                                cmp al, char_equal
   750 00000500 740A                                je .capture_letter
   751                                  
   752 00000502 8A4302                              mov al, [rbx + 2]
   753 00000505 8807                                mov [rdi], al
   754 00000507 E9C3000000                          jmp .next_letter
   755                                  
   756                                          .capture_letter:
   757                                              ; Obtener la nueva letra
   758 0000050C 8A4302                              mov al, [rbx + 2]
   759                                              
   760                                              ; Comparar con la última letra
   761 0000050F 3A05(CC170000)                      cmp al, [last_letter]
   762 00000515 7407                                je .same_letter
   763                                              
   764                                              ; Es una letra diferente, resetear el procesamiento
   765 00000517 C605(E0170000)00                    mov byte [current_power_processed], 0
   766                                              
   767                                              .same_letter:
   768                                              ; Guardar la nueva letra
   769 0000051E 8805(CC170000)                      mov [last_letter], al
   770                                              
   771                                              ; Verificar si es 'E' para extender la paleta
   772 00000524 3C45                                cmp al, 'E'
   773 00000526 7432                                je .extend_pallet
   774                                              
   775                                              ; Verificar si es 'P' para añadir vida
   776 00000528 3C50                                cmp al, 'P'
   777 0000052A 7449                                je .check_add_life
   778                                  
   779 0000052C 3C53                                cmp al, 'S'
   780 0000052E 7477                                je .slow_ball
   781                                  
   782 00000530 3C43                                cmp al, 'C'
   783 00000532 0F848A000000                        je .activate_catch
   784                                              
   785                                              ; Si no es ningún power-up, restaurar tamaño normal
   786 00000538 488B05(4F140000)                    mov rax, [default_pallet_size]
   787 0000053F 488905(47140000)                    mov [pallet_size], rax
   788 00000546 48C705(E2170000)01-                 mov qword [ball_speed], 1    ; Restaurar velocidad normal
   788 0000054E 000000             
   789 00000551 C605(FA170000)00                    mov byte [catch_power_active], 0
   790 00000558 EB71                                jmp .finish_capture
   791                                  
   792                                              .extend_pallet:
   793 0000055A 48C705(E2170000)01-                     mov qword [ball_speed], 1    ; Restaurar velocidad normal
   793 00000562 000000             
   794 00000565 488B05(57140000)                        mov rax, [extended_pallet_size]
   795 0000056C 488905(47140000)                        mov [pallet_size], rax
   796 00000573 EB56                                    jmp .finish_capture
   797                                  
   798                                              .check_add_life:
   799 00000575 488B05(4F140000)                        mov rax, [default_pallet_size]
   800 0000057C 488905(47140000)                        mov [pallet_size], rax
   801 00000583 48C705(E2170000)01-                     mov qword [ball_speed], 1 
   801 0000058B 000000             
   802                                                  ; Verificar si ya procesamos este power-up
   803 0000058E 803D(E0170000)00                        cmp byte [current_power_processed], 0
   804 00000595 7534                                    jne .finish_capture
   805                                                  
   806                                                  ; Preservar registros importantes
   807 00000597 51                                      push rcx
   808 00000598 53                                      push rbx
   809                                                  
   810                                                  ; Marcar como procesado
   811 00000599 C605(E0170000)01                        mov byte [current_power_processed], 1
   812                                                  
   813                                                  ; Añadir una vida
   814 000005A0 E881000000                              call add_life
   815                                                  
   816                                                  ; Restaurar registros
   817 000005A5 5B                                      pop rbx
   818 000005A6 59                                      pop rcx
   819                                                  
   820                                              .slow_ball:
   821 000005A7 488B05(4F140000)                        mov rax, [default_pallet_size]
   822 000005AE 488905(47140000)                        mov [pallet_size], rax
   823 000005B5 48C705(E2170000)02-                     mov qword [ball_speed], 2    ; Activar velocidad lenta
   823 000005BD 000000             
   824 000005C0 EB09                                    jmp .finish_capture
   825                                  
   826                                              .activate_catch:
   827 000005C2 C605(FA170000)01                        mov byte [catch_power_active], 1
   828 000005C9 EB00                                    jmp .finish_capture
   829                                  
   830                                              .finish_capture:
   831 000005CB C6430300                                mov byte [rbx + 3], 0
   832                                  
   833                                          .next_letter:
   834 000005CF 48FFC1                              inc rcx
   835 000005D2 E9B2FEFFFF                          jmp .move_loop
   836                                  
   837                                      .print_last_letter:
   838                                          print last_letter_msg, last_letter_msg_len - 3
    82 000005D7 B801000000          <1>  mov eax, sys_write
    83 000005DC BF01000000          <1>  mov edi, 1
    84 000005E1 48BE-               <1>  mov rsi, %1
    84 000005E3 [CD17000000000000]  <1>
    85 000005EB BA10000000          <1>  mov edx, %2
    86 000005F0 0F05                <1>  syscall
   839 000005F2 8A05(CC170000)                  mov al, [last_letter]
   840 000005F8 8805(DC170000)                  mov [last_letter_msg + 15], al
   841                                          print last_letter_msg + last_letter_msg_len - 3, 3
    82 000005FE B801000000          <1>  mov eax, sys_write
    83 00000603 BF01000000          <1>  mov edi, 1
    84 00000608 48BE-               <1>  mov rsi, %1
    84 0000060A [DD17000000000000]  <1>
    85 00000612 BA03000000          <1>  mov edx, %2
    86 00000617 0F05                <1>  syscall
   842                                  
   843                                      .end:
   844 00000619 415B                            pop r11
   845 0000061B 415A                            pop r10
   846 0000061D 4159                            pop r9
   847 0000061F 4158                            pop r8
   848 00000621 5E                              pop rsi
   849 00000622 5F                              pop rdi
   850 00000623 5B                              pop rbx
   851 00000624 5D                              pop rbp
   852 00000625 C3                              ret
   853                                  
   854                                  add_life:
   855 00000626 55                          push rbp
   856 00000627 4889E5                      mov rbp, rsp
   857 0000062A 53                          push rbx
   858 0000062B 51                          push rcx
   859 0000062C 57                          push rdi
   860 0000062D 56                          push rsi
   861 0000062E 4150                        push r8
   862 00000630 4151                        push r9
   863                                      
   864                                      ; Verificar si ya tenemos el máximo de vidas
   865 00000632 480FB605(3A160000)          movzx rax, byte [current_lives]
   866 0000063A 4883F807                    cmp rax, 7          ; Comparar con el máximo de vidas
   867 0000063E 7D2C                        jge .end
   868                                      
   869                                      ; Incrementar el contador de vidas
   870 00000640 FE05(3A160000)              inc byte [current_lives]
   871                                      
   872                                      ; Encontrar la siguiente vida inactiva
   873 00000646 4831C9                      xor rcx, rcx
   874                                      
   875                                      .find_inactive:
   876 00000649 4883F907                        cmp rcx, lives_count
   877 0000064D 7D1D                            jge .end
   878                                          
   879                                          ; Calcular offset de la vida actual
   880 0000064F 4889C8                          mov rax, rcx
   881 00000652 486BC003                        imul rax, 3
   882 00000656 488DB0[24160000]                lea rsi, [lives_data + rax]
   883                                          
   884                                          ; Verificar si está inactiva
   885 0000065D 807E0200                        cmp byte [rsi + 2], 0
   886 00000661 7405                            je .activate_life
   887                                          
   888 00000663 48FFC1                          inc rcx
   889 00000666 EBE1                            jmp .find_inactive
   890                                          
   891                                      .activate_life:
   892                                          ; Activar la vida
   893 00000668 C6460201                        mov byte [rsi + 2], 1
   894                                          
   895                                      .end:
   896 0000066C 4159                            pop r9
   897 0000066E 4158                            pop r8
   898 00000670 5E                              pop rsi
   899 00000671 5F                              pop rdi
   900 00000672 59                              pop rcx
   901 00000673 5B                              pop rbx
   902 00000674 5D                              pop rbp
   903 00000675 C3                              ret
   904                                  
   905                                  
   906                                  print_ball:
   907 00000676 4C8B05(5F140000)        	mov r8, [ball_x_pos]
   908 0000067D 4C8B0D(67140000)        	mov r9, [ball_y_pos]
   909 00000684 4981C0[000A0000]        	add r8, board
   910                                  
   911 0000068B 4C89C9                  	mov rcx, r9
   912 0000068E B850000000              	mov rax, column_cells + 2
   913 00000693 48F7E9                  	imul rcx
   914                                  	
   915 00000696 4901C0                  	add r8, rax
   916 00000699 41C6004F                	mov byte [r8], char_O
   917 0000069D C3                      	ret
   918                                  
   919                                  	
   920                                  	;mov rax, board + r8 + r9 * (column_cells + 2)
   921                                  	
   922                                  print_pallet:
   923                                      ; Primero borrar la paleta anterior completa (usando el tamaño máximo posible)
   924 0000069E 4C8B05(3F140000)            mov r8, [pallet_position]
   925 000006A5 488B0D(57140000)            mov rcx, [extended_pallet_size]
   926                                      .clear_pallet:
   927 000006AC 41C60020                        mov byte [r8], char_space
   928 000006B0 49FFC0                          inc r8
   929 000006B3 48FFC9                          dec rcx
   930 000006B6 75F4                            jnz .clear_pallet
   931                                  
   932                                      ; Luego dibujar la nueva paleta con el tamaño actual
   933 000006B8 4C8B05(3F140000)            mov r8, [pallet_position]
   934 000006BF 488B0D(47140000)            mov rcx, [pallet_size]
   935                                      .write_pallet:
   936 000006C6 41C6003D                        mov byte [r8], char_equal
   937 000006CA 49FFC0                          inc r8
   938 000006CD 48FFC9                          dec rcx
   939 000006D0 75F4                            jnz .write_pallet
   940                                  
   941 000006D2 C3                          ret
   942                                  
   943                                  move_pallet:
   944 000006D3 803D(7F140000)00            cmp byte [ball_moving], 0
   945 000006DA 7507                        jne .continue_movement
   946 000006DC C605(7F140000)01            mov byte [ball_moving], 1
   947                                  
   948                                      .continue_movement:
   949 000006E3 4883FFFF                        cmp rdi, left_direction
   950 000006E7 7531                            jne .move_right
   951                                  
   952                                          .move_left:
   953 000006E9 4C8B05(3F140000)                    mov r8, [pallet_position]
   954 000006F0 49FFC8                              dec r8              
   955 000006F3 418A00                              mov al, [r8]       
   956 000006F6 3C58                                cmp al, 'X'        
   957 000006F8 744D                                je .end            
   958                                              
   959 000006FA 4C8B05(3F140000)                    mov r8, [pallet_position]
   960 00000701 4C8B0D(47140000)                    mov r9, [pallet_size]
   961 00000708 43C64408FF20                        mov byte [r8 + r9 - 1], char_space  
   962 0000070E 49FFC8                              dec r8
   963 00000711 4C8905(3F140000)                    mov [pallet_position], r8
   964 00000718 EB2D                                jmp .end
   965                                              
   966                                          .move_right:
   967 0000071A 4C8B05(3F140000)                    mov r8, [pallet_position]
   968 00000721 4C8B0D(47140000)                    mov r9, [pallet_size]
   969 00000728 4D01C8                              add r8, r9        
   970 0000072B 418A00                              mov al, [r8]      
   971 0000072E 3C58                                cmp al, 'X'       
   972 00000730 7415                                je .end           
   973                                              
   974 00000732 4C8B05(3F140000)                    mov r8, [pallet_position]
   975 00000739 41C60020                            mov byte [r8], char_space
   976 0000073D 49FFC0                              inc r8
   977 00000740 4C8905(3F140000)                    mov [pallet_position], r8
   978                                              
   979                                          .end:
   980 00000747 C3                                  ret
   981                                  
   982                                              
   983                                  ; Nueva función auxiliar para actualizar la posición de la bola atrapada
   984                                  update_caught_ball_position:
   985 00000748 55                          push rbp
   986 00000749 4889E5                      mov rbp, rsp
   987                                      
   988                                      ; Calcular la nueva posición de la bola basada en la paleta
   989 0000074C 4C8B05(3F140000)            mov r8, [pallet_position]
   990 00000753 4981E8[000A0000]            sub r8, board          ; Obtener posición relativa
   991 0000075A B850000000                  mov rax, column_cells + 2
   992 0000075F 4831D2                      xor rdx, rdx
   993 00000762 48F7F0                      div rax                ; División para obtener X,Y
   994                                      
   995                                      ; rdx contiene X (resto), rax contiene Y (cociente)
   996 00000765 4989C1                      mov r9, rax            ; Y de la paleta
   997 00000768 49FFC9                      dec r9                 ; Una posición arriba de la paleta
   998                                      
   999                                      ; Añadir el offset guardado a la posición X
  1000 0000076B 4889D0                      mov rax, rdx
  1001 0000076E 480305(FC170000)            add rax, [ball_catch_offset]
  1002 00000775 488905(5F140000)            mov [ball_x_pos], rax
  1003 0000077C 4C890D(67140000)            mov [ball_y_pos], r9
  1004                                      
  1005 00000783 5D                          pop rbp
  1006 00000784 C3                          ret
  1007                                  move_ball:
  1008                                  
  1009 00000785 803D(FB170000)01            cmp byte [ball_caught], 1
  1010 0000078C 0F8490000000                je .move_with_pallet
  1011                                  
  1012                                      ; Incrementar contador de velocidad
  1013 00000792 48FF05(F2170000)            inc qword [speed_counter]
  1014                                      
  1015                                      ; Verificar si debemos mover la bola en este ciclo
  1016 00000799 488B05(F2170000)            mov rax, [speed_counter]
  1017 000007A0 483B05(E2170000)            cmp rax, [ball_speed]
  1018 000007A7 0F8C9D010000                jl .end
  1019                                      
  1020                                      ; Resetear contador de velocidad
  1021 000007AD 48C705(F2170000)00-         mov qword [speed_counter], 0
  1021 000007B5 000000             
  1022                                  
  1023                                      ; Borrar la posición actual de la bola
  1024 000007B8 4C8B05(5F140000)            mov r8, [ball_x_pos]
  1025 000007BF 4C8B0D(67140000)            mov r9, [ball_y_pos]
  1026 000007C6 4981C0[000A0000]            add r8, board
  1027 000007CD 4C89C9                      mov rcx, r9
  1028 000007D0 B850000000                  mov rax, column_cells + 2
  1029 000007D5 48F7E9                      imul rcx
  1030 000007D8 4901C0                      add r8, rax
  1031 000007DB 41C60020                    mov byte [r8], char_space
  1032                                  
  1033                                      ; Calcular siguiente posición X
  1034 000007DF 4C8B05(5F140000)            mov r8, [ball_x_pos]
  1035 000007E6 4C8B0D(67140000)            mov r9, [ball_y_pos]
  1036 000007ED 488B05(6F140000)            mov rax, [ball_direction_x]
  1037 000007F4 4901C0                      add r8, rax               ; Nueva posición X
  1038                                  
  1039                                      ; Calcular la dirección de memoria para la siguiente posición
  1040 000007F7 4D89C2                      mov r10, r8
  1041 000007FA 4981C2[000A0000]            add r10, board
  1042 00000801 4C89C9                      mov rcx, r9
  1043 00000804 B850000000                  mov rax, column_cells + 2
  1044 00000809 48F7E9                      imul rcx
  1045 0000080C 4901C2                      add r10, rax
  1046                                  
  1047                                      ; Verificar si hay una X en la siguiente posición X
  1048 0000080F 418A02                      mov al, [r10]
  1049 00000812 3C58                        cmp al, 'X'
  1050 00000814 7565                        jne .check_block_x
  1051 00000816 48F71D(6F140000)            neg qword [ball_direction_x]  ; Cambiar dirección X si hay una X
  1052 0000081D E928010000                  jmp .end
  1053                                  
  1054                                      .move_with_pallet:
  1055                                          ; Borrar la posición actual de la bola
  1056 00000822 4C8B05(5F140000)                mov r8, [ball_x_pos]
  1057 00000829 4C8B0D(67140000)                mov r9, [ball_y_pos]
  1058 00000830 4D89C2                          mov r10, r8
  1059 00000833 4981C2[000A0000]                add r10, board
  1060 0000083A 4C89C9                          mov rcx, r9
  1061 0000083D B850000000                      mov rax, column_cells + 2
  1062 00000842 48F7E9                          imul rcx
  1063 00000845 4901C2                          add r10, rax
  1064 00000848 41C60220                        mov byte [r10], char_space
  1065                                  
  1066                                          ; Actualizar posición X basada en la paleta
  1067 0000084C 4C8B05(3F140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  1068 00000853 4981E8[000A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  1069 0000085A 4C0305(FC170000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  1070 00000861 4C8905(5F140000)                mov [ball_x_pos], r8          ; Guardar nueva posición X
  1071                                  
  1072                                          ; Mantener la bola una posición arriba de la paleta
  1073 00000868 4C8B0D(67140000)                mov r9, [ball_y_pos]          ; Mantener la misma altura
  1074 0000086F 4C890D(67140000)                mov [ball_y_pos], r9          ; Actualizar posición Y
  1075                                  
  1076 00000876 E9CF000000                      jmp .end
  1077                                  
  1078                                  
  1079                                      .check_block_x:
  1080                                          ; Verificar colisión con bloques en X
  1081 0000087B 4150                            push r8     ; Guardar registros que usa check_block_collision
  1082 0000087D 4151                            push r9
  1083 0000087F 4152                            push r10
  1084 00000881 E8DB060000                      call check_block_collision
  1085 00000886 415A                            pop r10
  1086 00000888 4159                            pop r9
  1087 0000088A 4158                            pop r8
  1088 0000088C 4885C0                          test rax, rax
  1089 0000088F 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  1090 00000891 48F71D(6F140000)                neg qword [ball_direction_x]  ; Si hay colisión, rebotar
  1091 00000898 E9AD000000                      jmp .end
  1092                                  
  1093                                      .check_paddle_x:
  1094                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  1095 0000089D 41803A3D                        cmp byte [r10], char_equal
  1096 000008A1 750C                            jne .check_y_movement
  1097 000008A3 48F71D(6F140000)                neg qword [ball_direction_x]  ; Cambiar dirección X si hay una paleta
  1098 000008AA E99B000000                      jmp .end
  1099                                  
  1100                                      .check_y_movement:
  1101                                          ; Calcular siguiente posición Y
  1102 000008AF 488B05(77140000)                mov rax, [ball_direction_y]
  1103 000008B6 4901C1                          add r9, rax                  ; Nueva posición Y
  1104                                  
  1105                                          ; Calcular la dirección de memoria para la siguiente posición Y
  1106 000008B9 4D89C2                          mov r10, r8
  1107 000008BC 4981C2[000A0000]                add r10, board
  1108 000008C3 4C89C9                          mov rcx, r9
  1109 000008C6 B850000000                      mov rax, column_cells + 2
  1110 000008CB 48F7E9                          imul rcx
  1111 000008CE 4901C2                          add r10, rax
  1112                                  
  1113                                          ; Verificar si hay una X en la siguiente posición Y
  1114 000008D1 418A02                          mov al, [r10]
  1115 000008D4 3C58                            cmp al, 'X'
  1116 000008D6 7509                            jne .check_block_y
  1117 000008D8 48F71D(77140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una X
  1118 000008DF EB69                            jmp .end
  1119                                  
  1120                                      .check_block_y:
  1121                                          ; Verificar colisión con bloques en Y
  1122 000008E1 4150                            push r8     ; Guardar registros que usa check_block_collision
  1123 000008E3 4151                            push r9
  1124 000008E5 4152                            push r10
  1125 000008E7 E875060000                      call check_block_collision
  1126 000008EC 415A                            pop r10
  1127 000008EE 4159                            pop r9
  1128 000008F0 4158                            pop r8
  1129 000008F2 4885C0                          test rax, rax
  1130 000008F5 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  1131 000008F7 48F71D(77140000)                neg qword [ball_direction_y]  ; Si hay colisión, rebotar
  1132 000008FE EB4A                            jmp .end
  1133                                  
  1134                                      .check_paddle_y:
  1135                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  1136 00000900 41803A3D                        cmp byte [r10], char_equal
  1137 00000904 7536                            jne .update_position
  1138                                  
  1139                                          ; Verificar si el poder catch está activo
  1140 00000906 803D(FA170000)01                cmp byte [catch_power_active], 1
  1141 0000090D 7524                            jne .normal_bounce
  1142                                  
  1143                                          ; Activar el modo "atrapado"
  1144 0000090F C605(FB170000)01                mov byte [ball_caught], 1
  1145                                          
  1146                                          ; Guardar la posición X actual de la bola como offset
  1147 00000916 488B05(5F140000)                mov rax, [ball_x_pos]           ; Posición X actual de la bola
  1148 0000091D 482B05(3F140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  1149 00000924 4805[000A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  1150 0000092A 488905(FC170000)                mov [ball_catch_offset], rax    ; Guardar el offset
  1151                                          
  1152 00000931 EB17                            jmp .end
  1153                                  
  1154                                      .normal_bounce:
  1155 00000933 48F71D(77140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una paleta
  1156 0000093A EB0E                            jmp .end
  1157                                  
  1158                                  
  1159                                      .update_position:
  1160 0000093C 4C8905(5F140000)                mov [ball_x_pos], r8
  1161 00000943 4C890D(67140000)                mov [ball_y_pos], r9
  1162                                  
  1163                                      .end:
  1164 0000094A C3                              ret
  1165                                  
  1166                                  ; Nueva función para procesar la tecla C cuando la bola está atrapada
  1167                                  ; Procesar la tecla 'c' cuando el poder de atrapar está activo
  1168                                  process_catch_release:
  1169 0000094B 55                          push rbp
  1170 0000094C 4889E5                      mov rbp, rsp
  1171                                  
  1172                                      ; Verificar si la bola está atrapada
  1173 0000094F 803D(FB170000)00            cmp byte [ball_caught], 0
  1174 00000956 7436                        je .end
  1175                                  
  1176                                      ; Verificar si el poder catch está activo
  1177 00000958 803D(FA170000)01            cmp byte [catch_power_active], 1
  1178 0000095F 752D                        jne .end
  1179                                  
  1180                                      ; Verificar si se presionó la tecla 'c'
  1181 00000961 803D(04180000)63            cmp byte [last_key], 'c'
  1182 00000968 7524                        jne .end
  1183                                  
  1184                                      ; Liberar la bola y asignar dirección inicial
  1185 0000096A C605(FB170000)00            mov byte [ball_caught], 0
  1186 00000971 48C705(6F140000)01-         mov qword [ball_direction_x], 1
  1186 00000979 000000             
  1187 0000097C 48C705(77140000)FF-         mov qword [ball_direction_y], -1
  1187 00000984 FFFFFF             
  1188                                  
  1189                                      ; Limpiar la tecla procesada
  1190 00000987 C605(04180000)00            mov byte [last_key], 0
  1191                                  
  1192                                      .end:
  1193 0000098E 5D                              pop rbp
  1194 0000098F C3                              ret
  1195                                  
  1196                                  
  1197                                  display_level_number:
  1198 00000990 55                          push rbp
  1199 00000991 4889E5                      mov rbp, rsp
  1200                                      
  1201                                      ; Limpiar la pantalla primero
  1202                                      print clear, clear_length
    82 00000994 B801000000          <1>  mov eax, sys_write
    83 00000999 BF01000000          <1>  mov edi, 1
    84 0000099E 48BE-               <1>  mov rsi, %1
    84 000009A0 [1000000000000000]  <1>
    85 000009A8 BA07000000          <1>  mov edx, %2
    86 000009AD 0F05                <1>  syscall
  1203                                      
  1204                                      ; Calcular la posición central para el mensaje
  1205                                      ; Para el mensaje "NIVEL X", necesitamos centrar 7 caracteres
  1206 000009AF B84E000000                  mov rax, column_cells
  1207 000009B4 4883E807                    sub rax, 7                  ; longitud de "NIVEL X"
  1208 000009B8 48D1E8                      shr rax, 1                  ; dividir por 2 para centrar
  1209                                      
  1210                                      ; Calcular la fila central
  1211 000009BB BB20000000                  mov rbx, row_cells
  1212 000009C0 48D1EB                      shr rbx, 1                  ; dividir por 2 para obtener la fila central
  1213                                      
  1214                                      ; Calcular el offset en el buffer
  1215 000009C3 B950000000                  mov rcx, column_cells + 2   ; ancho total de una línea incluyendo newline
  1216 000009C8 48F7E3                      mul rbx                     ; multiplicar por la fila central
  1217 000009CB 4801D8                      add rax, rbx                ; añadir el offset horizontal
  1218                                      
  1219                                      ; Escribir "NIVEL " en la posición calculada
  1220 000009CE 488DB8[000A0000]            lea rdi, [board + rax]
  1221 000009D5 48BE-                       mov rsi, level_msg
  1221 000009D7 [2414000000000000] 
  1222 000009DF B906000000                  mov rcx, level_msg_len
  1223 000009E4 F3A4                        rep movsb
  1224                                      
  1225                                      ; Escribir el número del nivel
  1226 000009E6 8A05(B4140000)              mov al, [current_level]
  1227 000009EC 0430                        add al, '0'                 ; convertir a ASCII
  1228 000009EE 8807                        mov [rdi], al
  1229                                      
  1230                                      ; Mostrar el board con el mensaje
  1231                                      print board, board_size
    82 000009F0 B801000000          <1>  mov eax, sys_write
    83 000009F5 BF01000000          <1>  mov edi, 1
    84 000009FA 48BE-               <1>  mov rsi, %1
    84 000009FC [000A000000000000]  <1>
    85 00000A04 BA000A0000          <1>  mov edx, %2
    86 00000A09 0F05                <1>  syscall
  1232                                      
  1233                                      ; Esperar un segundo
  1234 00000A0B B823000000                  mov rax, sys_nanosleep
  1235 00000A10 48BF-                       mov rdi, level_display_time
  1235 00000A12 [2F14000000000000] 
  1236 00000A1A 4831F6                      xor rsi, rsi
  1237 00000A1D 0F05                        syscall
  1238                                      
  1239 00000A1F 5D                          pop rbp
  1240 00000A20 C3                          ret
  1241                                  
  1242                                  ; Función para inicializar un tablero vacío
  1243                                  init_empty_board:
  1244 00000A21 56                          push rsi
  1245 00000A22 57                          push rdi
  1246 00000A23 51                          push rcx
  1247 00000A24 50                          push rax
  1248                                  
  1249 00000A25 488D35(00000000)            lea rsi, [board_template]   ; Copiar la plantilla del tablero
  1250 00000A2C 488D3D(000A0000)            lea rdi, [board]            ; Destino: el tablero actual
  1251 00000A33 B9000A0000                  mov rcx, board_template_size
  1252 00000A38 F3A4                        rep movsb                   ; Copiar el tablero
  1253                                  
  1254 00000A3A 58                          pop rax
  1255 00000A3B 59                          pop rcx
  1256 00000A3C 5F                          pop rdi
  1257 00000A3D 5E                          pop rsi
  1258 00000A3E C3                          ret
  1259                                  
  1260                                  
  1261                                  init_level:
  1262                                  
  1263 00000A3F 488B05(4F140000)            mov rax, [default_pallet_size]
  1264 00000A46 488905(47140000)            mov [pallet_size], rax
  1265 00000A4D 48C705(E2170000)01-         mov qword [ball_speed], 1    ; Restaurar velocidad normal
  1265 00000A55 000000             
  1266                                  
  1267                                      ; 1) Copiamos board_template en board para que quede "virgen"
  1268                                          ; Reiniciar letras activas
  1269 00000A58 488D3D(3B160000)            lea rdi, [letters_map]
  1270 00000A5F B990010000                  mov rcx, 100 * 4             ; Cada letra ocupa 4 bytes, limpiar 100 letras
  1271 00000A64 4831C0                      xor rax, rax
  1272 00000A67 F3AA                        rep stosb                    ; Llenar con ceros
  1273                                      
  1274                                      ; Inicializar dirección de la bola (derecha y arriba)
  1275 00000A69 48C705(6F140000)01-         mov qword [ball_direction_x], 1    ; Dirección hacia la derecha (1 = derecha, -1 = izquierda)
  1275 00000A71 000000             
  1276 00000A74 48C705(77140000)FF-         mov qword [ball_direction_y], -1   ; Dirección hacia arriba (-1 = arriba, 1 = abajo)
  1276 00000A7C FFFFFF             
  1277                                  
  1278                                  
  1279                                      ; Reiniciar contador de letras activas
  1280 00000A7F 4831C0                      xor rax, rax
  1281 00000A82 8805(CB170000)              mov [letters_count], al
  1282                                  
  1283                                      ; Reiniciar última letra capturada
  1284 00000A88 C605(CC170000)20            mov byte [last_letter], ' '
  1285 00000A8F C605(45150000)00            mov byte [destroyed_blocks], 0 
  1286 00000A96 E886FFFFFF                  call init_empty_board
  1287 00000A9B E8F0FEFFFF                  call display_level_number
  1288 00000AA0 E8E5050000                  call init_enemies
  1289                                      
  1290 00000AA5 56                          push rsi
  1291 00000AA6 57                          push rdi
  1292 00000AA7 51                          push rcx
  1293 00000AA8 50                          push rax
  1294                                  
  1295 00000AA9 488D35(00000000)            lea rsi, [board_template]
  1296 00000AB0 488D3D(000A0000)            lea rdi, [board]
  1297 00000AB7 B9000A0000                  mov rcx, board_template_size
  1298 00000ABC F3A4                        rep movsb                 ; Copiamos la plantilla a board
  1299                                  
  1300 00000ABE 58                          pop rax
  1301 00000ABF 59                          pop rcx
  1302 00000AC0 5F                          pop rdi
  1303 00000AC1 5E                          pop rsi
  1304                                  
  1305 00000AC2 B90A000000                  mov rcx, 10
  1306 00000AC7 4831C0                      xor rax, rax
  1307 00000ACA 488D3D(E8150000)            lea rdi, [enemy_spawns_triggered]
  1308 00000AD1 F3AA                        rep stosb      
  1309                                  
  1310                                      ; Verificar el nivel actual y cargar los bloques correspondientes
  1311 00000AD3 803D(B4140000)01            cmp byte [current_level], 1
  1312 00000ADA 7431                        je .level1
  1313 00000ADC 803D(B4140000)02            cmp byte [current_level], 2
  1314 00000AE3 7454                        je .level2
  1315 00000AE5 803D(B4140000)03            cmp byte [current_level], 3
  1316 00000AEC 7477                        je .level3
  1317 00000AEE 803D(B4140000)04            cmp byte [current_level], 4
  1318 00000AF5 0F8492000000                je .level4
  1319 00000AFB 803D(B4140000)05            cmp byte [current_level], 5
  1320 00000B02 0F84AD000000                je .level5
  1321 00000B08 E9D0000000                  jmp .done
  1322                                  
  1323                                  
  1324                                  
  1325                                      .level1:
  1326 00000B0D C605(B5140000)03                mov byte [blocks_remaining], level1_blocks_count
  1327 00000B14 4831C9                          xor rcx, rcx             
  1328                                          .init_loop1:
  1329 00000B17 4883F903                            cmp rcx, level1_blocks_count
  1330 00000B1B 0F8DBC000000                        jge .done
  1331 00000B21 4889C8                              mov rax, rcx         
  1332 00000B24 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1333 00000B28 8A90[B9140000]                      mov dl, byte [level1_blocks + rax + 3]  
  1334 00000B2E 8891[D9140000]                      mov byte [block_states + rcx], dl
  1335 00000B34 48FFC1                              inc rcx
  1336 00000B37 EBDE                                jmp .init_loop1
  1337                                  
  1338                                      .level2:
  1339 00000B39 C605(B5140000)01                mov byte [blocks_remaining], level2_blocks_count
  1340 00000B40 4831C9                          xor rcx, rcx             
  1341                                          .init_loop2:
  1342 00000B43 4883F901                            cmp rcx, level2_blocks_count
  1343 00000B47 0F8D90000000                        jge .done
  1344 00000B4D 4889C8                              mov rax, rcx         
  1345 00000B50 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1346 00000B54 8A90[C8140000]                      mov dl, byte [level2_blocks + rax + 3]  
  1347 00000B5A 8891[D9140000]                      mov byte [block_states + rcx], dl
  1348 00000B60 48FFC1                              inc rcx
  1349 00000B63 EBDE                                jmp .init_loop2
  1350                                      .level3:
  1351 00000B65 C605(B5140000)01                mov byte [blocks_remaining], level3_blocks_count
  1352 00000B6C 4831C9                          xor rcx, rcx             
  1353                                          .init_loop3:
  1354 00000B6F 4883F901                            cmp rcx, level3_blocks_count
  1355 00000B73 7D68                                jge .done
  1356 00000B75 4889C8                              mov rax, rcx         
  1357 00000B78 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1358 00000B7C 8A90[CD140000]                      mov dl, byte [level3_blocks + rax + 3]  
  1359 00000B82 8891[D9140000]                      mov byte [block_states + rcx], dl
  1360 00000B88 48FFC1                              inc rcx
  1361 00000B8B EBE2                                jmp .init_loop3
  1362                                  
  1363                                      .level4:
  1364 00000B8D C605(B5140000)01                mov byte [blocks_remaining], level4_blocks_count
  1365 00000B94 4831C9                          xor rcx, rcx             
  1366                                          .init_loop4:
  1367 00000B97 4883F901                            cmp rcx, level4_blocks_count
  1368 00000B9B 7D40                                jge .done
  1369 00000B9D 4889C8                              mov rax, rcx         
  1370 00000BA0 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1371 00000BA4 8A90[D2140000]                      mov dl, byte [level4_blocks + rax + 3]  
  1372 00000BAA 8891[D9140000]                      mov byte [block_states + rcx], dl
  1373 00000BB0 48FFC1                              inc rcx
  1374 00000BB3 EBE2                                jmp .init_loop4
  1375                                  
  1376                                      .level5:
  1377 00000BB5 C605(B5140000)01                mov byte [blocks_remaining], level5_blocks_count
  1378 00000BBC 4831C9                          xor rcx, rcx             
  1379                                          .init_loop5:
  1380 00000BBF 4883F901                            cmp rcx, level5_blocks_count
  1381 00000BC3 7D18                                jge .done
  1382 00000BC5 4889C8                              mov rax, rcx         
  1383 00000BC8 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1384 00000BCC 8A90[D7140000]                      mov dl, byte [level5_blocks + rax + 3]  
  1385 00000BD2 8891[D9140000]                      mov byte [block_states + rcx], dl
  1386 00000BD8 48FFC1                              inc rcx
  1387 00000BDB EBE2                                jmp .init_loop5
  1388                                      .done:
  1389 00000BDD C3                              ret
  1390                                  
  1391                                  
  1392                                  ; Función para verificar y manejar la transición de nivel
  1393                                  check_level_complete:
  1394                                      ; Verificar si quedan bloques
  1395 00000BDE 803D(B5140000)00            cmp byte [blocks_remaining], 0
  1396 00000BE5 753C                        jne .not_complete
  1397                                      
  1398                                      ; Incrementar el nivel
  1399 00000BE7 FE05(B4140000)              inc byte [current_level]
  1400                                      
  1401                                      ; Verificar si hemos completado todos los niveles (asumiendo 2 niveles por ahora)
  1402 00000BED 803D(B4140000)06            cmp byte [current_level], 6
  1403 00000BF4 742E                        je game_win
  1404                                      
  1405                                      ; Reinicializar el juego para el siguiente nivel
  1406 00000BF6 E844FEFFFF                  call init_level
  1407                                      
  1408                                      ; Reinicializar la posición de la bola y la paleta
  1409 00000BFB 48C705(5F140000)28-         mov qword [ball_x_pos], 40
  1409 00000C03 000000             
  1410 00000C06 48C705(67140000)1C-         mov qword [ball_y_pos], 28
  1410 00000C0E 000000             
  1411 00000C11 C605(7F140000)00            mov byte [ball_moving], 0
  1412 00000C18 48C705(3F140000)-           mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  1412 00000C1F [36130000]         
  1413                                      
  1414                                      .not_complete:
  1415 00000C23 C3                              ret
  1416                                  
  1417                                      ; Nueva función para manejar la victoria del juego
  1418                                  game_win:
  1419                                      ; Limpiar la pantalla primero
  1420                                      print clear, clear_length
    82 00000C24 B801000000          <1>  mov eax, sys_write
    83 00000C29 BF01000000          <1>  mov edi, 1
    84 00000C2E 48BE-               <1>  mov rsi, %1
    84 00000C30 [1000000000000000]  <1>
    85 00000C38 BA07000000          <1>  mov edx, %2
    86 00000C3D 0F05                <1>  syscall
  1421                                      
  1422                                      ; Mensaje de victoria
  1423 00000C3F 488B05(3D150000)            mov rax, [current_score]    ; Obtener el puntaje final
  1424 00000C46 48BF-                       mov rdi, number_buffer      ; Convertir a string
  1424 00000C48 [4615000000000000] 
  1425 00000C50 E8B4010000                  call number_to_string
  1426                                      
  1427                                      ; Definir mensaje de victoria
  1428                                      section .data
  1429 00001815 C2A146656C69636964-             win_msg: db "¡Felicidades! ¡Has ganado!", 0xA, 0xD
  1429 0000181E 616465732120C2A148-
  1429 00001827 61732067616E61646F-
  1429 00001830 210A0D             
  1430                                          win_msg_len: equ $ - win_msg
  1431 00001833 50756E74616A652066-             score_msg: db "Puntaje final: "
  1431 0000183C 696E616C3A20       
  1432                                          score_msg_len: equ $ - score_msg
  1433                                      section .text
  1434                                      
  1435                                      ; Imprimir mensajes
  1436                                      print win_msg, win_msg_len
    82 00000C55 B801000000          <1>  mov eax, sys_write
    83 00000C5A BF01000000          <1>  mov edi, 1
    84 00000C5F 48BE-               <1>  mov rsi, %1
    84 00000C61 [1518000000000000]  <1>
    85 00000C69 BA1E000000          <1>  mov edx, %2
    86 00000C6E 0F05                <1>  syscall
  1437                                      print score_msg, score_msg_len
    82 00000C70 B801000000          <1>  mov eax, sys_write
    83 00000C75 BF01000000          <1>  mov edi, 1
    84 00000C7A 48BE-               <1>  mov rsi, %1
    84 00000C7C [3318000000000000]  <1>
    85 00000C84 BA0F000000          <1>  mov edx, %2
    86 00000C89 0F05                <1>  syscall
  1438                                      print number_buffer, 20
    82 00000C8B B801000000          <1>  mov eax, sys_write
    83 00000C90 BF01000000          <1>  mov edi, 1
    84 00000C95 48BE-               <1>  mov rsi, %1
    84 00000C97 [4615000000000000]  <1>
    85 00000C9F BA14000000          <1>  mov edx, %2
    86 00000CA4 0F05                <1>  syscall
  1439                                      
  1440                                      ; Esperar un momento antes de salir
  1441 00000CA6 48C7054FF3FFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  1441 00000CAF 0000               
  1442 00000CB1 48C7054CF3FFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  1442 00000CBA 0000               
  1443                                      sleeptime
    98 00000CBC B823000000          <1>  mov eax, sys_nanosleep
    99 00000CC1 48BF-               <1>  mov rdi, timespec
    99 00000CC3 [0000000000000000]  <1>
   100 00000CCB 31F6                <1>  xor esi, esi
   101 00000CCD 0F05                <1>  syscall
  1444                                      
  1445 00000CCF E913090000                  jmp exit
  1446                                  
  1447                                  ; Función para imprimir los bloques
  1448                                  ; Función modificada para imprimir bloques
  1449                                  
  1450                                  ; Primero, agreguemos una función para obtener el puntero a los bloques del nivel actual
  1451                                  get_current_level_blocks:
  1452 00000CD4 803D(B4140000)01            cmp byte [current_level], 1
  1453 00000CDB 7428                        je .level1
  1454 00000CDD 803D(B4140000)02            cmp byte [current_level], 2
  1455 00000CE4 7427                        je .level2
  1456 00000CE6 803D(B4140000)03            cmp byte [current_level], 3
  1457 00000CED 7426                        je .level3
  1458 00000CEF 803D(B4140000)04            cmp byte [current_level], 4
  1459 00000CF6 7425                        je .level4
  1460 00000CF8 803D(B4140000)05            cmp byte [current_level], 5
  1461 00000CFF 7424                        je .level5
  1462                                      ; Si llegamos aquí, hay un error en el nivel
  1463 00000D01 4831C0                      xor rax, rax
  1464 00000D04 C3                          ret
  1465                                  
  1466                                      .level1:
  1467 00000D05 488D05(B6140000)                lea rax, [level1_blocks]
  1468 00000D0C C3                              ret
  1469                                      .level2:
  1470 00000D0D 488D05(C5140000)                lea rax, [level2_blocks]
  1471 00000D14 C3                              ret
  1472                                      .level3:
  1473 00000D15 488D05(CA140000)                lea rax, [level3_blocks]
  1474 00000D1C C3                              ret
  1475                                      .level4:
  1476 00000D1D 488D05(CF140000)                lea rax, [level4_blocks]
  1477 00000D24 C3                              ret
  1478                                      .level5:
  1479 00000D25 488D05(D4140000)                lea rax, [level5_blocks]
  1480 00000D2C C3                              ret
  1481                                  ; Función para obtener la cantidad de bloques del nivel actual
  1482                                  get_current_level_count:
  1483 00000D2D 803D(B4140000)01            cmp byte [current_level], 1
  1484 00000D34 7428                        je .level1
  1485 00000D36 803D(B4140000)02            cmp byte [current_level], 2
  1486 00000D3D 7425                        je .level2
  1487 00000D3F 803D(B4140000)03            cmp byte [current_level], 3
  1488 00000D46 7422                        je .level3
  1489 00000D48 803D(B4140000)04            cmp byte [current_level], 4
  1490 00000D4F 741F                        je .level4
  1491 00000D51 803D(B4140000)05            cmp byte [current_level], 5
  1492 00000D58 741C                        je .level5
  1493                                      ; Si llegamos aquí, hay un error en el nivel
  1494 00000D5A 4831C0                      xor rax, rax
  1495 00000D5D C3                          ret
  1496                                  
  1497                                      .level1:
  1498 00000D5E B803000000                      mov rax, level1_blocks_count
  1499 00000D63 C3                              ret
  1500                                      .level2:
  1501 00000D64 B801000000                      mov rax, level2_blocks_count
  1502 00000D69 C3                              ret
  1503                                      .level3:
  1504 00000D6A B801000000                      mov rax, level3_blocks_count
  1505 00000D6F C3                              ret
  1506                                      .level4:
  1507 00000D70 B801000000                      mov rax, level4_blocks_count
  1508 00000D75 C3                              ret
  1509                                      .level5:
  1510 00000D76 B801000000                      mov rax, level5_blocks_count
  1511 00000D7B C3                              ret
  1512                                  
  1513                                  
  1514                                  print_blocks:
  1515 00000D7C 55                          push rbp
  1516 00000D7D 4889E5                      mov rbp, rsp
  1517                                      
  1518                                      ; Obtener puntero a los bloques del nivel actual
  1519 00000D80 E84FFFFFFF                  call get_current_level_blocks
  1520 00000D85 4989C5                      mov r13, rax                  ; Guardar puntero a los bloques en r13
  1521                                      
  1522                                      ; Obtener cantidad de bloques del nivel actual
  1523 00000D88 E8A0FFFFFF                  call get_current_level_count
  1524 00000D8D 4989C6                      mov r14, rax                  ; Guardar cantidad de bloques en r14
  1525                                      
  1526 00000D90 4D31E4                      xor r12, r12                  ; Índice del bloque actual
  1527                                      
  1528                                      .print_loop:
  1529 00000D93 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
  1530 00000D96 7D6F                            jge .end
  1531                                          
  1532                                          ; Verificar si el bloque está activo
  1533 00000D98 490FB68424-                     movzx rax, byte [block_states + r12]
  1533 00000D9D [D9140000]         
  1534 00000DA1 4885C0                          test rax, rax
  1535 00000DA4 745C                            jz .next_block
  1536                                          
  1537                                          ; Obtener posición y tipo del bloque usando r13
  1538 00000DA6 4C89E0                          mov rax, r12
  1539 00000DA9 486BC005                        imul rax, 5
  1540 00000DAD 4C01E8                          add rax, r13
  1541 00000DB0 448A00                          mov r8b, [rax]        ; X position
  1542 00000DB3 448A4801                        mov r9b, [rax + 1]    ; Y position
  1543 00000DB7 448A5002                        mov r10b, [rax + 2]   ; Tipo de bloque
  1544                                  
  1545                                          ; El resto de la lógica de impresión permanece igual
  1546 00000DBB 4D0FB6C0                        movzx r8, r8b
  1547 00000DBF 4D0FB6C9                        movzx r9, r9b
  1548 00000DC3 4981C0[000A0000]                add r8, board
  1549 00000DCA B850000000                      mov rax, column_cells + 2
  1550 00000DCF 49F7E1                          mul r9
  1551 00000DD2 4901C0                          add r8, rax
  1552                                          
  1553 00000DD5 B906000000                      mov rcx, block_length
  1554 00000DDA 48BE-                           mov rsi, block_type_1
  1554 00000DDC [9014000000000000] 
  1555 00000DE4 490FB6C2                        movzx rax, r10b
  1556 00000DE8 48FFC8                          dec rax
  1557 00000DEB 486BC006                        imul rax, block_length
  1558 00000DEF 4801C6                          add rsi, rax
  1559                                          
  1560                                      .print_block_chars:
  1561 00000DF2 8A06                            mov al, [rsi]
  1562 00000DF4 418800                          mov [r8], al
  1563 00000DF7 48FFC6                          inc rsi
  1564 00000DFA 49FFC0                          inc r8
  1565 00000DFD 48FFC9                          dec rcx
  1566 00000E00 75F0                            jnz .print_block_chars
  1567                                          
  1568                                      .next_block:
  1569 00000E02 49FFC4                          inc r12
  1570 00000E05 EB8C                            jmp .print_loop
  1571                                          
  1572                                      .end:
  1573 00000E07 5D                              pop rbp
  1574 00000E08 C3                              ret
  1575                                  
  1576                                  ; Función para convertir número a string
  1577                                  ; Input: RAX = número a convertir
  1578                                  ; RDI = buffer donde escribir el string
  1579                                  number_to_string:
  1580 00000E09 53                          push rbx
  1581 00000E0A 52                          push rdx
  1582 00000E0B 56                          push rsi
  1583 00000E0C BB0A000000                  mov rbx, 10          ; Divisor
  1584 00000E11 B900000000                  mov rcx, 0          ; Contador de dígitos
  1585                                      
  1586                                      ; Si el número es 0, manejarlo especialmente
  1587 00000E16 4885C0                      test rax, rax
  1588 00000E19 7509                        jnz .convert_loop
  1589 00000E1B C60730                      mov byte [rdi], '0'
  1590 00000E1E C6470100                    mov byte [rdi + 1], 0
  1591 00000E22 EB20                        jmp .end
  1592                                      
  1593                                      .convert_loop:
  1594 00000E24 4831D2                          xor rdx, rdx    ; Limpiar RDX para la división
  1595 00000E27 48F7F3                          div rbx         ; RAX/10, cociente en RAX, residuo en RDX
  1596 00000E2A 80C230                          add dl, '0'     ; Convertir a ASCII
  1597 00000E2D 52                              push rdx        ; Guardar el dígito
  1598 00000E2E 48FFC1                          inc rcx         ; Incrementar contador
  1599 00000E31 4885C0                          test rax, rax   ; Verificar si quedan más dígitos
  1600 00000E34 75EE                            jnz .convert_loop
  1601                                          
  1602                                      .write_loop:
  1603 00000E36 5A                              pop rdx         ; Obtener dígito
  1604 00000E37 8817                            mov [rdi], dl   ; Escribir al buffer
  1605 00000E39 48FFC7                          inc rdi         ; Siguiente posición
  1606 00000E3C 48FFC9                          dec rcx         ; Decrementar contador
  1607 00000E3F 75F5                            jnz .write_loop
  1608                                          
  1609 00000E41 C60700                      mov byte [rdi], 0   ; Null terminator
  1610                                      
  1611                                      .end:
  1612 00000E44 5E                          pop rsi
  1613 00000E45 5A                          pop rdx
  1614 00000E46 5B                          pop rbx
  1615 00000E47 C3                          ret
  1616                                  
  1617                                  ; Función para imprimir los labels
  1618                                  print_labels:
  1619 00000E48 55                          push rbp
  1620 00000E49 4889E5                      mov rbp, rsp
  1621                                  
  1622                                      ; Crear buffer temporal
  1623 00000E4C 4883EC20                    sub rsp, 32
  1624                                  
  1625                                      ; Copiar labels a buffer temporal
  1626 00000E50 4889E7                      mov rdi, rsp
  1627 00000E53 488D35(F2150000)            lea rsi, [score_label]
  1628 00000E5A B917000000                  mov rcx, score_label_len
  1629 00000E5F F3A4                        rep movsb
  1630                                  
  1631                                      ; Convertir score a string
  1632 00000E61 488B05(3D150000)            mov rax, [current_score]
  1633 00000E68 48BF-                       mov rdi, number_buffer
  1633 00000E6A [4615000000000000] 
  1634 00000E72 E892FFFFFF                  call number_to_string
  1635                                  
  1636                                      ; Calcular longitud del número
  1637 00000E77 B900000000                  mov rcx, 0
  1638 00000E7C 48BF-                       mov rdi, number_buffer
  1638 00000E7E [4615000000000000] 
  1639                                      .count_loop:
  1640 00000E86 803C0F00                        cmp byte [rdi + rcx], 0
  1641 00000E8A 7405                            je .count_done
  1642 00000E8C 48FFC1                          inc rcx
  1643 00000E8F EBF5                            jmp .count_loop
  1644                                      .count_done:
  1645                                  
  1646                                      ; Insertar el número en la posición correcta, alineado a la derecha
  1647 00000E91 4889E7                      mov rdi, rsp
  1648 00000E94 4883C70A                    add rdi, score_pos           ; Moverse a la posición del número
  1649 00000E98 BE0A000000                  mov rsi, 10                  ; Espacio reservado para el número
  1650 00000E9D 4829CE                      sub rsi, rcx                 ; Calcular padding necesario
  1651                                      .pad_loop:
  1652 00000EA0 4885F6                          test rsi, rsi
  1653 00000EA3 740B                            jz .pad_done
  1654 00000EA5 C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  1655 00000EA8 48FFC7                          inc rdi
  1656 00000EAB 48FFCE                          dec rsi
  1657 00000EAE EBF0                            jmp .pad_loop
  1658                                      .pad_done:
  1659                                  
  1660                                      ; Copiar el número
  1661 00000EB0 48BE-                       mov rsi, number_buffer
  1661 00000EB2 [4615000000000000] 
  1662 00000EBA F3A4                        rep movsb
  1663                                  
  1664                                      ; Imprimir el buffer completo
  1665                                      print rsp, score_label_len
    82 00000EBC B801000000          <1>  mov eax, sys_write
    83 00000EC1 BF01000000          <1>  mov edi, 1
    84 00000EC6 4889E6              <1>  mov rsi, %1
    85 00000EC9 BA17000000          <1>  mov edx, %2
    86 00000ECE 0F05                <1>  syscall
  1666                                  
  1667                                      ; Repetir proceso para bloques destruidos
  1668 00000ED0 4889E7                      mov rdi, rsp
  1669 00000ED3 488D35(09160000)            lea rsi, [blocks_label]
  1670 00000EDA B91B000000                  mov rcx, blocks_label_len
  1671 00000EDF F3A4                        rep movsb
  1672                                  
  1673                                      ; Verificar que el `[` esté en su posición correcta
  1674 00000EE1 4889E7                      mov rdi, rsp
  1675 00000EE4 4883C713                    add rdi, blocks_pos - 1  ; Posición exacta donde debe ir el '['
  1676 00000EE8 C6075B                      mov byte [rdi], '['      ; Garantizar que el `[` esté presente
  1677                                  
  1678                                      ; Convertir bloques destruidos a string
  1679 00000EEB 480FB605(45150000)          movzx rax, byte [destroyed_blocks]
  1680 00000EF3 48BF-                       mov rdi, number_buffer
  1680 00000EF5 [4615000000000000] 
  1681 00000EFD E807FFFFFF                  call number_to_string
  1682                                  
  1683                                      ; Calcular longitud del número
  1684 00000F02 B900000000                  mov rcx, 0
  1685 00000F07 48BF-                       mov rdi, number_buffer
  1685 00000F09 [4615000000000000] 
  1686                                      .count_loop2:
  1687 00000F11 803C0F00                        cmp byte [rdi + rcx], 0
  1688 00000F15 7405                            je .count_done2
  1689 00000F17 48FFC1                          inc rcx
  1690 00000F1A EBF5                            jmp .count_loop2
  1691                                      .count_done2:
  1692                                  
  1693                                      ; Insertar el número en la posición correcta, alineado a la derecha
  1694 00000F1C 4889E7                      mov rdi, rsp
  1695 00000F1F 4883C714                    add rdi, blocks_pos         ; Moverse a la posición del número
  1696 00000F23 BE03000000                  mov rsi, 3                  ; Espacio reservado para el número
  1697 00000F28 4829CE                      sub rsi, rcx                ; Calcular padding necesario
  1698                                      .pad_loop2:
  1699 00000F2B 4885F6                          test rsi, rsi
  1700 00000F2E 740B                            jz .pad_done2
  1701 00000F30 C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  1702 00000F33 48FFC7                          inc rdi
  1703 00000F36 48FFCE                          dec rsi
  1704 00000F39 EBF0                            jmp .pad_loop2
  1705                                      .pad_done2:
  1706                                  
  1707                                      ; Copiar el número
  1708 00000F3B 48BE-                       mov rsi, number_buffer
  1708 00000F3D [4615000000000000] 
  1709 00000F45 F3A4                        rep movsb
  1710                                  
  1711                                      ; Imprimir el buffer completo
  1712                                      print rsp, blocks_label_len
    82 00000F47 B801000000          <1>  mov eax, sys_write
    83 00000F4C BF01000000          <1>  mov edi, 1
    84 00000F51 4889E6              <1>  mov rsi, %1
    85 00000F54 BA1B000000          <1>  mov edx, %2
    86 00000F59 0F05                <1>  syscall
  1713                                  
  1714                                      ; Restaurar stack
  1715 00000F5B 4883C420                    add rsp, 32
  1716 00000F5F 5D                          pop rbp
  1717 00000F60 C3                          ret
  1718                                  
  1719                                  
  1720                                  
  1721                                  check_block_collision:
  1722 00000F61 55                          push rbp
  1723 00000F62 4889E5                      mov rbp, rsp
  1724                                  
  1725                                      ; Almacenar el carácter en la posición r10 (pos. de la bola en board[])
  1726 00000F65 418A02                      mov al, [r10]
  1727                                  
  1728                                      ; Verificar si el carácter es un bloque
  1729 00000F68 3C55                        cmp al, 'U'  
  1730 00000F6A 7419                        je .possible
  1731 00000F6C 3C4F                        cmp al, 'O'  
  1732 00000F6E 7415                        je .possible
  1733 00000F70 3C44                        cmp al, 'D'  
  1734 00000F72 7411                        je .possible
  1735 00000F74 3C4C                        cmp al, 'L'  
  1736 00000F76 740D                        je .possible
  1737 00000F78 3C56                        cmp al, 'V'  
  1738 00000F7A 7409                        je .possible
  1739 00000F7C 3C38                        cmp al, '8'  
  1740 00000F7E 7405                        je .possible
  1741                                  
  1742                                      ; No es bloque, salir
  1743 00000F80 4831C0                      xor rax, rax
  1744 00000F83 5D                          pop rbp
  1745 00000F84 C3                          ret
  1746                                  
  1747                                  .possible:
  1748 00000F85 53                          push rbx
  1749 00000F86 57                          push rdi
  1750 00000F87 56                          push rsi
  1751 00000F88 4154                        push r12
  1752 00000F8A 4155                        push r13
  1753 00000F8C 4156                        push r14
  1754 00000F8E 4157                        push r15
  1755                                  
  1756                                      ; 1) Obtener base de los bloques del nivel actual
  1757 00000F90 E83FFDFFFF                  call get_current_level_blocks
  1758 00000F95 4989C5                      mov r13, rax  ; (r13) = base de levelX_blocks
  1759                                  
  1760                                      ; 2) Obtener la cantidad de bloques
  1761 00000F98 E890FDFFFF                  call get_current_level_count
  1762 00000F9D 4989C6                      mov r14, rax
  1763                                  
  1764 00000FA0 4D31E4                      xor r12, r12  ; Índice del bloque actual
  1765                                  
  1766                                  .find_block_loop:
  1767 00000FA3 4D39F4                      cmp r12, r14
  1768 00000FA6 0F8DCE000000                jge .no_block_found  ; Se acabaron los bloques
  1769                                  
  1770                                      ; Calcular puntero base del bloque actual en levelX_blocks
  1771 00000FAC 4C89E0                      mov rax, r12
  1772 00000FAF 486BC005                    imul rax, 5            ; (x, y, tipo, durabilidad_inicial, letra)
  1773 00000FB3 4C01E8                      add rax, r13
  1774 00000FB6 4989C7                      mov r15, rax           ; r15 apunta a los datos del bloque actual
  1775                                  
  1776                                      ; --- Aquí la diferencia: la durabilidad no la leemos de [r15+3], sino de block_states[r12]
  1777 00000FB9 490FB69C24-                 movzx rbx, byte [block_states + r12]  ; Durabilidad "viva" en block_states
  1777 00000FBE [D9140000]         
  1778 00000FC2 4885DB                      test rbx, rbx
  1779 00000FC5 0F84A7000000                jz .next_block  ; si durabilidad=0 => bloque destruido => ignorar
  1780                                  
  1781                                      ; Obtener coordenadas
  1782 00000FCB 418A17                      mov dl, [r15]         ; x
  1783 00000FCE 418A4F01                    mov cl, [r15 + 1]     ; y
  1784                                  
  1785                                      ; Calcular posición en el board
  1786 00000FD2 488D3D(000A0000)            lea rdi, [board]
  1787 00000FD9 4831C0                      xor rax, rax
  1788 00000FDC B84E000000                  mov rax, column_cells
  1789 00000FE1 4883C002                    add rax, 2
  1790 00000FE5 480FB6C9                    movzx rcx, cl         ; y
  1791 00000FE9 480FAFC1                    imul rax, rcx
  1792 00000FED 4801C7                      add rdi, rax
  1793 00000FF0 480FB6C2                    movzx rax, dl         ; x
  1794 00000FF4 4801C7                      add rdi, rax
  1795                                  
  1796                                      ; Guardar la posición base del bloque
  1797 00000FF7 57                          push rdi
  1798                                  
  1799                                      ; Verificar si la bola (r10) está dentro de [rdi .. rdi+block_length)
  1800 00000FF8 4939FA                      cmp r10, rdi
  1801 00000FFB 7274                        jb .skip_collision
  1802 00000FFD 488D5F06                    lea rbx, [rdi + block_length]
  1803 00001001 4939DA                      cmp r10, rbx
  1804 00001004 736B                        jae .skip_collision
  1805                                  
  1806                                      ; ------- Hay colisión, reducir durabilidad en block_states
  1807 00001006 41FE8C24[D9140000]          dec byte [block_states + r12]
  1808                                      ; Volver a cargar durabilidad
  1809 0000100E 490FB69C24-                 movzx rbx, byte [block_states + r12]
  1809 00001013 [D9140000]         
  1810 00001017 4885DB                      test rbx, rbx
  1811 0000101A 754D                        jnz .update_display  ; si no llegó a 0 => solo "golpeado"
  1812                                  
  1813                                      ; >>> Llegó a 0 => Bloque destruido
  1814 0000101C 5F                          pop rdi  ; recuperar puntero base del bloque en board
  1815 0000101D B906000000                  mov rcx, block_length
  1816                                  .clear_loop:
  1817 00001022 C60720                      mov byte [rdi], ' '
  1818 00001025 48FFC7                      inc rdi
  1819 00001028 E2F8                        loop .clear_loop
  1820                                  
  1821                                      ; Dibujar letra del bloque destruido
  1822 0000102A 418A4704                    mov al, [r15 + 4]  ; Obtener la letra asociada
  1823 0000102E 4883EF06                    sub rdi, block_length
  1824 00001032 8807                        mov [rdi], al      ; Escribir la letra en la posición inicial
  1825                                      ; Después de escribir la letra en el tablero
  1826 00001034 418A4704                    mov al, [r15 + 4]      ; Obtener la letra
  1827 00001038 4D0FB607                    movzx r8, byte [r15]   ; Posición x del bloque
  1828 0000103C 4D0FB64F01                  movzx r9, byte [r15 + 1] ; Posición y del bloque
  1829 00001041 E860F3FFFF                  call register_letter
  1830                                      ; Actualizar contadores globales
  1831 00001046 FE0D(B5140000)              dec byte [blocks_remaining]
  1832 0000104C FE05(45150000)              inc byte [destroyed_blocks]
  1833                                  
  1834                                      ; Sumar puntos según el tipo
  1835 00001052 490FB64702                  movzx rax, byte [r15 + 2]  ; tipo del bloque original
  1836 00001057 486BC00A                    imul rax, 10
  1837 0000105B 480105(3D150000)            add [current_score], rax
  1838                                  
  1839 00001062 B801000000                  mov rax, 1  ; colisión con destrucción
  1840 00001067 EB14                        jmp .end_pop
  1841                                  
  1842                                  .update_display:
  1843                                      ; => durabilidad >0, se podría actualizar el "look" del bloque
  1844 00001069 B801000000                  mov rax, 1  ; colisión con "rebote"  
  1845 0000106E 5F                          pop rdi     ; pop que quedó pendiente
  1846 0000106F EB0C                        jmp .end_pop
  1847                                  
  1848                                  .skip_collision:
  1849 00001071 5F                          pop rdi     ; si no hubo colisión, quita de la pila
  1850                                  .next_block:
  1851 00001072 49FFC4                      inc r12
  1852 00001075 E929FFFFFF                  jmp .find_block_loop
  1853                                  
  1854                                  .no_block_found:
  1855 0000107A 4831C0                      xor rax, rax  ; 0 => no hubo colisión
  1856                                  
  1857                                  .end_pop:
  1858 0000107D 415F                        pop r15
  1859 0000107F 415E                        pop r14
  1860 00001081 415D                        pop r13
  1861 00001083 415C                        pop r12
  1862 00001085 5E                          pop rsi
  1863 00001086 5F                          pop rdi
  1864 00001087 5B                          pop rbx
  1865 00001088 5D                          pop rbp
  1866 00001089 C3                          ret
  1867                                  
  1868                                  
  1869                                  
  1870                                  init_enemies:
  1871 0000108A 55                          push rbp
  1872 0000108B 4889E5                      mov rbp, rsp
  1873                                      ; Reiniciar contadores de movimiento
  1874 0000108E C605(88150000)00            mov byte [enemy_move_total], 0
  1875 00001095 C605(89150000)00            mov byte [enemy_target], 0 ; Inicialmente persigue la bola
  1876                                      ; Limpiar estado previo de enemigos
  1877 0000109C B90A000000                  mov rcx, 10 ; Máximo 10 enemigos
  1878 000010A1 488D3D(5F150000)            lea rdi, [enemies]
  1879 000010A8 30C0                        xor al, al
  1880 000010AA F3AA                        rep stosb ; Limpiar datos de enemigos
  1881                                      
  1882                                      ; Marcar todos los enemigos como inactivos
  1883 000010AC 488D3D(E8150000)            lea rdi, [enemy_spawns_triggered]
  1884 000010B3 30C0                        xor al, al
  1885 000010B5 B90A000000                  mov rcx, 10
  1886 000010BA F3AA                        rep stosb ; Todos los enemigos no han sido activados aún
  1887                                  
  1888 000010BC 5D                          pop rbp
  1889 000010BD C3                          ret
  1890                                  
  1891                                  
  1892                                  ; Función para mover enemigos
  1893                                  move_enemies:
  1894 000010BE 55                          push rbp
  1895 000010BF 4889E5                      mov rbp, rsp
  1896                                      
  1897                                      ; Incrementar contador de movimiento
  1898 000010C2 FE05(86150000)              inc byte [enemy_move_counter]
  1899 000010C8 480FB605(86150000)          movzx rax, byte [enemy_move_counter]
  1900 000010D0 3A05(87150000)              cmp al, [enemy_move_delay]
  1901 000010D6 0F85AA010000                jne .end
  1902                                      
  1903                                      ; Resetear contador
  1904 000010DC C605(86150000)00            mov byte [enemy_move_counter], 0
  1905                                      
  1906 000010E3 4D31E4                      xor r12, r12                    ; Índice del enemigo
  1907                                      
  1908                                      .enemy_loop:
  1909 000010E6 4983FC0A                        cmp r12, 10                     ; Máximo 10 enemigos
  1910 000010EA 0F8D96010000                    jge .end
  1911                                          
  1912                                          ; Calcular offset del enemigo actual
  1913 000010F0 4C89E0                          mov rax, r12
  1914 000010F3 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  1915 000010F7 488DB0[5F150000]                lea rsi, [enemies + rax]
  1916                                          
  1917                                          ; Verificar si el enemigo está activo
  1918 000010FE 807E0201                        cmp byte [rsi + 2], 1
  1919 00001102 0F8576010000                    jne .next_enemy
  1920                                          
  1921                                          ; Obtener posición actual
  1922 00001108 4C0FB606                        movzx r8, byte [rsi]            ; X
  1923 0000110C 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  1924                                          
  1925                                          ; Limpiar posición actual antes de mover
  1926 00001111 4150                            push r8
  1927 00001113 4151                            push r9
  1928 00001115 B84E000000                      mov rax, column_cells
  1929 0000111A 4883C002                        add rax, 2
  1930 0000111E 49F7E1                          mul r9
  1931 00001121 4C01C0                          add rax, r8
  1932 00001124 488DB8[000A0000]                lea rdi, [board + rax]
  1933 0000112B C60720                          mov byte [rdi], ' '         ; Limpiar rastro
  1934 0000112E 4159                            pop r9
  1935 00001130 4158                            pop r8
  1936                                  
  1937                                          ; Determinar comportamiento basado en índice
  1938 00001132 4C89E0                          mov rax, r12
  1939 00001135 4883E001                        and rax, 1                      ; 0 para índices pares, 1 para impares
  1940 00001139 4885C0                          test rax, rax
  1941 0000113C 7402                            jz .chase_ball
  1942 0000113E EB31                            jmp .chase_paddle             ; Si es 1, perseguir paleta
  1943                                          
  1944                                          ; Perseguir bola (comportamiento original)
  1945                                      .chase_ball:
  1946 00001140 4C8B15(5F140000)                mov r10, [ball_x_pos]
  1947 00001147 4D39D0                          cmp r8, r10
  1948 0000114A 0F8F96000000                    jg .move_left
  1949 00001150 0F8C95000000                    jl .move_right
  1950                                          
  1951 00001156 4C8B15(67140000)                mov r10, [ball_y_pos]
  1952 0000115D 4D39D1                          cmp r9, r10
  1953 00001160 0F8F8A000000                    jg .move_up
  1954 00001166 0F8C89000000                    jl .move_down
  1955 0000116C E9A5000000                      jmp .check_collision
  1956                                          
  1957                                      .chase_paddle:
  1958                                          ; Obtener la posición X actual de la paleta
  1959 00001171 4C8B15(3F140000)                mov r10, [pallet_position]
  1960 00001178 4981EA[000A0000]                sub r10, board              ; Convertir a offset relativo
  1961                                          
  1962                                          ; Calcular la posición X real de la paleta
  1963 0000117F 4C89D0                          mov rax, r10
  1964 00001182 BB4E000000                      mov rbx, column_cells
  1965 00001187 4883C302                        add rbx, 2                  ; Añadir newline chars
  1966 0000118B 4831D2                          xor rdx, rdx
  1967 0000118E 48F7F3                          div rbx                     ; rax = y, rdx = x
  1968                                          
  1969                                          ; rdx ahora contiene la posición X de la paleta
  1970                                          ; Añadir la mitad del tamaño de la paleta para apuntar al centro
  1971 00001191 488B0D(47140000)                mov rcx, [pallet_size]
  1972 00001198 48D1E9                          shr rcx, 1                  ; Dividir por 2
  1973 0000119B 4801CA                          add rdx, rcx
  1974                                          
  1975                                          ; Comparar con posición X del enemigo y mover gradualmente
  1976 0000119E 4939D0                          cmp r8, rdx
  1977 000011A1 7404                            je .check_y_paddle          ; Si está en la misma X, verificar Y
  1978 000011A3 7F41                            jg .move_left              ; Si está a la derecha, mover izquierda
  1979 000011A5 7C44                            jl .move_right             ; Si está a la izquierda, mover derecha
  1980                                  
  1981                                      .check_y_paddle:
  1982                                          ; La Y de la paleta siempre es row_cells - 2
  1983 000011A7 41BA20000000                    mov r10, row_cells
  1984 000011AD 4983EA02                        sub r10, 2
  1985                                          
  1986                                          ; Comparar con posición Y del enemigo y mover gradualmente
  1987 000011B1 4D39D1                          cmp r9, r10
  1988 000011B4 7404                            je .no_movement            ; Si está en la misma Y, no mover
  1989 000011B6 7F38                            jg .move_up               ; Si está abajo, mover arriba
  1990 000011B8 7C3B                            jl .move_down             ; Si está arriba, mover abajo
  1991                                          
  1992                                      .no_movement:
  1993 000011BA EB5A                            jmp .check_collision
  1994                                  
  1995                                      ; También agregar una nueva sección para el movimiento suave
  1996                                      .smooth_transition:
  1997                                          ; Si el enemigo está muy lejos de su objetivo, limitar el movimiento
  1998 000011BC 8A05(89150000)                  mov al, [enemy_target]
  1999 000011C2 84C0                            test al, al
  2000 000011C4 7450                            jz .check_collision        ; Si persigue la bola, movimiento normal
  2001                                          
  2002                                          ; Verificar distancia en X
  2003 000011C6 4989D2                          mov r10, rdx              ; Posición X objetivo
  2004 000011C9 4D29C2                          sub r10, r8               ; Calcular diferencia
  2005 000011CC 4983FA05                        cmp r10, 5               ; Si la diferencia es mayor a 5
  2006 000011D0 7F08                            jg .limit_right_movement  ; Limitar movimiento a la derecha
  2007 000011D2 4983FAFB                        cmp r10, -5              ; Si la diferencia es menor a -5
  2008 000011D6 7C08                            jl .limit_left_movement   ; Limitar movimiento a la izquierda
  2009 000011D8 EB3C                            jmp .check_collision
  2010                                          
  2011                                      .limit_right_movement:
  2012 000011DA 4983C002                        add r8, 2                ; Mover solo 2 unidades a la derecha
  2013 000011DE EB36                            jmp .check_collision
  2014                                          
  2015                                      .limit_left_movement:
  2016 000011E0 4983E802                        sub r8, 2                ; Mover solo 2 unidades a la izquierda
  2017 000011E4 EB30                            jmp .check_collision
  2018                                      .move_left:
  2019 000011E6 49FFC8                          dec r8
  2020 000011E9 EB0F                            jmp .check_vertical
  2021                                          
  2022                                      .move_right:
  2023 000011EB 49FFC0                          inc r8
  2024 000011EE EB0A                            jmp .check_vertical
  2025                                          
  2026                                      .move_up:
  2027 000011F0 49FFC9                          dec r9
  2028 000011F3 EB21                            jmp .check_collision
  2029                                          
  2030                                      .move_down:
  2031 000011F5 49FFC1                          inc r9
  2032 000011F8 EB1C                            jmp .check_collision
  2033                                          
  2034                                      .check_vertical:
  2035 000011FA 8A05(89150000)                  mov al, [enemy_target]
  2036 00001200 84C0                            test al, al
  2037 00001202 0F8569FFFFFF                    jnz .chase_paddle         ; Si persigue paleta, volver a su lógica
  2038 00001208 4C8B15(67140000)                mov r10, [ball_y_pos]     ; Si no, seguir persiguiendo la bola
  2039 0000120F 4D39D1                          cmp r9, r10
  2040 00001212 7FDC                            jg .move_up
  2041 00001214 7CDF                            jl .move_down
  2042                                          
  2043                                      .check_collision:
  2044                                          ; Verificar colisión con bordes
  2045 00001216 4983F801                        cmp r8, 1                       ; Borde izquierdo
  2046 0000121A 7E62                            jle .next_enemy
  2047 0000121C 4983F84E                        cmp r8, column_cells
  2048 00001220 7D5C                            jge .next_enemy
  2049 00001222 4983F901                        cmp r9, 1                       ; Borde superior
  2050 00001226 7E56                            jle .next_enemy
  2051 00001228 4983F920                        cmp r9, row_cells
  2052 0000122C 7D50                            jge .next_enemy
  2053                                          
  2054                                          ; Verificar colisión con bloques antes de moverse
  2055 0000122E 4150                            push r8
  2056 00001230 4151                            push r9
  2057 00001232 4152                            push r10
  2058                                          
  2059                                          ; Calcular posición en el tablero para verificar
  2060 00001234 B84E000000                      mov rax, column_cells
  2061 00001239 4883C002                        add rax, 2
  2062 0000123D 49F7E1                          mul r9
  2063 00001240 4C01C0                          add rax, r8
  2064 00001243 4C8D90[000A0000]                lea r10, [board + rax]
  2065                                          
  2066                                          ; Verificar si hay un bloque en la nueva posición
  2067 0000124A 418A02                          mov al, [r10]
  2068 0000124D 3C55                            cmp al, 'U'
  2069 0000124F 7427                            je .invalid_move
  2070 00001251 3C4F                            cmp al, 'O'
  2071 00001253 7423                            je .invalid_move
  2072 00001255 3C44                            cmp al, 'D'
  2073 00001257 741F                            je .invalid_move
  2074 00001259 3C4C                            cmp al, 'L'
  2075 0000125B 741B                            je .invalid_move
  2076 0000125D 3C56                            cmp al, 'V'
  2077 0000125F 7417                            je .invalid_move
  2078 00001261 3C38                            cmp al, '8'
  2079 00001263 7413                            je .invalid_move
  2080 00001265 3C58                            cmp al, 'X'
  2081 00001267 740F                            je .invalid_move
  2082                                          
  2083 00001269 415A                            pop r10
  2084 0000126B 4159                            pop r9
  2085 0000126D 4158                            pop r8
  2086                                          
  2087                                          ; Guardar nueva posición si es válida
  2088 0000126F 448806                          mov [rsi], r8b
  2089 00001272 44884E01                        mov [rsi + 1], r9b
  2090 00001276 EB06                            jmp .next_enemy
  2091                                          
  2092                                      .invalid_move:
  2093 00001278 415A                            pop r10
  2094 0000127A 4159                            pop r9
  2095 0000127C 4158                            pop r8
  2096                                          
  2097                                      .next_enemy:
  2098 0000127E 49FFC4                          inc r12
  2099 00001281 E960FEFFFF                      jmp .enemy_loop
  2100                                          
  2101                                      .end:
  2102 00001286 5D                              pop rbp
  2103 00001287 C3                              ret
  2104                                  
  2105                                  get_current_spawn_points:
  2106 00001288 55                          push rbp
  2107 00001289 4889E5                      mov rbp, rsp
  2108                                      
  2109 0000128C 480FB605(B4140000)          movzx rax, byte [current_level]
  2110 00001294 48FFC8                      dec rax                         ; Ajustar para índice base 0
  2111 00001297 488B04C5[BD150000]          mov rax, [spawn_points_table + rax * 8]
  2112                                      
  2113 0000129F 5D                          pop rbp
  2114 000012A0 C3                          ret
  2115                                  
  2116                                  ; Función para verificar si debe aparecer un nuevo enemigo
  2117                                  check_enemy_spawn:
  2118 000012A1 55                          push rbp
  2119 000012A2 4889E5                      mov rbp, rsp
  2120                                      
  2121                                      ; Obtener spawn points del nivel actual
  2122 000012A5 E8DEFFFFFF                  call get_current_spawn_points
  2123 000012AA 4989C4                      mov r12, rax                    ; r12 = puntero a spawn points
  2124                                      
  2125                                      ; Obtener cantidad de bloques destruidos
  2126 000012AD 4C0FB62D(45150000)          movzx r13, byte [destroyed_blocks]
  2127                                      
  2128                                      ; Verificar cada punto de spawn
  2129 000012B5 4831C9                      xor rcx, rcx                    ; Índice del enemigo
  2130                                      
  2131                                      .check_loop:
  2132 000012B8 4883F90A                        cmp rcx, 10                     ; Máximo 10 enemigos
  2133 000012BC 7D4B                            jge .end
  2134                                          
  2135                                          ; Verificar si este spawn point ya fue usado
  2136 000012BE 80B9[E8150000]01                cmp byte [enemy_spawns_triggered + rcx], 1
  2137 000012C5 743D                            je .next_enemy
  2138                                          
  2139                                          ; Verificar si este enemigo ya está activo
  2140 000012C7 4889C8                          mov rax, rcx
  2141 000012CA 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  2142 000012CE 488DB0[5F150000]                lea rsi, [enemies + rax]
  2143 000012D5 807E0201                        cmp byte [rsi + 2], 1          ; Verificar si está activo
  2144 000012D9 7429                            je .next_enemy
  2145                                          
  2146                                          ; Verificar si debemos spawnear este enemigo
  2147 000012DB 490FB6040C                      movzx rax, byte [r12 + rcx]    ; Obtener punto de spawn
  2148 000012E0 4939C5                          cmp r13, rax                   ; Comparar con bloques destruidos
  2149 000012E3 751F                            jne .next_enemy
  2150                                          
  2151                                          ; Marcar este spawn point como usado
  2152 000012E5 C681[E8150000]01                mov byte [enemy_spawns_triggered + rcx], 1
  2153                                          
  2154                                          ; Spawner nuevo enemigo
  2155 000012EC C60628                          mov byte [rsi], 40             ; X inicial
  2156 000012EF C6460102                        mov byte [rsi + 1], 2          ; Y inicial
  2157 000012F3 C6460201                        mov byte [rsi + 2], 1          ; Activar enemigo
  2158                                          
  2159                                          ; Inicializar comportamiento
  2160 000012F7 4889C8                          mov rax, rcx
  2161 000012FA 4883E001                        and rax, 1                     ; Alternar comportamiento basado en índice par/impar
  2162 000012FE 8805(E7150000)                  mov [current_behavior], al      ; 0 = persigue bola, 1 = persigue paleta
  2163                                          
  2164                                      .next_enemy:
  2165 00001304 48FFC1                          inc rcx
  2166 00001307 EBAF                            jmp .check_loop
  2167                                          
  2168                                      .end:
  2169 00001309 5D                              pop rbp
  2170 0000130A C3                              ret
  2171                                  
  2172                                  
  2173                                  ; Función para dibujar enemigos
  2174                                  print_enemies:
  2175 0000130B 55                          push rbp
  2176 0000130C 4889E5                      mov rbp, rsp
  2177                                      
  2178 0000130F 4D31E4                      xor r12, r12                    ; Índice del enemigo
  2179                                      
  2180                                      .print_loop:
  2181 00001312 4983FC0A                        cmp r12, 10                      ; Máximo 5 enemigos
  2182 00001316 7D4B                            jge .end
  2183                                          
  2184                                          ; Calcular offset del enemigo actual
  2185 00001318 4C89E0                          mov rax, r12
  2186 0000131B 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  2187 0000131F 488DB0[5F150000]                lea rsi, [enemies + rax]
  2188                                          
  2189                                          ; Verificar si el enemigo está activo
  2190 00001326 807E0201                        cmp byte [rsi + 2], 1
  2191 0000132A 7532                            jne .next_enemy
  2192                                          
  2193                                          ; Calcular posición en el tablero
  2194 0000132C 4C0FB606                        movzx r8, byte [rsi]            ; X
  2195 00001330 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  2196                                          
  2197                                          ; Calcular offset en el tablero
  2198 00001335 B84E000000                      mov rax, column_cells
  2199 0000133A 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  2200 0000133E 49F7E1                          mul r9
  2201 00001341 4C01C0                          add rax, r8
  2202 00001344 488DB8[000A0000]                lea rdi, [board + rax]
  2203                                          
  2204                                          ; Obtener carácter del enemigo según el nivel
  2205 0000134B 480FB605(B4140000)              movzx rax, byte [current_level]
  2206 00001353 48FFC8                          dec rax                         ; Ajustar para índice base 0
  2207 00001356 8A80[5A150000]                  mov al, [enemy_chars + rax]
  2208                                          
  2209                                          ; Dibujar enemigo
  2210 0000135C 8807                            mov [rdi], al
  2211                                          
  2212                                      .next_enemy:
  2213 0000135E 49FFC4                          inc r12
  2214 00001361 EBAF                            jmp .print_loop
  2215                                          
  2216                                      .end:
  2217 00001363 5D                              pop rbp
  2218 00001364 C3                              ret
  2219                                  
  2220                                  ; Función para verificar colisión con enemigos
  2221                                  ; Función para verificar colisión con enemigos
  2222                                  check_enemy_collision:
  2223 00001365 55                          push rbp
  2224 00001366 4889E5                      mov rbp, rsp
  2225                                      
  2226 00001369 4D31E4                      xor r12, r12                    ; Índice del enemigo
  2227 0000136C 4831C0                      xor rax, rax                    ; Valor de retorno (0 = no colisión)
  2228                                      
  2229                                      .check_loop:
  2230 0000136F 4983FC05                        cmp r12, 5                      ; Máximo 5 enemigos
  2231 00001373 0F8DE9000000                    jge .end
  2232                                          
  2233                                          ; Calcular offset del enemigo actual
  2234 00001379 4C89E1                          mov rcx, r12
  2235 0000137C 486BC903                        imul rcx, 3                     ; Cada enemigo ocupa 3 bytes
  2236 00001380 488DB1[5F150000]                lea rsi, [enemies + rcx]
  2237                                          
  2238                                          ; Verificar si el enemigo está activo
  2239 00001387 807E0201                        cmp byte [rsi + 2], 1
  2240 0000138B 0F85C9000000                    jne .next_enemy
  2241                                          
  2242                                          ; Verificar colisión con la bola
  2243 00001391 4C0FB606                        movzx r8, byte [rsi]            ; X enemigo
  2244 00001395 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y enemigo
  2245                                          
  2246                                          ; Verificar si la bola está en el rango del enemigo (considerando el enemigo como un área)
  2247 0000139A 4C8B15(5F140000)                mov r10, [ball_x_pos]
  2248 000013A1 4C8B1D(67140000)                mov r11, [ball_y_pos]
  2249                                          
  2250                                          ; Comprobar colisión vertical (misma columna)
  2251 000013A8 4D39C2                          cmp r10, r8
  2252 000013AB 7525                            jne .check_horizontal
  2253 000013AD 4D29CB                          sub r11, r9
  2254 000013B0 4983FB01                        cmp r11, 1
  2255 000013B4 7F1C                            jg .check_horizontal
  2256 000013B6 4983FBFF                        cmp r11, -1
  2257 000013BA 7C16                            jl .check_horizontal
  2258                                          
  2259                                          ; Colisión vertical detectada
  2260 000013BC E8A3000000                      call destroy_enemy
  2261 000013C1 48F71D(77140000)                neg qword [ball_direction_y]    ; Invertir dirección vertical
  2262 000013C8 B801000000                      mov rax, 1
  2263 000013CD E990000000                      jmp .end
  2264                                          
  2265                                      .check_horizontal:
  2266                                          ; Comprobar colisión horizontal (misma fila)
  2267 000013D2 4C8B15(5F140000)                mov r10, [ball_x_pos]
  2268 000013D9 4C8B1D(67140000)                mov r11, [ball_y_pos]
  2269 000013E0 4D39CB                          cmp r11, r9
  2270 000013E3 7522                            jne .check_paddle
  2271 000013E5 4D29C2                          sub r10, r8
  2272 000013E8 4983FA01                        cmp r10, 1
  2273 000013EC 7F19                            jg .check_paddle
  2274 000013EE 4983FAFF                        cmp r10, -1
  2275 000013F2 7C13                            jl .check_paddle
  2276                                          
  2277                                          ; Colisión horizontal detectada
  2278 000013F4 E86B000000                      call destroy_enemy
  2279 000013F9 48F71D(6F140000)                neg qword [ball_direction_x]    ; Invertir dirección horizontal
  2280 00001400 B801000000                      mov rax, 1
  2281 00001405 EB5B                            jmp .end
  2282                                          
  2283                                      .check_paddle:
  2284                                          ; Verificar colisión con la paleta
  2285 00001407 4C8B15(3F140000)                mov r10, [pallet_position]
  2286 0000140E 4981EA[000A0000]                sub r10, board
  2287 00001415 4C89D0                          mov rax, r10
  2288 00001418 41BB4E000000                    mov r11, column_cells
  2289 0000141E 4983C302                        add r11, 2
  2290 00001422 4831D2                          xor rdx, rdx
  2291 00001425 49F7F3                          div r11                     ; División para obtener la posición Y
  2292 00001428 4989D3                          mov r11, rdx               ; X de la paleta en r11
  2293                                          
  2294 0000142B 488B0D(47140000)                mov rcx, [pallet_size]     ; Obtener el tamaño de la paleta
  2295                                          
  2296                                          ; Verificar si el enemigo está en la misma fila que la paleta
  2297 00001432 41BD20000000                    mov r13, row_cells
  2298 00001438 4983ED02                        sub r13, 2                 ; Y de la paleta
  2299 0000143C 4D39E9                          cmp r9, r13               ; Comparar Y del enemigo con Y de la paleta
  2300 0000143F 7519                            jne .next_enemy
  2301                                          
  2302                                          ; Verificar si el enemigo está dentro del rango X de la paleta
  2303 00001441 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X inicial de la paleta
  2304 00001444 7C14                            jl .next_enemy
  2305                                          
  2306 00001446 4901CB                          add r11, rcx              ; Añadir el tamaño de la paleta
  2307 00001449 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X final de la paleta
  2308 0000144C 7F0C                            jg .next_enemy
  2309                                          
  2310                                          ; Si llegamos aquí, hay colisión con la paleta
  2311 0000144E E811000000                      call destroy_enemy        ; Destruir el enemigo
  2312 00001453 B801000000                      mov rax, 1                ; Indicar que hubo colisión
  2313 00001458 EB08                            jmp .end
  2314                                          
  2315                                      .next_enemy:
  2316 0000145A 49FFC4                          inc r12
  2317 0000145D E90DFFFFFF                      jmp .check_loop
  2318                                          
  2319                                      .end:
  2320 00001462 5D                              pop rbp
  2321 00001463 C3                              ret
  2322                                  
  2323                                  ; Función para destruir un enemigo
  2324                                  destroy_enemy:
  2325                                      ; Desactivar enemigo
  2326 00001464 C6460200                    mov byte [rsi + 2], 0   ; Marcar enemigo como inactivo
  2327                                  
  2328                                      ; Sumar puntos por destruir enemigo
  2329 00001468 488B05(7E150000)            mov rax, [enemy_points]
  2330 0000146F 480105(3D150000)            add [current_score], rax
  2331                                  
  2332                                      ; No tocar bloques destruidos aquí
  2333 00001476 C3                          ret
  2334                                  
  2335                                  
  2336                                  _start:
  2337 00001477 E8AFECFFFF              	call canonical_off
  2338 0000147C E8F3000000              	call start_screen
  2339 00001481 E8B9F5FFFF                  call init_level
  2340 00001486 E8FFFBFFFF                  call init_enemies
  2341 0000148B EB00                    	jmp .main_loop
  2342                                  	
  2343                                  
  2344                                  	.main_loop:
  2345 0000148D E8B6F9FFFF                      call print_labels
  2346 00001492 E8E5F8FFFF                      call print_blocks
  2347 00001497 E8DBEFFFFF                      call move_letters
  2348 0000149C E84BEFFFFF                      call print_letters
  2349 000014A1 E8F8F1FFFF              		call print_pallet
  2350 000014A6 E8DAF2FFFF                      call move_ball
  2351 000014AB E82EEEFFFF                      call check_bottom_collision
  2352 000014B0 E828EDFFFF                      call print_lives
  2353 000014B5 E824F7FFFF                      call check_level_complete
  2354 000014BA E8E2FDFFFF                      call check_enemy_spawn
  2355 000014BF E8FAFBFFFF                      call move_enemies
  2356 000014C4 E89CFEFFFF                      call check_enemy_collision
  2357 000014C9 E83DFEFFFF                      call print_enemies
  2358 000014CE E8A3F1FFFF              		call print_ball
  2359                                  		print board, board_size				
    82 000014D3 B801000000          <1>  mov eax, sys_write
    83 000014D8 BF01000000          <1>  mov edi, 1
    84 000014DD 48BE-               <1>  mov rsi, %1
    84 000014DF [000A000000000000]  <1>
    85 000014E7 BA000A0000          <1>  mov edx, %2
    86 000014EC 0F05                <1>  syscall
  2360                                  		;setnonblocking	
  2361                                  	.read_more:	
  2362                                  		getchar	
    90 000014EE B800000000          <1>  mov rax, sys_read
    91 000014F3 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 000014F8 48BE-               <1>  mov rsi, input_char
    92 000014FA [0000000000000000]  <1>
    93 00001502 BA01000000          <1>  mov rdx, 1
    94 00001507 0F05                <1>  syscall
  2363                                  		
  2364 00001509 4883F801                		cmp rax, 1
  2365 0000150D 7532                        	jne .done
  2366                                  		
  2367 0000150F 8A05(00000000)          		mov al,[input_char]
  2368                                  
  2369 00001515 3C61                    		cmp al, 'a'
  2370 00001517 750E                    	    jne .not_left
  2371 00001519 48C7C7FFFFFFFF          	    mov rdi, left_direction
  2372 00001520 E8AEF1FFFF              		call move_pallet
  2373 00001525 EB1A                    	    jmp .done
  2374                                  		
  2375                                  		.not_left:
  2376 00001527 3C64                    		 	cmp al, 'd'
  2377 00001529 750C                    	    	jne .not_right
  2378 0000152B BF01000000              			mov rdi, right_direction
  2379 00001530 E89EF1FFFF              	    	call move_pallet
  2380 00001535 EB0A                        		jmp .done		
  2381                                  
  2382                                  		.not_right:
  2383                                  
  2384 00001537 3C71                        		cmp al, 'q'
  2385 00001539 0F84A8000000                		je exit
  2386                                  
  2387 0000153F EBAD                    			jmp .read_more
  2388                                  		
  2389                                  		.done:	
  2390                                  			;unsetnonblocking		
  2391                                  			sleeptime	
    98 00001541 B823000000          <1>  mov eax, sys_nanosleep
    99 00001546 48BF-               <1>  mov rdi, timespec
    99 00001548 [0000000000000000]  <1>
   100 00001550 31F6                <1>  xor esi, esi
   101 00001552 0F05                <1>  syscall
  2392                                  			print clear, clear_length
    82 00001554 B801000000          <1>  mov eax, sys_write
    83 00001559 BF01000000          <1>  mov edi, 1
    84 0000155E 48BE-               <1>  mov rsi, %1
    84 00001560 [1000000000000000]  <1>
    85 00001568 BA07000000          <1>  mov edx, %2
    86 0000156D 0F05                <1>  syscall
  2393 0000156F E919FFFFFF                  		jmp .main_loop
  2394                                  
  2395                                  
  2396                                  
  2397                                  start_screen:
  2398                                      print clear, clear_length    ; Limpiamos la pantalla primero
    82 00001574 B801000000          <1>  mov eax, sys_write
    83 00001579 BF01000000          <1>  mov edi, 1
    84 0000157E 48BE-               <1>  mov rsi, %1
    84 00001580 [1000000000000000]  <1>
    85 00001588 BA07000000          <1>  mov edx, %2
    86 0000158D 0F05                <1>  syscall
  2399                                      print msg1, msg1_length
    82 0000158F B801000000          <1>  mov eax, sys_write
    83 00001594 BF01000000          <1>  mov edi, 1
    84 00001599 48BE-               <1>  mov rsi, %1
    84 0000159B [1700000000000000]  <1>
    85 000015A3 BA14010000          <1>  mov edx, %2
    86 000015A8 0F05                <1>  syscall
  2400                                      
  2401                                      .wait_for_key:              ; Agregamos una etiqueta para esperar la tecla
  2402                                          getchar                 ; Esperamos una tecla
    90 000015AA B800000000          <1>  mov rax, sys_read
    91 000015AF BF00000000          <1>  mov rdi, STDIN_FILENO
    92 000015B4 48BE-               <1>  mov rsi, input_char
    92 000015B6 [0000000000000000]  <1>
    93 000015BE BA01000000          <1>  mov rdx, 1
    94 000015C3 0F05                <1>  syscall
  2403 000015C5 4883F801                        cmp rax, 1             ; Verificamos si se leyó un carácter
  2404 000015C9 75DF                            jne .wait_for_key      ; Si no se leyó, seguimos esperando
  2405                                          
  2406                                      print clear, clear_length   ; Limpiamos la pantalla antes de salir
    82 000015CB B801000000          <1>  mov eax, sys_write
    83 000015D0 BF01000000          <1>  mov edi, 1
    84 000015D5 48BE-               <1>  mov rsi, %1
    84 000015D7 [1000000000000000]  <1>
    85 000015DF BA07000000          <1>  mov edx, %2
    86 000015E4 0F05                <1>  syscall
  2407 000015E6 C3                          ret
  2408                                  
  2409                                  exit: 
  2410 000015E7 E881EBFFFF              	call canonical_on
  2411 000015EC B83C000000              	mov    rax, 60
  2412 000015F1 BF00000000                  mov    rdi, 0
  2413 000015F6 0F05                        syscall
  2414                                  
