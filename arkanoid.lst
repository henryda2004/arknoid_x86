     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  sys_read: equ 0	
     7                                  sys_write:	equ 1
     8                                  sys_nanosleep:	equ 35
     9                                  sys_time:	equ 201
    10                                  sys_fcntl:	equ 72
    11                                  
    12                                  
    13                                  STDIN_FILENO: equ 0
    14                                  
    15                                  F_SETFL:	equ 0x0004
    16                                  O_NONBLOCK: equ 0x0004
    17                                  
    18                                  ;screen clean definition
    19                                  row_cells:	equ 32	; set to any (reasonable) value you wish
    20                                  column_cells: 	equ 80 ; set to any (reasonable) value you wish
    21                                  array_length:	equ row_cells * column_cells + row_cells ; cells are mapped to bytes in the array and a new line char ends each row
    22                                  
    23                                  ;This is regarding the sleep time
    24                                  timespec:
    25 00000000 0000000000000000            tv_sec  dq 0
    26 00000008 002D310100000000            tv_nsec dq 20000000
    27                                  
    28                                  
    29                                  ;This is for cleaning up the screen
    30 00000010 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"
    31                                  clear_length:	equ $-clear
    32                                  	
    33                                  	
    34                                  
    35                                  ; Start Message
    36 00000017 202020202020202054-     msg1: db "        TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    36 00000020 45434E4F4C4F474943-
    36 00000029 4F20444520434F5354-
    36 00000032 412052494341202020-
    36 0000003B 20202020200A0D     
    37 00000042 202020202020202041-     msg2: db "        ARQUITECTURA DE COMPUTADORAS I        ", 0xA, 0xD
    37 0000004B 525155495445435455-
    37 00000054 524120444520434F4D-
    37 0000005D 50555441444F524153-
    37 00000066 204920202020202020-
    37 0000006F 200A0D             
    38 00000072 202020202020202045-     msg3: db "        ESTUDIANTE: HENRY NUNEZ PEREZ        ", 0xA, 0xD
    38 0000007B 5354554449414E5445-
    38 00000084 3A2048454E5259204E-
    38 0000008D 554E455A2050455245-
    38 00000096 5A2020202020202020-
    38 0000009F 0A0D               
    39 000000A1 202020202020202050-     msg4: db "        PROFESOR: ERNESTO RIVERA ALVARADO        ", 0xA, 0xD
    39 000000AA 524F4645534F523A20-
    39 000000B3 45524E4553544F2052-
    39 000000BC 495645524120414C56-
    39 000000C5 415241444F20202020-
    39 000000CE 202020200A0D       
    40 000000D4 202020202020202041-     msg5: db "        ARKANOID RETRO        ", 0xA, 0xD
    40 000000DD 524B414E4F49442052-
    40 000000E6 4554524F2020202020-
    40 000000EF 2020200A0D         
    41 000000F4 202020202020202050-     msg6: db "        PRESIONE CUALQUIER TECLA PARA INICIAR        ", 0xA, 0xD
    41 000000FD 524553494F4E452043-
    41 00000106 55414C515549455220-
    41 0000010F 5445434C4120504152-
    41 00000118 4120494E4943494152-
    41 00000121 20202020202020200A-
    41 0000012A 0D                 
    42                                  msg1_length: equ $-msg1
    43                                  msg2_length: equ $-msg2
    44                                  msg3_length: equ $-msg3
    45                                  msg4_length: equ $-msg4
    46                                  msg5_length: equ $-msg5
    47                                  msg6_length: equ $-msg6
    48                                  
    49                                  ; Usefull macros
    50                                  
    51                                  
    52                                  
    53                                  %macro setnonblocking 0
    54                                  	mov rax, sys_fcntl
    55                                      mov rdi, STDIN_FILENO
    56                                      mov rsi, F_SETFL
    57                                      mov rdx, O_NONBLOCK
    58                                      syscall
    59                                  %endmacro
    60                                  
    61                                  %macro unsetnonblocking 0
    62                                  	mov rax, sys_fcntl
    63                                      mov rdi, STDIN_FILENO
    64                                      mov rsi, F_SETFL
    65                                      mov rdx, 0
    66                                      syscall
    67                                  %endmacro
    68                                  
    69                                  %macro full_line 0
    70                                      times column_cells db "X"
    71                                      db 0x0a, 0xD
    72                                  %endmacro
    73                                  
    74                                  %macro hollow_line 0
    75                                      db "X"
    76                                      times column_cells-2 db " "
    77                                      db "X", 0x0a, 0xD
    78                                  %endmacro
    79                                  
    80                                  
    81                                  %macro print 2
    82                                  	mov eax, sys_write
    83                                  	mov edi, 1 	; stdout
    84                                  	mov rsi, %1
    85                                  	mov edx, %2
    86                                  	syscall
    87                                  %endmacro
    88                                  
    89                                  %macro getchar 0
    90                                  	mov     rax, sys_read
    91                                      mov     rdi, STDIN_FILENO
    92                                      mov     rsi, input_char
    93                                      mov     rdx, 1 ; number of bytes
    94                                      syscall         ;read text input from keyboard
    95                                  %endmacro
    96                                  
    97                                  %macro sleeptime 0
    98                                  	mov eax, sys_nanosleep
    99                                  	mov rdi, timespec
   100                                  	xor esi, esi		; ignore remaining time in case of call interruption
   101                                  	syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   102                                  %endmacro
   103                                  
   104                                  
   105                                  
   106                                  global _start
   107                                  
   108                                  section .bss
   109                                  
   110 00000000 ??                      input_char: resb 1
   111                                  
   112                                  section .data
   113                                  
   114                                  	; Guardamos la plantilla del tablero (32 filas)
   115                                      board_template:
   116                                          full_line
    70 00000000 58<rep 50h>         <1>  times column_cells db "X"
    71 00000050 0A0D                <1>  db 0x0a, 0xD
   117                                          %rep 30
   118                                          hollow_line
   119                                          %endrep
   118                              <1>  hollow_line
    75 00000052 58                  <2>  db "X"
    76 00000053 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000A1 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000A4 58                  <2>  db "X"
    76 000000A5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000F3 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000F6 58                  <2>  db "X"
    76 000000F7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000145 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000148 58                  <2>  db "X"
    76 00000149 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000197 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000019A 58                  <2>  db "X"
    76 0000019B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000001E9 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000001EC 58                  <2>  db "X"
    76 000001ED 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000023B 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000023E 58                  <2>  db "X"
    76 0000023F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000028D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000290 58                  <2>  db "X"
    76 00000291 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000002DF 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000002E2 58                  <2>  db "X"
    76 000002E3 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000331 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000334 58                  <2>  db "X"
    76 00000335 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000383 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000386 58                  <2>  db "X"
    76 00000387 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000003D5 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000003D8 58                  <2>  db "X"
    76 000003D9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000427 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000042A 58                  <2>  db "X"
    76 0000042B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000479 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000047C 58                  <2>  db "X"
    76 0000047D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000004CB 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000004CE 58                  <2>  db "X"
    76 000004CF 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000051D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000520 58                  <2>  db "X"
    76 00000521 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000056F 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000572 58                  <2>  db "X"
    76 00000573 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000005C1 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005C4 58                  <2>  db "X"
    76 000005C5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000613 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000616 58                  <2>  db "X"
    76 00000617 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000665 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000668 58                  <2>  db "X"
    76 00000669 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000006B7 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000006BA 58                  <2>  db "X"
    76 000006BB 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000709 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000070C 58                  <2>  db "X"
    76 0000070D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000075B 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000075E 58                  <2>  db "X"
    76 0000075F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007AD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000007B0 58                  <2>  db "X"
    76 000007B1 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007FF 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000802 58                  <2>  db "X"
    76 00000803 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000851 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000854 58                  <2>  db "X"
    76 00000855 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008A3 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008A6 58                  <2>  db "X"
    76 000008A7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008F5 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008F8 58                  <2>  db "X"
    76 000008F9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000947 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000094A 58                  <2>  db "X"
    76 0000094B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000999 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000099C 58                  <2>  db "X"
    76 0000099D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000009EB 580A0D              <2>  db "X", 0x0a, 0xD
   120                                          full_line
    70 000009EE 58<rep 50h>         <1>  times column_cells db "X"
    71 00000A3E 0A0D                <1>  db 0x0a, 0xD
   121                                      board_template_size: equ $ - board_template
   122                                  
   123                                      ; Espacio real que se usará en la ejecución
   124 00000A40 00<rep A40h>                board: times board_template_size db 0
   125                                      board_size: equ board_template_size
   126                                  
   127                                  	; Added for the terminal issue
   128 00001480 00<rep 24h>             	termios:        times 36 db 0
   129                                  	stdin:          equ 0
   130                                  	ICANON:         equ 1<<1
   131                                  	ECHO:           equ 1<<3
   132                                  	VTIME: 			equ 5
   133                                  	VMIN:			equ 6
   134                                  	CC_C:			equ 18
   135                                  
   136                                  section .text
   137                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   138                                  canonical_off:
   139 0000012B E86F000000                      call read_stdin_termios
   140                                  
   141                                          ; clear canonical bit in local mode flags
   142 00000130 50                              push rax
   143 00000131 B802000000                      mov eax, ICANON
   144 00000136 F7D0                            not eax
   145 00000138 2105(8C140000)                  and [termios+12], eax
   146 0000013E C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   147 00000145 C605(98140000)00        		mov byte[termios+CC_C+VMIN], 0
   148 0000014C 58                              pop rax
   149                                  
   150 0000014D E86C000000                      call write_stdin_termios
   151 00000152 C3                              ret
   152                                  
   153                                  echo_off:
   154 00000153 E847000000                      call read_stdin_termios
   155                                  
   156                                          ; clear echo bit in local mode flags
   157 00000158 50                              push rax
   158 00000159 B808000000                      mov eax, ECHO
   159 0000015E F7D0                            not eax
   160 00000160 2105(8C140000)                  and [termios+12], eax
   161 00000166 58                              pop rax
   162                                  
   163 00000167 E852000000                      call write_stdin_termios
   164 0000016C C3                              ret
   165                                  
   166                                  canonical_on:
   167 0000016D E82D000000                      call read_stdin_termios
   168                                  
   169                                          ; set canonical bit in local mode flags
   170 00000172 830D(8C140000)02                or dword [termios+12], ICANON
   171 00000179 C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   172 00000180 C605(98140000)01        		mov byte[termios+CC_C+VMIN], 1
   173 00000187 E832000000                      call write_stdin_termios
   174 0000018C C3                              ret
   175                                  
   176                                  echo_on:
   177 0000018D E80D000000                      call read_stdin_termios
   178                                  
   179                                          ; set echo bit in local mode flags
   180 00000192 830D(8C140000)08                or dword [termios+12], ECHO
   181                                  
   182 00000199 E820000000                      call write_stdin_termios
   183 0000019E C3                              ret
   184                                  
   185                                  read_stdin_termios:
   186 0000019F 50                              push rax
   187 000001A0 53                              push rbx
   188 000001A1 51                              push rcx
   189 000001A2 52                              push rdx
   190                                  
   191 000001A3 B836000000                      mov eax, 36h
   192 000001A8 BB00000000                      mov ebx, stdin
   193 000001AD B901540000                      mov ecx, 5401h
   194 000001B2 BA[80140000]                    mov edx, termios
   195 000001B7 CD80                            int 80h
   196                                  
   197 000001B9 5A                              pop rdx
   198 000001BA 59                              pop rcx
   199 000001BB 5B                              pop rbx
   200 000001BC 58                              pop rax
   201 000001BD C3                              ret
   202                                  
   203                                  write_stdin_termios:
   204 000001BE 50                              push rax
   205 000001BF 53                              push rbx
   206 000001C0 51                              push rcx
   207 000001C1 52                              push rdx
   208                                  
   209 000001C2 B836000000                      mov eax, 36h
   210 000001C7 BB00000000                      mov ebx, stdin
   211 000001CC B902540000                      mov ecx, 5402h
   212 000001D1 BA[80140000]                    mov edx, termios
   213 000001D6 CD80                            int 80h
   214                                  
   215 000001D8 5A                              pop rdx
   216 000001D9 59                              pop rcx
   217 000001DA 5B                              pop rbx
   218 000001DB 58                              pop rax
   219 000001DC C3                              ret
   220                                  
   221                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   222                                  
   223                                  char_equal: equ 61
   224                                  char_space: equ 32
   225                                  char_O: equ 79
   226                                  left_direction: equ -1
   227                                  right_direction: equ 1
   228                                  
   229                                  
   230                                  section .data
   231                                  
   232                                  ; Mensajes para los niveles
   233 000014A4 4E4956454C20                level_msg: db "NIVEL "
   234                                      level_msg_len: equ $ - level_msg
   235 000014AA 31                          level_1_char: db "1"
   236 000014AB 32                          level_2_char: db "2"
   237 000014AC 33                          level_3_char: db "3"
   238 000014AD 34                          level_4_char: db "4"
   239 000014AE 35                          level_5_char: db "5"
   240                                      level_char_len: equ 1
   241                                  
   242                                      ; Timespec para la pausa del mensaje de nivel
   243                                      level_display_time:
   244 000014AF 0100000000000000                lvl_tv_sec dq 1           ; 1 segundo
   245 000014B7 0000000000000000                lvl_tv_nsec dq 0
   246                                          
   247 000014BF [B013000000000000]      	pallet_position dq board + 38 + 29 * (column_cells +2)
   248 000014C7 0500000000000000            pallet_size dq 5
   249 000014CF 0500000000000000            default_pallet_size dq 5    ; Tamaño normal de la paleta
   250 000014D7 0700000000000000            extended_pallet_size dq 7   ; Tamaño extendido de la paleta
   251                                  
   252 000014DF 2800000000000000        	ball_x_pos: dq 40
   253 000014E7 1C00000000000000        	ball_y_pos: dq 28
   254 000014EF 0100000000000000            ball_direction_x dq 1    ; 1 = derecha, -1 = izquierda
   255 000014F7 FFFFFFFFFFFFFFFF            ball_direction_y dq -1   ; -1 = arriba, 1 = abajo
   256 000014FF 00                          ball_moving db 0         ; 0 = estática, 1 = en movimiento
   257 00001500 00                          ball_active db 0
   258                                  
   259 00001501 0000000000000000            ball2_x_pos:        dq 0
   260 00001509 0000000000000000            ball2_y_pos:        dq 0
   261 00001511 0000000000000000            ball2_direction_x:  dq 0
   262 00001519 0000000000000000            ball2_direction_y:  dq 0
   263 00001521 00                          ball2_moving:       db 0    ; 0 = estática, 1 = en movimiento
   264 00001522 00                          ball2_active:       db 0    ; 0 = inactiva, 1 = activa
   265                                  
   266                                      ; -- Pelota 3 --
   267 00001523 0000000000000000            ball3_x_pos:        dq 0
   268 0000152B 0000000000000000            ball3_y_pos:        dq 0
   269 00001533 0000000000000000            ball3_direction_x:  dq 0
   270 0000153B 0000000000000000            ball3_direction_y:  dq 0
   271 00001543 00                          ball3_moving:       db 0
   272 00001544 00                          ball3_active:       db 0
   273                                  
   274                                  
   275                                  ; Definir los límites de la pantalla o área de juego
   276                                      board_top_left_x equ 1
   277                                      board_top_left_y equ 1
   278                                      board_bottom_right_x equ column_cells - 1
   279                                      board_bottom_right_y equ row_cells
   280                                  
   281                                      ; Limites laterales
   282                                      left_edge equ board_top_left_x               ; Límite izquierdo en la primera columna
   283                                      right_edge equ board_bottom_right_x         ; Límite derecho en la última columna
   284                                  
   285                                      ; O también puedes hacerlo así si prefieres usando las coordenadas en memoria para obtener la ubicación exacta:
   286 00001545 [920A000000000000]          left_edge_position dq board + (board_top_left_y * (column_cells + 2)) ; Coordenada de la parte izquierda del marco
   287 0000154D [E00A000000000000]          right_edge_position dq board + (board_top_left_y * (column_cells + 2) + board_bottom_right_x - 1) ; Coordenada de la parte derecha del marco
   288                                  
   289                                      ; Definición de tipos de bloques
   290 00001555 555555555555                block_type_1: db "UUUUUU"    ; Durabilidad 1
   291 0000155B 4F4F4F4F4F4F                block_type_2: db "OOOOOO"    ; Durabilidad 2
   292 00001561 444444444444                block_type_3: db "DDDDDD"    ; Durabilidad 3
   293 00001567 4C4C4C4C4C4C                block_type_4: db "LLLLLL"    ; Durabilidad 4
   294 0000156D 565656565656                block_type_5: db "VVVVVV"    ; Durabilidad 5
   295 00001573 383838383838                block_type_6: db "888888"    ; Durabilidad 6
   296                                      block_length: equ 6        ; Longitud de cada bloque
   297                                  
   298                                      ; Estructura para el nivel actual
   299 00001579 01                          current_level db 1
   300 0000157A 00                          blocks_remaining db 0
   301                                  
   302                                      ; Definición del nivel 1 (ejemplo con múltiples bloques)destroyed_blocks
   303                                      ; Formato: x_pos, y_pos, tipo_bloque, durabilidad_actual
   304                                      level1_blocks:
   305                                          ; Tercera fila (tipo 3)
   306 0000157B 0105050220                      db 1, 5, 5, 2, ' '   
   307 00001580 0705050220                      db 7, 5, 5, 2, ' '    
   308 00001585 0D05050220                      db 13, 5, 5, 2, ' '   
   309 0000158A 1305050220                      db 19, 5, 5, 2, ' '   
   310 0000158F 1905050220                      db 25, 5, 5, 2, ' '   
   311 00001594 1F05050220                      db 31, 5, 5, 2, ' '   
   312 00001599 2505050220                      db 37, 5, 5, 2, ' '   
   313 0000159E 2B05050220                      db 43, 5, 5, 2, ' '   
   314 000015A3 3105050220                      db 49, 5, 5, 2, ' '   
   315 000015A8 3705050220                      db 55, 5, 5, 2, ' '   
   316 000015AD 3D05050220                      db 61, 5, 5, 2, ' '  
   317 000015B2 4305050220                      db 67, 5, 5, 2, ' '   
   318 000015B7 4905050220                      db 73, 5, 5, 2, ' '   
   319                                  
   320 000015BC 0106040145                      db 1, 6, 4, 1, 'E'   
   321 000015C1 0706020153                      db 7, 6, 2, 1, 'S'    
   322 000015C6 0D06040153                      db 13, 6, 4, 1, 'S'   
   323 000015CB 1306020153                      db 19, 6, 2, 1, 'S'   
   324 000015D0 1906040120                      db 25, 6, 4, 1, ' '   
   325 000015D5 1F06020120                      db 31, 6, 2, 1, ' '   
   326 000015DA 2506040120                      db 37, 6, 4, 1, ' '   
   327 000015DF 2B06020143                      db 43, 6, 2, 1, 'C'   
   328 000015E4 3106040120                      db 49, 6, 4, 1, ' '   
   329 000015E9 3706020120                      db 55, 6, 2, 1, ' '   
   330 000015EE 3D06040120                      db 61, 6, 4, 1, ' '  
   331 000015F3 4306020120                      db 67, 6, 2, 1, ' '   
   332 000015F8 4906040120                      db 73, 6, 4, 1, ' ' 
   333                                  
   334 000015FD 0107010120                      db 1, 7, 1, 1, ' '   
   335 00001602 0707030120                      db 7, 7, 3, 1, ' '    
   336 00001607 0D07010120                      db 13, 7, 1, 1, ' '   
   337 0000160C 1307030120                      db 19, 7, 3, 1, ' '   
   338 00001611 1907010120                      db 25, 7, 1, 1, ' '   
   339 00001616 1F07030120                      db 31, 7, 3, 1, ' '   
   340 0000161B 2507010120                      db 37, 7, 1, 1, ' '   
   341 00001620 2B07030120                      db 43, 7, 3, 1, ' '   
   342 00001625 3107010120                      db 49, 7, 1, 1, ' '   
   343 0000162A 3707030120                      db 55, 7, 3, 1, ' '   
   344 0000162F 3D07010120                      db 61, 7, 1, 1, ' '  
   345 00001634 4307030120                      db 67, 7, 3, 1, ' '   
   346 00001639 4907010120                      db 73, 7, 1, 1, ' ' 
   347                                  
   348 0000163E 0108040120                      db 1, 8, 4, 1, ' '   
   349 00001643 0708020120                      db 7, 8, 2, 1, ' '    
   350 00001648 0D08040150                      db 13, 8, 4, 1, 'P'   
   351 0000164D 1308020120                      db 19, 8, 2, 1, ' '   
   352 00001652 1908040120                      db 25, 8, 4, 1, ' '   
   353 00001657 1F08020120                      db 31, 8, 2, 1, ' '   
   354 0000165C 2508040145                      db 37, 8, 4, 1, 'E'   
   355 00001661 2B08020143                      db 43, 8, 2, 1, 'C'   
   356 00001666 3108040120                      db 49, 8, 4, 1, ' '   
   357 0000166B 3708020120                      db 55, 8, 2, 1, ' '   
   358 00001670 3D08040120                      db 61, 8, 4, 1, ' '  
   359 00001675 4308020120                      db 67, 8, 2, 1, ' '   
   360 0000167A 4908040120                      db 73, 8, 4, 1, ' ' 
   361                                  
   362 0000167F 0109010120                      db 1, 9, 1, 1, ' '   
   363 00001684 0709030120                      db 7, 9, 3, 1, ' '    
   364 00001689 0D09010120                      db 13, 9, 1, 1, ' '   
   365 0000168E 1309030120                      db 19, 9, 3, 1, ' '   
   366 00001693 1909010120                      db 25, 9, 1, 1, ' '   
   367 00001698 1F09030120                      db 31, 9, 3, 1, ' '   
   368 0000169D 2509010120                      db 37, 9, 1, 1, ' '   
   369 000016A2 2B09030120                      db 43, 9, 3, 1, ' '     
   370 000016A7 3109010120                      db 49, 9, 1, 1, ' '   
   371 000016AC 3709030120                      db 55, 9, 3, 1, ' '   
   372 000016B1 3D09010120                      db 61, 9, 1, 1, ' '  
   373 000016B6 4309030120                      db 67, 9, 3, 1, ' '   
   374 000016BB 4909010120                      db 73, 9, 1, 1, ' ' 
   375                                  
   376 000016C0 010A040145                      db 1, 10, 4, 1, 'E'   
   377 000016C5 070A020120                      db 7, 10, 2, 1, ' '    
   378 000016CA 0D0A040120                      db 13, 10, 4, 1, ' '   
   379 000016CF 130A020120                      db 19, 10, 2, 1, ' '   
   380 000016D4 190A040120                      db 25, 10, 4, 1, ' '   
   381 000016D9 1F0A020120                      db 31, 10, 2, 1, ' '   
   382 000016DE 250A040143                      db 37, 10, 4, 1, 'C'   
   383 000016E3 2B0A020120                      db 43, 10, 2, 1, ' '   
   384 000016E8 310A040120                      db 49, 10, 4, 1, ' '   
   385 000016ED 370A02014C                      db 55, 10, 2, 1, 'L'   
   386 000016F2 3D0A040120                      db 61, 10, 4, 1, ' '  
   387 000016F7 430A020120                      db 67, 10, 2, 1, ' '   
   388 000016FC 490A040120                      db 73, 10, 4, 1, ' ' 
   389                                  
   390                                      level1_blocks_count equ 78   ; Cantidad total de bloques
   391                                  
   392                                      ; Nivel 2: Bloques de prueba
   393                                      level2_blocks:
   394 00001701 0103040120                      db 1, 3, 4, 1, ' '
   395                                  
   396 00001706 0104030120                      db 1, 4, 3, 1, ' '   
   397 0000170B 0704040120                      db 7, 4, 4, 1, ' '   
   398                                                  
   399 00001710 0105020120                      db 1, 5, 2, 1, ' '   
   400 00001715 0705030120                      db 7, 5, 3, 1, ' '
   401 0000171A 0D05040144                      db 13, 5, 4, 1, 'D'
   402                                  
   403 0000171F 0106010120                      db 1, 6, 1, 1, ' '   
   404 00001724 0706020120                      db 7, 6, 2, 1, ' '
   405 00001729 0D06030120                      db 13, 6, 3, 1, ' '
   406 0000172E 1306040120                      db 19, 6, 4, 1, ' '   
   407                                  
   408 00001733 0107040120                      db 1, 7, 4, 1, ' '   
   409 00001738 0707010120                      db 7, 7, 1, 1, ' '
   410 0000173D 0D07020120                      db 13, 7, 2, 1, ' '
   411 00001742 1307030120                      db 19, 7, 3, 1, ' '  
   412 00001747 1907040120                      db 25, 7, 4, 1, ' '   
   413                                  
   414 0000174C 0108030120                      db 1, 8, 3, 1, ' '   
   415 00001751 0708040120                      db 7, 8, 4, 1, ' '
   416 00001756 0D08010120                      db 13, 8, 1, 1, ' '
   417 0000175B 1308020120                      db 19, 8, 2, 1, ' '  
   418 00001760 1908030120                      db 25, 8, 3, 1, ' ' 
   419 00001765 1F08040120                      db 31, 8, 4, 1, ' '   
   420                                  
   421 0000176A 0109020120                      db 1, 9, 2, 1, ' '   
   422 0000176F 0709030120                      db 7, 9, 3, 1, ' '
   423 00001774 0D09040120                      db 13, 9, 4, 1, ' '
   424 00001779 1309010120                      db 19, 9, 1, 1, ' '  
   425 0000177E 1909020120                      db 25, 9, 2, 1, ' ' 
   426 00001783 1F09030143                      db 31, 9, 3, 1, 'C' 
   427 00001788 2509040120                      db 37, 9, 4, 1, ' '   
   428                                  
   429 0000178D 010A010120                      db 1, 10, 1, 1, ' '   
   430 00001792 070A020120                      db 7, 10, 2, 1, ' '
   431 00001797 0D0A030120                      db 13, 10, 3, 1, ' '
   432 0000179C 130A040120                      db 19, 10, 4, 1, ' '  
   433 000017A1 190A010120                      db 25, 10, 1, 1, ' ' 
   434 000017A6 1F0A020120                      db 31, 10, 2, 1, ' ' 
   435 000017AB 250A03014C                      db 37, 10, 3, 1, 'L'  
   436 000017B0 2B0A040120                      db 43, 10, 4, 1, ' '   
   437                                  
   438 000017B5 010B040120                      db 1, 11, 4, 1, ' '   
   439 000017BA 070B010120                      db 7, 11, 1, 1, ' '
   440 000017BF 0D0B020120                      db 13, 11, 2, 1, ' '
   441 000017C4 130B030144                      db 19, 11, 3, 1, 'D'  
   442 000017C9 190B040120                      db 25, 11, 4, 1, ' ' 
   443 000017CE 1F0B010120                      db 31, 11, 1, 1, ' ' 
   444 000017D3 250B020120                      db 37, 11, 2, 1, ' '  
   445 000017D8 2B0B030120                      db 43, 11, 3, 1, ' ' 
   446 000017DD 310B040120                      db 49, 11, 4, 1, ' '   
   447                                  
   448 000017E2 010C030120                      db 1, 12, 3, 1, ' '   
   449 000017E7 070C040120                      db 7, 12, 4, 1, ' '
   450 000017EC 0D0C010120                      db 13, 12, 1, 1, ' '
   451 000017F1 130C020120                      db 19, 12, 2, 1, ' '  
   452 000017F6 190C030120                      db 25, 12, 3, 1, ' ' 
   453 000017FB 1F0C040120                      db 31, 12, 4, 1, ' ' 
   454 00001800 250C010120                      db 37, 12, 1, 1, ' '  
   455 00001805 2B0C020120                      db 43, 12, 2, 1, ' ' 
   456 0000180A 310C030120                      db 49, 12, 3, 1, ' '
   457 0000180F 370C040120                      db 55, 12, 4, 1, ' '   
   458                                  
   459 00001814 010D020120                      db 1, 13, 2, 1, ' '   
   460 00001819 070D030120                      db 7, 13, 3, 1, ' '
   461 0000181E 0D0D040120                      db 13, 13, 4, 1, ' '
   462 00001823 130D010144                      db 19, 13, 1, 1, 'D'  
   463 00001828 190D020120                      db 25, 13, 2, 1, ' ' 
   464 0000182D 1F0D030120                      db 31, 13, 3, 1, ' ' 
   465 00001832 250D040120                      db 37, 13, 4, 1, ' '  
   466 00001837 2B0D010120                      db 43, 13, 1, 1, ' ' 
   467 0000183C 310D020120                      db 49, 13, 2, 1, ' '
   468 00001841 370D030120                      db 55, 13, 3, 1, ' ' 
   469 00001846 3D0D040120                      db 61, 13, 4, 1, ' '   
   470                                  
   471 0000184B 010E010120                      db 1, 14, 1, 1, ' '   
   472 00001850 070E020120                      db 7, 14, 2, 1, ' '
   473 00001855 0D0E030120                      db 13, 14, 3, 1, ' '
   474 0000185A 130E040120                      db 19, 14, 4, 1, ' '  
   475 0000185F 190E010120                      db 25, 14, 1, 1, ' ' 
   476 00001864 1F0E020120                      db 31, 14, 2, 1, ' ' 
   477 00001869 250E030120                      db 37, 14, 3, 1, ' '  
   478 0000186E 2B0E040120                      db 43, 14, 4, 1, ' ' 
   479 00001873 310E010120                      db 49, 14, 1, 1, ' '
   480 00001878 370E020120                      db 55, 14, 2, 1, ' ' 
   481 0000187D 3D0E030120                      db 61, 14, 3, 1, ' '  
   482 00001882 430E040120                      db 67, 14, 4, 1, ' '   
   483                                  
   484 00001887 010F050220                      db 1, 15, 5, 2, ' '   
   485 0000188C 070F050220                      db 7, 15, 5, 2, ' '
   486 00001891 0D0F050220                      db 13, 15, 5, 2, ' '
   487 00001896 130F050220                      db 19, 15, 5, 2, ' '  
   488 0000189B 190F050220                      db 25, 15, 5, 2, ' ' 
   489 000018A0 1F0F050220                      db 31, 15, 5, 2, ' ' 
   490 000018A5 250F050220                      db 37, 15, 5, 2, ' '  
   491 000018AA 2B0F050220                      db 43, 15, 5, 2, ' ' 
   492 000018AF 310F050220                      db 49, 15, 5, 2, ' '
   493 000018B4 370F050220                      db 55, 15, 5, 2, ' ' 
   494 000018B9 3D0F050220                      db 61, 15, 5, 2, ' '  
   495 000018BE 430F050220                      db 67, 15, 5, 2, ' '
   496 000018C3 490F040120                      db 73, 15, 4, 1, ' '   
   497                                         
   498                                  
   499                                      level2_blocks_count equ 91
   500                                  
   501                                      ; Nivel 3
   502                                      level3_blocks:
   503                                  
   504 000018C8 0103010120                      db 1, 3, 1, 1, ' '   
   505 000018CD 0703020120                      db 7, 3, 2, 1, ' '    
   506 000018D2 0D03010120                      db 13, 3, 1, 1, ' '   
   507 000018D7 1303020120                      db 19, 3, 2, 1, ' '   
   508 000018DC 1903010120                      db 25, 3, 1, 1, ' '   
   509 000018E1 1F03020120                      db 31, 3, 2, 1, ' '   
   510 000018E6 2503010120                      db 37, 3, 1, 1, ' '   
   511 000018EB 2B03020120                      db 43, 3, 2, 1, ' '   
   512 000018F0 3103010120                      db 49, 3, 1, 1, ' '   
   513 000018F5 3703020120                      db 55, 3, 2, 1, ' '   
   514 000018FA 3D03010120                      db 61, 3, 1, 1, ' '  
   515 000018FF 4303020120                      db 67, 3, 2, 1, ' '   
   516 00001904 4903010120                      db 73, 3, 1, 1, ' ' 
   517                                  
   518 00001909 0105040120                      db 1, 5, 4, 1, ' '   
   519 0000190E 0705040120                      db 7, 5, 4, 1, ' '    
   520 00001913 0D05040120                      db 13, 5, 4, 1, ' '   
   521 00001918 1305066320                      db 19, 5, 6, 99, ' '   
   522 0000191D 1905066320                      db 25, 5, 6, 99, ' '   
   523 00001922 1F05066320                      db 31, 5, 6, 99, ' '   
   524 00001927 2505066320                      db 37, 5, 6, 99, ' '   
   525 0000192C 2B05066320                      db 43, 5, 6, 99, ' '   
   526 00001931 3105066320                      db 49, 5, 6, 99, ' '   
   527 00001936 3705066320                      db 55, 5, 6, 99, ' '   
   528 0000193B 3D05066320                      db 61, 5, 6, 99, ' '  
   529 00001940 4305066320                      db 67, 5, 6, 99, ' '   
   530 00001945 4905066320                      db 73, 5, 6, 99, ' ' 
   531                                  
   532 0000194A 0108040120                      db 1, 8, 4, 1, ' '   
   533 0000194F 0708030120                      db 7, 8, 3, 1, ' '    
   534 00001954 0D08040120                      db 13, 8, 4, 1, ' '   
   535 00001959 1308030120                      db 19, 8, 3, 1, ' '   
   536 0000195E 1908040120                      db 25, 8, 4, 1, ' '   
   537 00001963 1F08030120                      db 31, 8, 3, 1, ' '   
   538 00001968 2508040120                      db 37, 8, 4, 1, ' '   
   539 0000196D 2B08030120                      db 43, 8, 3, 1, ' '   
   540 00001972 3108040120                      db 49, 8, 4, 1, ' '   
   541 00001977 3708030120                      db 55, 8, 3, 1, ' '   
   542 0000197C 3D08040120                      db 61, 8, 4, 1, ' '  
   543 00001981 4308030120                      db 67, 8, 3, 1, ' '   
   544 00001986 4908040120                      db 73, 8, 4, 1, ' ' 
   545                                  
   546 0000198B 010B066320                      db 1, 11, 6, 99, ' '   
   547 00001990 070B066320                      db 7, 11, 6, 99, ' '    
   548 00001995 0D0B066320                      db 13, 11, 6, 99, ' '   
   549 0000199A 130B066320                      db 19, 11, 6, 99, ' '   
   550 0000199F 190B066320                      db 25, 11, 6, 99, ' '   
   551 000019A4 1F0B066320                      db 31, 11, 6, 99, ' '   
   552 000019A9 250B066320                      db 37, 11, 6, 99, ' '   
   553 000019AE 2B0B066320                      db 43, 11, 6, 99, ' '   
   554 000019B3 310B066320                      db 49, 11, 6, 99, ' '   
   555 000019B8 370B066320                      db 55, 11, 6, 99, ' '   
   556 000019BD 3D0B030144                      db 61, 11, 3, 1, 'D'  
   557 000019C2 430B030120                      db 67, 11, 3, 1, ' '   
   558 000019C7 490B030120                      db 73, 11, 3, 1, ' ' 
   559                                  
   560 000019CC 010D010144                      db 1, 13, 1, 1, 'D'   
   561 000019D1 070D020150                      db 7, 13, 2, 1, 'P'    
   562 000019D6 0D0D010143                      db 13, 13, 1, 1, 'C'   
   563 000019DB 130D020120                      db 19, 13, 2, 1, ' '   
   564 000019E0 190D010120                      db 25, 13, 1, 1, ' '   
   565 000019E5 1F0D020120                      db 31, 13, 2, 1, ' '   
   566 000019EA 250D010120                      db 37, 13, 1, 1, ' '   
   567 000019EF 2B0D020120                      db 43, 13, 2, 1, ' '   
   568 000019F4 310D010120                      db 49, 13, 1, 1, ' '   
   569 000019F9 370D020120                      db 55, 13, 2, 1, ' '   
   570 000019FE 3D0D010120                      db 61, 13, 1, 1, ' '  
   571 00001A03 430D020120                      db 67, 13, 2, 1, ' '   
   572 00001A08 490D010120                      db 73, 13, 1, 1, ' ' 
   573                                  
   574 00001A0D 010F020120                      db 1, 15, 2, 1, ' '   
   575 00001A12 070F020120                      db 7, 15, 2, 1, ' '    
   576 00001A17 0D0F020120                      db 13, 15, 2, 1, ' '   
   577 00001A1C 130F066320                      db 19, 15, 6, 99, ' '   
   578 00001A21 190F066320                      db 25, 15, 6, 99, ' '   
   579 00001A26 1F0F066320                      db 31, 15, 6, 99, ' '   
   580 00001A2B 250F066320                      db 37, 15, 6, 99, ' '   
   581 00001A30 2B0F066320                      db 43, 15, 6, 99, ' '   
   582 00001A35 310F066320                      db 49, 15, 6, 99, ' '   
   583 00001A3A 370F066320                      db 55, 15, 6, 99, ' '   
   584 00001A3F 3D0F066320                      db 61, 15, 6, 99, ' '  
   585 00001A44 430F066320                      db 67, 15, 6, 99, ' '   
   586 00001A49 490F066320                      db 73, 15, 6, 99, ' ' 
   587                                  
   588 00001A4E 0112020120                      db 1, 18, 2, 1, ' '   
   589 00001A53 0712030120                      db 7, 18, 3, 1, ' '    
   590 00001A58 0D12020144                      db 13, 18, 2, 1, 'D'   
   591 00001A5D 1312030120                      db 19, 18, 3, 1, ' '   
   592 00001A62 1912020120                      db 25, 18, 2, 1, ' '   
   593 00001A67 1F12030120                      db 31, 18, 3, 1, ' '   
   594 00001A6C 2512020120                      db 37, 18, 2, 1, ' '   
   595 00001A71 2B12030120                      db 43, 18, 3, 1, ' '   
   596 00001A76 3112020120                      db 49, 18, 2, 1, ' '   
   597 00001A7B 3712030144                      db 55, 18, 3, 1, 'D'   
   598 00001A80 3D12020120                      db 61, 18, 2, 1, ' '  
   599 00001A85 4312030143                      db 67, 18, 3, 1, 'C'   
   600 00001A8A 4912020120                      db 73, 18, 2, 1, ' ' 
   601                                  
   602                                  
   603 00001A8F 0114066320                      db 1, 20, 6, 99, ' '   
   604 00001A94 0714066320                      db 7, 20, 6, 99, ' '    
   605 00001A99 0D14066320                      db 13, 20, 6, 99, ' '   
   606 00001A9E 1314066320                      db 19, 20, 6, 99, ' '   
   607 00001AA3 1914066320                      db 25, 20, 6, 99, ' '   
   608 00001AA8 1F14066320                      db 31, 20, 6, 99, ' '   
   609 00001AAD 2514066320                      db 37, 20, 6, 99, ' '   
   610 00001AB2 2B14066320                      db 43, 20, 6, 99, ' '   
   611 00001AB7 3114066320                      db 49, 20, 6, 99, ' '   
   612 00001ABC 3714066320                      db 55, 20, 6, 99, ' '   
   613 00001AC1 3D14010120                      db 61, 20, 1, 1, ' '  
   614 00001AC6 4314010153                      db 67, 20, 1, 1, 'S'   
   615 00001ACB 4914010143                      db 73, 20, 1, 1, 'C' 
   616                                  
   617                                      level3_blocks_count equ 104
   618                                  
   619                                      ; Nivel 4
   620                                      level4_blocks:
   621                                  
   622 00001AD0 0704010120                      db 7, 4, 1, 1, ' '    
   623 00001AD5 0D04020120                      db 13, 4, 2, 1, ' '   
   624 00001ADA 1304030120                      db 19, 4, 3, 1, ' '   
   625 00001ADF 1904050220                      db 25, 4, 5, 2, ' '   
   626 00001AE4 1F04020120                      db 31, 4, 2, 1, ' '
   627                                  
   628 00001AE9 2B04010120                      db 43, 4, 1, 1, ' '   
   629 00001AEE 3104020120                      db 49, 4, 2, 1, ' '   
   630 00001AF3 3704030144                      db 55, 4, 3, 1, 'D'   
   631 00001AF8 3D04040120                      db 61, 4, 4, 1, ' '  
   632 00001AFD 4304020120                      db 67, 4, 2, 1, ' ' 
   633                                  
   634 00001B02 0705020120                      db 7, 5, 2, 1, ' '    
   635 00001B07 0D05030120                      db 13, 5, 3, 1, ' '   
   636 00001B0C 1305050220                      db 19, 5, 5, 2, ' '   
   637 00001B11 1905020120                      db 25, 5, 2, 1, ' '   
   638 00001B16 1F05010120                      db 31, 5, 1, 1, ' '
   639                                  
   640 00001B1B 2B05020120                      db 43, 5, 2, 1, ' '   
   641 00001B20 3105030120                      db 49, 5, 3, 1, ' '   
   642 00001B25 3705040120                      db 55, 5, 4, 1, ' '   
   643 00001B2A 3D05020120                      db 61, 5, 2, 1, ' '  
   644 00001B2F 4305050220                      db 67, 5, 5, 2, ' '  
   645                                  
   646 00001B34 0706030120                      db 7, 6, 3, 1, ' '    
   647 00001B39 0D06050220                      db 13, 6, 5, 2, ' '   
   648 00001B3E 1306020120                      db 19, 6, 2, 1, ' '   
   649 00001B43 1906010120                      db 25, 6, 1, 1, ' '   
   650 00001B48 1F06020120                      db 31, 6, 2, 1, ' '
   651                                  
   652 00001B4D 2B06030120                      db 43, 6, 3, 1, ' '   
   653 00001B52 3106040120                      db 49, 6, 4, 1, ' '   
   654 00001B57 3706020120                      db 55, 6, 2, 1, ' '   
   655 00001B5C 3D06050220                      db 61, 6, 5, 2, ' '  
   656 00001B61 4306020120                      db 67, 6, 2, 1, ' '
   657                                  
   658 00001B66 0707050220                      db 7, 7, 5, 2, ' '    
   659 00001B6B 0D07020120                      db 13, 7, 2, 1, ' '   
   660 00001B70 1307010120                      db 19, 7, 1, 1, ' '   
   661 00001B75 1907020120                      db 25, 7, 2, 1, ' '   
   662 00001B7A 1F07030120                      db 31, 7, 3, 1, ' '
   663                                  
   664 00001B7F 2B07040120                      db 43, 7, 4, 1, ' '   
   665 00001B84 3107020120                      db 49, 7, 2, 1, ' '   
   666 00001B89 3707050220                      db 55, 7, 5, 2, ' '   
   667 00001B8E 3D07020120                      db 61, 7, 2, 1, ' '  
   668 00001B93 4307030120                      db 67, 7, 3, 1, ' '
   669                                  
   670 00001B98 0708020120                      db 7, 8, 2, 1, ' '    
   671 00001B9D 0D08010120                      db 13, 8, 1, 1, ' '   
   672 00001BA2 1308020120                      db 19, 8, 2, 1, ' '   
   673 00001BA7 1908030120                      db 25, 8, 3, 1, ' '   
   674 00001BAC 1F08040120                      db 31, 8, 4, 1, ' '
   675                                  
   676 00001BB1 2B08020120                      db 43, 8, 2, 1, ' '   
   677 00001BB6 3108050220                      db 49, 8, 5, 2, ' '   
   678 00001BBB 3708020120                      db 55, 8, 2, 1, ' '   
   679 00001BC0 3D08030120                      db 61, 8, 3, 1, ' '  
   680 00001BC5 4308040120                      db 67, 8, 4, 1, ' '
   681                                  
   682 00001BCA 0709010120                      db 7, 9, 1, 1, ' '    
   683 00001BCF 0D09020120                      db 13, 9, 2, 1, ' '   
   684 00001BD4 1309030120                      db 19, 9, 3, 1, ' '   
   685 00001BD9 1909040120                      db 25, 9, 4, 1, ' '   
   686 00001BDE 1F09020120                      db 31, 9, 2, 1, ' '
   687                                  
   688 00001BE3 2B09050220                      db 43, 9, 5, 2, ' '   
   689 00001BE8 3109020120                      db 49, 9, 2, 1, ' '   
   690 00001BED 3709030120                      db 55, 9, 3, 1, ' '   
   691 00001BF2 3D09040120                      db 61, 9, 4, 1, ' '  
   692 00001BF7 4309020120                      db 67, 9, 2, 1, ' '
   693                                  
   694 00001BFC 070A020120                      db 7, 10, 2, 1, ' '    
   695 00001C01 0D0A030120                      db 13, 10, 3, 1, ' '   
   696 00001C06 130A040120                      db 19, 10, 4, 1, ' '   
   697 00001C0B 190A020120                      db 25, 10, 2, 1, ' '   
   698 00001C10 1F0A010120                      db 31, 10, 1, 1, ' '
   699                                  
   700 00001C15 2B0A020120                      db 43, 10, 2, 1, ' '   
   701 00001C1A 310A030120                      db 49, 10, 3, 1, ' '   
   702 00001C1F 370A040120                      db 55, 10, 4, 1, ' '   
   703 00001C24 3D0A020120                      db 61, 10, 2, 1, ' '  
   704 00001C29 430A010120                      db 67, 10, 1, 1, ' '
   705                                  
   706 00001C2E 070B030120                      db 7, 11, 3, 1, ' '   
   707 00001C33 0D0B040120                      db 13, 11, 4, 1, ' '   
   708 00001C38 130B020120                      db 19, 11, 2, 1, ' '   
   709 00001C3D 190B010120                      db 25, 11, 1, 1, ' '  
   710 00001C42 1F0B050220                      db 31, 11, 5, 2, ' '
   711                                  
   712 00001C47 2B0B030120                      db 43, 11, 3, 1, ' '   
   713 00001C4C 310B040120                      db 49, 11, 4, 1, ' '   
   714 00001C51 370B020120                      db 55, 11, 2, 1, ' '   
   715 00001C56 3D0B010120                      db 61, 11, 1, 1, ' '  
   716 00001C5B 430B020120                      db 67, 11, 2, 1, ' '
   717                                  
   718 00001C60 070C040120                      db 7, 12, 4, 1, ' '   
   719 00001C65 0D0C020120                      db 13, 12, 2, 1, ' '   
   720 00001C6A 130C010120                      db 19, 12, 1, 1, ' '   
   721 00001C6F 190C050220                      db 25, 12, 5, 2, ' '  
   722 00001C74 1F0C030120                      db 31, 12, 3, 1, ' '
   723                                  
   724 00001C79 2B0C040120                      db 43, 12, 4, 1, ' '    
   725 00001C7E 310C020120                      db 49, 12, 2, 1, ' '   
   726 00001C83 370C010120                      db 55, 12, 1, 1, ' '   
   727 00001C88 3D0C020120                      db 61, 12, 2, 1, ' '   
   728 00001C8D 430C030120                      db 67, 12, 3, 1, ' '
   729                                  
   730 00001C92 070D020120                      db 7, 13, 2, 1, ' '   
   731 00001C97 0D0D010120                      db 13, 13, 1, 1, ' '   
   732 00001C9C 130D050220                      db 19, 13, 5, 2, ' '   
   733 00001CA1 190D030143                      db 25, 13, 3, 1, 'C'  
   734 00001CA6 1F0D040120                      db 31, 13, 4, 1, ' '
   735                                  
   736 00001CAB 2B0D020120                      db 43, 13, 2, 1, ' '    
   737 00001CB0 310D010120                      db 49, 13, 1, 1, ' '   
   738 00001CB5 370D020120                      db 55, 13, 2, 1, ' '   
   739 00001CBA 3D0D030120                      db 61, 13, 3, 1, ' '   
   740 00001CBF 430D050220                      db 67, 13, 5, 2, ' '
   741                                  
   742 00001CC4 070E010120                      db 7, 14, 1, 1, ' '   
   743 00001CC9 0D0E050220                      db 13, 14, 5, 2, ' '   
   744 00001CCE 130E030120                      db 19, 14, 3, 1, ' '   
   745 00001CD3 190E040120                      db 25, 14, 4, 1, ' '  
   746 00001CD8 1F0E020120                      db 31, 14, 2, 1, ' '
   747                                  
   748 00001CDD 2B0E010120                      db 43, 14, 1, 1, ' '    
   749 00001CE2 310E020120                      db 49, 14, 2, 1, ' '   
   750 00001CE7 370E030120                      db 55, 14, 3, 1, ' '   
   751 00001CEC 3D0E050220                      db 61, 14, 5, 2, ' '   
   752 00001CF1 430E020120                      db 67, 14, 2, 1, ' '
   753                                  
   754 00001CF6 070F050220                      db 7, 15, 5, 2, ' '   
   755 00001CFB 0D0F030120                      db 13, 15, 3, 1, ' '   
   756 00001D00 130F040120                      db 19, 15, 4, 1, ' '   
   757 00001D05 190F020120                      db 25, 15, 2, 1, ' '  
   758 00001D0A 1F0F010120                      db 31, 15, 1, 1, ' '
   759                                  
   760 00001D0F 2B0F020145                      db 43, 15, 2, 1, 'E'    
   761 00001D14 310F03014C                      db 49, 15, 3, 1, 'L'   
   762 00001D19 370F050220                      db 55, 15, 5, 2, ' '   
   763 00001D1E 3D0F020120                      db 61, 15, 2, 1, ' '   
   764 00001D23 430F010120                      db 67, 15, 1, 1, ' '
   765                                  
   766 00001D28 0710030120                      db 7, 16, 3, 1, ' '   
   767 00001D2D 0D10040120                      db 13, 16, 4, 1, ' '   
   768 00001D32 1310020120                      db 19, 16, 2, 1, ' '   
   769 00001D37 1910010120                      db 25, 16, 1, 1, ' '  
   770 00001D3C 1F10020120                      db 31, 16, 2, 1, ' '
   771                                  
   772 00001D41 2B10030120                      db 43, 16, 3, 1, ' '    
   773 00001D46 3110050220                      db 49, 16, 5, 2, ' '   
   774 00001D4B 3710020120                      db 55, 16, 2, 1, ' '   
   775 00001D50 3D10010120                      db 61, 16, 1, 1, ' '   
   776 00001D55 4310020120                      db 67, 16, 2, 1, ' '
   777                                  
   778 00001D5A 0711040120                      db 7, 17, 4, 1, ' '   
   779 00001D5F 0D11020120                      db 13, 17, 2, 1, ' '   
   780 00001D64 1311010120                      db 19, 17, 1, 1, ' '   
   781 00001D69 1911020120                      db 25, 17, 2, 1, ' '  
   782 00001D6E 1F11030120                      db 31, 17, 3, 1, ' '
   783                                  
   784 00001D73 2B11050220                      db 43, 17, 5, 2, ' '    
   785 00001D78 3111020120                      db 49, 17, 2, 1, ' '    
   786 00001D7D 3711010120                      db 55, 17, 1, 1, ' '   
   787 00001D82 3D11020120                      db 61, 17, 2, 1, ' '   
   788 00001D87 4311030120                      db 67, 17, 3, 1, ' '
   789                                  
   790                                      level4_blocks_count equ 140
   791                                  
   792                                      ; Nivel 5
   793                                      level5_blocks:
   794                                  
   795 00001D8C 1303020145                      db 19, 3, 2, 1, 'E'   
   796 00001D91 3703020120                      db 55, 3, 2, 1, ' '   
   797                                  
   798 00001D96 1304020120                      db 19, 4, 2, 1, ' '   
   799 00001D9B 370402014C                      db 55, 4, 2, 1, 'L' 
   800                                  
   801 00001DA0 1905020120                      db 25, 5, 2, 1, ' '   
   802 00001DA5 3105020153                      db 49, 5, 2, 1, 'S'   
   803                                  
   804 00001DAA 1906020120                      db 25, 6, 2, 1, ' '   
   805 00001DAF 3106020120                      db 49, 6, 2, 1, ' '   
   806                                  
   807 00001DB4 1307050220                      db 19, 7, 5, 2, ' '   
   808 00001DB9 1907050220                      db 25, 7, 5, 2, ' '  
   809 00001DBE 1F07050220                      db 31, 7, 5, 2, ' '
   810 00001DC3 2507050220                      db 37, 7, 5, 2, ' '
   811 00001DC8 2B07050220                      db 43, 7, 5, 2, ' '    
   812 00001DCD 3107050220                      db 49, 7, 5, 2, ' '    
   813 00001DD2 3707050220                      db 55, 7, 5, 2, ' '   
   814                                  
   815 00001DD7 1308050220                      db 19, 8, 5, 2, ' '   
   816 00001DDC 1908050220                      db 25, 8, 5, 2, ' '  
   817 00001DE1 1F08050220                      db 31, 8, 5, 2, ' '
   818 00001DE6 2508050220                      db 37, 8, 5, 2, ' '
   819 00001DEB 2B08050220                      db 43, 8, 5, 2, ' '    
   820 00001DF0 3108050220                      db 49, 8, 5, 2, ' '    
   821 00001DF5 3708050220                      db 55, 8, 5, 2, ' '   
   822                                  
   823 00001DFA 0D09050220                      db 13, 9, 5, 2, ' '   
   824 00001DFF 1309050220                      db 19, 9, 5, 2, ' '   
   825 00001E04 1909040143                      db 25, 9, 4, 1, 'C'  
   826 00001E09 1F09050220                      db 31, 9, 5, 2, ' '
   827 00001E0E 2509050220                      db 37, 9, 5, 2, ' '
   828 00001E13 2B09050220                      db 43, 9, 5, 2, ' '    
   829 00001E18 3109040144                      db 49, 9, 4, 1, 'D'    
   830 00001E1D 3709050220                      db 55, 9, 5, 2, ' '   
   831 00001E22 3D09050220                      db 61, 9, 5, 2, ' '  
   832                                  
   833 00001E27 0D0A050220                      db 13, 10, 5, 2, ' '   
   834 00001E2C 130A050220                      db 19, 10, 5, 2, ' '   
   835 00001E31 190A040120                      db 25, 10, 4, 1, ' '  
   836 00001E36 1F0A050220                      db 31, 10, 5, 2, ' '
   837 00001E3B 250A050220                      db 37, 10, 5, 2, ' '
   838 00001E40 2B0A050220                      db 43, 10, 5, 2, ' '    
   839 00001E45 310A040120                      db 49, 10, 4, 1, ' '    
   840 00001E4A 370A050220                      db 55, 10, 5, 2, ' '   
   841 00001E4F 3D0A050220                      db 61, 10, 5, 2, ' '   
   842                                          
   843 00001E54 070B050220                      db 7, 11, 5, 2, ' '   
   844 00001E59 0D0B050220                      db 13, 11, 5, 2, ' '   
   845 00001E5E 130B050220                      db 19, 11, 5, 2, ' '   
   846 00001E63 190B050220                      db 25, 11, 5, 2, ' '  
   847 00001E68 1F0B050220                      db 31, 11, 5, 2, ' '
   848 00001E6D 250B050220                      db 37, 11, 5, 2, ' '
   849 00001E72 2B0B050220                      db 43, 11, 5, 2, ' '    
   850 00001E77 310B050220                      db 49, 11, 5, 2, ' '    
   851 00001E7C 370B050220                      db 55, 11, 5, 2, ' '   
   852 00001E81 3D0B050220                      db 61, 11, 5, 2, ' '   
   853 00001E86 430B050220                      db 67, 11, 5, 2, ' '
   854                                  
   855 00001E8B 070C050220                      db 7, 12, 5, 2, ' '   
   856 00001E90 0D0C050220                      db 13, 12, 5, 2, ' '   
   857 00001E95 130C050220                      db 19, 12, 5, 2, ' '   
   858 00001E9A 190C050220                      db 25, 12, 5, 2, ' '  
   859 00001E9F 1F0C050220                      db 31, 12, 5, 2, ' '
   860 00001EA4 250C050220                      db 37, 12, 5, 2, ' '
   861 00001EA9 2B0C050220                      db 43, 12, 5, 2, ' '    
   862 00001EAE 310C050220                      db 49, 12, 5, 2, ' '    
   863 00001EB3 370C050220                      db 55, 12, 5, 2, ' '   
   864 00001EB8 3D0C050220                      db 61, 12, 5, 2, ' '   
   865 00001EBD 430C050220                      db 67, 12, 5, 2, ' '
   866                                  
   867 00001EC2 070D050220                      db 7, 13, 5, 2, ' '   
   868 00001EC7 0D0D050220                      db 13, 13, 5, 2, ' '   
   869 00001ECC 130D050220                      db 19, 13, 5, 2, ' '   
   870 00001ED1 190D050220                      db 25, 13, 5, 2, ' '  
   871 00001ED6 1F0D050220                      db 31, 13, 5, 2, ' '
   872 00001EDB 250D050220                      db 37, 13, 5, 2, ' '
   873 00001EE0 2B0D050220                      db 43, 13, 5, 2, ' '    
   874 00001EE5 310D050220                      db 49, 13, 5, 2, ' '    
   875 00001EEA 370D050220                      db 55, 13, 5, 2, ' '   
   876 00001EEF 3D0D050220                      db 61, 13, 5, 2, ' '   
   877 00001EF4 430D050220                      db 67, 13, 5, 2, ' '
   878                                  
   879                                          
   880 00001EF9 070E050220                      db 7, 14, 5, 2, ' '   
   881 00001EFE 130E050220                      db 19, 14, 5, 2, ' '   
   882 00001F03 190E050220                      db 25, 14, 5, 2, ' '  
   883 00001F08 1F0E050220                      db 31, 14, 5, 2, ' '
   884 00001F0D 250E050220                      db 37, 14, 5, 2, ' '
   885 00001F12 2B0E050220                      db 43, 14, 5, 2, ' '    
   886 00001F17 310E050220                      db 49, 14, 5, 2, ' '    
   887 00001F1C 370E050220                      db 55, 14, 5, 2, ' '   
   888 00001F21 430E050220                      db 67, 14, 5, 2, ' '
   889                                  
   890 00001F26 070F050220                      db 7, 15, 5, 2, ' '   
   891 00001F2B 130F050220                      db 19, 15, 5, 2, ' '      
   892 00001F30 370F050220                      db 55, 15, 5, 2, ' '   
   893 00001F35 430F050220                      db 67, 15, 5, 2, ' '
   894                                   
   895 00001F3A 0710050220                      db 7, 16, 5, 2, ' '   
   896 00001F3F 1310050220                      db 19, 16, 5, 2, ' '      
   897 00001F44 3710050220                      db 55, 16, 5, 2, ' '   
   898 00001F49 4310050220                      db 67, 16, 5, 2, ' '
   899                                  
   900                                  
   901 00001F4E 1911050220                      db 25, 17, 5, 2, ' '  
   902 00001F53 1F11050220                      db 31, 17, 5, 2, ' '
   903 00001F58 2B11050220                      db 43, 17, 5, 2, ' '    
   904 00001F5D 3111050220                      db 49, 17, 5, 2, ' ' 
   905                                  
   906 00001F62 1912050220                      db 25, 18, 5, 2, ' '  
   907 00001F67 1F12050220                      db 31, 18, 5, 2, ' '
   908 00001F6C 2B12050220                      db 43, 18, 5, 2, ' '    
   909 00001F71 3112050220                      db 49, 18, 5, 2, ' ' 
   910                                  
   911                                      level5_blocks_count equ 98
   912                                  
   913                                      ; Array para mantener el estado de los bloques
   914 00001F76 00<rep C8h>                 block_states: times 200 db 0  ; Durabilidad actual de cada bloque
   915                                  
   916                                      
   917                                      ; Variables para almacenar los valores
   918 0000203E 0000000000000000            current_score dq 0          ; Score actual
   919 00002046 00                          destroyed_blocks db 0       ; Bloques destruidos en el nivel actual
   920                                      
   921                                      ; Buffer para convertir números a string
   922 00002047 00<rep 14h>                 number_buffer: times 20 db 0
   923                                  
   924 0000205B 4023242640                  enemy_chars db "@", "#", "$", "&", "@"    ; El nivel 1 y 5 comparten el mismo caracter (@)
   925                                      
   926                                      ; Estructura para los enemigos (x, y, activo)
   927 00002060 00<rep 1Eh>                 enemies: times 10 * 3 db 0     ; Máximo 5 enemigos, cada uno con 3 bytes (x, y, activo)
   928 0000207E 0A                          enemies_count db 10            ; Cantidad de enemigos activos
   929                                      
   930 0000207F 3200000000000000            enemy_points dq 50              ; Puntos por destruir un enemigo
   931 00002087 00                          enemy_move_counter db 0         ; Contador para controlar velocidad de movimiento
   932 00002088 09                          enemy_move_delay db 9           ; Mover enemigos cada N ciclos
   933 00002089 00                          enemy_move_total db 0      ; Contador total de movimientos
   934 0000208A 00                          enemy_target db 0          ; 0 = persigue bola, 1 = persigue paleta
   935 0000208B 14                          MOVEMENT_THRESHOLD db 20   ; Número de movimientos antes de cambiar objetivo
   936                                   ;Formato: número de bloques destruidos necesario para que aparezca cada enemigo
   937                                      ; Añade esto en la sección .dataa
   938 0000208C 464748494A4C788CA0-         level1_spawn_points: db 70, 71, 72, 73, 74, 76, 120, 140, 160, 180    ; 10 enemigos, cada 2 bloques
   938 00002095 B4                 
   939 00002096 001E3246556E8296AA-         level2_spawn_points: db 0, 30, 50, 70, 85, 110, 130, 150, 170, 190    ; 10 enemigos, cada 2 bloques
   939 0000209F BE                 
   940 000020A0 00000032373C646464-         level3_spawn_points: db 0, 0, 0, 50, 55, 60, 100, 100, 100, 100   ; 10 enemigos, cada 3 bloques
   940 000020A9 64                 
   941 000020AA 00040F1E2832465A64-         level4_spawn_points: db 0, 4, 15, 30, 40, 50, 70, 90, 100, 120  ; 10 enemigos, cada 3 bloques
   941 000020B3 78                 
   942 000020B4 00000A141E2328323C-         level5_spawn_points: db 0, 0, 10, 20, 30, 35, 40, 50, 60, 80 ; 10 enemigos, cada 5 bloques
   942 000020BD 50                 
   943                                          ; Arreglo de punteros a los spawn points de cada nivel
   944                                      spawn_points_table:
   945 000020BE [8C20000000000000]              dq level1_spawn_points
   946 000020C6 [9620000000000000]              dq level2_spawn_points
   947 000020CE [A020000000000000]              dq level3_spawn_points
   948 000020D6 [AA20000000000000]              dq level4_spawn_points
   949 000020DE [B420000000000000]              dq level5_spawn_points
   950                                  
   951                                      ; Variables para el comportamiento de enemigos
   952 000020E6 1E                          BEHAVIOR_CHANGE_TIME db 30    ; Ciclos antes de cambiar comportamiento
   953 000020E7 00                          behavior_counter db 0          ; Contador para cambio de comportamiento
   954 000020E8 00                          current_behavior db 0          ; 0 = persigue bola, 1 = persigue paleta
   955 000020E9 00<rep Ah>                  enemy_spawns_triggered: times 10 db 0  ; 0 = no spawned, 1 = spawned
   956                                  
   957 000020F3 50756E74616A653A20-         score_label: db "Puntaje: [          ]", 0xA, 0xD  ; 10 espacios para el número
   957 000020FC 5B2020202020202020-
   957 00002105 20205D0A0D         
   958                                      score_label_len: equ $ - score_label
   959 0000210A 426C6F717565732064-         blocks_label: db "Bloques destruidos: [   ]", 0xA, 0xD  ; 3 espacios para el número
   959 00002113 657374727569646F73-
   959 0000211C 3A205B2020205D0A0D 
   960                                      blocks_label_len: equ $ - blocks_label
   961                                      
   962                                      ; Posición donde insertar los números en los labels
   963                                      score_pos equ 10    ; Posición después de "Puntaje: ["
   964                                      blocks_pos equ 20   ; Posición después de "Bloques destruidos: ["
   965                                      
   966                                      ; Definición de las vidas (x, y, estado)
   967                                      ; Formato: posición_x, posición_y, estado (1 = activa, 0 = inactiva)
   968                                      lives_data: 
   969 00002125 021E01                          db 2, 30, 1     ; Vida 1 (activa)
   970 00002128 041E01                          db 4, 30, 1     ; Vida 2 (activa)
   971 0000212B 061E01                          db 6, 30, 1     ; Vida 3 (inactiva)
   972 0000212E 081E00                          db 8, 30, 0     ; Vida 4 (inactiva)
   973 00002131 0A1E00                          db 10, 30, 0    ; Vida 5 (inactiva)
   974 00002134 0C1E00                          db 12, 30, 0    ; Vida 6 (inactiva)
   975 00002137 0E1E00                          db 14, 30, 0    ; Vida 7 (inactiva)
   976                                      lives_count equ 7    ; Total de vidas
   977 0000213A 5E                          life_char db "^"    
   978 0000213B 03                          current_lives db 3   ; Contador de vidas activas actual
   979                                  
   980                                  ; Estructura para almacenar las letras y sus posiciones
   981                                      ; Formato: x, y, letra, activo (1 = activo, 0 = inactivo)
   982 0000213C 00<rep 190h>                letters_map: times 100 * 4 db 0  ; Espacio para 100 letras
   983 000022CC 00                          letters_count db 0   
   984 000022CD 20                          last_letter db ' '    ; Variable para almacenar la última letra
   985 000022CE 506F64657220616374-         last_letter_msg db "Poder actual: [ ]", 0xA, 0xD  ; Mensaje para mostrar la última letra
   985 000022D7 75616C3A205B205D0A-
   985 000022E0 0D                 
   986                                      last_letter_msg_len equ $ - last_letter_msg
   987 000022E1 00                          current_power_processed db 0 ; 0 = no procesado, 1 = ya procesado
   988 000022E2 07                          max_lives db 7              ; Máximo número de vidas permitidas
   989 000022E3 0700000000000000            ball_speed dq 7             ; Velocidad normal de la bola
   990 000022EB 0200000000000000            slow_ball_speed dq 2        ; Velocidad lenta (se usará como divisor)
   991 000022F3 0000000000000000            speed_counter dq 0          ; Contador para ralentizar el movimiento
   992                                     
   993 000022FB 00                          initial_catch_active db 0   ; 0 = inactivo, 1 = activo
   994                                  
   995 000022FC 00                          catch_power_active db 0     ; 0 = inactivo, 1 = activo
   996 000022FD 00                          ball_caught db 0           ; 0 = no atrapada, 1 = atrapada
   997 000022FE 00                          ball_caught_2 db 0           ; 0 = no atrapada, 1 = atrapada
   998 000022FF 00                          ball_caught_3 db 0           ; 0 = no atrapada, 1 = atrapada
   999                                  
  1000 00002300 0000000000000000            ball_catch_offset dq 0     ; Offset respecto a la paleta cuando está atrapada
  1001 00002308 00                          last_key db 0    ; Variable para almacenar la última tecla presionada
  1002                                  
  1003 00002309 00                          laser_power_active: db 0         ; Flag para indicar si el poder láser está activo
  1004 0000230A 7C                          laser_symbol: db '|'             ; Símbolo para representar el láser
  1005 0000230B 00                          laser_count: db 0                ; Contador de láseres activos
  1006 0000230C 00<rep C8h>                 lasers: times 200 db 0           ; Array para almacenar posiciones de láseres (x,y)
  1007 000023D4 0100000000000000            laser_speed: dq 1                ; Velocidad del láser
  1008                                  
  1009                                      balls_data:     ; Array para almacenar hasta 3 bolas
  1010                                          ; Bola 1 (principal)
  1011 000023DC 0000000000000000                dq 0        ; x_pos
  1012 000023E4 0000000000000000                dq 0        ; y_pos
  1013 000023EC 0100000000000000                dq 1        ; direction_x
  1014 000023F4 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1015 000023FC 01                              db 1        ; active
  1016                                          ; Bola 2
  1017 000023FD 0000000000000000                dq 0        ; x_pos
  1018 00002405 0000000000000000                dq 0        ; y_pos
  1019 0000240D FFFFFFFFFFFFFFFF                dq -1       ; direction_x
  1020 00002415 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1021 0000241D 00                              db 0        ; active
  1022                                          ; Bola 3
  1023 0000241E 0000000000000000                dq 0        ; x_pos
  1024 00002426 0000000000000000                dq 0        ; y_pos
  1025 0000242E 0000000000000000                dq 0        ; direction_x
  1026 00002436 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1027 0000243E 00                              db 0        ; active
  1028                                      
  1029 0000243F 01                          balls_count db 1     ; Contador de bolas activas
  1030                                      BALL_STRUCT_SIZE equ 33  ; Tamaño de cada estructura de bola (8*4 + 1)
  1031 00002440 00<rep Ah>                  enemy_last_x:       times 10 db 0
  1032 0000244A 00<rep Ah>                  enemy_last_y:       times 10 db 0
  1033 00002454 00<rep Ah>                  enemy_stuck_count:  times 10 db 0
  1034 0000245E 00                          letter_move_counter db 0
  1035                                      initial_ball_offset_x equ 2    ; Offset desde el centro de la paleta
  1036                                      initial_ball_offset_y equ -1   ; Offset vertical desde la paleta
  1037                                  
  1038                                  section .text
  1039                                  
  1040                                  
  1041                                  print_lives:
  1042 000001DD 55                          push rbp
  1043 000001DE 4889E5                      mov rbp, rsp
  1044                                      
  1045 000001E1 4D31E4                      xor r12, r12                    ; Índice de la vida actual
  1046                                      
  1047                                      .print_loop:
  1048 000001E4 4983FC07                        cmp r12, lives_count
  1049 000001E8 7D45                            jge .end
  1050                                          
  1051                                          ; Calcular offset de la vida actual
  1052 000001EA 4C89E0                          mov rax, r12
  1053 000001ED 486BC003                        imul rax, 3                     ; Cada vida ocupa 3 bytes (x, y, estado)
  1054 000001F1 488DB0[25210000]                lea rsi, [lives_data + rax]
  1055                                          
  1056                                          ; Calcular posición en el tablero
  1057 000001F8 4C0FB606                        movzx r8, byte [rsi]            ; X
  1058 000001FC 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  1059                                          
  1060                                          ; Calcular offset en el tablero
  1061 00000201 B850000000                      mov rax, column_cells
  1062 00000206 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  1063 0000020A 49F7E1                          mul r9
  1064 0000020D 4C01C0                          add rax, r8
  1065 00000210 488DB8[400A0000]                lea rdi, [board + rax]
  1066                                          
  1067                                          ; Verificar estado de la vida y dibujar el carácter correspondiente
  1068 00000217 807E0201                        cmp byte [rsi + 2], 1
  1069 0000021B 7405                            je .draw_active
  1070                                          
  1071                                          ; Si está inactiva, dibujar espacio
  1072 0000021D C60720                          mov byte [rdi], ' '
  1073 00000220 EB08                            jmp .next_life
  1074                                          
  1075                                      .draw_active:
  1076                                          ; Si está activa, dibujar el símbolo de vida
  1077 00000222 8A05(3A210000)                  mov al, [life_char]
  1078 00000228 8807                            mov [rdi], al
  1079                                          
  1080                                      .next_life:
  1081 0000022A 49FFC4                          inc r12
  1082 0000022D EBB5                            jmp .print_loop
  1083                                          
  1084                                      .end:
  1085 0000022F 5D                              pop rbp
  1086 00000230 C3                              ret
  1087                                  
  1088                                  ; Función para desactivar una vida
  1089                                  ; Función modificada para perder una vida
  1090                                  ; Modificar lose_life para reiniciar solo la bola principal
  1091                                  lose_life:
  1092 00000231 55                          push rbp
  1093 00000232 4889E5                      mov rbp, rsp
  1094                                      
  1095                                      ; Verificar si aún quedan vidas
  1096 00000235 803D(3B210000)00            cmp byte [current_lives], 0
  1097 0000023C 0F84AB000000                je .game_lost
  1098                                      
  1099                                      ; Encontrar la última vida activa
  1100 00000242 B907000000                  mov rcx, lives_count
  1101 00000247 48FFC9                      dec rcx
  1102                                      
  1103                                      .find_active_life:
  1104 0000024A 4889C8                          mov rax, rcx
  1105 0000024D 486BC003                        imul rax, 3
  1106 00000251 488DB0[25210000]                lea rsi, [lives_data + rax]
  1107 00000258 807E0201                        cmp byte [rsi + 2], 1
  1108 0000025C 740A                            je .deactivate_life
  1109 0000025E 48FFC9                          dec rcx
  1110 00000261 79E7                            jns .find_active_life
  1111 00000263 E985000000                      jmp .game_lost
  1112                                          
  1113                                      .deactivate_life:
  1114                                          ; Borrar vida visualmente y en datos
  1115 00000268 4C0FB606                        movzx r8, byte [rsi]
  1116 0000026C 4C0FB64E01                      movzx r9, byte [rsi + 1]
  1117 00000271 B850000000                      mov rax, column_cells
  1118 00000276 4883C002                        add rax, 2
  1119 0000027A 49F7E1                          mul r9
  1120 0000027D 4C01C0                          add rax, r8
  1121 00000280 488DB8[400A0000]                lea rdi, [board + rax]
  1122 00000287 C60720                          mov byte [rdi], ' '
  1123 0000028A C6460200                        mov byte [rsi + 2], 0
  1124 0000028E FE0D(3B210000)                  dec byte [current_lives]
  1125                                          
  1126                                          ; Borrar paleta anterior
  1127 00000294 4C8B05(BF140000)                mov r8, [pallet_position]
  1128 0000029B 488B0D(C7140000)                mov rcx, [pallet_size]
  1129                                          .erase_pallet_loop:
  1130 000002A2 41C60020                            mov byte [r8], ' '
  1131 000002A6 49FFC0                              inc r8
  1132 000002A9 48FFC9                              dec rcx
  1133 000002AC 75F4                                jnz .erase_pallet_loop
  1134                                          
  1135                                          ; Reiniciar solo la bola principal
  1136 000002AE 48C705(DF140000)28-             mov qword [ball_x_pos], 40
  1136 000002B6 000000             
  1137 000002B9 48C705(E7140000)1C-             mov qword [ball_y_pos], 28
  1137 000002C1 000000             
  1138 000002C4 C605(FF140000)00                mov byte [ball_moving], 0
  1139 000002CB C605(00150000)01                mov byte [ball_active], 1       ; Activar bola principal
  1140 000002D2 48C705(BF140000)-               mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  1140 000002D9 [B0130000]         
  1141                                          
  1142                                          ; Asegurarse que las otras bolas están desactivadas
  1143 000002DD C605(22150000)00                mov byte [ball2_active], 0
  1144 000002E4 C605(44150000)00                mov byte [ball3_active], 0
  1145                                          
  1146 000002EB EB07                            jmp .end
  1147                                          
  1148                                      .game_lost:
  1149 000002ED E8E2000000                      call game_lost
  1150 000002F2 EB00                            jmp .end
  1151                                          
  1152                                      .end:
  1153 000002F4 5D                              pop rbp
  1154 000002F5 C3                              ret
  1155                                  ; Función modificada para verificar colisión con el borde inferior
  1156                                  check_bottom_collision:
  1157 000002F6 55                          push rbp
  1158 000002F7 4889E5                      mov rbp, rsp
  1159                                      
  1160                                      ; Verificar si el nivel está completo (no quedan bloques)
  1161 000002FA 803D(7A150000)00            cmp byte [blocks_remaining], 0
  1162 00000301 0F84CB000000                je .balls_remain            ; Si no quedan bloques, no perder vidas
  1163                                      
  1164                                      ; Verificar bola principal
  1165 00000307 803D(00150000)01            cmp byte [ball_active], 1
  1166 0000030E 7542                        jne .check_ball2
  1167 00000310 488B05(E7140000)            mov rax, [ball_y_pos]
  1168 00000317 4883F81E                    cmp rax, row_cells - 2
  1169 0000031B 7535                        jne .check_ball2
  1170                                      
  1171                                      ; Borrar visualmente la bola principal
  1172 0000031D 4C8B05(DF140000)            mov r8, [ball_x_pos]
  1173 00000324 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  1174 0000032B 4981C0[400A0000]            add r8, board
  1175 00000332 4C89C9                      mov rcx, r9
  1176 00000335 B852000000                  mov rax, column_cells + 2
  1177 0000033A 48F7E9                      imul rcx
  1178 0000033D 4901C0                      add r8, rax
  1179 00000340 41C60020                    mov byte [r8], char_space    ; Borrar la bola del tablero
  1180                                      
  1181 00000344 C605(00150000)00            mov byte [ball_active], 0
  1182 0000034B C605(FF140000)00            mov byte [ball_moving], 0
  1183                                  
  1184                                  .check_ball2:
  1185 00000352 803D(22150000)01            cmp byte [ball2_active], 1
  1186 00000359 751B                        jne .check_ball3
  1187 0000035B 488B05(09150000)            mov rax, [ball2_y_pos]
  1188 00000362 4883F81E                    cmp rax, row_cells - 2
  1189 00000366 750E                        jne .check_ball3
  1190 00000368 C605(22150000)00            mov byte [ball2_active], 0
  1191 0000036F C605(21150000)00            mov byte [ball2_moving], 0
  1192                                  
  1193                                  .check_ball3:
  1194 00000376 803D(44150000)01            cmp byte [ball3_active], 1
  1195 0000037D 751B                        jne .check_active_balls
  1196 0000037F 488B05(2B150000)            mov rax, [ball3_y_pos]
  1197 00000386 4883F81E                    cmp rax, row_cells - 2
  1198 0000038A 750E                        jne .check_active_balls
  1199 0000038C C605(44150000)00            mov byte [ball3_active], 0
  1200 00000393 C605(43150000)00            mov byte [ball3_moving], 0
  1201                                  
  1202                                  .check_active_balls:
  1203                                      ; Verificar si quedan bolas activas
  1204 0000039A 4831C9                      xor rcx, rcx
  1205                                      
  1206                                      ; Contar bolas activas
  1207 0000039D 8A05(00150000)              mov al, byte [ball_active]
  1208 000003A3 4801C1                      add rcx, rax
  1209 000003A6 8A05(22150000)              mov al, byte [ball2_active]
  1210 000003AC 4801C1                      add rcx, rax
  1211 000003AF 8A05(44150000)              mov al, byte [ball3_active]
  1212 000003B5 4801C1                      add rcx, rax
  1213                                      
  1214                                      ; Si no hay bolas activas y quedan bloques, perder vida
  1215 000003B8 4885C9                      test rcx, rcx
  1216 000003BB 7515                        jnz .balls_remain
  1217                                      
  1218 000003BD 803D(7A150000)00            cmp byte [blocks_remaining], 0  ; Verificar si quedan bloques
  1219 000003C4 740C                        je .balls_remain               ; Si no quedan bloques, no perder vida
  1220                                      
  1221 000003C6 E866FEFFFF                  call lose_life
  1222 000003CB C605(00150000)01            mov byte [ball_active], 1      ; Reactivar bola principal
  1223                                      
  1224                                  .balls_remain:
  1225 000003D2 5D                          pop rbp
  1226 000003D3 C3                          ret
  1227                                  
  1228                                  ; Nueva función para game over
  1229                                  game_lost:
  1230                                      ; Limpiar la pantalla
  1231                                      print clear, clear_length
    82 000003D4 B801000000          <1>  mov eax, sys_write
    83 000003D9 BF01000000          <1>  mov edi, 1
    84 000003DE 48BE-               <1>  mov rsi, %1
    84 000003E0 [1000000000000000]  <1>
    85 000003E8 BA07000000          <1>  mov edx, %2
    86 000003ED 0F05                <1>  syscall
  1232                                      
  1233                                      ; Mostrar mensaje de derrota
  1234                                      section .data
  1235 0000245F C2A148617320706572-             lost_msg: db "¡Has perdido!", 0xA, 0xD
  1235 00002468 6469646F210A0D     
  1236                                          lost_msg_len: equ $ - lost_msg
  1237                                      section .text
  1238                                      
  1239                                      ; Imprimir mensaje de derrota
  1240                                      print lost_msg, lost_msg_len
    82 000003EF B801000000          <1>  mov eax, sys_write
    83 000003F4 BF01000000          <1>  mov edi, 1
    84 000003F9 48BE-               <1>  mov rsi, %1
    84 000003FB [5F24000000000000]  <1>
    85 00000403 BA10000000          <1>  mov edx, %2
    86 00000408 0F05                <1>  syscall
  1241                                      print score_msg, score_msg_len
    82 0000040A B801000000          <1>  mov eax, sys_write
    83 0000040F BF01000000          <1>  mov edi, 1
    84 00000414 48BE-               <1>  mov rsi, %1
    84 00000416 [8D24000000000000]  <1>
    85 0000041E BA0F000000          <1>  mov edx, %2
    86 00000423 0F05                <1>  syscall
  1242                                      
  1243                                      ; Mostrar puntaje final
  1244 00000425 488B05(3E200000)            mov rax, [current_score]
  1245 0000042C 48BF-                       mov rdi, number_buffer
  1245 0000042E [4720000000000000] 
  1246 00000436 E8D5140000                  call number_to_string
  1247                                      print number_buffer, 20
    82 0000043B B801000000          <1>  mov eax, sys_write
    83 00000440 BF01000000          <1>  mov edi, 1
    84 00000445 48BE-               <1>  mov rsi, %1
    84 00000447 [4720000000000000]  <1>
    85 0000044F BA14000000          <1>  mov edx, %2
    86 00000454 0F05                <1>  syscall
  1248                                      
  1249                                      ; Esperar un momento antes de salir
  1250 00000456 48C7059FFBFFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  1250 0000045F 0000               
  1251 00000461 48C7059CFBFFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  1251 0000046A 0000               
  1252                                      sleeptime
    98 0000046C B823000000          <1>  mov eax, sys_nanosleep
    99 00000471 48BF-               <1>  mov rdi, timespec
    99 00000473 [0000000000000000]  <1>
   100 0000047B 31F6                <1>  xor esi, esi
   101 0000047D 0F05                <1>  syscall
  1253                                      
  1254 0000047F E9A21E0000                  jmp exit
  1255                                  
  1256                                  
  1257                                  ; Función para registrar una nueva letra en el mapa
  1258                                  ; Entrada:
  1259                                  ;   al - letra a registrar
  1260                                  ;   r8b - posición x
  1261                                  ;   r9b - posición y
  1262                                  register_letter:
  1263 00000484 55                          push rbp
  1264 00000485 4889E5                      mov rbp, rsp
  1265 00000488 53                          push rbx
  1266 00000489 51                          push rcx
  1267                                      
  1268 0000048A 3C20                        cmp al, ' '
  1269 0000048C 7438                        je .end
  1270                                  
  1271                                      ; Encontrar un espacio libre en el mapa
  1272 0000048E 4831C9                      xor rcx, rcx
  1273 00000491 480FB615(CC220000)          movzx rdx, byte [letters_count]
  1274                                      
  1275                                      .find_slot:
  1276 00000499 4883F964                        cmp rcx, 100              ; Máximo de letras
  1277 0000049D 7D27                            jge .end                  ; Si no hay espacio, salir
  1278                                          
  1279 0000049F 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1280 000004A7 807B0300                        cmp byte [rbx + 3], 0    ; Verificar si el slot está inactivo
  1281 000004AB 7405                            je .found_slot
  1282                                          
  1283 000004AD 48FFC1                          inc rcx
  1284 000004B0 EBE7                            jmp .find_slot
  1285                                          
  1286                                      .found_slot:
  1287                                          ; Guardar la información de la letra
  1288 000004B2 448803                          mov [rbx], r8b           ; x
  1289 000004B5 44884B01                        mov [rbx + 1], r9b       ; y
  1290 000004B9 884302                          mov [rbx + 2], al        ; letra
  1291 000004BC C6430301                        mov byte [rbx + 3], 1    ; marcar como activo
  1292                                          
  1293 000004C0 FE05(CC220000)                  inc byte [letters_count]
  1294                                          
  1295                                      .end:
  1296 000004C6 59                              pop rcx
  1297 000004C7 5B                              pop rbx
  1298 000004C8 5D                              pop rbp
  1299 000004C9 C3                              ret
  1300                                  
  1301                                  ; Función para imprimir todas las letras registradas
  1302                                  print_letters:
  1303 000004CA 55                          push rbp
  1304 000004CB 4889E5                      mov rbp, rsp
  1305 000004CE 53                          push rbx
  1306 000004CF 51                          push rcx
  1307                                      
  1308 000004D0 4831C9                      xor rcx, rcx
  1309                                      
  1310                                      .print_loop:
  1311 000004D3 4883F964                        cmp rcx, 100              ; Máximo de letras
  1312 000004D7 7D37                            jge .end
  1313                                          
  1314                                          ; Obtener puntero a la letra actual
  1315 000004D9 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1316                                          
  1317                                          ; Verificar si está activa
  1318 000004E1 807B0300                        cmp byte [rbx + 3], 0
  1319 000004E5 7424                            je .next_letter
  1320                                          
  1321                                          ; Calcular posición en el tablero
  1322 000004E7 4C0FB603                        movzx r8, byte [rbx]      ; x
  1323 000004EB 4C0FB64B01                      movzx r9, byte [rbx + 1]  ; y
  1324                                          
  1325                                          ; Calcular offset en el tablero
  1326 000004F0 B850000000                      mov rax, column_cells
  1327 000004F5 4883C002                        add rax, 2                ; Incluir caracteres de nueva línea
  1328 000004F9 49F7E1                          mul r9
  1329 000004FC 4C01C0                          add rax, r8
  1330 000004FF 488DB8[400A0000]                lea rdi, [board + rax]
  1331                                          
  1332                                          ; Imprimir la letra
  1333 00000506 8A4302                          mov al, [rbx + 2]
  1334 00000509 8807                            mov [rdi], al
  1335                                          
  1336                                      .next_letter:
  1337 0000050B 48FFC1                          inc rcx
  1338 0000050E EBC3                            jmp .print_loop
  1339                                          
  1340                                      .end:
  1341 00000510 59                              pop rcx
  1342 00000511 5B                              pop rbx
  1343 00000512 5D                              pop rbp
  1344 00000513 C3                              ret
  1345                                  
  1346                                  ; Función para borrar una letra específica
  1347                                  ; Entrada:
  1348                                  ;   r8b - posición x
  1349                                  ;   r9b - posición y
  1350                                  remove_letter:
  1351 00000514 55                          push rbp
  1352 00000515 4889E5                      mov rbp, rsp
  1353 00000518 53                          push rbx
  1354 00000519 51                          push rcx
  1355                                      
  1356 0000051A 4831C9                      xor rcx, rcx
  1357                                      
  1358                                      .find_loop:
  1359 0000051D 4883F964                        cmp rcx, 100              ; Máximo de letras
  1360 00000521 7D2E                            jge .end
  1361                                          
  1362 00000523 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1363                                          
  1364                                          ; Verificar si está activa y coincide la posición
  1365 0000052B 807B0300                        cmp byte [rbx + 3], 0
  1366 0000052F 741B                            je .next_letter
  1367                                          
  1368 00000531 8A03                            mov al, [rbx]
  1369 00000533 4438C0                          cmp al, r8b
  1370 00000536 7514                            jne .next_letter
  1371                                          
  1372 00000538 8A4301                          mov al, [rbx + 1]
  1373 0000053B 4438C8                          cmp al, r9b
  1374 0000053E 750C                            jne .next_letter
  1375                                          
  1376                                          ; Encontrada la letra, desactivarla
  1377 00000540 C6430300                        mov byte [rbx + 3], 0
  1378 00000544 FE0D(CC220000)                  dec byte [letters_count]
  1379 0000054A EB05                            jmp .end
  1380                                          
  1381                                      .next_letter:
  1382 0000054C 48FFC1                          inc rcx
  1383 0000054F EBCC                            jmp .find_loop
  1384                                          
  1385                                      .end:
  1386 00000551 59                              pop rcx
  1387 00000552 5B                              pop rbx
  1388 00000553 5D                              pop rbp
  1389 00000554 C3                              ret
  1390                                  ; Función para mover las letras hacia abajo
  1391                                  move_letters:
  1392 00000555 55                          push rbp
  1393 00000556 4889E5                      mov rbp, rsp
  1394 00000559 53                          push rbx
  1395 0000055A 57                          push rdi
  1396 0000055B 56                          push rsi
  1397 0000055C 4150                        push r8
  1398 0000055E 4151                        push r9
  1399 00000560 4152                        push r10
  1400 00000562 4153                        push r11
  1401                                  
  1402 00000564 4831C9                      xor rcx, rcx
  1403                                  
  1404                                      ; Verificar si debemos mover la letra en este frame
  1405 00000567 FE05(5E240000)              inc byte [letter_move_counter]    ; Incrementar contador
  1406 0000056D 803D(5E240000)0B            cmp byte [letter_move_counter], 11 ; Ajusta este número para cambiar velocidad
  1407 00000574 0F8C20020000                jl .skip_all                         ; Si no es momento de mover, terminar
  1408 0000057A C605(5E240000)00            mov byte [letter_move_counter], 0 ; Resetear contador
  1409                                  
  1410                                      .move_loop:
  1411 00000581 4883F964                        cmp rcx, 100
  1412 00000585 0F8D0D020000                    jge .print_last_letter
  1413                                          
  1414 0000058B 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1415 00000593 807B0300                        cmp byte [rbx + 3], 0
  1416 00000597 0F84F3010000                    je .next_letter
  1417                                  
  1418 0000059D 4C0FB603                        movzx r8, byte [rbx]
  1419 000005A1 4C0FB64B01                      movzx r9, byte [rbx + 1]
  1420                                  
  1421 000005A6 B850000000                      mov rax, column_cells
  1422 000005AB 4883C002                        add rax, 2
  1423 000005AF 49F7E1                          mul r9
  1424 000005B2 4C01C0                          add rax, r8
  1425 000005B5 488DB8[400A0000]                lea rdi, [board + rax]
  1426 000005BC C60720                          mov byte [rdi], ' '
  1427                                  
  1428 000005BF FE4301                          inc byte [rbx + 1]
  1429 000005C2 4C0FB64B01                      movzx r9, byte [rbx + 1]
  1430                                  
  1431 000005C7 4983F91F                        cmp r9, row_cells - 1
  1432 000005CB 7C09                            jl .check_pallet_collision
  1433                                  
  1434 000005CD C6430300                        mov byte [rbx + 3], 0
  1435 000005D1 E9BA010000                      jmp .next_letter
  1436                                  
  1437                                          .check_pallet_collision:
  1438 000005D6 B850000000                          mov rax, column_cells
  1439 000005DB 4883C002                            add rax, 2
  1440 000005DF 49F7E1                              mul r9
  1441 000005E2 4C01C0                              add rax, r8
  1442 000005E5 488DB8[400A0000]                    lea rdi, [board + rax]
  1443                                  
  1444 000005EC 8A07                                mov al, [rdi]
  1445 000005EE 3C20                                cmp al, ' '
  1446 000005F0 0F849A010000                        je .next_letter
  1447 000005F6 3C3D                                cmp al, char_equal
  1448 000005F8 740A                                je .capture_letter
  1449                                  
  1450 000005FA 8A4302                              mov al, [rbx + 2]
  1451 000005FD 8807                                mov [rdi], al
  1452 000005FF E98C010000                          jmp .next_letter
  1453                                  
  1454                                          .capture_letter:
  1455                                              ; Obtener la nueva letra
  1456 00000604 8A4302                              mov al, [rbx + 2]
  1457                                              
  1458                                              ; Comparar con la última letra
  1459 00000607 3A05(CD220000)                      cmp al, [last_letter]
  1460 0000060D 7407                                je .same_letter
  1461                                              
  1462                                              ; Es una letra diferente, resetear el procesamiento
  1463 0000060F C605(E1220000)00                    mov byte [current_power_processed], 0
  1464                                              
  1465                                              .same_letter:
  1466                                              ; Guardar la nueva letra
  1467 00000616 8805(CD220000)                      mov [last_letter], al
  1468                                              
  1469                                              ; Verificar si es 'E' para extender la paleta
  1470 0000061C 3C45                                cmp al, 'E'
  1471 0000061E 7450                                je .extend_pallet
  1472                                              
  1473                                              ; Verificar si es 'P' para añadir vida
  1474 00000620 3C50                                cmp al, 'P'
  1475 00000622 7478                                je .check_add_life
  1476                                  
  1477 00000624 3C53                                cmp al, 'S'
  1478 00000626 0F84B4000000                        je .slow_ball
  1479                                  
  1480 0000062C 3C43                                cmp al, 'C'
  1481 0000062E 0F84D8000000                        je .activate_catch
  1482                                              
  1483 00000634 3C4C                                cmp al, 'L'
  1484 00000636 0F84F9000000                        je .activate_laser
  1485                                  
  1486 0000063C 3C44                                cmp al, 'D'
  1487 0000063E 0F841A010000                        je .activate_split
  1488                                  
  1489                                              ; Si no es ningún power-up, restaurar tamaño normal
  1490 00000644 488B05(CF140000)                    mov rax, [default_pallet_size]
  1491 0000064B 488905(C7140000)                    mov [pallet_size], rax
  1492 00000652 48C705(E3220000)07-                 mov qword [ball_speed], 7    ; Restaurar velocidad normal
  1492 0000065A 000000             
  1493 0000065D C605(FC220000)00                    mov byte [catch_power_active], 0
  1494 00000664 C605(09230000)00                    mov byte [laser_power_active], 0
  1495 0000066B E91C010000                          jmp .finish_capture
  1496                                  
  1497                                              .extend_pallet:
  1498 00000670 C605(09230000)00                        mov byte [laser_power_active], 0
  1499 00000677 C605(FC220000)00                        mov byte [catch_power_active], 0
  1500 0000067E 48C705(E3220000)07-                     mov qword [ball_speed], 7    ; Restaurar velocidad normal
  1500 00000686 000000             
  1501 00000689 488B05(D7140000)                        mov rax, [extended_pallet_size]
  1502 00000690 488905(C7140000)                        mov [pallet_size], rax
  1503 00000697 E9F0000000                              jmp .finish_capture
  1504                                  
  1505                                              .check_add_life:
  1506 0000069C C605(09230000)00                        mov byte [laser_power_active], 0
  1507 000006A3 C605(FC220000)00                        mov byte [catch_power_active], 0
  1508 000006AA 488B05(CF140000)                        mov rax, [default_pallet_size]
  1509 000006B1 488905(C7140000)                        mov [pallet_size], rax
  1510 000006B8 48C705(E3220000)07-                     mov qword [ball_speed], 7 
  1510 000006C0 000000             
  1511                                                  ; Verificar si ya procesamos este power-up
  1512 000006C3 803D(E1220000)00                        cmp byte [current_power_processed], 0
  1513 000006CA 0F85BC000000                            jne .finish_capture
  1514                                                  
  1515                                                  ; Preservar registros importantes
  1516 000006D0 51                                      push rcx
  1517 000006D1 53                                      push rbx
  1518                                                  
  1519                                                  ; Marcar como procesado
  1520 000006D2 C605(E1220000)01                        mov byte [current_power_processed], 1
  1521                                                  
  1522                                                  ; Añadir una vida
  1523 000006D9 E845040000                              call add_life
  1524                                                  
  1525                                                  ; Restaurar registros
  1526 000006DE 5B                                      pop rbx
  1527 000006DF 59                                      pop rcx
  1528                                                  
  1529                                              .slow_ball:
  1530 000006E0 C605(09230000)00                        mov byte [laser_power_active], 0
  1531 000006E7 C605(FC220000)00                        mov byte [catch_power_active], 0                
  1532 000006EE 488B05(CF140000)                        mov rax, [default_pallet_size]
  1533 000006F5 488905(C7140000)                        mov [pallet_size], rax
  1534 000006FC 48C705(E3220000)0A-                     mov qword [ball_speed], 10    ; Activar velocidad lenta
  1534 00000704 000000             
  1535 00000707 E980000000                              jmp .finish_capture
  1536                                  
  1537                                              .activate_catch:
  1538 0000070C C605(09230000)00                        mov byte [laser_power_active], 0
  1539 00000713 488B05(CF140000)                        mov rax, [default_pallet_size]
  1540 0000071A 488905(C7140000)                        mov [pallet_size], rax
  1541 00000721 48C705(E3220000)07-                     mov qword [ball_speed], 7
  1541 00000729 000000             
  1542 0000072C C605(FC220000)01                        mov byte [catch_power_active], 1
  1543 00000733 EB57                                    jmp .finish_capture
  1544                                  
  1545                                              .activate_laser:
  1546 00000735 C605(FC220000)00                        mov byte [catch_power_active], 0
  1547 0000073C 488B05(CF140000)                        mov rax, [default_pallet_size]
  1548 00000743 488905(C7140000)                        mov [pallet_size], rax
  1549 0000074A 48C705(E3220000)07-                     mov qword [ball_speed], 7
  1549 00000752 000000             
  1550 00000755 C605(09230000)01                        mov byte [laser_power_active], 1    ; Activar el poder láser
  1551 0000075C EB2E                                    jmp .finish_capture
  1552                                  
  1553                                              .activate_split:
  1554 0000075E C605(09230000)00                        mov byte [laser_power_active], 0
  1555 00000765 C605(FC220000)00                        mov byte [catch_power_active], 0
  1556 0000076C 488B05(CF140000)                        mov rax, [default_pallet_size]
  1557 00000773 488905(C7140000)                        mov [pallet_size], rax
  1558 0000077A 48C705(E3220000)07-                     mov qword [ball_speed], 7 
  1558 00000782 000000             
  1559 00000785 E8DF000000                              call activate_split_power
  1560 0000078A EB00                                    jmp .finish_capture
  1561                                  
  1562                                              .finish_capture:
  1563 0000078C C6430300                                mov byte [rbx + 3], 0
  1564                                  
  1565                                          .next_letter:
  1566 00000790 48FFC1                              inc rcx
  1567 00000793 E9E9FDFFFF                          jmp .move_loop
  1568                                  
  1569                                      .print_last_letter:
  1570                                          ; ;; en vez de imprimir, saltamos
  1571 00000798 EB0D                            jmp .end
  1572                                  
  1573                                  
  1574                                      .skip_all:                        ; Nueva etiqueta para saltar todo cuando no movemos
  1575 0000079A 415B                            pop r11
  1576 0000079C 415A                            pop r10
  1577 0000079E 4159                            pop r9
  1578 000007A0 4158                            pop r8
  1579 000007A2 5E                              pop rsi
  1580 000007A3 5F                              pop rdi
  1581 000007A4 5B                              pop rbx
  1582 000007A5 5D                              pop rbp
  1583 000007A6 C3                              ret
  1584                                  
  1585                                      .end:
  1586 000007A7 415B                            pop r11
  1587 000007A9 415A                            pop r10
  1588 000007AB 4159                            pop r9
  1589 000007AD 4158                            pop r8
  1590 000007AF 5E                              pop rsi
  1591 000007B0 5F                              pop rdi
  1592 000007B1 5B                              pop rbx
  1593 000007B2 5D                              pop rbp
  1594 000007B3 C3                              ret
  1595                                  
  1596                                  print_power_label:
  1597 000007B4 55                          push rbp
  1598 000007B5 4889E5                      mov  rbp, rsp
  1599                                      
  1600                                      ; Crear buffer temporal
  1601 000007B8 4883EC20                    sub rsp, 32
  1602                                      
  1603                                      ; Copiar el mensaje base al buffer
  1604 000007BC 4889E7                      mov rdi, rsp
  1605 000007BF 48BE-                       mov rsi, last_letter_msg
  1605 000007C1 [CE22000000000000] 
  1606 000007C9 B913000000                  mov rcx, last_letter_msg_len
  1607 000007CE F3A4                        rep movsb
  1608                                      
  1609                                      ; Insertar la última letra capturada
  1610 000007D0 8A05(CD220000)              mov al, [last_letter]
  1611 000007D6 8844240F                    mov byte [rsp + 15], al    ; Asumiendo que 15 es la posición correcta
  1612                                      
  1613                                      ; Imprimir el buffer completo
  1614                                      print rsp, last_letter_msg_len
    82 000007DA B801000000          <1>  mov eax, sys_write
    83 000007DF BF01000000          <1>  mov edi, 1
    84 000007E4 4889E6              <1>  mov rsi, %1
    85 000007E7 BA13000000          <1>  mov edx, %2
    86 000007EC 0F05                <1>  syscall
  1615                                      
  1616                                      ; Restaurar stack
  1617 000007EE 4883C420                    add rsp, 32
  1618 000007F2 5D                          pop rbp
  1619 000007F3 C3                          ret
  1620                                  
  1621                                  
  1622                                  
  1623                                  clear_lasers:
  1624 000007F4 55                          push rbp
  1625 000007F5 4889E5                      mov  rbp, rsp
  1626                                  
  1627                                      ; Recorrer el array de láseres
  1628 000007F8 4831C9                      xor rcx, rcx                ; Índice del láser
  1629 000007FB 480FB61D(0B230000)          movzx rbx, byte [laser_count]  ; Cantidad de láseres activos
  1630                                  
  1631                                      .clear_loop:
  1632 00000803 4839D9                          cmp rcx, rbx
  1633 00000806 7D2F                            jge .done                ; Salir si no quedan láseres
  1634                                  
  1635                                          ; Obtener posición del láser actual
  1636 00000808 488DB409[0C230000]              lea rsi, [lasers + rcx * 2]
  1637 00000810 4C0FB606                        movzx r8, byte [rsi]     ; X
  1638 00000814 4C0FB64E01                      movzx r9, byte [rsi + 1] ; Y
  1639                                  
  1640                                          ; Calcular posición en el tablero
  1641 00000819 B850000000                      mov rax, column_cells
  1642 0000081E 4883C002                        add rax, 2
  1643 00000822 49F7E1                          mul r9
  1644 00000825 4C01C0                          add rax, r8
  1645 00000828 488DB8[400A0000]                lea rdi, [board + rax]
  1646                                  
  1647                                          ; Borrar el láser visualmente
  1648 0000082F C60720                          mov byte [rdi], ' '
  1649                                  
  1650                                          ; Pasar al siguiente láser
  1651 00000832 48FFC1                          inc rcx
  1652 00000835 EBCC                            jmp .clear_loop
  1653                                  
  1654                                      .done:
  1655                                          ; Resetear contador de láseres
  1656 00000837 C605(0B230000)00                mov byte [laser_count], 0
  1657                                  
  1658 0000083E 5D                              pop rbp
  1659 0000083F C3                              ret
  1660                                  
  1661                                  
  1662                                  ; Nueva función para actualizar los láseres
  1663                                  update_lasers:
  1664 00000840 55                          push rbp
  1665 00000841 4889E5                      mov rbp, rsp
  1666                                      
  1667                                      ; Verificar si el poder láser está activo
  1668 00000844 803D(09230000)00            cmp byte [laser_power_active], 0
  1669 0000084B 741A                        je .end
  1670                                      
  1671                                      ; Verificar si se presionó la tecla de espacio
  1672 0000084D 803D(08230000)20            cmp byte [last_key], ' '
  1673 00000854 750C                        jne .skip_shooting
  1674                                      
  1675                                      ; Disparar nuevos láseres
  1676 00000856 E89A000000                  call shoot_lasers
  1677 0000085B C605(08230000)00            mov byte [last_key], 0    ; Limpiar la tecla procesada
  1678                                      
  1679                                      .skip_shooting:
  1680                                      ; Mover los láseres existentes
  1681 00000862 E828010000                  call move_lasers
  1682                                      
  1683                                      .end:
  1684 00000867 5D                              pop rbp
  1685 00000868 C3                              ret
  1686                                  
  1687                                  activate_split_power:
  1688 00000869 55                          push rbp
  1689 0000086A 4889E5                      mov rbp, rsp
  1690                                      
  1691                                      ; Verificar si la bola2 y bola3 ya están activas
  1692 0000086D 803D(22150000)01            cmp byte [ball2_active], 1
  1693 00000874 750B                        jne .enable_balls
  1694 00000876 803D(44150000)01            cmp byte [ball3_active], 1
  1695 0000087D 7502                        jne .enable_balls
  1696                                      
  1697                                      ; Si ambas ya están activas, no hacemos nada.
  1698 0000087F EB72                        jmp .end
  1699                                  
  1700                                  .enable_balls:
  1701                                      ; Copiamos la posición de la bola principal
  1702 00000881 488B05(DF140000)            mov rax, [ball_x_pos]
  1703 00000888 488905(01150000)            mov [ball2_x_pos], rax
  1704 0000088F 488905(23150000)            mov [ball3_x_pos], rax
  1705                                  
  1706 00000896 488B05(E7140000)            mov rax, [ball_y_pos]
  1707 0000089D 488905(09150000)            mov [ball2_y_pos], rax
  1708 000008A4 488905(2B150000)            mov [ball3_y_pos], rax
  1709                                  
  1710                                      ; Activamos bola2 y bola3 con direcciones diferentes
  1711                                      ; Por ejemplo: una va diagonal izq-arriba, otra diagonal der-arriba
  1712 000008AB 48C705(11150000)FF-         mov qword [ball2_direction_x], -1
  1712 000008B3 FFFFFF             
  1713 000008B6 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  1713 000008BE FFFFFF             
  1714 000008C1 C605(21150000)01            mov byte [ball2_moving], 1
  1715 000008C8 C605(22150000)01            mov byte [ball2_active], 1
  1716                                  
  1717 000008CF 48C705(33150000)01-         mov qword [ball3_direction_x], 1
  1717 000008D7 000000             
  1718 000008DA 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  1718 000008E2 FFFFFF             
  1719 000008E5 C605(43150000)01            mov byte [ball3_moving], 1
  1720 000008EC C605(44150000)01            mov byte [ball3_active], 1
  1721                                  
  1722                                  .end:
  1723 000008F3 5D                          pop rbp
  1724 000008F4 C3                          ret
  1725                                  
  1726                                  
  1727                                  shoot_lasers:
  1728 000008F5 55                          push rbp
  1729 000008F6 4889E5                      mov rbp, rsp
  1730 000008F9 53                          push rbx
  1731                                      
  1732                                      ; Verificar si hay espacio para más láseres
  1733 000008FA 480FB605(0B230000)          movzx rax, byte [laser_count]
  1734 00000902 4883F862                    cmp rax, 98  ; Asegurar que hay espacio para 2 láseres
  1735 00000906 0F8D80000000                jge .end
  1736                                      
  1737                                      ; Obtener posición de la paleta
  1738 0000090C 4C8B05(BF140000)            mov r8, [pallet_position]
  1739 00000913 4981E8[400A0000]            sub r8, board                  ; Offset relativo de la paleta
  1740                                      
  1741                                      ; Calcular coordenadas x,y
  1742 0000091A 4C89C0                      mov rax, r8
  1743 0000091D 41B950000000                mov r9, column_cells
  1744 00000923 4983C102                    add r9, 2                     ; Ancho total de línea
  1745 00000927 4831D2                      xor rdx, rdx
  1746 0000092A 49F7F1                      div r9                        ; rax = y, rdx = x
  1747                                      
  1748                                      ; Guardar coordenadas
  1749 0000092D 4989C2                      mov r10, rax                  ; Y en r10
  1750 00000930 4989D3                      mov r11, rdx                  ; X en r11
  1751                                      
  1752                                      ; Validar coordenadas
  1753 00000933 4983FA00                    cmp r10, 0
  1754 00000937 7C53                        jl .end
  1755 00000939 4983FA20                    cmp r10, row_cells
  1756 0000093D 7D4D                        jge .end
  1757 0000093F 4983FB00                    cmp r11, 0
  1758 00000943 7C47                        jl .end
  1759 00000945 4983FB50                    cmp r11, column_cells
  1760 00000949 7D41                        jge .end
  1761                                      
  1762                                      ; Calcular índice para el primer láser
  1763 0000094B 480FB61D(0B230000)          movzx rbx, byte [laser_count]
  1764 00000953 486BDB02                    imul rbx, 2                   ; Cada láser usa 2 bytes
  1765                                      
  1766                                      ; Primer láser (izquierda)
  1767 00000957 488DBB[0C230000]            lea rdi, [lasers + rbx]
  1768 0000095E 44881F                      mov [rdi], r11b              ; X
  1769 00000961 4488D0                      mov al, r10b
  1770 00000964 FEC8                        dec al                       ; Y - 1
  1771 00000966 884701                      mov [rdi + 1], al           ; Y
  1772                                      
  1773                                      ; Segundo láser (derecha)
  1774 00000969 4488D8                      mov al, r11b
  1775 0000096C 0205(C7140000)              add al, byte [pallet_size]
  1776 00000972 FEC8                        dec al                       ; Ajustar para el último carácter
  1777 00000974 488DBB[0E230000]            lea rdi, [lasers + rbx + 2]
  1778 0000097B 8807                        mov [rdi], al               ; X
  1779 0000097D 4488D0                      mov al, r10b
  1780 00000980 FEC8                        dec al                      ; Y - 1
  1781 00000982 884701                      mov [rdi + 1], al          ; Y
  1782                                      
  1783                                      ; Incrementar contador de láseres
  1784 00000985 8005(0B230000)02            add byte [laser_count], 2
  1785                                      
  1786                                      
  1787                                      .end:
  1788 0000098C 5B                              pop rbx
  1789 0000098D 5D                              pop rbp
  1790 0000098E C3                              ret
  1791                                  
  1792                                  ; Función corregida para mover láseres
  1793                                  ; Función corregida para mover láseres
  1794                                  ; Esta es la parte clave para recorrer los láseres de atrás hacia adelante.
  1795                                  
  1796                                  ; Actualizar la función move_lasers para incluir verificación de colisiones
  1797                                  ; ============================================================
  1798                                  ; NUEVA FUNCIÓN move_lasers (todo-en-uno)
  1799                                  ; ============================================================
  1800                                  ; Mueve cada láser hacia arriba, verifica colisiones (bloques/enemigos)
  1801                                  ; y lo elimina inmediatamente si choca, de lo contrario lo dibuja.
  1802                                  ; ============================================================
  1803                                  move_lasers:
  1804 0000098F 55                          push rbp
  1805 00000990 4889E5                      mov  rbp, rsp
  1806 00000993 53                          push rbx
  1807 00000994 57                          push rdi
  1808 00000995 56                          push rsi
  1809 00000996 4154                        push r12
  1810 00000998 4155                        push r13
  1811 0000099A 4156                        push r14
  1812 0000099C 4157                        push r15
  1813                                  
  1814                                      ; 1) Tomamos la cantidad de láseres
  1815 0000099E 480FB60D(0B230000)          movzx rcx, byte [laser_count]
  1816 000009A6 4885C9                      test rcx, rcx
  1817 000009A9 0F84BB000000                jz .fin              ; Si es cero, no hay láseres => salir
  1818                                  
  1819                                      ; Ajustamos RCX para que sea el último índice (laser_count - 1)
  1820 000009AF 48FFC9                      dec rcx              ; Empezamos desde el último láser
  1821                                  
  1822                                  .loop_lasers:
  1823                                      ; RSI apunta a lasers + (rcx * 2) => (x, y) del láser
  1824 000009B2 488DB409[0C230000]          lea rsi, [lasers + rcx*2]
  1825                                  
  1826                                      ; 2) Cargar x,y actuales del láser
  1827 000009BA 4C0FB606                    movzx r8,  byte [rsi]      ; X
  1828 000009BE 4C0FB64E01                  movzx r9,  byte [rsi + 1]  ; Y
  1829                                  
  1830                                      ; 3) Borrar el láser de su posición actual en pantalla
  1831                                      ;    (por si en el ciclo anterior se había dibujado)
  1832 000009C3 B850000000                  mov rax, column_cells
  1833 000009C8 4883C002                    add rax, 2
  1834 000009CC 49F7E1                      mul r9
  1835 000009CF 4C01C0                      add rax, r8
  1836 000009D2 488DB8[400A0000]            lea rdi, [board + rax]
  1837 000009D9 C60720                      mov byte [rdi], ' '        ; Borramos el símbolo anterior (láser)
  1838                                  
  1839                                      ; 4) Mover el láser hacia arriba (y - 1)
  1840 000009DC 49FFC9                      dec r9
  1841                                  
  1842                                      ; Si y < 1, está fuera de pantalla => eliminarlo
  1843 000009DF 4983F901                    cmp r9, 1
  1844 000009E3 7C57                        jl .delete_laser
  1845                                  
  1846                                      ; Guardamos la posición nueva en el array (aún no lo dibujamos)
  1847 000009E5 44884E01                    mov byte [rsi + 1], r9b
  1848                                  
  1849                                      ; 5) Verificamos colisión inmediata con bloques o enemigos
  1850                                      ;    - Primero colisión con bloques
  1851                                      ; ---------------------------------------------------------
  1852                                      ; Calculamos la nueva dirección de memoria para esa posición (r9,r8)
  1853 000009E9 B850000000                  mov rax, column_cells
  1854 000009EE 4883C002                    add rax, 2
  1855 000009F2 49F7E1                      mul r9
  1856 000009F5 4C01C0                      add rax, r8
  1857 000009F8 488DB8[400A0000]            lea rdi, [board + rax]   ; rdi apunta a la celda donde estaría el láser
  1858                                  
  1859                                      ; Revisar si hay bloque
  1860 000009FF 51                          push rcx
  1861 00000A00 56                          push rsi
  1862 00000A01 57                          push rdi
  1863 00000A02 4989FA                      mov r10, rdi    ; En check_block_collision, r10 = posición en board
  1864 00000A05 E85E100000                  call check_block_collision
  1865 00000A0A 5F                          pop rdi
  1866 00000A0B 5E                          pop rsi
  1867 00000A0C 59                          pop rcx
  1868                                  
  1869 00000A0D 4885C0                      test rax, rax          ; rax=1 => hubo colisión con bloque
  1870 00000A10 752A                        jnz .delete_laser      ; si chocó, eliminar ya el láser
  1871                                  
  1872                                      ;    - Luego colisión con enemigos
  1873                                      ; ---------------------------------------------------------
  1874 00000A12 51                          push rcx
  1875 00000A13 56                          push rsi
  1876 00000A14 57                          push rdi
  1877                                      ; Pasamos (r8=X, r9=Y, r10=punteroEnBoard) a la función
  1878                                      ; o podemos crear una versión inlined. A modo de ejemplo:
  1879                                      ; Llamamos a check_laser_enemy_collision, que retorna
  1880                                      ; rax=1 si hubo colisión con enemigo, 0 si no.
  1881                                      ;
  1882                                      ; Hacemos algo como:
  1883 00000A15 4989FA                      mov r10, rdi
  1884 00000A18 E85A000000                  call check_laser_enemy_collision
  1885 00000A1D 5F                          pop rdi
  1886 00000A1E 5E                          pop rsi
  1887 00000A1F 59                          pop rcx
  1888                                  
  1889 00000A20 4885C0                      test rax, rax          ; rax=1 => colisión con un enemigo
  1890 00000A23 7517                        jnz .delete_laser
  1891                                  
  1892                                      ; 6) Si NO hubo colisión, dibujamos el láser en la nueva posición
  1893 00000A25 8A05(0A230000)              mov al, [laser_symbol]
  1894 00000A2B 8807                        mov [rdi], al
  1895                                  
  1896                                  .next_laser:
  1897                                      ; Pasamos al láser anterior en el array
  1898 00000A2D 48FFC9                      dec rcx
  1899 00000A30 4883F9FF                    cmp rcx, -1
  1900 00000A34 0F8F78FFFFFF                jg .loop_lasers   ; Mientras rcx >= 0, seguir iterando
  1901 00000A3A EB2E                        jmp .fin
  1902                                  
  1903                                  ; -----------------------------------------------------------------
  1904                                  ; Subrutina interna: .delete_laser
  1905                                  ; -----------------------------------------------------------------
  1906                                  ; Elimina el láser actual del array 'lasers' moviendo el último
  1907                                  ; láser a su posición (si no es el último). Decrementa laser_count.
  1908                                  .delete_laser:
  1909 00000A3C 4C0FB625(0B230000)          movzx r12, byte [laser_count]
  1910 00000A44 49FFCC                      dec r12                    ; r12 = índice del último láser
  1911 00000A47 4939CC                      cmp r12, rcx
  1912 00000A4A 7616                        jbe .just_decrement        ; Si rcx ya apunta al último, no copiamos
  1913                                  
  1914                                      ; Copiamos el último láser a la posición actual
  1915 00000A4C 488DBC09[0C230000]          lea rdi, [lasers + rcx*2]
  1916 00000A54 4B8DB424[0C230000]          lea rsi, [lasers + r12*2]
  1917 00000A5C 668B06                      mov ax, [rsi]             ; lee 2 bytes (X,Y) del último láser
  1918 00000A5F 668907                      mov [rdi], ax             ; copiamos X,Y
  1919                                  
  1920                                  .just_decrement:
  1921 00000A62 FE0D(0B230000)              dec byte [laser_count]    ; Decrementar contador de láseres
  1922 00000A68 EBC3                        jmp .next_laser
  1923                                  
  1924                                  .fin:
  1925 00000A6A 415F                        pop r15
  1926 00000A6C 415E                        pop r14
  1927 00000A6E 415D                        pop r13
  1928 00000A70 415C                        pop r12
  1929 00000A72 5E                          pop rsi
  1930 00000A73 5F                          pop rdi
  1931 00000A74 5B                          pop rbx
  1932 00000A75 5D                          pop rbp
  1933 00000A76 C3                          ret
  1934                                  
  1935                                  
  1936                                  ; Nueva función para verificar colisión entre láser y enemigos
  1937                                  ; ==========================================================
  1938                                  ; NUEVA check_laser_enemy_collision - inlined destroy
  1939                                  ; ==========================================================
  1940                                  check_laser_enemy_collision:
  1941 00000A77 55                          push rbp
  1942 00000A78 4889E5                      mov  rbp, rsp
  1943                                      
  1944 00000A7B 4D31ED                      xor r13, r13            ; Índice del enemigo
  1945 00000A7E 4831C0                      xor rax, rax            ; 0 = no colisión
  1946                                  
  1947                                  .loop_enemies:
  1948 00000A81 4983FD05                    cmp r13, 5              ; Máximo 5 enemigos
  1949 00000A85 7D64                        jge .end
  1950                                  
  1951                                      ; r13 * 3 => offset del enemigo i
  1952 00000A87 4C89E9                      mov rcx, r13
  1953 00000A8A 486BC903                    imul rcx, 3
  1954 00000A8E 488DB1[60200000]            lea rsi, [enemies + rcx]   ; rsi => &enemies[i]
  1955                                  
  1956                                      ; Verificar si está activo
  1957 00000A95 807E0201                    cmp byte [rsi+2], 1
  1958 00000A99 754B                        jne .next_enemy
  1959                                  
  1960                                      ; Cargar posición X/Y del enemigo
  1961 00000A9B 4C0FB636                    movzx r14, byte [rsi]      ; X
  1962 00000A9F 4C0FB67E01                  movzx r15, byte [rsi+1]    ; Y
  1963                                  
  1964                                      ; Comparar con posición del láser (r8=X, r9=Y)
  1965 00000AA4 4D39F0                      cmp r8, r14
  1966 00000AA7 753D                        jne .next_enemy
  1967 00000AA9 4D39F9                      cmp r9, r15
  1968 00000AAC 7538                        jne .next_enemy
  1969                                  
  1970                                      ; ==== Colisión detectada con láser ====
  1971                                  
  1972                                      ; 1) Desactivar enemigo
  1973 00000AAE C6460200                    mov byte [rsi+2], 0     ; (activo=0)
  1974                                  
  1975                                      ; 2) Sumar puntos
  1976 00000AB2 488B05(7F200000)            mov rax, [enemy_points]
  1977 00000AB9 480105(3E200000)            add [current_score], rax
  1978                                  
  1979                                      ; 3) (Opcional) Borrar del board, SOLO si no coincide con la paleta
  1980                                      ;    Evita crasheos en la fila de la paleta (row_cells - 2).
  1981 00000AC0 4983FF1E                    cmp r15, row_cells - 2
  1982 00000AC4 7419                        je .skip_erase
  1983                                  
  1984                                      ; Borrar visualmente del board
  1985 00000AC6 B850000000                  mov rax, column_cells
  1986 00000ACB 4883C002                    add rax, 2
  1987 00000ACF 49F7E7                      mul r15
  1988 00000AD2 4C01F0                      add rax, r14
  1989 00000AD5 488DB8[400A0000]            lea rdi, [board + rax]
  1990 00000ADC C60720                      mov byte [rdi], ' '
  1991                                  
  1992                                  .skip_erase:
  1993                                  
  1994                                      ; 4) Devolver rax=1 => colisión con enemigo
  1995 00000ADF B801000000                  mov rax, 1
  1996 00000AE4 EB05                        jmp .end
  1997                                  
  1998                                  .next_enemy:
  1999 00000AE6 49FFC5                      inc r13
  2000 00000AE9 EB96                        jmp .loop_enemies
  2001                                  
  2002                                  .end:
  2003 00000AEB 5D                          pop rbp
  2004 00000AEC C3                          ret
  2005                                  
  2006                                  
  2007                                  ; Función auxiliar para eliminar un láser específico
  2008                                  remove_laser:
  2009 00000AED 55                          push rbp
  2010 00000AEE 4889E5                      mov rbp, rsp
  2011                                  
  2012                                      ; Borrar el láser del tablero
  2013 00000AF1 41C60220                    mov byte [r10], ' '
  2014                                  
  2015                                      ; Mover el último láser a esta posición si no es el último
  2016 00000AF5 480FB605(0B230000)          movzx rax, byte [laser_count]
  2017 00000AFD 48FFC8                      dec rax                    ; Índice del último láser
  2018 00000B00 4939C4                      cmp r12, rax              ; Comparar con láser actual
  2019 00000B03 7416                        je .just_decrease         ; Si es el último, solo decrementar contador
  2020                                  
  2021                                      ; Copiar último láser a la posición actual
  2022 00000B05 4B8DBC24[0C230000]          lea rdi, [lasers + r12*2]
  2023 00000B0D 488DB400[0C230000]          lea rsi, [lasers + rax*2]
  2024 00000B15 668B16                      mov dx, [rsi]             ; Copiar X,Y del último láser
  2025 00000B18 668917                      mov [rdi], dx
  2026                                  
  2027                                  .just_decrease:
  2028 00000B1B FE0D(0B230000)              dec byte [laser_count]    ; Decrementar contador de láseres
  2029                                  
  2030 00000B21 5D                          pop rbp
  2031 00000B22 C3                          ret
  2032                                  
  2033                                  add_life:
  2034 00000B23 55                          push rbp
  2035 00000B24 4889E5                      mov rbp, rsp
  2036 00000B27 53                          push rbx
  2037 00000B28 51                          push rcx
  2038 00000B29 57                          push rdi
  2039 00000B2A 56                          push rsi
  2040 00000B2B 4150                        push r8
  2041 00000B2D 4151                        push r9
  2042                                      
  2043                                      ; Verificar si ya tenemos el máximo de vidas
  2044 00000B2F 480FB605(3B210000)          movzx rax, byte [current_lives]
  2045 00000B37 4883F807                    cmp rax, 7          ; Comparar con el máximo de vidas
  2046 00000B3B 7D2C                        jge .end
  2047                                      
  2048                                      ; Incrementar el contador de vidas
  2049 00000B3D FE05(3B210000)              inc byte [current_lives]
  2050                                      
  2051                                      ; Encontrar la siguiente vida inactiva
  2052 00000B43 4831C9                      xor rcx, rcx
  2053                                      
  2054                                      .find_inactive:
  2055 00000B46 4883F907                        cmp rcx, lives_count
  2056 00000B4A 7D1D                            jge .end
  2057                                          
  2058                                          ; Calcular offset de la vida actual
  2059 00000B4C 4889C8                          mov rax, rcx
  2060 00000B4F 486BC003                        imul rax, 3
  2061 00000B53 488DB0[25210000]                lea rsi, [lives_data + rax]
  2062                                          
  2063                                          ; Verificar si está inactiva
  2064 00000B5A 807E0200                        cmp byte [rsi + 2], 0
  2065 00000B5E 7405                            je .activate_life
  2066                                          
  2067 00000B60 48FFC1                          inc rcx
  2068 00000B63 EBE1                            jmp .find_inactive
  2069                                          
  2070                                      .activate_life:
  2071                                          ; Activar la vida
  2072 00000B65 C6460201                        mov byte [rsi + 2], 1
  2073                                          
  2074                                      .end:
  2075 00000B69 4159                            pop r9
  2076 00000B6B 4158                            pop r8
  2077 00000B6D 5E                              pop rsi
  2078 00000B6E 5F                              pop rdi
  2079 00000B6F 59                              pop rcx
  2080 00000B70 5B                              pop rbx
  2081 00000B71 5D                              pop rbp
  2082 00000B72 C3                              ret
  2083                                  
  2084                                  
  2085                                  print_ball:
  2086 00000B73 4C8B05(DF140000)        	mov r8, [ball_x_pos]
  2087 00000B7A 4C8B0D(E7140000)        	mov r9, [ball_y_pos]
  2088 00000B81 4981C0[400A0000]        	add r8, board
  2089                                  
  2090 00000B88 4C89C9                  	mov rcx, r9
  2091 00000B8B B852000000              	mov rax, column_cells + 2
  2092 00000B90 48F7E9                  	imul rcx
  2093                                  	
  2094 00000B93 4901C0                  	add r8, rax
  2095 00000B96 41C6004F                	mov byte [r8], char_O
  2096 00000B9A C3                      	ret
  2097                                  
  2098                                  print_ball_2:
  2099 00000B9B 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2100 00000BA2 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2101 00000BA9 4981C0[400A0000]            add r8, board
  2102 00000BB0 4C89C9                      mov rcx, r9
  2103 00000BB3 B852000000                  mov rax, column_cells + 2
  2104 00000BB8 48F7E9                      imul rcx
  2105 00000BBB 4901C0                      add r8, rax
  2106 00000BBE 41C6004F                    mov byte [r8], char_O
  2107 00000BC2 C3                          ret
  2108                                  
  2109                                  print_ball_3:
  2110 00000BC3 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2111 00000BCA 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2112 00000BD1 4981C0[400A0000]            add r8, board
  2113 00000BD8 4C89C9                      mov rcx, r9
  2114 00000BDB B852000000                  mov rax, column_cells + 2
  2115 00000BE0 48F7E9                      imul rcx
  2116 00000BE3 4901C0                      add r8, rax
  2117 00000BE6 41C6004F                    mov byte [r8], char_O
  2118 00000BEA C3                          ret
  2119                                  
  2120                                  	;mov rax, board + r8 + r9 * (column_cells + 2)
  2121                                  	
  2122                                  print_pallet:
  2123                                      ; Primero borrar la paleta anterior completa (usando el tamaño máximo posible)
  2124 00000BEB 4C8B05(BF140000)            mov r8, [pallet_position]
  2125 00000BF2 488B0D(C7140000)            mov rcx, [pallet_size]
  2126                                      .clear_pallet:
  2127 00000BF9 41C60020                        mov byte [r8], char_space
  2128 00000BFD 49FFC0                          inc r8
  2129 00000C00 48FFC9                          dec rcx
  2130 00000C03 75F4                            jnz .clear_pallet
  2131                                  
  2132                                      ; Luego dibujar la nueva paleta con el tamaño actual
  2133 00000C05 4C8B05(BF140000)            mov r8, [pallet_position]
  2134 00000C0C 488B0D(C7140000)            mov rcx, [pallet_size]
  2135                                      .write_pallet:
  2136 00000C13 41C6003D                        mov byte [r8], char_equal
  2137 00000C17 49FFC0                          inc r8
  2138 00000C1A 48FFC9                          dec rcx
  2139 00000C1D 75F4                            jnz .write_pallet
  2140                                  
  2141 00000C1F C3                          ret
  2142                                  
  2143                                  move_pallet:
  2144                                      
  2145 00000C20 803D(FF140000)00            cmp byte [ball_moving], 0
  2146 00000C27 7507                        jne .continue_movement
  2147 00000C29 C605(FF140000)01            mov byte [ball_moving], 1
  2148                                  
  2149                                      .continue_movement:
  2150 00000C30 4883FFFF                        cmp rdi, left_direction
  2151 00000C34 7531                            jne .move_right
  2152                                  
  2153                                          .move_left:
  2154                                              ; Verificar si la siguiente posición sería una X (borde izquierdo)
  2155 00000C36 4C8B05(BF140000)                    mov r8, [pallet_position]
  2156 00000C3D 49FFC8                              dec r8              ; Verificar la posición a la izquierda
  2157 00000C40 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
  2158 00000C43 3C58                                cmp al, 'X'        ; Comparar si es una X
  2159 00000C45 744D                                je .end            ; Si es X, no mover
  2160                                              
  2161 00000C47 4C8B05(BF140000)                    mov r8, [pallet_position]
  2162 00000C4E 4C8B0D(C7140000)                    mov r9, [pallet_size]
  2163 00000C55 43C64408FF20                        mov byte [r8 + r9 - 1], char_space  ; Borrar último carácter de la paleta
  2164 00000C5B 49FFC8                              dec r8
  2165 00000C5E 4C8905(BF140000)                    mov [pallet_position], r8
  2166 00000C65 EB2D                                jmp .end
  2167                                              
  2168                                          .move_right:
  2169                                              ; Verificar si la siguiente posición después de la paleta sería una X
  2170 00000C67 4C8B05(BF140000)                    mov r8, [pallet_position]
  2171 00000C6E 4C8B0D(C7140000)                    mov r9, [pallet_size]
  2172 00000C75 4D01C8                              add r8, r9         ; Moverse al final de la paleta
  2173 00000C78 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
  2174 00000C7B 3C58                                cmp al, 'X'        ; Comparar si es una X
  2175 00000C7D 7415                                je .end            ; Si es X, no mover
  2176                                              
  2177 00000C7F 4C8B05(BF140000)                    mov r8, [pallet_position]
  2178 00000C86 41C60020                            mov byte [r8], char_space
  2179 00000C8A 49FFC0                              inc r8
  2180 00000C8D 4C8905(BF140000)                    mov [pallet_position], r8
  2181                                          .end:
  2182 00000C94 C3                                  ret
  2183                                  
  2184                                  
  2185                                  
  2186                                              
  2187                                  ; Nueva función auxiliar para actualizar la posición de la bola atrapada
  2188                                  update_caught_ball_position:
  2189 00000C95 55                          push rbp
  2190 00000C96 4889E5                      mov rbp, rsp
  2191                                      
  2192                                      ; Calcular la nueva posición de la bola basada en la paleta
  2193 00000C99 4C8B05(BF140000)            mov r8, [pallet_position]
  2194 00000CA0 4981E8[400A0000]            sub r8, board          ; Obtener posición relativa
  2195 00000CA7 B852000000                  mov rax, column_cells + 2
  2196 00000CAC 4831D2                      xor rdx, rdx
  2197 00000CAF 48F7F0                      div rax                ; División para obtener X,Y
  2198                                      
  2199                                      ; rdx contiene X (resto), rax contiene Y (cociente)
  2200 00000CB2 4989C1                      mov r9, rax            ; Y de la paleta
  2201 00000CB5 49FFC9                      dec r9                 ; Una posición arriba de la paleta
  2202                                      
  2203                                      ; Añadir el offset guardado a la posición X
  2204 00000CB8 4889D0                      mov rax, rdx
  2205 00000CBB 480305(00230000)            add rax, [ball_catch_offset]
  2206 00000CC2 488905(DF140000)            mov [ball_x_pos], rax
  2207 00000CC9 4C890D(E7140000)            mov [ball_y_pos], r9
  2208                                      
  2209 00000CD0 5D                          pop rbp
  2210 00000CD1 C3                          ret
  2211                                  
  2212                                  
  2213                                  move_all_balls:
  2214 00000CD2 55                          push rbp
  2215 00000CD3 4889E5                      mov rbp, rsp
  2216 00000CD6 53                          push rbx
  2217                                      
  2218                                      ; Inicializar contador de bolas
  2219 00000CD7 4831DB                      xor rbx, rbx
  2220                                      
  2221                                  .loop_balls:
  2222                                      ; Verificar si hemos procesado todas las bolas
  2223 00000CDA 3A1D(3F240000)              cmp bl, byte [balls_count]
  2224 00000CE0 7D1D                        jge .end
  2225                                      
  2226                                      ; Calcular offset de la bola actual
  2227 00000CE2 B821000000                  mov rax, BALL_STRUCT_SIZE
  2228 00000CE7 48F7E3                      mul rbx
  2229                                      
  2230                                      ; Verificar si la bola está activa
  2231 00000CEA 80B8[FC230000]01            cmp byte [balls_data + rax + 32], 1
  2232 00000CF1 7507                        jne .next_ball
  2233                                      
  2234                                      ; Guardar offset en la pila
  2235 00000CF3 50                          push rax
  2236                                      
  2237                                      ; Llamar a move_ball con los parámetros de esta bola
  2238 00000CF4 E809000000                  call move_ball
  2239                                      
  2240                                      ; Restaurar offset
  2241 00000CF9 58                          pop rax
  2242                                      
  2243                                  .next_ball:
  2244 00000CFA 48FFC3                      inc rbx
  2245 00000CFD EBDB                        jmp .loop_balls
  2246                                      
  2247                                  .end:
  2248 00000CFF 5B                          pop rbx
  2249 00000D00 5D                          pop rbp
  2250 00000D01 C3                          ret
  2251                                  
  2252                                  move_ball:
  2253                                  
  2254 00000D02 803D(FD220000)01            cmp byte [ball_caught], 1
  2255 00000D09 0F849D000000                je .move_with_pallet
  2256                                  
  2257 00000D0F 803D(FF140000)00            cmp byte [ball_moving], 0
  2258 00000D16 0F84B8010000                je .end
  2259                                  
  2260                                      ; Incrementar contador de velocidad
  2261 00000D1C 48FF05(F3220000)            inc qword [speed_counter]
  2262                                      
  2263                                      ; Verificar si debemos mover la bola en este ciclo
  2264 00000D23 488B05(F3220000)            mov rax, [speed_counter]
  2265 00000D2A 483B05(E3220000)            cmp rax, [ball_speed]
  2266 00000D31 0F8C9D010000                jl .end
  2267                                      
  2268                                      ; Resetear contador de velocidad
  2269 00000D37 48C705(F3220000)00-         mov qword [speed_counter], 0
  2269 00000D3F 000000             
  2270                                  
  2271                                      ; Borrar la posición actual de la bola
  2272 00000D42 4C8B05(DF140000)            mov r8, [ball_x_pos]
  2273 00000D49 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  2274 00000D50 4981C0[400A0000]            add r8, board
  2275 00000D57 4C89C9                      mov rcx, r9
  2276 00000D5A B852000000                  mov rax, column_cells + 2
  2277 00000D5F 48F7E9                      imul rcx
  2278 00000D62 4901C0                      add r8, rax
  2279 00000D65 41C60020                    mov byte [r8], char_space
  2280                                  
  2281                                      ; Calcular siguiente posición X
  2282 00000D69 4C8B05(DF140000)            mov r8, [ball_x_pos]
  2283 00000D70 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  2284 00000D77 488B05(EF140000)            mov rax, [ball_direction_x]
  2285 00000D7E 4901C0                      add r8, rax               ; Nueva posición X
  2286                                  
  2287                                      ; Calcular la dirección de memoria para la siguiente posición
  2288 00000D81 4D89C2                      mov r10, r8
  2289 00000D84 4981C2[400A0000]            add r10, board
  2290 00000D8B 4C89C9                      mov rcx, r9
  2291 00000D8E B852000000                  mov rax, column_cells + 2
  2292 00000D93 48F7E9                      imul rcx
  2293 00000D96 4901C2                      add r10, rax
  2294                                  
  2295                                      ; Verificar si hay una X en la siguiente posición X
  2296 00000D99 418A02                      mov al, [r10]
  2297 00000D9C 3C58                        cmp al, 'X'
  2298 00000D9E 7565                        jne .check_block_x
  2299 00000DA0 48F71D(EF140000)            neg qword [ball_direction_x]  ; Cambiar dirección X si hay una X
  2300 00000DA7 E928010000                  jmp .end
  2301                                  
  2302                                      .move_with_pallet:
  2303                                          ; Borrar la posición actual de la bola
  2304 00000DAC 4C8B05(DF140000)                mov r8, [ball_x_pos]
  2305 00000DB3 4C8B0D(E7140000)                mov r9, [ball_y_pos]
  2306 00000DBA 4D89C2                          mov r10, r8
  2307 00000DBD 4981C2[400A0000]                add r10, board
  2308 00000DC4 4C89C9                          mov rcx, r9
  2309 00000DC7 B852000000                      mov rax, column_cells + 2
  2310 00000DCC 48F7E9                          imul rcx
  2311 00000DCF 4901C2                          add r10, rax
  2312 00000DD2 41C60220                        mov byte [r10], char_space
  2313                                  
  2314                                          ; Actualizar posición X basada en la paleta
  2315 00000DD6 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2316 00000DDD 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2317 00000DE4 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2318 00000DEB 4C8905(DF140000)                mov [ball_x_pos], r8          ; Guardar nueva posición X
  2319                                  
  2320                                          ; Mantener la bola una posición arriba de la paleta
  2321 00000DF2 4C8B0D(E7140000)                mov r9, [ball_y_pos]          ; Mantener la misma altura
  2322 00000DF9 4C890D(E7140000)                mov [ball_y_pos], r9          ; Actualizar posición Y
  2323                                  
  2324 00000E00 E9CF000000                      jmp .end
  2325                                  
  2326                                  
  2327                                      .check_block_x:
  2328                                          ; Verificar colisión con bloques en X
  2329 00000E05 4150                            push r8     ; Guardar registros que usa check_block_collision
  2330 00000E07 4151                            push r9
  2331 00000E09 4152                            push r10
  2332 00000E0B E8580C0000                      call check_block_collision
  2333 00000E10 415A                            pop r10
  2334 00000E12 4159                            pop r9
  2335 00000E14 4158                            pop r8
  2336 00000E16 4885C0                          test rax, rax
  2337 00000E19 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2338 00000E1B 48F71D(EF140000)                neg qword [ball_direction_x]  ; Si hay colisión, rebotar
  2339 00000E22 E9AD000000                      jmp .end
  2340                                  
  2341                                      .check_paddle_x:
  2342                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2343 00000E27 41803A3D                        cmp byte [r10], char_equal
  2344 00000E2B 750C                            jne .check_y_movement
  2345 00000E2D 48F71D(EF140000)                neg qword [ball_direction_x]  ; Cambiar dirección X si hay una paleta
  2346 00000E34 E99B000000                      jmp .end
  2347                                  
  2348                                      .check_y_movement:
  2349                                          ; Calcular siguiente posición Y
  2350 00000E39 488B05(F7140000)                mov rax, [ball_direction_y]
  2351 00000E40 4901C1                          add r9, rax                  ; Nueva posición Y
  2352                                  
  2353                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2354 00000E43 4D89C2                          mov r10, r8
  2355 00000E46 4981C2[400A0000]                add r10, board
  2356 00000E4D 4C89C9                          mov rcx, r9
  2357 00000E50 B852000000                      mov rax, column_cells + 2
  2358 00000E55 48F7E9                          imul rcx
  2359 00000E58 4901C2                          add r10, rax
  2360                                  
  2361                                          ; Verificar si hay una X en la siguiente posición Y
  2362 00000E5B 418A02                          mov al, [r10]
  2363 00000E5E 3C58                            cmp al, 'X'
  2364 00000E60 7509                            jne .check_block_y
  2365 00000E62 48F71D(F7140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una X
  2366 00000E69 EB69                            jmp .end
  2367                                  
  2368                                      .check_block_y:
  2369                                          ; Verificar colisión con bloques en Y
  2370 00000E6B 4150                            push r8     ; Guardar registros que usa check_block_collision
  2371 00000E6D 4151                            push r9
  2372 00000E6F 4152                            push r10
  2373 00000E71 E8F20B0000                      call check_block_collision
  2374 00000E76 415A                            pop r10
  2375 00000E78 4159                            pop r9
  2376 00000E7A 4158                            pop r8
  2377 00000E7C 4885C0                          test rax, rax
  2378 00000E7F 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2379 00000E81 48F71D(F7140000)                neg qword [ball_direction_y]  ; Si hay colisión, rebotar
  2380 00000E88 EB4A                            jmp .end
  2381                                  
  2382                                      .check_paddle_y:
  2383                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2384 00000E8A 41803A3D                        cmp byte [r10], char_equal
  2385 00000E8E 7536                            jne .update_position
  2386                                  
  2387                                          ; Verificar si el poder catch está activo
  2388 00000E90 803D(FC220000)01                cmp byte [catch_power_active], 1
  2389 00000E97 7524                            jne .normal_bounce
  2390                                  
  2391                                          ; Activar el modo "atrapado"
  2392 00000E99 C605(FD220000)01                mov byte [ball_caught], 1
  2393                                          
  2394                                          ; Guardar la posición X actual de la bola como offset
  2395 00000EA0 488B05(DF140000)                mov rax, [ball_x_pos]           ; Posición X actual de la bola
  2396 00000EA7 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2397 00000EAE 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2398 00000EB4 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2399                                          
  2400 00000EBB EB17                            jmp .end
  2401                                  
  2402                                      .normal_bounce:
  2403 00000EBD 48F71D(F7140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una paleta
  2404 00000EC4 EB0E                            jmp .end
  2405                                  
  2406                                  
  2407                                      .update_position:
  2408 00000EC6 4C8905(DF140000)                mov [ball_x_pos], r8
  2409 00000ECD 4C890D(E7140000)                mov [ball_y_pos], r9
  2410                                  
  2411                                      .end:
  2412 00000ED4 C3                              ret
  2413                                  
  2414                                  
  2415                                  move_ball_2:
  2416                                  
  2417 00000ED5 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2418 00000EDC 0F849D000000                je .move_with_pallet
  2419                                  
  2420 00000EE2 803D(21150000)00            cmp byte [ball2_moving], 0
  2421 00000EE9 0F84B8010000                je .end
  2422                                  
  2423                                      ; Incrementar contador de velocidad
  2424 00000EEF 48FF05(F3220000)            inc qword [speed_counter]
  2425                                      
  2426                                      ; Verificar si debemos mover la bola en este ciclo
  2427 00000EF6 488B05(F3220000)            mov rax, [speed_counter]
  2428 00000EFD 483B05(E3220000)            cmp rax, [ball_speed]
  2429 00000F04 0F8C9D010000                jl .end
  2430                                      
  2431                                      ; Resetear contador de velocidad
  2432 00000F0A 48C705(F3220000)00-         mov qword [speed_counter], 0
  2432 00000F12 000000             
  2433                                  
  2434                                      ; Borrar la posición actual de la bola
  2435 00000F15 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2436 00000F1C 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2437 00000F23 4981C0[400A0000]            add r8, board
  2438 00000F2A 4C89C9                      mov rcx, r9
  2439 00000F2D B852000000                  mov rax, column_cells + 2
  2440 00000F32 48F7E9                      imul rcx
  2441 00000F35 4901C0                      add r8, rax
  2442 00000F38 41C60020                    mov byte [r8], char_space
  2443                                  
  2444                                      ; Calcular siguiente posición X
  2445 00000F3C 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2446 00000F43 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2447 00000F4A 488B05(11150000)            mov rax, [ball2_direction_x]
  2448 00000F51 4901C0                      add r8, rax               ; Nueva posición X
  2449                                  
  2450                                      ; Calcular la dirección de memoria para la siguiente posición
  2451 00000F54 4D89C2                      mov r10, r8
  2452 00000F57 4981C2[400A0000]            add r10, board
  2453 00000F5E 4C89C9                      mov rcx, r9
  2454 00000F61 B852000000                  mov rax, column_cells + 2
  2455 00000F66 48F7E9                      imul rcx
  2456 00000F69 4901C2                      add r10, rax
  2457                                  
  2458                                      ; Verificar si hay una X en la siguiente posición X
  2459 00000F6C 418A02                      mov al, [r10]
  2460 00000F6F 3C58                        cmp al, 'X'
  2461 00000F71 7565                        jne .check_block_x
  2462 00000F73 48F71D(11150000)            neg qword [ball2_direction_x]  ; Cambiar dirección X si hay una X
  2463 00000F7A E928010000                  jmp .end
  2464                                  
  2465                                      .move_with_pallet:
  2466                                          ; Borrar la posición actual de la bola
  2467 00000F7F 4C8B05(01150000)                mov r8, [ball2_x_pos]
  2468 00000F86 4C8B0D(09150000)                mov r9, [ball2_y_pos]
  2469 00000F8D 4D89C2                          mov r10, r8
  2470 00000F90 4981C2[400A0000]                add r10, board
  2471 00000F97 4C89C9                          mov rcx, r9
  2472 00000F9A B852000000                      mov rax, column_cells + 2
  2473 00000F9F 48F7E9                          imul rcx
  2474 00000FA2 4901C2                          add r10, rax
  2475 00000FA5 41C60220                        mov byte [r10], char_space
  2476                                  
  2477                                          ; Actualizar posición X basada en la paleta
  2478 00000FA9 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2479 00000FB0 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2480 00000FB7 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2481 00000FBE 4C8905(01150000)                mov [ball2_x_pos], r8          ; Guardar nueva posición X
  2482                                  
  2483                                          ; Mantener la bola una posición arriba de la paleta
  2484 00000FC5 4C8B0D(09150000)                mov r9, [ball2_y_pos]          ; Mantener la misma altura
  2485 00000FCC 4C890D(09150000)                mov [ball2_y_pos], r9          ; Actualizar posición Y
  2486                                  
  2487 00000FD3 E9CF000000                      jmp .end
  2488                                  
  2489                                  
  2490                                      .check_block_x:
  2491                                          ; Verificar colisión con bloques en X
  2492 00000FD8 4150                            push r8     ; Guardar registros que usa check_block_collision
  2493 00000FDA 4151                            push r9
  2494 00000FDC 4152                            push r10
  2495 00000FDE E8850A0000                      call check_block_collision
  2496 00000FE3 415A                            pop r10
  2497 00000FE5 4159                            pop r9
  2498 00000FE7 4158                            pop r8
  2499 00000FE9 4885C0                          test rax, rax
  2500 00000FEC 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2501 00000FEE 48F71D(11150000)                neg qword [ball2_direction_x]  ; Si hay colisión, rebotar
  2502 00000FF5 E9AD000000                      jmp .end
  2503                                  
  2504                                      .check_paddle_x:
  2505                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2506 00000FFA 41803A3D                        cmp byte [r10], char_equal
  2507 00000FFE 750C                            jne .check_y_movement
  2508 00001000 48F71D(11150000)                neg qword [ball2_direction_x]  ; Cambiar dirección X si hay una paleta
  2509 00001007 E99B000000                      jmp .end
  2510                                  
  2511                                      .check_y_movement:
  2512                                          ; Calcular siguiente posición Y
  2513 0000100C 488B05(19150000)                mov rax, [ball2_direction_y]
  2514 00001013 4901C1                          add r9, rax                  ; Nueva posición Y
  2515                                  
  2516                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2517 00001016 4D89C2                          mov r10, r8
  2518 00001019 4981C2[400A0000]                add r10, board
  2519 00001020 4C89C9                          mov rcx, r9
  2520 00001023 B852000000                      mov rax, column_cells + 2
  2521 00001028 48F7E9                          imul rcx
  2522 0000102B 4901C2                          add r10, rax
  2523                                  
  2524                                          ; Verificar si hay una X en la siguiente posición Y
  2525 0000102E 418A02                          mov al, [r10]
  2526 00001031 3C58                            cmp al, 'X'
  2527 00001033 7509                            jne .check_block_y
  2528 00001035 48F71D(19150000)                neg qword [ball2_direction_y]  ; Cambiar dirección Y si hay una X
  2529 0000103C EB69                            jmp .end
  2530                                  
  2531                                      .check_block_y:
  2532                                          ; Verificar colisión con bloques en Y
  2533 0000103E 4150                            push r8     ; Guardar registros que usa check_block_collision
  2534 00001040 4151                            push r9
  2535 00001042 4152                            push r10
  2536 00001044 E81F0A0000                      call check_block_collision
  2537 00001049 415A                            pop r10
  2538 0000104B 4159                            pop r9
  2539 0000104D 4158                            pop r8
  2540 0000104F 4885C0                          test rax, rax
  2541 00001052 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2542 00001054 48F71D(19150000)                neg qword [ball2_direction_y]  ; Si hay colisión, rebotar
  2543 0000105B EB4A                            jmp .end
  2544                                  
  2545                                      .check_paddle_y:
  2546                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2547 0000105D 41803A3D                        cmp byte [r10], char_equal
  2548 00001061 7536                            jne .update_position
  2549                                  
  2550                                          ; Verificar si el poder catch está activo
  2551 00001063 803D(FC220000)01                cmp byte [catch_power_active], 1
  2552 0000106A 7524                            jne .normal_bounce
  2553                                  
  2554                                          ; Activar el modo "atrapado"
  2555 0000106C C605(FE220000)01                mov byte [ball_caught_2], 1
  2556                                          
  2557                                          ; Guardar la posición X actual de la bola como offset
  2558 00001073 488B05(01150000)                mov rax, [ball2_x_pos]           ; Posición X actual de la bola
  2559 0000107A 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2560 00001081 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2561 00001087 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2562                                          
  2563 0000108E EB17                            jmp .end
  2564                                  
  2565                                      .normal_bounce:
  2566 00001090 48F71D(19150000)                neg qword [ball2_direction_y]  ; Cambiar dirección Y si hay una paleta
  2567 00001097 EB0E                            jmp .end
  2568                                  
  2569                                  
  2570                                      .update_position:
  2571 00001099 4C8905(01150000)                mov [ball2_x_pos], r8
  2572 000010A0 4C890D(09150000)                mov [ball2_y_pos], r9
  2573                                  
  2574                                      .end:
  2575 000010A7 C3                              ret
  2576                                  
  2577                                  move_ball_3:
  2578                                  
  2579 000010A8 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2580 000010AF 0F849D000000                je .move_with_pallet
  2581                                  
  2582 000010B5 803D(43150000)00            cmp byte [ball3_moving], 0
  2583 000010BC 0F84B8010000                je .end
  2584                                  
  2585                                      ; Incrementar contador de velocidad
  2586 000010C2 48FF05(F3220000)            inc qword [speed_counter]
  2587                                      
  2588                                      ; Verificar si debemos mover la bola en este ciclo
  2589 000010C9 488B05(F3220000)            mov rax, [speed_counter]
  2590 000010D0 483B05(E3220000)            cmp rax, [ball_speed]
  2591 000010D7 0F8C9D010000                jl .end
  2592                                      
  2593                                      ; Resetear contador de velocidad
  2594 000010DD 48C705(F3220000)00-         mov qword [speed_counter], 0
  2594 000010E5 000000             
  2595                                  
  2596                                      ; Borrar la posición actual de la bola
  2597 000010E8 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2598 000010EF 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2599 000010F6 4981C0[400A0000]            add r8, board
  2600 000010FD 4C89C9                      mov rcx, r9
  2601 00001100 B852000000                  mov rax, column_cells + 2
  2602 00001105 48F7E9                      imul rcx
  2603 00001108 4901C0                      add r8, rax
  2604 0000110B 41C60020                    mov byte [r8], char_space
  2605                                  
  2606                                      ; Calcular siguiente posición X
  2607 0000110F 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2608 00001116 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2609 0000111D 488B05(33150000)            mov rax, [ball3_direction_x]
  2610 00001124 4901C0                      add r8, rax               ; Nueva posición X
  2611                                  
  2612                                      ; Calcular la dirección de memoria para la siguiente posición
  2613 00001127 4D89C2                      mov r10, r8
  2614 0000112A 4981C2[400A0000]            add r10, board
  2615 00001131 4C89C9                      mov rcx, r9
  2616 00001134 B852000000                  mov rax, column_cells + 2
  2617 00001139 48F7E9                      imul rcx
  2618 0000113C 4901C2                      add r10, rax
  2619                                  
  2620                                      ; Verificar si hay una X en la siguiente posición X
  2621 0000113F 418A02                      mov al, [r10]
  2622 00001142 3C58                        cmp al, 'X'
  2623 00001144 7565                        jne .check_block_x
  2624 00001146 48F71D(33150000)            neg qword [ball3_direction_x]  ; Cambiar dirección X si hay una X
  2625 0000114D E928010000                  jmp .end
  2626                                  
  2627                                      .move_with_pallet:
  2628                                          ; Borrar la posición actual de la bola
  2629 00001152 4C8B05(23150000)                mov r8, [ball3_x_pos]
  2630 00001159 4C8B0D(2B150000)                mov r9, [ball3_y_pos]
  2631 00001160 4D89C2                          mov r10, r8
  2632 00001163 4981C2[400A0000]                add r10, board
  2633 0000116A 4C89C9                          mov rcx, r9
  2634 0000116D B852000000                      mov rax, column_cells + 2
  2635 00001172 48F7E9                          imul rcx
  2636 00001175 4901C2                          add r10, rax
  2637 00001178 41C60220                        mov byte [r10], char_space
  2638                                  
  2639                                          ; Actualizar posición X basada en la paleta
  2640 0000117C 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2641 00001183 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2642 0000118A 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2643 00001191 4C8905(23150000)                mov [ball3_x_pos], r8          ; Guardar nueva posición X
  2644                                  
  2645                                          ; Mantener la bola una posición arriba de la paleta
  2646 00001198 4C8B0D(2B150000)                mov r9, [ball3_y_pos]          ; Mantener la misma altura
  2647 0000119F 4C890D(2B150000)                mov [ball3_y_pos], r9          ; Actualizar posición Y
  2648                                  
  2649 000011A6 E9CF000000                      jmp .end
  2650                                  
  2651                                  
  2652                                      .check_block_x:
  2653                                          ; Verificar colisión con bloques en X
  2654 000011AB 4150                            push r8     ; Guardar registros que usa check_block_collision
  2655 000011AD 4151                            push r9
  2656 000011AF 4152                            push r10
  2657 000011B1 E8B2080000                      call check_block_collision
  2658 000011B6 415A                            pop r10
  2659 000011B8 4159                            pop r9
  2660 000011BA 4158                            pop r8
  2661 000011BC 4885C0                          test rax, rax
  2662 000011BF 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2663 000011C1 48F71D(33150000)                neg qword [ball3_direction_x]  ; Si hay colisión, rebotar
  2664 000011C8 E9AD000000                      jmp .end
  2665                                  
  2666                                      .check_paddle_x:
  2667                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2668 000011CD 41803A3D                        cmp byte [r10], char_equal
  2669 000011D1 750C                            jne .check_y_movement
  2670 000011D3 48F71D(33150000)                neg qword [ball3_direction_x]  ; Cambiar dirección X si hay una paleta
  2671 000011DA E99B000000                      jmp .end
  2672                                  
  2673                                      .check_y_movement:
  2674                                          ; Calcular siguiente posición Y
  2675 000011DF 488B05(3B150000)                mov rax, [ball3_direction_y]
  2676 000011E6 4901C1                          add r9, rax                  ; Nueva posición Y
  2677                                  
  2678                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2679 000011E9 4D89C2                          mov r10, r8
  2680 000011EC 4981C2[400A0000]                add r10, board
  2681 000011F3 4C89C9                          mov rcx, r9
  2682 000011F6 B852000000                      mov rax, column_cells + 2
  2683 000011FB 48F7E9                          imul rcx
  2684 000011FE 4901C2                          add r10, rax
  2685                                  
  2686                                          ; Verificar si hay una X en la siguiente posición Y
  2687 00001201 418A02                          mov al, [r10]
  2688 00001204 3C58                            cmp al, 'X'
  2689 00001206 7509                            jne .check_block_y
  2690 00001208 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Cambiar dirección Y si hay una X
  2691 0000120F EB69                            jmp .end
  2692                                  
  2693                                      .check_block_y:
  2694                                          ; Verificar colisión con bloques en Y
  2695 00001211 4150                            push r8     ; Guardar registros que usa check_block_collision
  2696 00001213 4151                            push r9
  2697 00001215 4152                            push r10
  2698 00001217 E84C080000                      call check_block_collision
  2699 0000121C 415A                            pop r10
  2700 0000121E 4159                            pop r9
  2701 00001220 4158                            pop r8
  2702 00001222 4885C0                          test rax, rax
  2703 00001225 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2704 00001227 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Si hay colisión, rebotar
  2705 0000122E EB4A                            jmp .end
  2706                                  
  2707                                      .check_paddle_y:
  2708                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2709 00001230 41803A3D                        cmp byte [r10], char_equal
  2710 00001234 7536                            jne .update_position
  2711                                  
  2712                                          ; Verificar si el poder catch está activo
  2713 00001236 803D(FC220000)01                cmp byte [catch_power_active], 1
  2714 0000123D 7524                            jne .normal_bounce
  2715                                  
  2716                                          ; Activar el modo "atrapado"
  2717 0000123F C605(FF220000)01                mov byte [ball_caught_3], 1
  2718                                          
  2719                                          ; Guardar la posición X actual de la bola como offset
  2720 00001246 488B05(23150000)                mov rax, [ball3_x_pos]           ; Posición X actual de la bola
  2721 0000124D 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2722 00001254 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2723 0000125A 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2724                                          
  2725 00001261 EB17                            jmp .end
  2726                                  
  2727                                      .normal_bounce:
  2728 00001263 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Cambiar dirección Y si hay una paleta
  2729 0000126A EB0E                            jmp .end
  2730                                  
  2731                                  
  2732                                      .update_position:
  2733 0000126C 4C8905(23150000)                mov [ball3_x_pos], r8
  2734 00001273 4C890D(2B150000)                mov [ball3_y_pos], r9
  2735                                  
  2736                                      .end:
  2737 0000127A C3                              ret
  2738                                  
  2739                                  ; Nueva función para procesar la tecla C cuando la bola está atrapada
  2740                                  ; Procesar la tecla 'c' cuando el poder de atrapar está activo
  2741                                  process_catch_release:
  2742 0000127B 55                          push rbp
  2743 0000127C 4889E5                      mov  rbp, rsp
  2744                                  
  2745                                      ; Verificar si el poder de catch está activo
  2746 0000127F 803D(FC220000)01            cmp byte [catch_power_active], 1
  2747 00001286 0F8531010000                jne .no_catch_power
  2748                                  
  2749                                      ; Verificar si se presionó 'c' (derecha y arriba)
  2750 0000128C 803D(08230000)63            cmp byte [last_key], 'c'
  2751 00001293 7412                        je .release_right
  2752                                      
  2753                                      ; Verificar si se presionó 'x' (izquierda y arriba)
  2754 00001295 803D(08230000)78            cmp byte [last_key], 'x'
  2755 0000129C 0F8487000000                je .release_left
  2756                                      
  2757 000012A2 E916010000                  jmp .no_catch_power
  2758                                  
  2759                                  .release_right:
  2760                                      ; Liberar la bola hacia la derecha
  2761 000012A7 803D(FD220000)01            cmp byte [ball_caught], 1
  2762 000012AE 7522                        jne .check_ball2_right
  2763 000012B0 C605(FD220000)00            mov byte [ball_caught], 0
  2764 000012B7 48C705(EF140000)01-         mov qword [ball_direction_x], 1    ; Derecha
  2764 000012BF 000000             
  2765 000012C2 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Arriba
  2765 000012CA FFFFFF             
  2766 000012CD E9CD000000                  jmp .release_complete
  2767                                  
  2768                                  .check_ball2_right:
  2769 000012D2 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2770 000012D9 7522                        jne .check_ball3_right
  2771 000012DB C605(FE220000)00            mov byte [ball_caught_2], 0
  2772 000012E2 48C705(11150000)01-         mov qword [ball2_direction_x], 1
  2772 000012EA 000000             
  2773 000012ED 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  2773 000012F5 FFFFFF             
  2774 000012F8 E9A2000000                  jmp .release_complete
  2775                                  
  2776                                  .check_ball3_right:
  2777 000012FD 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2778 00001304 0F8595000000                jne .release_complete
  2779 0000130A C605(FF220000)00            mov byte [ball_caught_3], 0
  2780 00001311 48C705(33150000)01-         mov qword [ball3_direction_x], 1
  2780 00001319 000000             
  2781 0000131C 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  2781 00001324 FFFFFF             
  2782 00001327 EB76                        jmp .release_complete
  2783                                  
  2784                                  .release_left:
  2785                                      ; Liberar la bola hacia la izquierda
  2786 00001329 803D(FD220000)01            cmp byte [ball_caught], 1
  2787 00001330 751F                        jne .check_ball2_left
  2788 00001332 C605(FD220000)00            mov byte [ball_caught], 0
  2789 00001339 48C705(EF140000)FF-         mov qword [ball_direction_x], -1   ; Izquierda
  2789 00001341 FFFFFF             
  2790 00001344 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Arriba
  2790 0000134C FFFFFF             
  2791 0000134F EB4E                        jmp .release_complete
  2792                                  
  2793                                  .check_ball2_left:
  2794 00001351 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2795 00001358 751F                        jne .check_ball3_left
  2796 0000135A C605(FE220000)00            mov byte [ball_caught_2], 0
  2797 00001361 48C705(11150000)FF-         mov qword [ball2_direction_x], -1
  2797 00001369 FFFFFF             
  2798 0000136C 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  2798 00001374 FFFFFF             
  2799 00001377 EB26                        jmp .release_complete
  2800                                  
  2801                                  .check_ball3_left:
  2802 00001379 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2803 00001380 751D                        jne .release_complete
  2804 00001382 C605(FF220000)00            mov byte [ball_caught_3], 0
  2805 00001389 48C705(33150000)FF-         mov qword [ball3_direction_x], -1
  2805 00001391 FFFFFF             
  2806 00001394 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  2806 0000139C FFFFFF             
  2807                                  
  2808                                  .release_complete:
  2809                                      ; Si era el catch inicial, desactivarlo
  2810 0000139F 803D(FB220000)01            cmp byte [initial_catch_active], 1
  2811 000013A6 750E                        jne .finish
  2812 000013A8 C605(FB220000)00            mov byte [initial_catch_active], 0
  2813 000013AF C605(FC220000)00            mov byte [catch_power_active], 0  ; Desactivar poder de catch después de la 1ra vez
  2814                                  
  2815                                  .finish:
  2816 000013B6 C605(08230000)00            mov byte [last_key], 0  ; Limpiar la tecla
  2817                                  .no_catch_power:
  2818 000013BD 5D                          pop rbp
  2819 000013BE C3                          ret
  2820                                  
  2821                                  
  2822                                  
  2823                                  display_level_number:
  2824 000013BF 55                          push rbp
  2825 000013C0 4889E5                      mov rbp, rsp
  2826                                      
  2827                                      ; Limpiar la pantalla primero
  2828                                      print clear, clear_length
    82 000013C3 B801000000          <1>  mov eax, sys_write
    83 000013C8 BF01000000          <1>  mov edi, 1
    84 000013CD 48BE-               <1>  mov rsi, %1
    84 000013CF [1000000000000000]  <1>
    85 000013D7 BA07000000          <1>  mov edx, %2
    86 000013DC 0F05                <1>  syscall
  2829                                      
  2830                                      ; Calcular la posición central para el mensaje
  2831                                      ; Para el mensaje "NIVEL X", necesitamos centrar 7 caracteres
  2832 000013DE B850000000                  mov rax, column_cells
  2833 000013E3 4883E807                    sub rax, 7                  ; longitud de "NIVEL X"
  2834 000013E7 48D1E8                      shr rax, 1                  ; dividir por 2 para centrar
  2835                                      
  2836                                      ; Calcular la fila central
  2837 000013EA BB20000000                  mov rbx, row_cells
  2838 000013EF 48D1EB                      shr rbx, 1                  ; dividir por 2 para obtener la fila central
  2839                                      
  2840                                      ; Calcular el offset en el buffer
  2841 000013F2 B952000000                  mov rcx, column_cells + 2   ; ancho total de una línea incluyendo newline
  2842 000013F7 48F7E3                      mul rbx                     ; multiplicar por la fila central
  2843 000013FA 4801D8                      add rax, rbx                ; añadir el offset horizontal
  2844                                      
  2845                                      ; Escribir "NIVEL " en la posición calculada
  2846 000013FD 488DB8[400A0000]            lea rdi, [board + rax]
  2847 00001404 48BE-                       mov rsi, level_msg
  2847 00001406 [A414000000000000] 
  2848 0000140E B906000000                  mov rcx, level_msg_len
  2849 00001413 F3A4                        rep movsb
  2850                                      
  2851                                      ; Escribir el número del nivel
  2852 00001415 8A05(79150000)              mov al, [current_level]
  2853 0000141B 0430                        add al, '0'                 ; convertir a ASCII
  2854 0000141D 8807                        mov [rdi], al
  2855                                      
  2856                                      ; Mostrar el board con el mensaje
  2857                                      print board, board_size
    82 0000141F B801000000          <1>  mov eax, sys_write
    83 00001424 BF01000000          <1>  mov edi, 1
    84 00001429 48BE-               <1>  mov rsi, %1
    84 0000142B [400A000000000000]  <1>
    85 00001433 BA400A0000          <1>  mov edx, %2
    86 00001438 0F05                <1>  syscall
  2858                                      
  2859                                      ; Esperar un segundo
  2860 0000143A B823000000                  mov rax, sys_nanosleep
  2861 0000143F 48BF-                       mov rdi, level_display_time
  2861 00001441 [AF14000000000000] 
  2862 00001449 4831F6                      xor rsi, rsi
  2863 0000144C 0F05                        syscall
  2864                                      
  2865 0000144E 5D                          pop rbp
  2866 0000144F C3                          ret
  2867                                  
  2868                                  ; Función para inicializar un tablero vacío
  2869                                  init_empty_board:
  2870 00001450 56                          push rsi
  2871 00001451 57                          push rdi
  2872 00001452 51                          push rcx
  2873 00001453 50                          push rax
  2874                                  
  2875 00001454 488D35(00000000)            lea rsi, [board_template]   ; Copiar la plantilla del tablero
  2876 0000145B 488D3D(400A0000)            lea rdi, [board]            ; Destino: el tablero actual
  2877 00001462 B9400A0000                  mov rcx, board_template_size
  2878 00001467 F3A4                        rep movsb                   ; Copiar el tablero
  2879                                  
  2880 00001469 58                          pop rax
  2881 0000146A 59                          pop rcx
  2882 0000146B 5F                          pop rdi
  2883 0000146C 5E                          pop rsi
  2884 0000146D C3                          ret
  2885                                  
  2886                                  clear_enemies_from_board:
  2887 0000146E 55                          push rbp
  2888 0000146F 4889E5                      mov rbp, rsp
  2889 00001472 56                          push rsi
  2890 00001473 57                          push rdi
  2891                                  
  2892                                      ; Primero limpiar board
  2893 00001474 B9400A0000                  mov rcx, board_size      
  2894 00001479 488D35(400A0000)            lea rsi, [board]         
  2895                                  
  2896                                  .clear_loop:
  2897 00001480 4883F900                    cmp rcx, 0              
  2898 00001484 741F                        je .clear_template      ; En vez de terminar, vamos a limpiar template
  2899                                      
  2900 00001486 8A06                        mov al, [rsi]           
  2901 00001488 3C40                        cmp al, '@'             
  2902 0000148A 740E                        je .make_space
  2903 0000148C 3C23                        cmp al, '#'             
  2904 0000148E 740A                        je .make_space
  2905 00001490 3C24                        cmp al, '$'             
  2906 00001492 7406                        je .make_space
  2907 00001494 3C26                        cmp al, '&'             
  2908 00001496 7402                        je .make_space
  2909                                      
  2910 00001498 EB03                        jmp .next               
  2911                                  
  2912                                  .make_space:
  2913 0000149A C60620                      mov byte [rsi], ' '     
  2914                                  
  2915                                  .next:
  2916 0000149D 48FFC6                      inc rsi                 
  2917 000014A0 48FFC9                      dec rcx                
  2918 000014A3 EBDB                        jmp .clear_loop        
  2919                                  
  2920                                  .clear_template:
  2921                                      ; Ahora limpiar board_template
  2922 000014A5 B9400A0000                  mov rcx, board_template_size
  2923 000014AA 488D35(00000000)            lea rsi, [board_template]
  2924                                  
  2925                                  .template_loop:
  2926 000014B1 4883F900                    cmp rcx, 0
  2927 000014B5 741F                        je .end
  2928                                      
  2929 000014B7 8A06                        mov al, [rsi]
  2930 000014B9 3C40                        cmp al, '@'
  2931 000014BB 740E                        je .make_space_template
  2932 000014BD 3C23                        cmp al, '#'
  2933 000014BF 740A                        je .make_space_template
  2934 000014C1 3C24                        cmp al, '$'
  2935 000014C3 7406                        je .make_space_template
  2936 000014C5 3C26                        cmp al, '&'
  2937 000014C7 7402                        je .make_space_template
  2938                                      
  2939 000014C9 EB03                        jmp .next_template
  2940                                  
  2941                                  .make_space_template:
  2942 000014CB C60620                      mov byte [rsi], ' '
  2943                                  
  2944                                  .next_template:
  2945 000014CE 48FFC6                      inc rsi
  2946 000014D1 48FFC9                      dec rcx
  2947 000014D4 EBDB                        jmp .template_loop
  2948                                  
  2949                                  .end:
  2950 000014D6 5F                          pop rdi
  2951 000014D7 5E                          pop rsi
  2952 000014D8 5D                          pop rbp
  2953 000014D9 C3                          ret
  2954                                  
  2955                                  
  2956                                  
  2957                                  
  2958                                  init_level:
  2959 000014DA E88FFFFFFF                  call clear_enemies_from_board
  2960 000014DF C605(22150000)00            mov byte [ball2_active], 0
  2961 000014E6 C605(44150000)00            mov byte [ball3_active], 0
  2962 000014ED C605(09230000)00            mov byte [laser_power_active], 0
  2963 000014F4 E8FBF2FFFF                  call clear_lasers
  2964 000014F9 488B05(CF140000)            mov rax, [default_pallet_size]
  2965 00001500 488905(C7140000)            mov [pallet_size], rax
  2966 00001507 48C705(E3220000)07-         mov qword [ball_speed], 7    ; Restaurar velocidad normal
  2966 0000150F 000000             
  2967                                  
  2968                                      ; 1) Copiamos board_template en board para que quede "virgen"
  2969                                          ; Reiniciar letras activas
  2970 00001512 488D3D(3C210000)            lea rdi, [letters_map]
  2971 00001519 B990010000                  mov rcx, 100 * 4             ; Cada letra ocupa 4 bytes, limpiar 100 letras
  2972 0000151E 4831C0                      xor rax, rax
  2973 00001521 F3AA                        rep stosb                    ; Llenar con ceros
  2974                                      
  2975                                      ; Inicializar dirección de la bola (derecha y arriba)
  2976 00001523 48C705(EF140000)01-         mov qword [ball_direction_x], 1    ; Dirección hacia la derecha (1 = derecha, -1 = izquierda)
  2976 0000152B 000000             
  2977 0000152E 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Dirección hacia arriba (-1 = arriba, 1 = abajo)
  2977 00001536 FFFFFF             
  2978                                  
  2979                                      ; En init_level, después de inicializar las direcciones
  2980 00001539 C605(FC220000)01            mov byte [catch_power_active], 1    ; Activar el poder catch
  2981 00001540 C605(FD220000)01            mov byte [ball_caught], 1           ; Marcar la bola como atrapada
  2982 00001547 C605(FB220000)01            mov byte [initial_catch_active], 1  ; Marcar que es el catch inicial
  2983                                  
  2984                                      ; Calcular y guardar el offset inicial de la bola respecto a la paleta
  2985 0000154E 488B05(DF140000)            mov rax, [ball_x_pos]              ; Posición X actual de la bola
  2986 00001555 482B05(BF140000)            sub rax, [pallet_position]         ; Restar la posición de la paleta
  2987 0000155C 4805[400A0000]              add rax, board                     ; Ajustar por el offset del tablero
  2988 00001562 488905(00230000)            mov [ball_catch_offset], rax       ; Guardar el offset
  2989                                  
  2990                                  
  2991                                  
  2992                                      ; Reiniciar contador de letras activas
  2993 00001569 4831C0                      xor rax, rax
  2994 0000156C 8805(CC220000)              mov [letters_count], al
  2995                                  
  2996                                      ; Reiniciar última letra capturada
  2997 00001572 C605(CD220000)20            mov byte [last_letter], ' '
  2998 00001579 C605(46200000)00            mov byte [destroyed_blocks], 0 
  2999 00001580 E8CBFEFFFF                  call init_empty_board
  3000 00001585 E835FEFFFF                  call display_level_number
  3001                                  
  3002 0000158A 56                          push rsi
  3003 0000158B 57                          push rdi
  3004 0000158C 51                          push rcx
  3005 0000158D 50                          push rax
  3006                                  
  3007 0000158E 488D35(00000000)            lea rsi, [board_template]
  3008 00001595 488D3D(400A0000)            lea rdi, [board]
  3009 0000159C B9400A0000                  mov rcx, board_template_size
  3010 000015A1 F3A4                        rep movsb                 ; Copiamos la plantilla a board
  3011                                  
  3012 000015A3 58                          pop rax
  3013 000015A4 59                          pop rcx
  3014 000015A5 5F                          pop rdi
  3015 000015A6 5E                          pop rsi
  3016                                  
  3017 000015A7 B90A000000                  mov rcx, 10
  3018 000015AC 4831C0                      xor rax, rax
  3019 000015AF 488D3D(E9200000)            lea rdi, [enemy_spawns_triggered]
  3020 000015B6 F3AA                        rep stosb   
  3021 000015B8 E8D4050000                  call init_enemies   
  3022                                  
  3023                                      ; Verificar el nivel actual y cargar los bloques correspondientes
  3024 000015BD 803D(79150000)01            cmp byte [current_level], 1
  3025 000015C4 7431                        je .level1
  3026 000015C6 803D(79150000)02            cmp byte [current_level], 2
  3027 000015CD 7454                        je .level2
  3028 000015CF 803D(79150000)03            cmp byte [current_level], 3
  3029 000015D6 7477                        je .level3
  3030 000015D8 803D(79150000)04            cmp byte [current_level], 4
  3031 000015DF 0F8492000000                je .level4
  3032 000015E5 803D(79150000)05            cmp byte [current_level], 5
  3033 000015EC 0F84B0000000                je .level5
  3034 000015F2 E9D3000000                  jmp .done
  3035                                  
  3036                                  
  3037                                  
  3038                                      .level1:
  3039 000015F7 C605(7A150000)4E                mov byte [blocks_remaining], level1_blocks_count
  3040 000015FE 4831C9                          xor rcx, rcx             
  3041                                          .init_loop1:
  3042 00001601 4883F94E                            cmp rcx, level1_blocks_count
  3043 00001605 0F8DBF000000                        jge .done
  3044 0000160B 4889C8                              mov rax, rcx         
  3045 0000160E 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3046 00001612 8A90[7E150000]                      mov dl, byte [level1_blocks + rax + 3]  
  3047 00001618 8891[761F0000]                      mov byte [block_states + rcx], dl
  3048 0000161E 48FFC1                              inc rcx
  3049 00001621 EBDE                                jmp .init_loop1
  3050                                  
  3051                                      .level2:
  3052 00001623 C605(7A150000)5B                mov byte [blocks_remaining], level2_blocks_count
  3053 0000162A 4831C9                          xor rcx, rcx             
  3054                                          .init_loop2:
  3055 0000162D 4883F95B                            cmp rcx, level2_blocks_count
  3056 00001631 0F8D93000000                        jge .done
  3057 00001637 4889C8                              mov rax, rcx         
  3058 0000163A 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3059 0000163E 8A90[04170000]                      mov dl, byte [level2_blocks + rax + 3]  
  3060 00001644 8891[761F0000]                      mov byte [block_states + rcx], dl
  3061 0000164A 48FFC1                              inc rcx
  3062 0000164D EBDE                                jmp .init_loop2
  3063                                      .level3:
  3064 0000164F C605(7A150000)40                mov byte [blocks_remaining], 64
  3065 00001656 4831C9                          xor rcx, rcx             
  3066                                          .init_loop3:
  3067 00001659 4883F968                            cmp rcx, level3_blocks_count
  3068 0000165D 7D6B                                jge .done
  3069 0000165F 4889C8                              mov rax, rcx         
  3070 00001662 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3071 00001666 8A90[CB180000]                      mov dl, byte [level3_blocks + rax + 3]  
  3072 0000166C 8891[761F0000]                      mov byte [block_states + rcx], dl
  3073 00001672 48FFC1                              inc rcx
  3074 00001675 EBE2                                jmp .init_loop3
  3075                                  
  3076                                      .level4:
  3077 00001677 C605(7A150000)8C                mov byte [blocks_remaining], level4_blocks_count
  3078 0000167E 4831C9                          xor rcx, rcx             
  3079                                          .init_loop4:
  3080 00001681 4881F98C000000                      cmp rcx, level4_blocks_count
  3081 00001688 7D40                                jge .done
  3082 0000168A 4889C8                              mov rax, rcx         
  3083 0000168D 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3084 00001691 8A90[D31A0000]                      mov dl, byte [level4_blocks + rax + 3]  
  3085 00001697 8891[761F0000]                      mov byte [block_states + rcx], dl
  3086 0000169D 48FFC1                              inc rcx
  3087 000016A0 EBDF                                jmp .init_loop4
  3088                                  
  3089                                      .level5:
  3090 000016A2 C605(7A150000)62                mov byte [blocks_remaining], level5_blocks_count
  3091 000016A9 4831C9                          xor rcx, rcx             
  3092                                          .init_loop5:
  3093 000016AC 4883F962                            cmp rcx, level5_blocks_count
  3094 000016B0 7D18                                jge .done
  3095 000016B2 4889C8                              mov rax, rcx         
  3096 000016B5 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3097 000016B9 8A90[8F1D0000]                      mov dl, byte [level5_blocks + rax + 3]  
  3098 000016BF 8891[761F0000]                      mov byte [block_states + rcx], dl
  3099 000016C5 48FFC1                              inc rcx
  3100 000016C8 EBE2                                jmp .init_loop5
  3101                                      .done:
  3102 000016CA C3                              ret
  3103                                  
  3104                                  
  3105                                  ; Función para verificar y manejar la transición de nivel
  3106                                  check_level_complete:
  3107                                      ; Verificar si quedan bloques
  3108 000016CB 803D(7A150000)00            cmp byte [blocks_remaining], 0
  3109 000016D2 7556                        jne .not_complete
  3110                                      
  3111                                      ; Incrementar el nivel
  3112 000016D4 FE05(79150000)              inc byte [current_level]
  3113                                      
  3114                                      ; Verificar si hemos completado todos los niveles
  3115 000016DA 803D(79150000)06            cmp byte [current_level], 6
  3116 000016E1 7448                        je game_win
  3117                                      
  3118                                  
  3119 000016E3 E886FDFFFF                  call clear_enemies_from_board
  3120                                      ; Primero establecer las posiciones seguras
  3121 000016E8 48C705(BF140000)-           mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  3121 000016EF [B0130000]         
  3122 000016F3 48C705(DF140000)28-         mov qword [ball_x_pos], 40
  3122 000016FB 000000             
  3123 000016FE 48C705(E7140000)1C-         mov qword [ball_y_pos], 28
  3123 00001706 000000             
  3124 00001709 C605(FF140000)00            mov byte [ball_moving], 0
  3125                                      
  3126                                      ; Asegurar que la bola esté en un estado seguro
  3127 00001710 C605(FC220000)01            mov byte [catch_power_active], 1
  3128 00001717 C605(FD220000)01            mov byte [ball_caught], 1
  3129 0000171E C605(FB220000)01            mov byte [initial_catch_active], 1
  3130                                      
  3131                                      ; Reinicializar el juego para el siguiente nivel
  3132 00001725 E8B0FDFFFF                  call init_level
  3133                                      
  3134                                  .not_complete:
  3135 0000172A C3                          ret
  3136                                  
  3137                                      ; Nueva función para manejar la victoria del juego
  3138                                  game_win:
  3139                                      ; Limpiar la pantalla primero
  3140                                      print clear, clear_length
    82 0000172B B801000000          <1>  mov eax, sys_write
    83 00001730 BF01000000          <1>  mov edi, 1
    84 00001735 48BE-               <1>  mov rsi, %1
    84 00001737 [1000000000000000]  <1>
    85 0000173F BA07000000          <1>  mov edx, %2
    86 00001744 0F05                <1>  syscall
  3141                                      
  3142                                      ; Mensaje de victoria
  3143 00001746 488B05(3E200000)            mov rax, [current_score]    ; Obtener el puntaje final
  3144 0000174D 48BF-                       mov rdi, number_buffer      ; Convertir a string
  3144 0000174F [4720000000000000] 
  3145 00001757 E8B4010000                  call number_to_string
  3146                                      
  3147                                      ; Definir mensaje de victoria
  3148                                      section .data
  3149 0000246F C2A146656C69636964-             win_msg: db "¡Felicidades! ¡Has ganado!", 0xA, 0xD
  3149 00002478 616465732120C2A148-
  3149 00002481 61732067616E61646F-
  3149 0000248A 210A0D             
  3150                                          win_msg_len: equ $ - win_msg
  3151 0000248D 50756E74616A652066-             score_msg: db "Puntaje final: "
  3151 00002496 696E616C3A20       
  3152                                          score_msg_len: equ $ - score_msg
  3153                                      section .text
  3154                                      
  3155                                      ; Imprimir mensajes
  3156                                      print win_msg, win_msg_len
    82 0000175C B801000000          <1>  mov eax, sys_write
    83 00001761 BF01000000          <1>  mov edi, 1
    84 00001766 48BE-               <1>  mov rsi, %1
    84 00001768 [6F24000000000000]  <1>
    85 00001770 BA1E000000          <1>  mov edx, %2
    86 00001775 0F05                <1>  syscall
  3157                                      print score_msg, score_msg_len
    82 00001777 B801000000          <1>  mov eax, sys_write
    83 0000177C BF01000000          <1>  mov edi, 1
    84 00001781 48BE-               <1>  mov rsi, %1
    84 00001783 [8D24000000000000]  <1>
    85 0000178B BA0F000000          <1>  mov edx, %2
    86 00001790 0F05                <1>  syscall
  3158                                      print number_buffer, 20
    82 00001792 B801000000          <1>  mov eax, sys_write
    83 00001797 BF01000000          <1>  mov edi, 1
    84 0000179C 48BE-               <1>  mov rsi, %1
    84 0000179E [4720000000000000]  <1>
    85 000017A6 BA14000000          <1>  mov edx, %2
    86 000017AB 0F05                <1>  syscall
  3159                                      
  3160                                      ; Esperar un momento antes de salir
  3161 000017AD 48C70548E8FFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  3161 000017B6 0000               
  3162 000017B8 48C70545E8FFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  3162 000017C1 0000               
  3163                                      sleeptime
    98 000017C3 B823000000          <1>  mov eax, sys_nanosleep
    99 000017C8 48BF-               <1>  mov rdi, timespec
    99 000017CA [0000000000000000]  <1>
   100 000017D2 31F6                <1>  xor esi, esi
   101 000017D4 0F05                <1>  syscall
  3164                                      
  3165 000017D6 E94B0B0000                  jmp exit
  3166                                  
  3167                                  ; Función para imprimir los bloques
  3168                                  ; Función modificada para imprimir bloques
  3169                                  
  3170                                  ; Primero, agreguemos una función para obtener el puntero a los bloques del nivel actual
  3171                                  get_current_level_blocks:
  3172 000017DB 803D(79150000)01            cmp byte [current_level], 1
  3173 000017E2 7428                        je .level1
  3174 000017E4 803D(79150000)02            cmp byte [current_level], 2
  3175 000017EB 7427                        je .level2
  3176 000017ED 803D(79150000)03            cmp byte [current_level], 3
  3177 000017F4 7426                        je .level3
  3178 000017F6 803D(79150000)04            cmp byte [current_level], 4
  3179 000017FD 7425                        je .level4
  3180 000017FF 803D(79150000)05            cmp byte [current_level], 5
  3181 00001806 7424                        je .level5
  3182                                      ; Si llegamos aquí, hay un error en el nivel
  3183 00001808 4831C0                      xor rax, rax
  3184 0000180B C3                          ret
  3185                                  
  3186                                      .level1:
  3187 0000180C 488D05(7B150000)                lea rax, [level1_blocks]
  3188 00001813 C3                              ret
  3189                                      .level2:
  3190 00001814 488D05(01170000)                lea rax, [level2_blocks]
  3191 0000181B C3                              ret
  3192                                      .level3:
  3193 0000181C 488D05(C8180000)                lea rax, [level3_blocks]
  3194 00001823 C3                              ret
  3195                                      .level4:
  3196 00001824 488D05(D01A0000)                lea rax, [level4_blocks]
  3197 0000182B C3                              ret
  3198                                      .level5:
  3199 0000182C 488D05(8C1D0000)                lea rax, [level5_blocks]
  3200 00001833 C3                              ret
  3201                                  ; Función para obtener la cantidad de bloques del nivel actual
  3202                                  get_current_level_count:
  3203 00001834 803D(79150000)01            cmp byte [current_level], 1
  3204 0000183B 7428                        je .level1
  3205 0000183D 803D(79150000)02            cmp byte [current_level], 2
  3206 00001844 7425                        je .level2
  3207 00001846 803D(79150000)03            cmp byte [current_level], 3
  3208 0000184D 7422                        je .level3
  3209 0000184F 803D(79150000)04            cmp byte [current_level], 4
  3210 00001856 741F                        je .level4
  3211 00001858 803D(79150000)05            cmp byte [current_level], 5
  3212 0000185F 741C                        je .level5
  3213                                      ; Si llegamos aquí, hay un error en el nivel
  3214 00001861 4831C0                      xor rax, rax
  3215 00001864 C3                          ret
  3216                                  
  3217                                      .level1:
  3218 00001865 B84E000000                      mov rax, level1_blocks_count
  3219 0000186A C3                              ret
  3220                                      .level2:
  3221 0000186B B85B000000                      mov rax, level2_blocks_count
  3222 00001870 C3                              ret
  3223                                      .level3:
  3224 00001871 B868000000                      mov rax, level3_blocks_count
  3225 00001876 C3                              ret
  3226                                      .level4:
  3227 00001877 B88C000000                      mov rax, level4_blocks_count
  3228 0000187C C3                              ret
  3229                                      .level5:
  3230 0000187D B862000000                      mov rax, level5_blocks_count
  3231 00001882 C3                              ret
  3232                                  
  3233                                  
  3234                                  print_blocks:
  3235 00001883 55                          push rbp
  3236 00001884 4889E5                      mov rbp, rsp
  3237                                      
  3238                                      ; Obtener puntero a los bloques del nivel actual
  3239 00001887 E84FFFFFFF                  call get_current_level_blocks
  3240 0000188C 4989C5                      mov r13, rax                  ; Guardar puntero a los bloques en r13
  3241                                      
  3242                                      ; Obtener cantidad de bloques del nivel actual
  3243 0000188F E8A0FFFFFF                  call get_current_level_count
  3244 00001894 4989C6                      mov r14, rax                  ; Guardar cantidad de bloques en r14
  3245                                      
  3246 00001897 4D31E4                      xor r12, r12                  ; Índice del bloque actual
  3247                                      
  3248                                      .print_loop:
  3249 0000189A 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
  3250 0000189D 7D6F                            jge .end
  3251                                          
  3252                                          ; Verificar si el bloque está activo
  3253 0000189F 490FB68424-                     movzx rax, byte [block_states + r12]
  3253 000018A4 [761F0000]         
  3254 000018A8 4885C0                          test rax, rax
  3255 000018AB 745C                            jz .next_block
  3256                                          
  3257                                          ; Obtener posición y tipo del bloque usando r13
  3258 000018AD 4C89E0                          mov rax, r12
  3259 000018B0 486BC005                        imul rax, 5
  3260 000018B4 4C01E8                          add rax, r13
  3261 000018B7 448A00                          mov r8b, [rax]        ; X position
  3262 000018BA 448A4801                        mov r9b, [rax + 1]    ; Y position
  3263 000018BE 448A5002                        mov r10b, [rax + 2]   ; Tipo de bloque
  3264                                  
  3265                                          ; El resto de la lógica de impresión permanece igual
  3266 000018C2 4D0FB6C0                        movzx r8, r8b
  3267 000018C6 4D0FB6C9                        movzx r9, r9b
  3268 000018CA 4981C0[400A0000]                add r8, board
  3269 000018D1 B852000000                      mov rax, column_cells + 2
  3270 000018D6 49F7E1                          mul r9
  3271 000018D9 4901C0                          add r8, rax
  3272                                          
  3273 000018DC B906000000                      mov rcx, block_length
  3274 000018E1 48BE-                           mov rsi, block_type_1
  3274 000018E3 [5515000000000000] 
  3275 000018EB 490FB6C2                        movzx rax, r10b
  3276 000018EF 48FFC8                          dec rax
  3277 000018F2 486BC006                        imul rax, block_length
  3278 000018F6 4801C6                          add rsi, rax
  3279                                          
  3280                                      .print_block_chars:
  3281 000018F9 8A06                            mov al, [rsi]
  3282 000018FB 418800                          mov [r8], al
  3283 000018FE 48FFC6                          inc rsi
  3284 00001901 49FFC0                          inc r8
  3285 00001904 48FFC9                          dec rcx
  3286 00001907 75F0                            jnz .print_block_chars
  3287                                          
  3288                                      .next_block:
  3289 00001909 49FFC4                          inc r12
  3290 0000190C EB8C                            jmp .print_loop
  3291                                          
  3292                                      .end:
  3293 0000190E 5D                              pop rbp
  3294 0000190F C3                              ret
  3295                                  
  3296                                  ; Función para convertir número a string
  3297                                  ; Input: RAX = número a convertir
  3298                                  ; RDI = buffer donde escribir el string
  3299                                  number_to_string:
  3300 00001910 53                          push rbx
  3301 00001911 52                          push rdx
  3302 00001912 56                          push rsi
  3303 00001913 BB0A000000                  mov rbx, 10          ; Divisor
  3304 00001918 B900000000                  mov rcx, 0          ; Contador de dígitos
  3305                                      
  3306                                      ; Si el número es 0, manejarlo especialmente
  3307 0000191D 4885C0                      test rax, rax
  3308 00001920 7509                        jnz .convert_loop
  3309 00001922 C60730                      mov byte [rdi], '0'
  3310 00001925 C6470100                    mov byte [rdi + 1], 0
  3311 00001929 EB20                        jmp .end
  3312                                      
  3313                                      .convert_loop:
  3314 0000192B 4831D2                          xor rdx, rdx    ; Limpiar RDX para la división
  3315 0000192E 48F7F3                          div rbx         ; RAX/10, cociente en RAX, residuo en RDX
  3316 00001931 80C230                          add dl, '0'     ; Convertir a ASCII
  3317 00001934 52                              push rdx        ; Guardar el dígito
  3318 00001935 48FFC1                          inc rcx         ; Incrementar contador
  3319 00001938 4885C0                          test rax, rax   ; Verificar si quedan más dígitos
  3320 0000193B 75EE                            jnz .convert_loop
  3321                                          
  3322                                      .write_loop:
  3323 0000193D 5A                              pop rdx         ; Obtener dígito
  3324 0000193E 8817                            mov [rdi], dl   ; Escribir al buffer
  3325 00001940 48FFC7                          inc rdi         ; Siguiente posición
  3326 00001943 48FFC9                          dec rcx         ; Decrementar contador
  3327 00001946 75F5                            jnz .write_loop
  3328                                          
  3329 00001948 C60700                      mov byte [rdi], 0   ; Null terminator
  3330                                      
  3331                                      .end:
  3332 0000194B 5E                          pop rsi
  3333 0000194C 5A                          pop rdx
  3334 0000194D 5B                          pop rbx
  3335 0000194E C3                          ret
  3336                                  
  3337                                  ; Función para imprimir los labels
  3338                                  print_labels:
  3339 0000194F 55                          push rbp
  3340 00001950 4889E5                      mov rbp, rsp
  3341                                  
  3342                                      ; Crear buffer temporal
  3343 00001953 4883EC20                    sub rsp, 32
  3344                                  
  3345                                      ; Copiar labels a buffer temporal
  3346 00001957 4889E7                      mov rdi, rsp
  3347 0000195A 488D35(F3200000)            lea rsi, [score_label]
  3348 00001961 B917000000                  mov rcx, score_label_len
  3349 00001966 F3A4                        rep movsb
  3350                                  
  3351                                      ; Convertir score a string
  3352 00001968 488B05(3E200000)            mov rax, [current_score]
  3353 0000196F 48BF-                       mov rdi, number_buffer
  3353 00001971 [4720000000000000] 
  3354 00001979 E892FFFFFF                  call number_to_string
  3355                                  
  3356                                      ; Calcular longitud del número
  3357 0000197E B900000000                  mov rcx, 0
  3358 00001983 48BF-                       mov rdi, number_buffer
  3358 00001985 [4720000000000000] 
  3359                                      .count_loop:
  3360 0000198D 803C0F00                        cmp byte [rdi + rcx], 0
  3361 00001991 7405                            je .count_done
  3362 00001993 48FFC1                          inc rcx
  3363 00001996 EBF5                            jmp .count_loop
  3364                                      .count_done:
  3365                                  
  3366                                      ; Insertar el número en la posición correcta, alineado a la derecha
  3367 00001998 4889E7                      mov rdi, rsp
  3368 0000199B 4883C70A                    add rdi, score_pos           ; Moverse a la posición del número
  3369 0000199F BE0A000000                  mov rsi, 10                  ; Espacio reservado para el número
  3370 000019A4 4829CE                      sub rsi, rcx                 ; Calcular padding necesario
  3371                                      .pad_loop:
  3372 000019A7 4885F6                          test rsi, rsi
  3373 000019AA 740B                            jz .pad_done
  3374 000019AC C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  3375 000019AF 48FFC7                          inc rdi
  3376 000019B2 48FFCE                          dec rsi
  3377 000019B5 EBF0                            jmp .pad_loop
  3378                                      .pad_done:
  3379                                  
  3380                                      ; Copiar el número
  3381 000019B7 48BE-                       mov rsi, number_buffer
  3381 000019B9 [4720000000000000] 
  3382 000019C1 F3A4                        rep movsb
  3383                                  
  3384                                      ; Imprimir el buffer completo
  3385                                      print rsp, score_label_len
    82 000019C3 B801000000          <1>  mov eax, sys_write
    83 000019C8 BF01000000          <1>  mov edi, 1
    84 000019CD 4889E6              <1>  mov rsi, %1
    85 000019D0 BA17000000          <1>  mov edx, %2
    86 000019D5 0F05                <1>  syscall
  3386                                  
  3387                                      ; Repetir proceso para bloques destruidos
  3388 000019D7 4889E7                      mov rdi, rsp
  3389 000019DA 488D35(0A210000)            lea rsi, [blocks_label]
  3390 000019E1 B91B000000                  mov rcx, blocks_label_len
  3391 000019E6 F3A4                        rep movsb
  3392                                  
  3393                                      ; Verificar que el `[` esté en su posición correcta
  3394 000019E8 4889E7                      mov rdi, rsp
  3395 000019EB 4883C713                    add rdi, blocks_pos - 1  ; Posición exacta donde debe ir el '['
  3396 000019EF C6075B                      mov byte [rdi], '['      ; Garantizar que el `[` esté presente
  3397                                  
  3398                                      ; Convertir bloques destruidos a string
  3399 000019F2 480FB605(46200000)          movzx rax, byte [destroyed_blocks]
  3400 000019FA 48BF-                       mov rdi, number_buffer
  3400 000019FC [4720000000000000] 
  3401 00001A04 E807FFFFFF                  call number_to_string
  3402                                  
  3403                                      ; Calcular longitud del número
  3404 00001A09 B900000000                  mov rcx, 0
  3405 00001A0E 48BF-                       mov rdi, number_buffer
  3405 00001A10 [4720000000000000] 
  3406                                      .count_loop2:
  3407 00001A18 803C0F00                        cmp byte [rdi + rcx], 0
  3408 00001A1C 7405                            je .count_done2
  3409 00001A1E 48FFC1                          inc rcx
  3410 00001A21 EBF5                            jmp .count_loop2
  3411                                      .count_done2:
  3412                                  
  3413                                      ; Insertar el número en la posición correcta, alineado a la derecha
  3414 00001A23 4889E7                      mov rdi, rsp
  3415 00001A26 4883C714                    add rdi, blocks_pos         ; Moverse a la posición del número
  3416 00001A2A BE03000000                  mov rsi, 3                  ; Espacio reservado para el número
  3417 00001A2F 4829CE                      sub rsi, rcx                ; Calcular padding necesario
  3418                                      .pad_loop2:
  3419 00001A32 4885F6                          test rsi, rsi
  3420 00001A35 740B                            jz .pad_done2
  3421 00001A37 C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  3422 00001A3A 48FFC7                          inc rdi
  3423 00001A3D 48FFCE                          dec rsi
  3424 00001A40 EBF0                            jmp .pad_loop2
  3425                                      .pad_done2:
  3426                                  
  3427                                      ; Copiar el número
  3428 00001A42 48BE-                       mov rsi, number_buffer
  3428 00001A44 [4720000000000000] 
  3429 00001A4C F3A4                        rep movsb
  3430                                  
  3431                                      ; Imprimir el buffer completo
  3432                                      print rsp, blocks_label_len
    82 00001A4E B801000000          <1>  mov eax, sys_write
    83 00001A53 BF01000000          <1>  mov edi, 1
    84 00001A58 4889E6              <1>  mov rsi, %1
    85 00001A5B BA1B000000          <1>  mov edx, %2
    86 00001A60 0F05                <1>  syscall
  3433                                  
  3434                                      ; Restaurar stack
  3435 00001A62 4883C420                    add rsp, 32
  3436 00001A66 5D                          pop rbp
  3437 00001A67 C3                          ret
  3438                                  
  3439                                  
  3440                                  
  3441                                  check_block_collision:
  3442 00001A68 55                          push rbp
  3443 00001A69 4889E5                      mov rbp, rsp
  3444                                  
  3445                                      ; Almacenar el carácter en la posición r10 (pos. de la bola en board[])
  3446 00001A6C 418A02                      mov al, [r10]
  3447                                  
  3448                                      ; Verificar si el carácter es un bloque
  3449 00001A6F 3C55                        cmp al, 'U'  
  3450 00001A71 7419                        je .possible
  3451 00001A73 3C4F                        cmp al, 'O'  
  3452 00001A75 7415                        je .possible
  3453 00001A77 3C44                        cmp al, 'D'  
  3454 00001A79 7411                        je .possible
  3455 00001A7B 3C4C                        cmp al, 'L'  
  3456 00001A7D 740D                        je .possible
  3457 00001A7F 3C56                        cmp al, 'V'  
  3458 00001A81 7409                        je .possible
  3459 00001A83 3C38                        cmp al, '8'  
  3460 00001A85 7405                        je .possible
  3461                                  
  3462                                      ; No es bloque, salir
  3463 00001A87 4831C0                      xor rax, rax
  3464 00001A8A 5D                          pop rbp
  3465 00001A8B C3                          ret
  3466                                  
  3467                                  .possible:
  3468 00001A8C 53                          push rbx
  3469 00001A8D 57                          push rdi
  3470 00001A8E 56                          push rsi
  3471 00001A8F 4154                        push r12
  3472 00001A91 4155                        push r13
  3473 00001A93 4156                        push r14
  3474 00001A95 4157                        push r15
  3475                                  
  3476                                      ; 1) Obtener base de los bloques del nivel actual
  3477 00001A97 E83FFDFFFF                  call get_current_level_blocks
  3478 00001A9C 4989C5                      mov r13, rax  ; (r13) = base de levelX_blocks
  3479                                  
  3480                                      ; 2) Obtener la cantidad de bloques
  3481 00001A9F E890FDFFFF                  call get_current_level_count
  3482 00001AA4 4989C6                      mov r14, rax
  3483                                  
  3484 00001AA7 4D31E4                      xor r12, r12  ; Índice del bloque actual
  3485                                  
  3486                                  .find_block_loop:
  3487 00001AAA 4D39F4                      cmp r12, r14
  3488 00001AAD 0F8DCE000000                jge .no_block_found  ; Se acabaron los bloques
  3489                                  
  3490                                      ; Calcular puntero base del bloque actual en levelX_blocks
  3491 00001AB3 4C89E0                      mov rax, r12
  3492 00001AB6 486BC005                    imul rax, 5            ; (x, y, tipo, durabilidad_inicial, letra)
  3493 00001ABA 4C01E8                      add rax, r13
  3494 00001ABD 4989C7                      mov r15, rax           ; r15 apunta a los datos del bloque actual
  3495                                  
  3496                                      ; --- Aquí la diferencia: la durabilidad no la leemos de [r15+3], sino de block_states[r12]
  3497 00001AC0 490FB69C24-                 movzx rbx, byte [block_states + r12]  ; Durabilidad "viva" en block_states
  3497 00001AC5 [761F0000]         
  3498 00001AC9 4885DB                      test rbx, rbx
  3499 00001ACC 0F84A7000000                jz .next_block  ; si durabilidad=0 => bloque destruido => ignorar
  3500                                  
  3501                                      ; Obtener coordenadas
  3502 00001AD2 418A17                      mov dl, [r15]         ; x
  3503 00001AD5 418A4F01                    mov cl, [r15 + 1]     ; y
  3504                                  
  3505                                      ; Calcular posición en el board
  3506 00001AD9 488D3D(400A0000)            lea rdi, [board]
  3507 00001AE0 4831C0                      xor rax, rax
  3508 00001AE3 B850000000                  mov rax, column_cells
  3509 00001AE8 4883C002                    add rax, 2
  3510 00001AEC 480FB6C9                    movzx rcx, cl         ; y
  3511 00001AF0 480FAFC1                    imul rax, rcx
  3512 00001AF4 4801C7                      add rdi, rax
  3513 00001AF7 480FB6C2                    movzx rax, dl         ; x
  3514 00001AFB 4801C7                      add rdi, rax
  3515                                  
  3516                                      ; Guardar la posición base del bloque
  3517 00001AFE 57                          push rdi
  3518                                  
  3519                                      ; Verificar si la bola (r10) está dentro de [rdi .. rdi+block_length)
  3520 00001AFF 4939FA                      cmp r10, rdi
  3521 00001B02 7274                        jb .skip_collision
  3522 00001B04 488D5F06                    lea rbx, [rdi + block_length]
  3523 00001B08 4939DA                      cmp r10, rbx
  3524 00001B0B 736B                        jae .skip_collision
  3525                                  
  3526                                      ; ------- Hay colisión, reducir durabilidad en block_states
  3527 00001B0D 41FE8C24[761F0000]          dec byte [block_states + r12]
  3528                                      ; Volver a cargar durabilidad
  3529 00001B15 490FB69C24-                 movzx rbx, byte [block_states + r12]
  3529 00001B1A [761F0000]         
  3530 00001B1E 4885DB                      test rbx, rbx
  3531 00001B21 754D                        jnz .update_display  ; si no llegó a 0 => solo "golpeado"
  3532                                  
  3533                                      ; >>> Llegó a 0 => Bloque destruido
  3534 00001B23 5F                          pop rdi  ; recuperar puntero base del bloque en board
  3535 00001B24 B906000000                  mov rcx, block_length
  3536                                  .clear_loop:
  3537 00001B29 C60720                      mov byte [rdi], ' '
  3538 00001B2C 48FFC7                      inc rdi
  3539 00001B2F E2F8                        loop .clear_loop
  3540                                  
  3541                                      ; Dibujar letra del bloque destruido
  3542 00001B31 418A4704                    mov al, [r15 + 4]  ; Obtener la letra asociada
  3543 00001B35 4883EF06                    sub rdi, block_length
  3544 00001B39 8807                        mov [rdi], al      ; Escribir la letra en la posición inicial
  3545                                      ; Después de escribir la letra en el tablero
  3546 00001B3B 418A4704                    mov al, [r15 + 4]      ; Obtener la letra
  3547 00001B3F 4D0FB607                    movzx r8, byte [r15]   ; Posición x del bloque
  3548 00001B43 4D0FB64F01                  movzx r9, byte [r15 + 1] ; Posición y del bloque
  3549 00001B48 E837E9FFFF                  call register_letter
  3550                                      ; Actualizar contadores globales
  3551 00001B4D FE0D(7A150000)              dec byte [blocks_remaining]
  3552 00001B53 FE05(46200000)              inc byte [destroyed_blocks]
  3553                                  
  3554                                      ; Sumar puntos según el tipo
  3555 00001B59 490FB64702                  movzx rax, byte [r15 + 2]  ; tipo del bloque original
  3556 00001B5E 486BC00A                    imul rax, 10
  3557 00001B62 480105(3E200000)            add [current_score], rax
  3558                                  
  3559 00001B69 B801000000                  mov rax, 1  ; colisión con destrucción
  3560 00001B6E EB14                        jmp .end_pop
  3561                                  
  3562                                  .update_display:
  3563                                      ; => durabilidad >0, se podría actualizar el "look" del bloque
  3564 00001B70 B801000000                  mov rax, 1  ; colisión con "rebote"  
  3565 00001B75 5F                          pop rdi     ; pop que quedó pendiente
  3566 00001B76 EB0C                        jmp .end_pop
  3567                                  
  3568                                  .skip_collision:
  3569 00001B78 5F                          pop rdi     ; si no hubo colisión, quita de la pila
  3570                                  .next_block:
  3571 00001B79 49FFC4                      inc r12
  3572 00001B7C E929FFFFFF                  jmp .find_block_loop
  3573                                  
  3574                                  .no_block_found:
  3575 00001B81 4831C0                      xor rax, rax  ; 0 => no hubo colisión
  3576                                  
  3577                                  .end_pop:
  3578 00001B84 415F                        pop r15
  3579 00001B86 415E                        pop r14
  3580 00001B88 415D                        pop r13
  3581 00001B8A 415C                        pop r12
  3582 00001B8C 5E                          pop rsi
  3583 00001B8D 5F                          pop rdi
  3584 00001B8E 5B                          pop rbx
  3585 00001B8F 5D                          pop rbp
  3586 00001B90 C3                          ret
  3587                                  
  3588                                  
  3589                                  
  3590                                  init_enemies:
  3591 00001B91 55                          push rbp
  3592 00001B92 4889E5                      mov rbp, rsp
  3593                                      
  3594                                      ; Reiniciar contadores de movimiento
  3595 00001B95 C605(89200000)00            mov byte [enemy_move_total], 0
  3596 00001B9C C605(8A200000)00            mov byte [enemy_target], 0
  3597                                      
  3598                                      ; Limpiar completamente el array de enemigos
  3599 00001BA3 B91E000000                  mov rcx, 30  ; 10 enemigos * 3 bytes cada uno
  3600 00001BA8 488D3D(60200000)            lea rdi, [enemies]
  3601 00001BAF 30C0                        xor al, al
  3602 00001BB1 F3AA                        rep stosb    ; Llenar todo con ceros
  3603                                      
  3604                                      ; Marcar todos los spawns como no activados
  3605 00001BB3 488D3D(E9200000)            lea rdi, [enemy_spawns_triggered]
  3606 00001BBA B90A000000                  mov rcx, 10
  3607 00001BBF F3AA                        rep stosb
  3608                                      
  3609 00001BC1 5D                          pop rbp
  3610 00001BC2 C3                          ret
  3611                                  
  3612                                  
  3613                                  random_move_enemy:
  3614 00001BC3 55                          push rbp
  3615 00001BC4 4889E5                      mov  rbp, rsp
  3616 00001BC7 53                          push rbx
  3617 00001BC8 52                          push rdx
  3618 00001BC9 57                          push rdi
  3619                                  
  3620                                      ; r12 = índice del enemigo
  3621                                      ; 1) obtener puntero al enemigo i
  3622 00001BCA 4C89E0                      mov rax, r12
  3623 00001BCD 486BC003                    imul rax, 3
  3624 00001BD1 488D98[60200000]            lea rbx, [enemies + rax]     ; rbx => &enemies[r12]
  3625                                  
  3626                                      ; 2) Cargar X, Y actuales (NO SE BORRA AQUÍ TODAVÍA)
  3627 00001BD8 4C0FB603                    movzx r8, byte [rbx]         ; r8 = X actual
  3628 00001BDC 4C0FB64B01                  movzx r9, byte [rbx + 1]     ; r9 = Y actual
  3629                                  
  3630                                      ; 3) Generar "movimiento aleatorio" => tomamos [enemy_move_counter] & 3
  3631 00001BE1 480FB605(87200000)          movzx rax, byte [enemy_move_counter]
  3632 00001BE9 4883E003                    and rax, 3
  3633                                  
  3634 00001BED 4883F800                    cmp rax, 0
  3635 00001BF1 741B                        je .try_left
  3636 00001BF3 4883F801                    cmp rax, 1
  3637 00001BF7 7410                        je .try_right
  3638 00001BF9 4883F802                    cmp rax, 2
  3639 00001BFD 7405                        je .try_up
  3640                                      ; si es 3 => mover abajo
  3641                                  .try_down:
  3642 00001BFF 49FFC1                      inc r9
  3643 00001C02 EB0D                        jmp .check_valid
  3644                                  
  3645                                  .try_up:
  3646 00001C04 49FFC9                      dec r9
  3647 00001C07 EB08                        jmp .check_valid
  3648                                  
  3649                                  .try_right:
  3650 00001C09 49FFC0                      inc r8
  3651 00001C0C EB03                        jmp .check_valid
  3652                                  
  3653                                  .try_left:
  3654 00001C0E 49FFC8                      dec r8
  3655                                  
  3656                                  .check_valid:
  3657                                      ; 4) Verificar límites
  3658 00001C11 4983F801                    cmp r8, 1                    
  3659 00001C15 0F8EA4000000                jle .invalid_move
  3660 00001C1B 4983F850                    cmp r8, column_cells        
  3661 00001C1F 0F8D9A000000                jge .invalid_move
  3662 00001C25 4983F901                    cmp r9, 1                    
  3663 00001C29 0F8E90000000                jle .invalid_move
  3664 00001C2F 4983F920                    cmp r9, row_cells          
  3665 00001C33 0F8D86000000                jge .invalid_move
  3666                                  
  3667                                      ; 5) Verificar colisión con bloques/enemigos
  3668 00001C39 4150                        push r8
  3669 00001C3B 4151                        push r9
  3670 00001C3D B850000000                  mov rax, column_cells
  3671 00001C42 4883C002                    add rax, 2
  3672 00001C46 49F7E1                      mul r9
  3673 00001C49 4C01C0                      add rax, r8
  3674 00001C4C 488DB8[400A0000]            lea rdi, [board + rax]
  3675 00001C53 8A07                        mov al, [rdi]
  3676                                  
  3677                                      ; Revisa si es bloque o borde
  3678 00001C55 3C55                        cmp al, 'U'
  3679 00001C57 7462                        je .pop_and_invalid
  3680 00001C59 3C4F                        cmp al, 'O'
  3681 00001C5B 745E                        je .pop_and_invalid
  3682 00001C5D 3C44                        cmp al, 'D'
  3683 00001C5F 745A                        je .pop_and_invalid
  3684 00001C61 3C4C                        cmp al, 'L'
  3685 00001C63 7456                        je .pop_and_invalid
  3686 00001C65 3C56                        cmp al, 'V'
  3687 00001C67 7452                        je .pop_and_invalid
  3688 00001C69 3C38                        cmp al, '8'
  3689 00001C6B 744E                        je .pop_and_invalid
  3690 00001C6D 3C58                        cmp al, 'X'
  3691 00001C6F 744A                        je .pop_and_invalid
  3692                                  
  3693                                      ; Revisa si hay enemigo
  3694 00001C71 3C40                        cmp al, '@'
  3695 00001C73 7446                        je .pop_and_invalid
  3696 00001C75 3C23                        cmp al, '#'
  3697 00001C77 7442                        je .pop_and_invalid
  3698 00001C79 3C24                        cmp al, '$'
  3699 00001C7B 743E                        je .pop_and_invalid
  3700 00001C7D 3C26                        cmp al, '&'
  3701 00001C7F 743A                        je .pop_and_invalid
  3702                                  
  3703 00001C81 E8A0020000                  call check_enemy_at_position
  3704 00001C86 4883F801                    cmp rax, 1
  3705 00001C8A 742F                        je .pop_and_invalid
  3706                                  
  3707                                      ; ------------------------------
  3708                                      ; SI LLEGAMOS AQUI => POSICIÓN NUEVA ES VÁLIDA
  3709                                      ; AHORA SÍ BORRAMOS LA POSICIÓN ANTIGUA:
  3710                                      ; ------------------------------
  3711 00001C8C 4159                        pop r9
  3712 00001C8E 4158                        pop r8
  3713                                  
  3714                                      ; (A) Borrar la posición antigua en el board
  3715                                      ;    (X,Y) originales estaban en [rbx], [rbx+1].
  3716 00001C90 4C0FB613                    movzx r10, byte [rbx]   ; oldX
  3717 00001C94 4C0FB65B01                  movzx r11, byte [rbx+1] ; oldY
  3718 00001C99 B850000000                  mov rax, column_cells
  3719 00001C9E 4883C002                    add rax, 2
  3720 00001CA2 49F7E3                      mul r11
  3721 00001CA5 4C01D0                      add rax, r10
  3722 00001CA8 488DB8[400A0000]            lea rdi, [board + rax]
  3723 00001CAF C60720                      mov byte [rdi], ' '     ; BORRA la posición vieja
  3724                                  
  3725                                      ; (B) Guardar la nueva X,Y en la estructura
  3726 00001CB2 448803                      mov byte [rbx], r8b
  3727 00001CB5 44884B01                    mov byte [rbx + 1], r9b
  3728                                  
  3729 00001CB9 EB0D                        jmp .done
  3730                                  
  3731                                  .pop_and_invalid:
  3732 00001CBB 4159                        pop r9
  3733 00001CBD 4158                        pop r8
  3734                                  
  3735                                  .invalid_move:
  3736                                      ; Restablecer la posición X,Y en [rbx], [rbx+1] (no se borró la vieja)
  3737 00001CBF 4C0FB603                    movzx r8, byte [rbx]
  3738 00001CC3 4C0FB64B01                  movzx r9, byte [rbx + 1]
  3739                                      ; Se queda donde estaba
  3740                                  .done:
  3741 00001CC8 5F                          pop rdi
  3742 00001CC9 5A                          pop rdx
  3743 00001CCA 5B                          pop rbx
  3744 00001CCB 5D                          pop rbp
  3745 00001CCC C3                          ret
  3746                                  
  3747                                  
  3748                                  ; Función para mover enemigos
  3749                                  move_enemies:
  3750 00001CCD 55                          push rbp
  3751 00001CCE 4889E5                      mov rbp, rsp
  3752                                      
  3753                                      ; Incrementar contador de movimiento
  3754 00001CD1 FE05(87200000)              inc byte [enemy_move_counter]
  3755 00001CD7 480FB605(87200000)          movzx rax, byte [enemy_move_counter]
  3756 00001CDF 3A05(88200000)              cmp al, [enemy_move_delay]
  3757 00001CE5 0F8539020000                jne .end
  3758                                      
  3759                                      ; Resetear contador
  3760 00001CEB C605(87200000)00            mov byte [enemy_move_counter], 0
  3761                                      
  3762 00001CF2 4D31E4                      xor r12, r12                    ; Índice del enemigo
  3763                                      
  3764                                      .enemy_loop:
  3765 00001CF5 4983FC0A                        cmp r12, 10                     ; Máximo 10 enemigos
  3766 00001CF9 0F8D25020000                    jge .end
  3767                                          
  3768                                          ; Calcular offset del enemigo actual
  3769 00001CFF 4C89E0                          mov rax, r12
  3770 00001D02 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  3771 00001D06 488DB0[60200000]                lea rsi, [enemies + rax]
  3772                                          
  3773                                          ; Verificar si el enemigo está activo
  3774 00001D0D 807E0201                        cmp byte [rsi + 2], 1
  3775 00001D11 0F8505020000                    jne .next_enemy
  3776                                          
  3777                                          ; Obtener posición actual
  3778 00001D17 4C0FB606                        movzx r8, byte [rsi]            ; X
  3779 00001D1B 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  3780                                          
  3781 00001D20 488D3D(40240000)                lea rdi, [enemy_last_x]
  3782 00001D27 4C01E7                          add rdi, r12
  3783 00001D2A 8A07                            mov al, [rdi]             ; al = last_x
  3784                                  
  3785 00001D2C 488D15(4A240000)                lea rdx, [enemy_last_y]
  3786 00001D33 4C01E2                          add rdx, r12
  3787 00001D36 8A22                            mov ah, [rdx]             ; ah = last_y
  3788                                  
  3789                                          ; r8 = X actual del enemigo
  3790                                          ; r9 = Y actual del enemigo
  3791                                  
  3792                                          ; *** En lugar de cmp ah, r9b => hacemos lo siguiente:
  3793 00001D38 88E2                            mov dl, ah      ; dl = old_Y
  3794 00001D3A 4488CB                          mov bl, r9b     ; bl = new_Y
  3795 00001D3D 38DA                            cmp dl, bl
  3796 00001D3F 752C                            jne .not_stuck
  3797                                  
  3798                                          ; => SI son iguales => pasa al siguiente check
  3799 00001D41 88C2                            mov dl, al      ; dl = old_X
  3800 00001D43 4488C3                          mov bl, r8b     ; bl = new_X
  3801 00001D46 38DA                            cmp dl, bl
  3802 00001D48 7523                            jne .not_stuck
  3803                                  
  3804                                          ; => MISMA POSICIÓN (STUCK)
  3805 00001D4A 488D1D(54240000)                lea rbx, [enemy_stuck_count]
  3806 00001D51 4C01E3                          add rbx, r12
  3807 00001D54 FE03                            inc byte [rbx]              ; Aumentar contador de “pegarse”
  3808                                  
  3809                                          ; Verificar si supera umbral, digamos 3
  3810 00001D56 480FB60B                        movzx rcx, byte [rbx]
  3811 00001D5A 4883F902                        cmp rcx, 2
  3812 00001D5E 7C34                            jl .check_normal_move       ; Si aún no llega a 3, seguir normal
  3813                                  
  3814                                          ; SI LLEGA A 3, FORZAR UN MOVIMIENTO ALEATORIO:
  3815                                          ;  1) resetear el stuck_count
  3816 00001D60 C60300                          mov byte [rbx], 0
  3817                                  
  3818                                          ;  2) cambiar random
  3819 00001D63 E85BFEFFFF                      call random_move_enemy        ; (Ver ejemplo de abajo)
  3820 00001D68 E9AF010000                      jmp .next_enemy
  3821                                  
  3822                                      .not_stuck:
  3823                                          ; => Se movió
  3824 00001D6D 488D1D(54240000)                lea rbx, [enemy_stuck_count]
  3825 00001D74 4C01E3                          add rbx, r12
  3826 00001D77 C60300                          mov byte [rbx], 0            ; Resetear
  3827                                  
  3828                                          ; Guardar su nueva posición en “last_x, last_y”
  3829 00001D7A 488D3D(40240000)                lea rdi, [enemy_last_x]
  3830 00001D81 4C01E7                          add rdi, r12
  3831 00001D84 448807                          mov [rdi], r8b
  3832                                          
  3833 00001D87 488D3D(4A240000)                lea rdi, [enemy_last_y]
  3834 00001D8E 4C01E7                          add rdi, r12
  3835 00001D91 44880F                          mov [rdi], r9b
  3836                                  
  3837                                          ; Limpiar posición actual antes de mover
  3838                                      .check_normal_move:
  3839 00001D94 4150                            push r8
  3840 00001D96 4151                            push r9
  3841 00001D98 B850000000                      mov rax, column_cells
  3842 00001D9D 4883C002                        add rax, 2
  3843 00001DA1 49F7E1                          mul r9
  3844 00001DA4 4C01C0                          add rax, r8
  3845 00001DA7 488DB8[400A0000]                lea rdi, [board + rax]
  3846 00001DAE C60720                          mov byte [rdi], ' '         ; Limpiar rastro
  3847 00001DB1 4159                            pop r9
  3848 00001DB3 4158                            pop r8
  3849                                  
  3850                                          ; Determinar comportamiento basado en índice
  3851 00001DB5 4C89E0                          mov rax, r12
  3852 00001DB8 4883E001                        and rax, 1                      ; 0 para índices pares, 1 para impares
  3853 00001DBC 4885C0                          test rax, rax
  3854 00001DBF 7402                            jz .chase_ball
  3855 00001DC1 EB31                            jmp .chase_paddle             ; Si es 1, perseguir paleta
  3856                                          
  3857                                          ; Perseguir bola (comportamiento original)
  3858                                      .chase_ball:
  3859 00001DC3 4C8B15(DF140000)                mov r10, [ball_x_pos]
  3860 00001DCA 4D39D0                          cmp r8, r10
  3861 00001DCD 0F8F96000000                    jg .move_left
  3862 00001DD3 0F8C95000000                    jl .move_right
  3863                                          
  3864 00001DD9 4C8B15(E7140000)                mov r10, [ball_y_pos]
  3865 00001DE0 4D39D1                          cmp r9, r10
  3866 00001DE3 0F8F8A000000                    jg .move_up
  3867 00001DE9 0F8C89000000                    jl .move_down
  3868 00001DEF E9A5000000                      jmp .check_collision
  3869                                          
  3870                                      .chase_paddle:
  3871                                          ; Obtener la posición X actual de la paleta
  3872 00001DF4 4C8B15(BF140000)                mov r10, [pallet_position]
  3873 00001DFB 4981EA[400A0000]                sub r10, board              ; Convertir a offset relativo
  3874                                          
  3875                                          ; Calcular la posición X real de la paleta
  3876 00001E02 4C89D0                          mov rax, r10
  3877 00001E05 BB50000000                      mov rbx, column_cells
  3878 00001E0A 4883C302                        add rbx, 2                  ; Añadir newline chars
  3879 00001E0E 4831D2                          xor rdx, rdx
  3880 00001E11 48F7F3                          div rbx                     ; rax = y, rdx = x
  3881                                          
  3882                                          ; rdx ahora contiene la posición X de la paleta
  3883                                          ; Añadir la mitad del tamaño de la paleta para apuntar al centro
  3884 00001E14 488B0D(C7140000)                mov rcx, [pallet_size]
  3885 00001E1B 48D1E9                          shr rcx, 1                  ; Dividir por 2
  3886 00001E1E 4801CA                          add rdx, rcx
  3887                                          
  3888                                          ; Comparar con posición X del enemigo y mover gradualmente
  3889 00001E21 4939D0                          cmp r8, rdx
  3890 00001E24 7404                            je .check_y_paddle          ; Si está en la misma X, verificar Y
  3891 00001E26 7F41                            jg .move_left              ; Si está a la derecha, mover izquierda
  3892 00001E28 7C44                            jl .move_right             ; Si está a la izquierda, mover derecha
  3893                                  
  3894                                      .check_y_paddle:
  3895                                          ; La Y de la paleta siempre es row_cells - 2
  3896 00001E2A 41BA20000000                    mov r10, row_cells
  3897 00001E30 4983EA02                        sub r10, 2
  3898                                          
  3899                                          ; Comparar con posición Y del enemigo y mover gradualmente
  3900 00001E34 4D39D1                          cmp r9, r10
  3901 00001E37 7404                            je .no_movement            ; Si está en la misma Y, no mover
  3902 00001E39 7F38                            jg .move_up               ; Si está abajo, mover arriba
  3903 00001E3B 7C3B                            jl .move_down             ; Si está arriba, mover abajo
  3904                                          
  3905                                      .no_movement:
  3906 00001E3D EB5A                            jmp .check_collision
  3907                                  
  3908                                      ; También agregar una nueva sección para el movimiento suave
  3909                                      .smooth_transition:
  3910                                          ; Si el enemigo está muy lejos de su objetivo, limitar el movimiento
  3911 00001E3F 8A05(8A200000)                  mov al, [enemy_target]
  3912 00001E45 84C0                            test al, al
  3913 00001E47 7450                            jz .check_collision        ; Si persigue la bola, movimiento normal
  3914                                          
  3915                                          ; Verificar distancia en X
  3916 00001E49 4989D2                          mov r10, rdx              ; Posición X objetivo
  3917 00001E4C 4D29C2                          sub r10, r8               ; Calcular diferencia
  3918 00001E4F 4983FA05                        cmp r10, 5               ; Si la diferencia es mayor a 5
  3919 00001E53 7F08                            jg .limit_right_movement  ; Limitar movimiento a la derecha
  3920 00001E55 4983FAFB                        cmp r10, -5              ; Si la diferencia es menor a -5
  3921 00001E59 7C08                            jl .limit_left_movement   ; Limitar movimiento a la izquierda
  3922 00001E5B EB3C                            jmp .check_collision
  3923                                          
  3924                                      .limit_right_movement:
  3925 00001E5D 4983C002                        add r8, 2                ; Mover solo 2 unidades a la derecha
  3926 00001E61 EB36                            jmp .check_collision
  3927                                          
  3928                                      .limit_left_movement:
  3929 00001E63 4983E802                        sub r8, 2                ; Mover solo 2 unidades a la izquierda
  3930 00001E67 EB30                            jmp .check_collision
  3931                                      .move_left:
  3932 00001E69 49FFC8                          dec r8
  3933 00001E6C EB0F                            jmp .check_vertical
  3934                                          
  3935                                      .move_right:
  3936 00001E6E 49FFC0                          inc r8
  3937 00001E71 EB0A                            jmp .check_vertical
  3938                                          
  3939                                      .move_up:
  3940 00001E73 49FFC9                          dec r9
  3941 00001E76 EB21                            jmp .check_collision
  3942                                          
  3943                                      .move_down:
  3944 00001E78 49FFC1                          inc r9
  3945 00001E7B EB1C                            jmp .check_collision
  3946                                          
  3947                                      .check_vertical:
  3948 00001E7D 8A05(8A200000)                  mov al, [enemy_target]
  3949 00001E83 84C0                            test al, al
  3950 00001E85 0F8569FFFFFF                    jnz .chase_paddle         ; Si persigue paleta, volver a su lógica
  3951 00001E8B 4C8B15(E7140000)                mov r10, [ball_y_pos]     ; Si no, seguir persiguiendo la bola
  3952 00001E92 4D39D1                          cmp r9, r10
  3953 00001E95 7FDC                            jg .move_up
  3954 00001E97 7CDF                            jl .move_down
  3955                                          
  3956                                      .check_collision:
  3957                                          ; Verificar colisión con bordes
  3958 00001E99 4983F801                        cmp r8, 1                       ; Borde izquierdo
  3959 00001E9D 7E7D                            jle .next_enemy
  3960 00001E9F 4983F850                        cmp r8, column_cells
  3961 00001EA3 7D77                            jge .next_enemy
  3962 00001EA5 4983F901                        cmp r9, 1                       ; Borde superior
  3963 00001EA9 7E71                            jle .next_enemy
  3964 00001EAB 4983F920                        cmp r9, row_cells
  3965 00001EAF 7D6B                            jge .next_enemy
  3966                                          
  3967                                          ; Verificar colisión con bloques antes de moverse
  3968 00001EB1 4150                            push r8
  3969 00001EB3 4151                            push r9
  3970 00001EB5 4152                            push r10
  3971                                          
  3972                                          ; Calcular posición en el tablero para verificar
  3973 00001EB7 B850000000                      mov rax, column_cells
  3974 00001EBC 4883C002                        add rax, 2
  3975 00001EC0 49F7E1                          mul r9
  3976 00001EC3 4C01C0                          add rax, r8
  3977 00001EC6 4C8D90[400A0000]                lea r10, [board + rax]
  3978                                          
  3979                                          ; Verificar si hay un bloque en la nueva posición
  3980 00001ECD 418A02                          mov al, [r10]
  3981 00001ED0 3C55                            cmp al, 'U'
  3982 00001ED2 7442                            je .invalid_move
  3983 00001ED4 3C4F                            cmp al, 'O'
  3984 00001ED6 743E                            je .invalid_move
  3985 00001ED8 3C44                            cmp al, 'D'
  3986 00001EDA 743A                            je .invalid_move
  3987 00001EDC 3C4C                            cmp al, 'L'
  3988 00001EDE 7436                            je .invalid_move
  3989 00001EE0 3C56                            cmp al, 'V'
  3990 00001EE2 7432                            je .invalid_move
  3991 00001EE4 3C38                            cmp al, '8'
  3992 00001EE6 742E                            je .invalid_move
  3993 00001EE8 3C58                            cmp al, 'X'
  3994 00001EEA 742A                            je .invalid_move
  3995 00001EEC 3C40                            cmp al, '@'                 ; Enemigo nivel 1 y 5
  3996 00001EEE 7426                            je .invalid_move
  3997 00001EF0 3C23                            cmp al, '#'                 ; Enemigo nivel 2
  3998 00001EF2 7422                            je .invalid_move
  3999 00001EF4 3C24                            cmp al, '$'                 ; Enemigo nivel 3
  4000 00001EF6 741E                            je .invalid_move
  4001 00001EF8 3C26                            cmp al, '&'                 ; Enemigo nivel 4
  4002 00001EFA 741A                            je .invalid_move
  4003                                          
  4004 00001EFC E825000000                      call check_enemy_at_position
  4005 00001F01 4883F801                        cmp rax, 1
  4006 00001F05 740F                            je .invalid_move
  4007 00001F07 415A                            pop r10
  4008 00001F09 4159                            pop r9
  4009 00001F0B 4158                            pop r8
  4010                                          
  4011                                          ; Guardar nueva posición si es válida
  4012 00001F0D 448806                          mov [rsi], r8b
  4013 00001F10 44884E01                        mov [rsi + 1], r9b
  4014 00001F14 EB06                            jmp .next_enemy
  4015                                          
  4016                                      .invalid_move:
  4017 00001F16 415A                            pop r10
  4018 00001F18 4159                            pop r9
  4019 00001F1A 4158                            pop r8
  4020                                          
  4021                                      .next_enemy:
  4022 00001F1C 49FFC4                          inc r12
  4023 00001F1F E9D1FDFFFF                      jmp .enemy_loop
  4024                                          
  4025                                      .end:
  4026 00001F24 5D                              pop rbp
  4027 00001F25 C3                              ret
  4028                                  
  4029                                  check_enemy_at_position:
  4030 00001F26 55                          push rbp
  4031 00001F27 4889E5                      mov rbp, rsp
  4032                                      
  4033                                      ; Parámetros esperados en r8 (X) y r9 (Y)
  4034 00001F2A B850000000                  mov rax, column_cells
  4035 00001F2F 4883C002                    add rax, 2
  4036 00001F33 49F7E1                      mul r9
  4037 00001F36 4C01C0                      add rax, r8
  4038 00001F39 488DB8[400A0000]            lea rdi, [board + rax]
  4039 00001F40 480FB607                    movzx rax, byte [rdi]
  4040                                      
  4041                                      ; Verificar todos los caracteres de enemigos
  4042 00001F44 3C40                        cmp al, '@'
  4043 00001F46 7411                        je .enemy_found
  4044 00001F48 3C23                        cmp al, '#'
  4045 00001F4A 740D                        je .enemy_found
  4046 00001F4C 3C24                        cmp al, '$'
  4047 00001F4E 7409                        je .enemy_found
  4048 00001F50 3C26                        cmp al, '&'
  4049 00001F52 7405                        je .enemy_found
  4050                                      
  4051 00001F54 4831C0                      xor rax, rax    ; No hay enemigo (retorna 0)
  4052 00001F57 EB05                        jmp .end
  4053                                      
  4054                                  .enemy_found:
  4055 00001F59 B801000000                  mov rax, 1      ; Hay enemigo (retorna 1)
  4056                                      
  4057                                  .end:
  4058 00001F5E 5D                          pop rbp
  4059 00001F5F C3                          ret
  4060                                  
  4061                                  get_current_spawn_points:
  4062 00001F60 55                          push rbp
  4063 00001F61 4889E5                      mov rbp, rsp
  4064                                      
  4065 00001F64 480FB605(79150000)          movzx rax, byte [current_level]
  4066 00001F6C 48FFC8                      dec rax                         ; Ajustar para índice base 0
  4067 00001F6F 488B04C5[BE200000]          mov rax, [spawn_points_table + rax * 8]
  4068                                      
  4069 00001F77 5D                          pop rbp
  4070 00001F78 C3                          ret
  4071                                  
  4072                                  ; Función para verificar si debe aparecer un nuevo enemigo
  4073                                  check_enemy_spawn:
  4074 00001F79 55                          push rbp
  4075 00001F7A 4889E5                      mov rbp, rsp
  4076                                      
  4077                                      ; Obtener spawn points del nivel actual
  4078 00001F7D E8DEFFFFFF                  call get_current_spawn_points
  4079 00001F82 4989C4                      mov r12, rax                    ; r12 = puntero a spawn points
  4080                                      
  4081                                      ; Obtener cantidad de bloques destruidos
  4082 00001F85 4C0FB62D(46200000)          movzx r13, byte [destroyed_blocks]
  4083                                      
  4084                                      ; Verificar cada punto de spawn
  4085 00001F8D 4831C9                      xor rcx, rcx                    ; Índice del enemigo
  4086                                      
  4087                                      .check_loop:
  4088 00001F90 4883F90A                        cmp rcx, 10                     ; Máximo 10 enemigos
  4089 00001F94 7D4E                            jge .end
  4090                                          
  4091                                          ; Verificar si este spawn point ya fue usado
  4092 00001F96 80B9[E9200000]01                cmp byte [enemy_spawns_triggered + rcx], 1
  4093 00001F9D 7440                            je .next_enemy
  4094                                          
  4095                                          ; Verificar si este enemigo ya está activo
  4096 00001F9F 4889C8                          mov rax, rcx
  4097 00001FA2 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  4098 00001FA6 488DB0[60200000]                lea rsi, [enemies + rax]
  4099 00001FAD 807E0201                        cmp byte [rsi + 2], 1          ; Verificar si está activo
  4100 00001FB1 742C                            je .next_enemy
  4101                                          
  4102                                          ; Verificar si debemos spawnear este enemigo
  4103 00001FB3 490FB6040C                      movzx rax, byte [r12 + rcx]    ; Obtener punto de spawn
  4104 00001FB8 4939C5                          cmp r13, rax                   ; Comparar con bloques destruidos
  4105 00001FBB 7522                            jne .next_enemy
  4106                                          
  4107                                          ; Marcar este spawn point como usado
  4108 00001FBD C681[E9200000]01                mov byte [enemy_spawns_triggered + rcx], 1
  4109                                          
  4110                                          ; Spawner nuevo enemigo
  4111 00001FC4 B004                            mov al, 4
  4112 00001FC6 00C8                            add al, cl       ; con 'rcx' como índice
  4113 00001FC8 8806                            mov [rsi], al
  4114 00001FCA C6460102                        mov byte [rsi+1], 2
  4115 00001FCE C6460201                        mov byte [rsi+2], 1
  4116                                  
  4117                                          ; Inicializar comportamiento
  4118 00001FD2 4889C8                          mov rax, rcx
  4119 00001FD5 4883E001                        and rax, 1                     ; Alternar comportamiento basado en índice par/impar
  4120 00001FD9 8805(E8200000)                  mov [current_behavior], al      ; 0 = persigue bola, 1 = persigue paleta
  4121                                          
  4122                                      .next_enemy:
  4123 00001FDF 48FFC1                          inc rcx
  4124 00001FE2 EBAC                            jmp .check_loop
  4125                                          
  4126                                      .end:
  4127 00001FE4 5D                              pop rbp
  4128 00001FE5 C3                              ret
  4129                                  
  4130                                  
  4131                                  ; Función para dibujar enemigos
  4132                                  print_enemies:
  4133 00001FE6 55                          push rbp
  4134 00001FE7 4889E5                      mov rbp, rsp
  4135                                      
  4136 00001FEA 4D31E4                      xor r12, r12                    ; Índice del enemigo
  4137                                      
  4138                                      .print_loop:
  4139 00001FED 4983FC0A                        cmp r12, 10                      ; Máximo 5 enemigos
  4140 00001FF1 7D4B                            jge .end
  4141                                          
  4142                                          ; Calcular offset del enemigo actual
  4143 00001FF3 4C89E0                          mov rax, r12
  4144 00001FF6 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  4145 00001FFA 488DB0[60200000]                lea rsi, [enemies + rax]
  4146                                          
  4147                                          ; Verificar si el enemigo está activo
  4148 00002001 807E0201                        cmp byte [rsi + 2], 1
  4149 00002005 7532                            jne .next_enemy
  4150                                          
  4151                                          ; Calcular posición en el tablero
  4152 00002007 4C0FB606                        movzx r8, byte [rsi]            ; X
  4153 0000200B 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  4154                                          
  4155                                          ; Calcular offset en el tablero
  4156 00002010 B850000000                      mov rax, column_cells
  4157 00002015 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  4158 00002019 49F7E1                          mul r9
  4159 0000201C 4C01C0                          add rax, r8
  4160 0000201F 488DB8[400A0000]                lea rdi, [board + rax]
  4161                                          
  4162                                          ; Obtener carácter del enemigo según el nivel
  4163 00002026 480FB605(79150000)              movzx rax, byte [current_level]
  4164 0000202E 48FFC8                          dec rax                         ; Ajustar para índice base 0
  4165 00002031 8A80[5B200000]                  mov al, [enemy_chars + rax]
  4166                                          
  4167                                          ; Dibujar enemigo
  4168 00002037 8807                            mov [rdi], al
  4169                                          
  4170                                      .next_enemy:
  4171 00002039 49FFC4                          inc r12
  4172 0000203C EBAF                            jmp .print_loop
  4173                                          
  4174                                      .end:
  4175 0000203E 5D                              pop rbp
  4176 0000203F C3                              ret
  4177                                  
  4178                                  ; Función para verificar colisión con enemigos
  4179                                  ; Función para verificar colisión con enemigos
  4180                                  check_enemy_collision:
  4181 00002040 55                          push rbp
  4182 00002041 4889E5                      mov rbp, rsp
  4183                                      
  4184 00002044 4D31E4                      xor r12, r12                    ; Índice del enemigo
  4185 00002047 4831C0                      xor rax, rax                    ; Valor de retorno (0 = no colisión)
  4186                                      
  4187                                      .check_loop:
  4188 0000204A 4983FC05                        cmp r12, 5                      ; Máximo 5 enemigos
  4189 0000204E 0F8DE9000000                    jge .end
  4190                                          
  4191                                          ; Calcular offset del enemigo actual
  4192 00002054 4C89E1                          mov rcx, r12
  4193 00002057 486BC903                        imul rcx, 3                     ; Cada enemigo ocupa 3 bytes
  4194 0000205B 488DB1[60200000]                lea rsi, [enemies + rcx]
  4195                                          
  4196                                          ; Verificar si el enemigo está activo
  4197 00002062 807E0201                        cmp byte [rsi + 2], 1
  4198 00002066 0F85C9000000                    jne .next_enemy
  4199                                          
  4200                                          ; Verificar colisión con la bola
  4201 0000206C 4C0FB606                        movzx r8, byte [rsi]            ; X enemigo
  4202 00002070 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y enemigo
  4203                                          
  4204                                          ; Verificar si la bola está en el rango del enemigo (considerando el enemigo como un área)
  4205 00002075 4C8B15(DF140000)                mov r10, [ball_x_pos]
  4206 0000207C 4C8B1D(E7140000)                mov r11, [ball_y_pos]
  4207                                          
  4208                                          ; Comprobar colisión vertical (misma columna)
  4209 00002083 4D39C2                          cmp r10, r8
  4210 00002086 7525                            jne .check_horizontal
  4211 00002088 4D29CB                          sub r11, r9
  4212 0000208B 4983FB01                        cmp r11, 1
  4213 0000208F 7F1C                            jg .check_horizontal
  4214 00002091 4983FBFF                        cmp r11, -1
  4215 00002095 7C16                            jl .check_horizontal
  4216                                          
  4217                                          ; Colisión vertical detectada
  4218 00002097 E8A3000000                      call destroy_enemy
  4219 0000209C 48F71D(F7140000)                neg qword [ball_direction_y]    ; Invertir dirección vertical
  4220 000020A3 B801000000                      mov rax, 1
  4221 000020A8 E990000000                      jmp .end
  4222                                          
  4223                                      .check_horizontal:
  4224                                          ; Comprobar colisión horizontal (misma fila)
  4225 000020AD 4C8B15(DF140000)                mov r10, [ball_x_pos]
  4226 000020B4 4C8B1D(E7140000)                mov r11, [ball_y_pos]
  4227 000020BB 4D39CB                          cmp r11, r9
  4228 000020BE 7522                            jne .check_paddle
  4229 000020C0 4D29C2                          sub r10, r8
  4230 000020C3 4983FA01                        cmp r10, 1
  4231 000020C7 7F19                            jg .check_paddle
  4232 000020C9 4983FAFF                        cmp r10, -1
  4233 000020CD 7C13                            jl .check_paddle
  4234                                          
  4235                                          ; Colisión horizontal detectada
  4236 000020CF E86B000000                      call destroy_enemy
  4237 000020D4 48F71D(EF140000)                neg qword [ball_direction_x]    ; Invertir dirección horizontal
  4238 000020DB B801000000                      mov rax, 1
  4239 000020E0 EB5B                            jmp .end
  4240                                          
  4241                                      .check_paddle:
  4242                                          ; Verificar colisión con la paleta
  4243 000020E2 4C8B15(BF140000)                mov r10, [pallet_position]
  4244 000020E9 4981EA[400A0000]                sub r10, board
  4245 000020F0 4C89D0                          mov rax, r10
  4246 000020F3 41BB50000000                    mov r11, column_cells
  4247 000020F9 4983C302                        add r11, 2
  4248 000020FD 4831D2                          xor rdx, rdx
  4249 00002100 49F7F3                          div r11                     ; División para obtener la posición Y
  4250 00002103 4989D3                          mov r11, rdx               ; X de la paleta en r11
  4251                                          
  4252 00002106 488B0D(C7140000)                mov rcx, [pallet_size]     ; Obtener el tamaño de la paleta
  4253                                          
  4254                                          ; Verificar si el enemigo está en la misma fila que la paleta
  4255 0000210D 41BD20000000                    mov r13, row_cells
  4256 00002113 4983ED02                        sub r13, 2                 ; Y de la paleta
  4257 00002117 4D39E9                          cmp r9, r13               ; Comparar Y del enemigo con Y de la paleta
  4258 0000211A 7519                            jne .next_enemy
  4259                                          
  4260                                          ; Verificar si el enemigo está dentro del rango X de la paleta
  4261 0000211C 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X inicial de la paleta
  4262 0000211F 7C14                            jl .next_enemy
  4263                                          
  4264 00002121 4901CB                          add r11, rcx              ; Añadir el tamaño de la paleta
  4265 00002124 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X final de la paleta
  4266 00002127 7F0C                            jg .next_enemy
  4267                                          
  4268                                          ; Si llegamos aquí, hay colisión con la paleta
  4269 00002129 E811000000                      call destroy_enemy        ; Destruir el enemigo
  4270 0000212E B801000000                      mov rax, 1                ; Indicar que hubo colisión
  4271 00002133 EB08                            jmp .end
  4272                                          
  4273                                      .next_enemy:
  4274 00002135 49FFC4                          inc r12
  4275 00002138 E90DFFFFFF                      jmp .check_loop
  4276                                          
  4277                                      .end:
  4278 0000213D 5D                              pop rbp
  4279 0000213E C3                              ret
  4280                                  
  4281                                  ; Función para destruir un enemigo
  4282                                  destroy_enemy:
  4283                                      ; Desactivar enemigo
  4284 0000213F C6460200                    mov byte [rsi + 2], 0   ; Marcar enemigo como inactivo
  4285                                  
  4286                                      ; Sumar puntos por destruir enemigo
  4287 00002143 488B05(7F200000)            mov rax, [enemy_points]
  4288 0000214A 480105(3E200000)            add [current_score], rax
  4289                                  
  4290                                      ; No tocar bloques destruidos aquí
  4291 00002151 C3                          ret
  4292                                  
  4293                                  
  4294                                  _start:
  4295 00002152 E8D4DFFFFF              	call canonical_off
  4296 00002157 E857010000              	call start_screen
  4297 0000215C E879F3FFFF                  call init_level
  4298 00002161 EB00                    	jmp .main_loop
  4299                                  	
  4300                                  
  4301                                      .main_loop:
  4302 00002163 E8E7F7FFFF                      call print_labels
  4303 00002168 E816F7FFFF                      call print_blocks
  4304 0000216D E8E3E3FFFF                      call move_letters
  4305 00002172 E8C9E6FFFF                      call update_lasers
  4306 00002177 E84EE3FFFF                      call print_letters
  4307 0000217C E86AEAFFFF                      call print_pallet
  4308                                          
  4309                                          ; Mover bola principal solo si está activa
  4310 00002181 803D(00150000)01                cmp byte [ball_active], 1
  4311 00002188 7505                            jne .skip_ball1
  4312 0000218A E873EBFFFF                          call move_ball
  4313                                          .skip_ball1:
  4314                                  
  4315                                          ; Mover bola 2 si está activa
  4316 0000218F 803D(22150000)01                cmp byte [ball2_active], 1
  4317 00002196 7505                            jne .skip_ball2
  4318 00002198 E838EDFFFF                          call move_ball_2
  4319                                          .skip_ball2:
  4320                                  
  4321                                          ; Mover bola 3 si está activa
  4322 0000219D 803D(44150000)01                cmp byte [ball3_active], 1
  4323 000021A4 7505                            jne .skip_ball3
  4324 000021A6 E8FDEEFFFF                          call move_ball_3
  4325                                          .skip_ball3:
  4326                                  
  4327 000021AB E846E1FFFF                      call check_bottom_collision    ; Nueva función que maneja todas las bolas
  4328 000021B0 E828E0FFFF                      call print_lives
  4329                                  
  4330                                          ; Imprimir solo las bolas activas
  4331 000021B5 803D(00150000)01                cmp byte [ball_active], 1
  4332 000021BC 7505                            jne .no_pb1
  4333 000021BE E8B0E9FFFF                          call print_ball
  4334                                          .no_pb1:
  4335                                  
  4336 000021C3 803D(22150000)01                cmp byte [ball2_active], 1
  4337 000021CA 7505                            jne .no_pb2
  4338 000021CC E8CAE9FFFF                          call print_ball_2
  4339                                          .no_pb2:
  4340                                  
  4341 000021D1 803D(44150000)01                cmp byte [ball3_active], 1
  4342 000021D8 7505                            jne .no_pb3
  4343 000021DA E8E4E9FFFF                          call print_ball_3
  4344                                          .no_pb3:
  4345                                  
  4346 000021DF E8E7F4FFFF                      call check_level_complete
  4347 000021E4 E890FDFFFF                      call check_enemy_spawn
  4348 000021E9 E8DFFAFFFF                      call move_enemies
  4349 000021EE E84DFEFFFF                      call check_enemy_collision
  4350 000021F3 E8EEFDFFFF                      call print_enemies
  4351 000021F8 E8B7E5FFFF                      call print_power_label
  4352                                  		print board, board_size				
    82 000021FD B801000000          <1>  mov eax, sys_write
    83 00002202 BF01000000          <1>  mov edi, 1
    84 00002207 48BE-               <1>  mov rsi, %1
    84 00002209 [400A000000000000]  <1>
    85 00002211 BA400A0000          <1>  mov edx, %2
    86 00002216 0F05                <1>  syscall
  4353                                  		;setnonblocking	
  4354                                  	.read_more:	
  4355                                  	    getchar	
    90 00002218 B800000000          <1>  mov rax, sys_read
    91 0000221D BF00000000          <1>  mov rdi, STDIN_FILENO
    92 00002222 48BE-               <1>  mov rsi, input_char
    92 00002224 [0000000000000000]  <1>
    93 0000222C BA01000000          <1>  mov rdx, 1
    94 00002231 0F05                <1>  syscall
  4356 00002233 4883F801                	    cmp rax, 1
  4357 00002237 7547                    	    jne .done
  4358                                  	
  4359 00002239 8A05(00000000)          	    mov al, [input_char]
  4360 0000223F 8805(08230000)          	    mov [last_key], al      ; Registrar la última tecla presionada
  4361                                  	
  4362 00002245 3C61                    	    cmp al, 'a'
  4363 00002247 750E                    	    jne .not_left
  4364 00002249 48C7C7FFFFFFFF          	    mov rdi, left_direction
  4365 00002250 E8CBE9FFFF              	    call move_pallet
  4366 00002255 EB29                    	    jmp .done
  4367                                  	
  4368                                      .not_left:
  4369 00002257 3C64                    	    cmp al, 'd'
  4370 00002259 750C                    	    jne .not_right
  4371 0000225B BF01000000              	    mov rdi, right_direction
  4372 00002260 E8BBE9FFFF              	    call move_pallet
  4373 00002265 EB19                    	    jmp .done
  4374                                  	
  4375                                      .not_right:
  4376 00002267 3C63                    	    cmp al, 'c'             ; Verificar si se presionó la tecla 'c'
  4377 00002269 740E                    	    je .release_ball        ; Si sí, liberar la bola
  4378                                  	
  4379 0000226B 3C78                            cmp al, 'x'             ; Verificar si se presionó la tecla 'c'
  4380 0000226D 740A                    	    je .release_ball        ; Si sí, liberar la bola
  4381                                  	
  4382                                  
  4383 0000226F 3C71                    	    cmp al, 'q' 
  4384 00002271 0F84AF000000            	    je exit
  4385 00002277 EB9F                    	    jmp .read_more
  4386                                  	
  4387                                      .release_ball:
  4388 00002279 E8FDEFFFFF              	    call process_catch_release
  4389 0000227E EB00                    	    jmp .done
  4390                                  	
  4391                                      .done:
  4392                                  	    sleeptime
    98 00002280 B823000000          <1>  mov eax, sys_nanosleep
    99 00002285 48BF-               <1>  mov rdi, timespec
    99 00002287 [0000000000000000]  <1>
   100 0000228F 31F6                <1>  xor esi, esi
   101 00002291 0F05                <1>  syscall
  4393                                  	    print clear, clear_length
    82 00002293 B801000000          <1>  mov eax, sys_write
    83 00002298 BF01000000          <1>  mov edi, 1
    84 0000229D 48BE-               <1>  mov rsi, %1
    84 0000229F [1000000000000000]  <1>
    85 000022A7 BA07000000          <1>  mov edx, %2
    86 000022AC 0F05                <1>  syscall
  4394 000022AE E9B0FEFFFF              	    jmp .main_loop
  4395                                  
  4396                                  
  4397                                  
  4398                                  
  4399                                  start_screen:
  4400                                      print clear, clear_length    ; Limpiamos la pantalla primero
    82 000022B3 B801000000          <1>  mov eax, sys_write
    83 000022B8 BF01000000          <1>  mov edi, 1
    84 000022BD 48BE-               <1>  mov rsi, %1
    84 000022BF [1000000000000000]  <1>
    85 000022C7 BA07000000          <1>  mov edx, %2
    86 000022CC 0F05                <1>  syscall
  4401                                      print msg1, msg1_length
    82 000022CE B801000000          <1>  mov eax, sys_write
    83 000022D3 BF01000000          <1>  mov edi, 1
    84 000022D8 48BE-               <1>  mov rsi, %1
    84 000022DA [1700000000000000]  <1>
    85 000022E2 BA14010000          <1>  mov edx, %2
    86 000022E7 0F05                <1>  syscall
  4402                                      
  4403                                      .wait_for_key:              ; Agregamos una etiqueta para esperar la tecla
  4404                                          getchar                 ; Esperamos una tecla
    90 000022E9 B800000000          <1>  mov rax, sys_read
    91 000022EE BF00000000          <1>  mov rdi, STDIN_FILENO
    92 000022F3 48BE-               <1>  mov rsi, input_char
    92 000022F5 [0000000000000000]  <1>
    93 000022FD BA01000000          <1>  mov rdx, 1
    94 00002302 0F05                <1>  syscall
  4405 00002304 4883F801                        cmp rax, 1             ; Verificamos si se leyó un carácter
  4406 00002308 75DF                            jne .wait_for_key      ; Si no se leyó, seguimos esperando
  4407                                          
  4408                                      print clear, clear_length   ; Limpiamos la pantalla antes de salir
    82 0000230A B801000000          <1>  mov eax, sys_write
    83 0000230F BF01000000          <1>  mov edi, 1
    84 00002314 48BE-               <1>  mov rsi, %1
    84 00002316 [1000000000000000]  <1>
    85 0000231E BA07000000          <1>  mov edx, %2
    86 00002323 0F05                <1>  syscall
  4409 00002325 C3                          ret
  4410                                  
  4411                                  exit: 
  4412 00002326 E842DEFFFF              	call canonical_on
  4413 0000232B B83C000000              	mov    rax, 60
  4414 00002330 BF00000000                  mov    rdi, 0
  4415 00002335 0F05                        syscall
  4416                                  
