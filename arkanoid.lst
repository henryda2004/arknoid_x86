     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  sys_read: equ 0	
     7                                  sys_write:	equ 1
     8                                  sys_nanosleep:	equ 35
     9                                  sys_time:	equ 201
    10                                  sys_fcntl:	equ 72
    11                                  
    12                                  
    13                                  STDIN_FILENO: equ 0
    14                                  
    15                                  F_SETFL:	equ 0x0004
    16                                  O_NONBLOCK: equ 0x0004
    17                                  
    18                                  ;screen clean definition
    19                                  row_cells:	equ 32	; set to any (reasonable) value you wish
    20                                  column_cells: 	equ 78 ; set to any (reasonable) value you wish
    21                                  array_length:	equ row_cells * column_cells + row_cells ; cells are mapped to bytes in the array and a new line char ends each row
    22                                  
    23                                  ;This is regarding the sleep time
    24                                  timespec:
    25 00000000 0000000000000000            tv_sec  dq 0
    26 00000008 00C2EB0B00000000            tv_nsec dq 200000000
    27                                  
    28                                  
    29                                  ;This is for cleaning up the screen
    30 00000010 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"
    31                                  clear_length:	equ $-clear
    32                                  	
    33                                  	
    34                                  
    35                                  ; Start Message
    36 00000017 202020202020202054-     msg1: db "        TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    36 00000020 45434E4F4C4F474943-
    36 00000029 4F20444520434F5354-
    36 00000032 412052494341202020-
    36 0000003B 20202020200A0D     
    37 00000042 202020202020202041-     msg2: db "        ARQUITECTURA DE COMPUTADORAS I        ", 0xA, 0xD
    37 0000004B 525155495445435455-
    37 00000054 524120444520434F4D-
    37 0000005D 50555441444F524153-
    37 00000066 204920202020202020-
    37 0000006F 200A0D             
    38 00000072 202020202020202045-     msg3: db "        ESTUDIANTE: HENRY NUNEZ PEREZ        ", 0xA, 0xD
    38 0000007B 5354554449414E5445-
    38 00000084 3A2048454E5259204E-
    38 0000008D 554E455A2050455245-
    38 00000096 5A2020202020202020-
    38 0000009F 0A0D               
    39 000000A1 202020202020202050-     msg4: db "        PROFESOR: ERNESTO RIVERA ALVARADO        ", 0xA, 0xD
    39 000000AA 524F4645534F523A20-
    39 000000B3 45524E4553544F2052-
    39 000000BC 495645524120414C56-
    39 000000C5 415241444F20202020-
    39 000000CE 202020200A0D       
    40 000000D4 202020202020202041-     msg5: db "        ARKANOID RETRO        ", 0xA, 0xD
    40 000000DD 524B414E4F49442052-
    40 000000E6 4554524F2020202020-
    40 000000EF 2020200A0D         
    41 000000F4 202020202020202050-     msg6: db "        PRESIONE CUALQUIER TECLA PARA INICIAR        ", 0xA, 0xD
    41 000000FD 524553494F4E452043-
    41 00000106 55414C515549455220-
    41 0000010F 5445434C4120504152-
    41 00000118 4120494E4943494152-
    41 00000121 20202020202020200A-
    41 0000012A 0D                 
    42                                  msg1_length: equ $-msg1
    43                                  msg2_length: equ $-msg2
    44                                  msg3_length: equ $-msg3
    45                                  msg4_length: equ $-msg4
    46                                  msg5_length: equ $-msg5
    47                                  msg6_length: equ $-msg6
    48                                  
    49                                  ; Usefull macros
    50                                  
    51                                  
    52                                  
    53                                  %macro setnonblocking 0
    54                                  	mov rax, sys_fcntl
    55                                      mov rdi, STDIN_FILENO
    56                                      mov rsi, F_SETFL
    57                                      mov rdx, O_NONBLOCK
    58                                      syscall
    59                                  %endmacro
    60                                  
    61                                  %macro unsetnonblocking 0
    62                                  	mov rax, sys_fcntl
    63                                      mov rdi, STDIN_FILENO
    64                                      mov rsi, F_SETFL
    65                                      mov rdx, 0
    66                                      syscall
    67                                  %endmacro
    68                                  
    69                                  %macro full_line 0
    70                                      times column_cells db "X"
    71                                      db 0x0a, 0xD
    72                                  %endmacro
    73                                  
    74                                  %macro hollow_line 0
    75                                      db "X"
    76                                      times column_cells-2 db " "
    77                                      db "X", 0x0a, 0xD
    78                                  %endmacro
    79                                  
    80                                  
    81                                  %macro print 2
    82                                  	mov eax, sys_write
    83                                  	mov edi, 1 	; stdout
    84                                  	mov rsi, %1
    85                                  	mov edx, %2
    86                                  	syscall
    87                                  %endmacro
    88                                  
    89                                  %macro getchar 0
    90                                  	mov     rax, sys_read
    91                                      mov     rdi, STDIN_FILENO
    92                                      mov     rsi, input_char
    93                                      mov     rdx, 1 ; number of bytes
    94                                      syscall         ;read text input from keyboard
    95                                  %endmacro
    96                                  
    97                                  %macro sleeptime 0
    98                                  	mov eax, sys_nanosleep
    99                                  	mov rdi, timespec
   100                                  	xor esi, esi		; ignore remaining time in case of call interruption
   101                                  	syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   102                                  %endmacro
   103                                  
   104                                  
   105                                  
   106                                  global _start
   107                                  
   108                                  section .bss
   109                                  
   110 00000000 ??                      input_char: resb 1
   111                                  
   112                                  section .data
   113                                  
   114                                  	; Guardamos la plantilla del tablero (32 filas)
   115                                      board_template:
   116                                          full_line
    70 00000000 58<rep 4Eh>         <1>  times column_cells db "X"
    71 0000004E 0A0D                <1>  db 0x0a, 0xD
   117                                          %rep 30
   118                                          hollow_line
   119                                          %endrep
   118                              <1>  hollow_line
    75 00000050 58                  <2>  db "X"
    76 00000051 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000009D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000A0 58                  <2>  db "X"
    76 000000A1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000000ED 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000F0 58                  <2>  db "X"
    76 000000F1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000013D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000140 58                  <2>  db "X"
    76 00000141 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000018D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000190 58                  <2>  db "X"
    76 00000191 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000001DD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000001E0 58                  <2>  db "X"
    76 000001E1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000022D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000230 58                  <2>  db "X"
    76 00000231 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000027D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000280 58                  <2>  db "X"
    76 00000281 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000002CD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000002D0 58                  <2>  db "X"
    76 000002D1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000031D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000320 58                  <2>  db "X"
    76 00000321 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000036D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000370 58                  <2>  db "X"
    76 00000371 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000003BD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000003C0 58                  <2>  db "X"
    76 000003C1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000040D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000410 58                  <2>  db "X"
    76 00000411 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000045D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000460 58                  <2>  db "X"
    76 00000461 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000004AD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000004B0 58                  <2>  db "X"
    76 000004B1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000004FD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000500 58                  <2>  db "X"
    76 00000501 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000054D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000550 58                  <2>  db "X"
    76 00000551 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000059D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005A0 58                  <2>  db "X"
    76 000005A1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000005ED 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005F0 58                  <2>  db "X"
    76 000005F1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000063D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000640 58                  <2>  db "X"
    76 00000641 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000068D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000690 58                  <2>  db "X"
    76 00000691 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000006DD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000006E0 58                  <2>  db "X"
    76 000006E1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000072D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000730 58                  <2>  db "X"
    76 00000731 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000077D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000780 58                  <2>  db "X"
    76 00000781 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000007CD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000007D0 58                  <2>  db "X"
    76 000007D1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000081D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000820 58                  <2>  db "X"
    76 00000821 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000086D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000870 58                  <2>  db "X"
    76 00000871 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000008BD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008C0 58                  <2>  db "X"
    76 000008C1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000090D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000910 58                  <2>  db "X"
    76 00000911 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000095D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000960 58                  <2>  db "X"
    76 00000961 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000009AD 580A0D              <2>  db "X", 0x0a, 0xD
   120                                          full_line
    70 000009B0 58<rep 4Eh>         <1>  times column_cells db "X"
    71 000009FE 0A0D                <1>  db 0x0a, 0xD
   121                                      board_template_size: equ $ - board_template
   122                                  
   123                                      ; Espacio real que se usará en la ejecución
   124 00000A00 00<rep A00h>                board: times board_template_size db 0
   125                                      board_size: equ board_template_size
   126                                  
   127                                  	; Added for the terminal issue
   128 00001400 00<rep 24h>             	termios:        times 36 db 0
   129                                  	stdin:          equ 0
   130                                  	ICANON:         equ 1<<1
   131                                  	ECHO:           equ 1<<3
   132                                  	VTIME: 			equ 5
   133                                  	VMIN:			equ 6
   134                                  	CC_C:			equ 18
   135                                  
   136                                  section .text
   137                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   138                                  canonical_off:
   139 0000012B E86F000000                      call read_stdin_termios
   140                                  
   141                                          ; clear canonical bit in local mode flags
   142 00000130 50                              push rax
   143 00000131 B802000000                      mov eax, ICANON
   144 00000136 F7D0                            not eax
   145 00000138 2105(0C140000)                  and [termios+12], eax
   146 0000013E C605(17140000)00        		mov byte[termios+CC_C+VTIME], 0
   147 00000145 C605(18140000)00        		mov byte[termios+CC_C+VMIN], 0
   148 0000014C 58                              pop rax
   149                                  
   150 0000014D E86C000000                      call write_stdin_termios
   151 00000152 C3                              ret
   152                                  
   153                                  echo_off:
   154 00000153 E847000000                      call read_stdin_termios
   155                                  
   156                                          ; clear echo bit in local mode flags
   157 00000158 50                              push rax
   158 00000159 B808000000                      mov eax, ECHO
   159 0000015E F7D0                            not eax
   160 00000160 2105(0C140000)                  and [termios+12], eax
   161 00000166 58                              pop rax
   162                                  
   163 00000167 E852000000                      call write_stdin_termios
   164 0000016C C3                              ret
   165                                  
   166                                  canonical_on:
   167 0000016D E82D000000                      call read_stdin_termios
   168                                  
   169                                          ; set canonical bit in local mode flags
   170 00000172 830D(0C140000)02                or dword [termios+12], ICANON
   171 00000179 C605(17140000)00        		mov byte[termios+CC_C+VTIME], 0
   172 00000180 C605(18140000)01        		mov byte[termios+CC_C+VMIN], 1
   173 00000187 E832000000                      call write_stdin_termios
   174 0000018C C3                              ret
   175                                  
   176                                  echo_on:
   177 0000018D E80D000000                      call read_stdin_termios
   178                                  
   179                                          ; set echo bit in local mode flags
   180 00000192 830D(0C140000)08                or dword [termios+12], ECHO
   181                                  
   182 00000199 E820000000                      call write_stdin_termios
   183 0000019E C3                              ret
   184                                  
   185                                  read_stdin_termios:
   186 0000019F 50                              push rax
   187 000001A0 53                              push rbx
   188 000001A1 51                              push rcx
   189 000001A2 52                              push rdx
   190                                  
   191 000001A3 B836000000                      mov eax, 36h
   192 000001A8 BB00000000                      mov ebx, stdin
   193 000001AD B901540000                      mov ecx, 5401h
   194 000001B2 BA[00140000]                    mov edx, termios
   195 000001B7 CD80                            int 80h
   196                                  
   197 000001B9 5A                              pop rdx
   198 000001BA 59                              pop rcx
   199 000001BB 5B                              pop rbx
   200 000001BC 58                              pop rax
   201 000001BD C3                              ret
   202                                  
   203                                  write_stdin_termios:
   204 000001BE 50                              push rax
   205 000001BF 53                              push rbx
   206 000001C0 51                              push rcx
   207 000001C1 52                              push rdx
   208                                  
   209 000001C2 B836000000                      mov eax, 36h
   210 000001C7 BB00000000                      mov ebx, stdin
   211 000001CC B902540000                      mov ecx, 5402h
   212 000001D1 BA[00140000]                    mov edx, termios
   213 000001D6 CD80                            int 80h
   214                                  
   215 000001D8 5A                              pop rdx
   216 000001D9 59                              pop rcx
   217 000001DA 5B                              pop rbx
   218 000001DB 58                              pop rax
   219 000001DC C3                              ret
   220                                  
   221                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   222                                  
   223                                  char_equal: equ 61
   224                                  char_space: equ 32
   225                                  char_O: equ 79
   226                                  left_direction: equ -1
   227                                  right_direction: equ 1
   228                                  
   229                                  
   230                                  section .data
   231                                  
   232                                  ; Mensajes para los niveles
   233 00001424 4E4956454C20                level_msg: db "NIVEL "
   234                                      level_msg_len: equ $ - level_msg
   235 0000142A 31                          level_1_char: db "1"
   236 0000142B 32                          level_2_char: db "2"
   237 0000142C 33                          level_3_char: db "3"
   238 0000142D 34                          level_4_char: db "4"
   239 0000142E 35                          level_5_char: db "5"
   240                                      level_char_len: equ 1
   241                                  
   242                                      ; Timespec para la pausa del mensaje de nivel
   243                                      level_display_time:
   244 0000142F 0100000000000000                lvl_tv_sec dq 1           ; 1 segundo
   245 00001437 0000000000000000                lvl_tv_nsec dq 0
   246                                          
   247 0000143F [3613000000000000]      	pallet_position dq board + 38 + 29 * (column_cells +2)
   248 00001447 0500000000000000        	pallet_size dq 5
   249                                  
   250 0000144F 2800000000000000        	ball_x_pos: dq 40
   251 00001457 1C00000000000000        	ball_y_pos: dq 28
   252 0000145F 0100000000000000            ball_direction_x dq 1    ; 1 = derecha, -1 = izquierda
   253 00001467 FFFFFFFFFFFFFFFF            ball_direction_y dq -1   ; -1 = arriba, 1 = abajo
   254 0000146F 00                          ball_moving db 0         ; 0 = estática, 1 = en movimiento
   255                                  
   256                                  ; Definir los límites de la pantalla o área de juego
   257                                      board_top_left_x equ 1
   258                                      board_top_left_y equ 1
   259                                      board_bottom_right_x equ column_cells - 1
   260                                      board_bottom_right_y equ row_cells
   261                                  
   262                                      ; Limites laterales
   263                                      left_edge equ board_top_left_x               ; Límite izquierdo en la primera columna
   264                                      right_edge equ board_bottom_right_x         ; Límite derecho en la última columna
   265                                  
   266                                      ; O también puedes hacerlo así si prefieres usando las coordenadas en memoria para obtener la ubicación exacta:
   267 00001470 [500A000000000000]          left_edge_position dq board + (board_top_left_y * (column_cells + 2)) ; Coordenada de la parte izquierda del marco
   268 00001478 [9C0A000000000000]          right_edge_position dq board + (board_top_left_y * (column_cells + 2) + board_bottom_right_x - 1) ; Coordenada de la parte derecha del marco
   269                                  
   270                                      ; Definición de tipos de bloques
   271 00001480 555555555555                block_type_1: db "UUUUUU"    ; Durabilidad 1
   272 00001486 4F4F4F4F4F4F                block_type_2: db "OOOOOO"    ; Durabilidad 2
   273 0000148C 444444444444                block_type_3: db "DDDDDD"    ; Durabilidad 3
   274 00001492 4C4C4C4C4C4C                block_type_4: db "LLLLLL"    ; Durabilidad 4
   275 00001498 565656565656                block_type_5: db "VVVVVV"    ; Durabilidad 5
   276 0000149E 383838383838                block_type_6: db "888888"    ; Durabilidad 6
   277                                      block_length: equ 6        ; Longitud de cada bloque
   278                                  
   279                                      ; Estructura para el nivel actual
   280 000014A4 01                          current_level db 1
   281 000014A5 00                          blocks_remaining db 0
   282                                  
   283                                      ; Definición del nivel 1 (ejemplo con múltiples bloques)destroyed_blocks
   284                                      ; Formato: x_pos, y_pos, tipo_bloque, durabilidad_actual
   285                                      level1_blocks:
   286                                          ; Tercera fila (tipo 3)
   287 000014A6 3807030253                      db 56, 7, 3, 2, 'S'    ; Bloque 7
   288 000014AB 3D09030153                      db 61, 9, 3, 1, 'S'    ; Bloque 7
   289 000014B0 1207030153                      db 18, 7, 3, 1, 'S'    ; Bloque 7
   290                                      level1_blocks_count equ 3   ; Cantidad total de bloques
   291                                  
   292                                      ; Nivel 2: Bloques de prueba
   293                                      level2_blocks:
   294 000014B5 3C07010145                      db 60, 7, 1, 1, 'E'    ; Un bloque simple en el nivel 2   ; Un bloque simple en el nivel 2
   295                                      level2_blocks_count equ 1
   296                                  
   297                                      ; Nivel 3
   298                                      level3_blocks:
   299 000014BA 3C07020145                      db 60, 7, 2, 1, 'E'    ; Bloque 1
   300                                  
   301                                      level3_blocks_count equ 1
   302                                  
   303                                      ; Nivel 4
   304                                      level4_blocks:
   305 000014BF 3C07040145                      db 60, 7, 4, 1, 'E'    ; Bloque 1
   306                                      level4_blocks_count equ 1
   307                                  
   308                                      ; Nivel 5
   309                                      level5_blocks:
   310 000014C4 3C07050145                      db 60, 7, 5, 1, 'E'    ; Bloque 1
   311                                      level5_blocks_count equ 1
   312                                  
   313                                      ; Array para mantener el estado de los bloques
   314 000014C9 00<rep 64h>                 block_states: times 100 db 0  ; Durabilidad actual de cada bloque
   315                                  
   316                                      
   317                                      ; Variables para almacenar los valores
   318 0000152D 0000000000000000            current_score dq 0          ; Score actual
   319 00001535 00                          destroyed_blocks db 0       ; Bloques destruidos en el nivel actual
   320                                      
   321                                      ; Buffer para convertir números a string
   322 00001536 00<rep 14h>                 number_buffer: times 20 db 0
   323                                  
   324 0000154A 4023242640                  enemy_chars db "@", "#", "$", "&", "@"    ; El nivel 1 y 5 comparten el mismo caracter (@)
   325                                      
   326                                      ; Estructura para los enemigos (x, y, activo)
   327 0000154F 00<rep 1Eh>                 enemies: times 10 * 3 db 0     ; Máximo 5 enemigos, cada uno con 3 bytes (x, y, activo)
   328 0000156D 0A                          enemies_count db 10            ; Cantidad de enemigos activos
   329                                      
   330 0000156E 3200000000000000            enemy_points dq 50              ; Puntos por destruir un enemigo
   331 00001576 00                          enemy_move_counter db 0         ; Contador para controlar velocidad de movimiento
   332 00001577 02                          enemy_move_delay db 2           ; Mover enemigos cada N ciclos
   333 00001578 00                          enemy_move_total db 0      ; Contador total de movimientos
   334 00001579 00                          enemy_target db 0          ; 0 = persigue bola, 1 = persigue paleta
   335 0000157A 14                          MOVEMENT_THRESHOLD db 20   ; Número de movimientos antes de cambiar objetivo
   336                                   ;Formato: número de bloques destruidos necesario para que aparezca cada enemigo
   337                                      ; Añade esto en la sección .dataa
   338 0000157B 00010206080A0C0E10-         level1_spawn_points: db 0, 1, 2, 6, 8, 10, 12, 14, 16, 18    ; 10 enemigos, cada 2 bloques
   338 00001584 12                 
   339 00001585 01030507090B0D0F11-         level2_spawn_points: db 1, 3, 5, 7, 9, 11, 13, 15, 17, 19    ; 10 enemigos, cada 2 bloques
   339 0000158E 13                 
   340 0000158F 000306090C0F121518-         level3_spawn_points: db 0, 3, 6, 9, 12, 15, 18, 21, 24, 27   ; 10 enemigos, cada 3 bloques
   340 00001598 1B                 
   341 00001599 0104070A0D10131619-         level4_spawn_points: db 1, 4, 7, 10, 13, 16, 19, 22, 25, 28  ; 10 enemigos, cada 3 bloques
   341 000015A2 1C                 
   342 000015A3 00050A0F14191E2328-         level5_spawn_points: db 0, 5, 10, 15, 20, 25, 30, 35, 40, 45 ; 10 enemigos, cada 5 bloques
   342 000015AC 2D                 
   343                                          ; Arreglo de punteros a los spawn points de cada nivel
   344                                      spawn_points_table:
   345 000015AD [7B15000000000000]              dq level1_spawn_points
   346 000015B5 [8515000000000000]              dq level2_spawn_points
   347 000015BD [8F15000000000000]              dq level3_spawn_points
   348 000015C5 [9915000000000000]              dq level4_spawn_points
   349 000015CD [A315000000000000]              dq level5_spawn_points
   350                                  
   351                                      ; Variables para el comportamiento de enemigos
   352 000015D5 1E                          BEHAVIOR_CHANGE_TIME db 30    ; Ciclos antes de cambiar comportamiento
   353 000015D6 00                          behavior_counter db 0          ; Contador para cambio de comportamiento
   354 000015D7 00                          current_behavior db 0          ; 0 = persigue bola, 1 = persigue paleta
   355 000015D8 00<rep Ah>                  enemy_spawns_triggered: times 10 db 0  ; 0 = no spawned, 1 = spawned
   356                                  
   357 000015E2 50756E74616A653A20-         score_label: db "Puntaje: [          ]", 0xA, 0xD  ; 10 espacios para el número
   357 000015EB 5B2020202020202020-
   357 000015F4 20205D0A0D         
   358                                      score_label_len: equ $ - score_label
   359 000015F9 426C6F717565732064-         blocks_label: db "Bloques destruidos: [   ]", 0xA, 0xD  ; 3 espacios para el número
   359 00001602 657374727569646F73-
   359 0000160B 3A205B2020205D0A0D 
   360                                      blocks_label_len: equ $ - blocks_label
   361                                      
   362                                      ; Posición donde insertar los números en los labels
   363                                      score_pos equ 10    ; Posición después de "Puntaje: ["
   364                                      blocks_pos equ 20   ; Posición después de "Bloques destruidos: ["
   365                                      
   366                                      ; Definición de las vidas (x, y, estado)
   367                                      ; Formato: posición_x, posición_y, estado (1 = activa, 0 = inactiva)
   368                                      lives_data: 
   369 00001614 021E01                          db 2, 30, 1     ; Vida 1 (activa)
   370 00001617 041E01                          db 4, 30, 1     ; Vida 2 (activa)
   371 0000161A 061E01                          db 6, 30, 1     ; Vida 3 (inactiva)
   372 0000161D 081E01                          db 8, 30, 1     ; Vida 4 (inactiva)
   373 00001620 0A1E01                          db 10, 30, 1    ; Vida 5 (inactiva)
   374 00001623 0C1E01                          db 12, 30, 1    ; Vida 6 (inactiva)
   375 00001626 0E1E01                          db 14, 30, 1    ; Vida 7 (inactiva)
   376                                      lives_count equ 7    ; Total de vidas
   377 00001629 5E                          life_char db "^"    
   378 0000162A 07                          current_lives db 7   ; Contador de vidas activas actual
   379                                  
   380                                  ; Estructura para almacenar las letras y sus posiciones
   381                                      ; Formato: x, y, letra, activo (1 = activo, 0 = inactivo)
   382 0000162B 00<rep 190h>                letters_map: times 100 * 4 db 0  ; Espacio para 100 letras
   383 000017BB 00                          letters_count db 0   
   384                                  
   385                                  section .text
   386                                  
   387                                  ;	Function: print_ball
   388                                  ; This function displays the position of the ball
   389                                  ; Arguments: none
   390                                  ;
   391                                  ; Return:
   392                                  ;	Void
   393                                  
   394                                  ; Función para imprimir las vidas
   395                                  ; Función modificada para imprimir las vidas
   396                                  print_lives:
   397 000001DD 55                          push rbp
   398 000001DE 4889E5                      mov rbp, rsp
   399                                      
   400 000001E1 4D31E4                      xor r12, r12                    ; Índice de la vida actual
   401                                      
   402                                      .print_loop:
   403 000001E4 4983FC07                        cmp r12, lives_count
   404 000001E8 7D45                            jge .end
   405                                          
   406                                          ; Calcular offset de la vida actual
   407 000001EA 4C89E0                          mov rax, r12
   408 000001ED 486BC003                        imul rax, 3                     ; Cada vida ocupa 3 bytes (x, y, estado)
   409 000001F1 488DB0[14160000]                lea rsi, [lives_data + rax]
   410                                          
   411                                          ; Calcular posición en el tablero
   412 000001F8 4C0FB606                        movzx r8, byte [rsi]            ; X
   413 000001FC 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
   414                                          
   415                                          ; Calcular offset en el tablero
   416 00000201 B84E000000                      mov rax, column_cells
   417 00000206 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
   418 0000020A 49F7E1                          mul r9
   419 0000020D 4C01C0                          add rax, r8
   420 00000210 488DB8[000A0000]                lea rdi, [board + rax]
   421                                          
   422                                          ; Verificar estado de la vida y dibujar el carácter correspondiente
   423 00000217 807E0201                        cmp byte [rsi + 2], 1
   424 0000021B 7405                            je .draw_active
   425                                          
   426                                          ; Si está inactiva, dibujar espacio
   427 0000021D C60720                          mov byte [rdi], ' '
   428 00000220 EB08                            jmp .next_life
   429                                          
   430                                      .draw_active:
   431                                          ; Si está activa, dibujar el símbolo de vida
   432 00000222 8A05(29160000)                  mov al, [life_char]
   433 00000228 8807                            mov [rdi], al
   434                                          
   435                                      .next_life:
   436 0000022A 49FFC4                          inc r12
   437 0000022D EBB5                            jmp .print_loop
   438                                          
   439                                      .end:
   440 0000022F 5D                              pop rbp
   441 00000230 C3                              ret
   442                                  
   443                                  ; Función para desactivar una vida
   444                                  ; Función modificada para perder una vida
   445                                  lose_life:
   446 00000231 55                          push rbp
   447 00000232 4889E5                      mov rbp, rsp
   448                                      
   449                                      ; Verificar si aún quedan vidas
   450 00000235 803D(2A160000)00            cmp byte [current_lives], 0
   451 0000023C 0F8493000000                je .game_lost
   452                                      
   453                                      ; Encontrar la última vida activa
   454 00000242 B907000000                  mov rcx, lives_count
   455 00000247 48FFC9                      dec rcx                     ; Empezar desde la última vida
   456                                      
   457                                      .find_active_life:
   458 0000024A 4889C8                          mov rax, rcx
   459 0000024D 486BC003                        imul rax, 3            ; Cada vida ocupa 3 bytes
   460 00000251 488DB0[14160000]                lea rsi, [lives_data + rax]
   461 00000258 807E0201                        cmp byte [rsi + 2], 1  ; Verificar si está activa
   462 0000025C 7407                            je .deactivate_life
   463 0000025E 48FFC9                          dec rcx
   464 00000261 79E7                            jns .find_active_life  ; Continuar si no hemos llegado a -1
   465 00000263 EB70                            jmp .game_lost         ; Si no encontramos vidas activas
   466                                          
   467                                      .deactivate_life:
   468                                          ; Calcular posición correcta en el tablero para borrar la vida
   469 00000265 4C0FB606                        movzx r8, byte [rsi]            ; X
   470 00000269 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
   471                                          
   472                                          ; Calcular offset en el tablero: Y * (column_cells + 2) + X
   473 0000026E B84E000000                      mov rax, column_cells
   474 00000273 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
   475 00000277 49F7E1                          mul r9
   476 0000027A 4C01C0                          add rax, r8
   477 0000027D 488DB8[000A0000]                lea rdi, [board + rax]
   478                                          
   479                                          ; Borrar visualmente la vida
   480 00000284 C60720                          mov byte [rdi], ' '             
   481                                          
   482                                          ; Desactivar la vida en los datos
   483 00000287 C6460200                        mov byte [rsi + 2], 0          
   484 0000028B FE0D(2A160000)                  dec byte [current_lives]
   485                                          
   486                                          ; Borrar visualmente la paleta anterior
   487 00000291 4C8B05(3F140000)                mov r8, [pallet_position]
   488 00000298 488B0D(47140000)                mov rcx, [pallet_size]
   489                                          .erase_pallet_loop:
   490 0000029F 41C60020                            mov byte [r8], ' '          ; Reemplazar cada posición con un espacio
   491 000002A3 49FFC0                              inc r8
   492 000002A6 48FFC9                              dec rcx
   493 000002A9 75F4                                jnz .erase_pallet_loop
   494                                          
   495                                  
   496                                          ; Reiniciar posición de la bola y la paleta
   497 000002AB 48C705(4F140000)28-             mov qword [ball_x_pos], 40
   497 000002B3 000000             
   498 000002B6 48C705(57140000)1C-             mov qword [ball_y_pos], 28
   498 000002BE 000000             
   499 000002C1 C605(6F140000)00                mov byte [ball_moving], 0
   500 000002C8 48C705(3F140000)-               mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
   500 000002CF [36130000]         
   501                                          
   502 000002D3 EB07                            jmp .end
   503                                          
   504                                      .game_lost:
   505 000002D5 E81C000000                      call game_lost
   506 000002DA EB00                            jmp .end
   507                                          
   508                                      .end:
   509 000002DC 5D                              pop rbp
   510 000002DD C3                              ret
   511                                  ; Función modificada para verificar colisión con el borde inferior
   512                                  check_bottom_collision:
   513 000002DE 55                          push rbp
   514 000002DF 4889E5                      mov rbp, rsp
   515                                      
   516                                      ; Verificar si la bola está en la última fila (row_cells - 1)
   517 000002E2 488B05(57140000)            mov rax, [ball_y_pos]
   518 000002E9 4883F81E                    cmp rax, row_cells - 2
   519 000002ED 7505                        jne .no_collision
   520                                      
   521                                      ; Si hay colisión, perder una vida
   522 000002EF E83DFFFFFF                  call lose_life
   523                                      
   524                                      .no_collision:
   525 000002F4 5D                              pop rbp
   526 000002F5 C3                              ret
   527                                  
   528                                  ; Nueva función para game over
   529                                  game_lost:
   530                                      ; Limpiar la pantalla
   531                                      print clear, clear_length
    82 000002F6 B801000000          <1>  mov eax, sys_write
    83 000002FB BF01000000          <1>  mov edi, 1
    84 00000300 48BE-               <1>  mov rsi, %1
    84 00000302 [1000000000000000]  <1>
    85 0000030A BA07000000          <1>  mov edx, %2
    86 0000030F 0F05                <1>  syscall
   532                                      
   533                                      ; Mostrar mensaje de derrota
   534                                      section .data
   535 000017BC C2A148617320706572-             lost_msg: db "¡Has perdido!", 0xA, 0xD
   535 000017C5 6469646F210A0D     
   536                                          lost_msg_len: equ $ - lost_msg
   537                                      section .text
   538                                      
   539                                      ; Imprimir mensaje de derrota
   540                                      print lost_msg, lost_msg_len
    82 00000311 B801000000          <1>  mov eax, sys_write
    83 00000316 BF01000000          <1>  mov edi, 1
    84 0000031B 48BE-               <1>  mov rsi, %1
    84 0000031D [BC17000000000000]  <1>
    85 00000325 BA10000000          <1>  mov edx, %2
    86 0000032A 0F05                <1>  syscall
   541                                      print score_msg, score_msg_len
    82 0000032C B801000000          <1>  mov eax, sys_write
    83 00000331 BF01000000          <1>  mov edi, 1
    84 00000336 48BE-               <1>  mov rsi, %1
    84 00000338 [EA17000000000000]  <1>
    85 00000340 BA0F000000          <1>  mov edx, %2
    86 00000345 0F05                <1>  syscall
   542                                      
   543                                      ; Mostrar puntaje final
   544 00000347 488B05(2D150000)            mov rax, [current_score]
   545 0000034E 48BF-                       mov rdi, number_buffer
   545 00000350 [3615000000000000] 
   546 00000358 E80B070000                  call number_to_string
   547                                      print number_buffer, 20
    82 0000035D B801000000          <1>  mov eax, sys_write
    83 00000362 BF01000000          <1>  mov edi, 1
    84 00000367 48BE-               <1>  mov rsi, %1
    84 00000369 [3615000000000000]  <1>
    85 00000371 BA14000000          <1>  mov edx, %2
    86 00000376 0F05                <1>  syscall
   548                                      
   549                                      ; Esperar un momento antes de salir
   550 00000378 48C7057DFCFFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
   550 00000381 0000               
   551 00000383 48C7057AFCFFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
   551 0000038C 0000               
   552                                      sleeptime
    98 0000038E B823000000          <1>  mov eax, sys_nanosleep
    99 00000393 48BF-               <1>  mov rdi, timespec
    99 00000395 [0000000000000000]  <1>
   100 0000039D 31F6                <1>  xor esi, esi
   101 0000039F 0F05                <1>  syscall
   553                                      
   554 000003A1 E99B0E0000                  jmp exit
   555                                  
   556                                  
   557                                  ; Función para registrar una nueva letra en el mapa
   558                                  ; Entrada:
   559                                  ;   al - letra a registrar
   560                                  ;   r8b - posición x
   561                                  ;   r9b - posición y
   562                                  register_letter:
   563 000003A6 55                          push rbp
   564 000003A7 4889E5                      mov rbp, rsp
   565 000003AA 53                          push rbx
   566 000003AB 51                          push rcx
   567                                      
   568                                      ; Encontrar un espacio libre en el mapa
   569 000003AC 4831C9                      xor rcx, rcx
   570 000003AF 480FB615(BB170000)          movzx rdx, byte [letters_count]
   571                                      
   572                                      .find_slot:
   573 000003B7 4883F964                        cmp rcx, 100              ; Máximo de letras
   574 000003BB 7D27                            jge .end                  ; Si no hay espacio, salir
   575                                          
   576 000003BD 488D1C8D[2B160000]              lea rbx, [letters_map + rcx * 4]
   577 000003C5 807B0300                        cmp byte [rbx + 3], 0    ; Verificar si el slot está inactivo
   578 000003C9 7405                            je .found_slot
   579                                          
   580 000003CB 48FFC1                          inc rcx
   581 000003CE EBE7                            jmp .find_slot
   582                                          
   583                                      .found_slot:
   584                                          ; Guardar la información de la letra
   585 000003D0 448803                          mov [rbx], r8b           ; x
   586 000003D3 44884B01                        mov [rbx + 1], r9b       ; y
   587 000003D7 884302                          mov [rbx + 2], al        ; letra
   588 000003DA C6430301                        mov byte [rbx + 3], 1    ; marcar como activo
   589                                          
   590 000003DE FE05(BB170000)                  inc byte [letters_count]
   591                                          
   592                                      .end:
   593 000003E4 59                              pop rcx
   594 000003E5 5B                              pop rbx
   595 000003E6 5D                              pop rbp
   596 000003E7 C3                              ret
   597                                  
   598                                  ; Función para imprimir todas las letras registradas
   599                                  print_letters:
   600 000003E8 55                          push rbp
   601 000003E9 4889E5                      mov rbp, rsp
   602 000003EC 53                          push rbx
   603 000003ED 51                          push rcx
   604                                      
   605 000003EE 4831C9                      xor rcx, rcx
   606                                      
   607                                      .print_loop:
   608 000003F1 4883F964                        cmp rcx, 100              ; Máximo de letras
   609 000003F5 7D37                            jge .end
   610                                          
   611                                          ; Obtener puntero a la letra actual
   612 000003F7 488D1C8D[2B160000]              lea rbx, [letters_map + rcx * 4]
   613                                          
   614                                          ; Verificar si está activa
   615 000003FF 807B0300                        cmp byte [rbx + 3], 0
   616 00000403 7424                            je .next_letter
   617                                          
   618                                          ; Calcular posición en el tablero
   619 00000405 4C0FB603                        movzx r8, byte [rbx]      ; x
   620 00000409 4C0FB64B01                      movzx r9, byte [rbx + 1]  ; y
   621                                          
   622                                          ; Calcular offset en el tablero
   623 0000040E B84E000000                      mov rax, column_cells
   624 00000413 4883C002                        add rax, 2                ; Incluir caracteres de nueva línea
   625 00000417 49F7E1                          mul r9
   626 0000041A 4C01C0                          add rax, r8
   627 0000041D 488DB8[000A0000]                lea rdi, [board + rax]
   628                                          
   629                                          ; Imprimir la letra
   630 00000424 8A4302                          mov al, [rbx + 2]
   631 00000427 8807                            mov [rdi], al
   632                                          
   633                                      .next_letter:
   634 00000429 48FFC1                          inc rcx
   635 0000042C EBC3                            jmp .print_loop
   636                                          
   637                                      .end:
   638 0000042E 59                              pop rcx
   639 0000042F 5B                              pop rbx
   640 00000430 5D                              pop rbp
   641 00000431 C3                              ret
   642                                  
   643                                  ; Función para borrar una letra específica
   644                                  ; Entrada:
   645                                  ;   r8b - posición x
   646                                  ;   r9b - posición y
   647                                  remove_letter:
   648 00000432 55                          push rbp
   649 00000433 4889E5                      mov rbp, rsp
   650 00000436 53                          push rbx
   651 00000437 51                          push rcx
   652                                      
   653 00000438 4831C9                      xor rcx, rcx
   654                                      
   655                                      .find_loop:
   656 0000043B 4883F964                        cmp rcx, 100              ; Máximo de letras
   657 0000043F 7D2E                            jge .end
   658                                          
   659 00000441 488D1C8D[2B160000]              lea rbx, [letters_map + rcx * 4]
   660                                          
   661                                          ; Verificar si está activa y coincide la posición
   662 00000449 807B0300                        cmp byte [rbx + 3], 0
   663 0000044D 741B                            je .next_letter
   664                                          
   665 0000044F 8A03                            mov al, [rbx]
   666 00000451 4438C0                          cmp al, r8b
   667 00000454 7514                            jne .next_letter
   668                                          
   669 00000456 8A4301                          mov al, [rbx + 1]
   670 00000459 4438C8                          cmp al, r9b
   671 0000045C 750C                            jne .next_letter
   672                                          
   673                                          ; Encontrada la letra, desactivarla
   674 0000045E C6430300                        mov byte [rbx + 3], 0
   675 00000462 FE0D(BB170000)                  dec byte [letters_count]
   676 00000468 EB05                            jmp .end
   677                                          
   678                                      .next_letter:
   679 0000046A 48FFC1                          inc rcx
   680 0000046D EBCC                            jmp .find_loop
   681                                          
   682                                      .end:
   683 0000046F 59                              pop rcx
   684 00000470 5B                              pop rbx
   685 00000471 5D                              pop rbp
   686 00000472 C3                              ret
   687                                  
   688                                  print_ball:
   689 00000473 4C8B05(4F140000)        	mov r8, [ball_x_pos]
   690 0000047A 4C8B0D(57140000)        	mov r9, [ball_y_pos]
   691 00000481 4981C0[000A0000]        	add r8, board
   692                                  
   693 00000488 4C89C9                  	mov rcx, r9
   694 0000048B B850000000              	mov rax, column_cells + 2
   695 00000490 48F7E9                  	imul rcx
   696                                  	
   697 00000493 4901C0                  	add r8, rax
   698 00000496 41C6004F                	mov byte [r8], char_O
   699 0000049A C3                      	ret
   700                                  
   701                                  	
   702                                  	;mov rax, board + r8 + r9 * (column_cells + 2)
   703                                  	
   704                                  
   705                                  
   706                                  
   707                                  ;	Function: print_pallet
   708                                  ; This function moves the pallet in the game
   709                                  ; Arguments: none
   710                                  ;
   711                                  ; Return;
   712                                  ;	void
   713                                  print_pallet:
   714 0000049B 4C8B05(3F140000)        	mov r8, [pallet_position]
   715 000004A2 488B0D(47140000)        	mov rcx, [pallet_size]
   716                                  	.write_pallet:
   717 000004A9 41C6003D                		mov byte [r8], char_equal
   718 000004AD 49FFC0                  		inc r8
   719 000004B0 48FFC9                  		dec rcx
   720 000004B3 75F4                    		jnz .write_pallet
   721                                  
   722 000004B5 C3                      	ret
   723                                  	
   724                                  ;	Function: move_pallet
   725                                  ; This function is in charge of moving the pallet in a given direction
   726                                  ; Arguments:
   727                                  ;	rdi: left direction or right direction
   728                                  ;
   729                                  ; Return:
   730                                  ;	void
   731                                  move_pallet:
   732                                      
   733 000004B6 803D(6F140000)00            cmp byte [ball_moving], 0
   734 000004BD 7507                        jne .continue_movement
   735 000004BF C605(6F140000)01            mov byte [ball_moving], 1
   736                                  
   737                                      .continue_movement:
   738 000004C6 4883FFFF                        cmp rdi, left_direction
   739 000004CA 7531                            jne .move_right
   740                                  
   741                                          .move_left:
   742                                              ; Verificar si la siguiente posición sería una X (borde izquierdo)
   743 000004CC 4C8B05(3F140000)                    mov r8, [pallet_position]
   744 000004D3 49FFC8                              dec r8              ; Verificar la posición a la izquierda
   745 000004D6 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
   746 000004D9 3C58                                cmp al, 'X'        ; Comparar si es una X
   747 000004DB 744D                                je .end            ; Si es X, no mover
   748                                              
   749 000004DD 4C8B05(3F140000)                    mov r8, [pallet_position]
   750 000004E4 4C8B0D(47140000)                    mov r9, [pallet_size]
   751 000004EB 43C64408FF20                        mov byte [r8 + r9 - 1], char_space  ; Borrar último carácter de la paleta
   752 000004F1 49FFC8                              dec r8
   753 000004F4 4C8905(3F140000)                    mov [pallet_position], r8
   754 000004FB EB2D                                jmp .end
   755                                              
   756                                          .move_right:
   757                                              ; Verificar si la siguiente posición después de la paleta sería una X
   758 000004FD 4C8B05(3F140000)                    mov r8, [pallet_position]
   759 00000504 4C8B0D(47140000)                    mov r9, [pallet_size]
   760 0000050B 4D01C8                              add r8, r9         ; Moverse al final de la paleta
   761 0000050E 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
   762 00000511 3C58                                cmp al, 'X'        ; Comparar si es una X
   763 00000513 7415                                je .end            ; Si es X, no mover
   764                                              
   765 00000515 4C8B05(3F140000)                    mov r8, [pallet_position]
   766 0000051C 41C60020                            mov byte [r8], char_space
   767 00000520 49FFC0                              inc r8
   768 00000523 4C8905(3F140000)                    mov [pallet_position], r8
   769                                          .end:
   770 0000052A C3                                  ret
   771                                  
   772                                  move_ball:
   773                                      ; Si la bola no está en movimiento, no hacer nada
   774 0000052B 803D(6F140000)00            cmp byte [ball_moving], 0
   775 00000532 0F8406010000                je .end
   776                                  
   777                                      ; Borrar la posición actual de la bola
   778 00000538 4C8B05(4F140000)            mov r8, [ball_x_pos]
   779 0000053F 4C8B0D(57140000)            mov r9, [ball_y_pos]
   780 00000546 4981C0[000A0000]            add r8, board
   781 0000054D 4C89C9                      mov rcx, r9
   782 00000550 B850000000                  mov rax, column_cells + 2
   783 00000555 48F7E9                      imul rcx
   784 00000558 4901C0                      add r8, rax
   785 0000055B 41C60020                    mov byte [r8], char_space    ; Borrar la bola actual
   786                                  
   787                                      ; Calcular siguiente posición X
   788 0000055F 4C8B05(4F140000)            mov r8, [ball_x_pos]
   789 00000566 4C8B0D(57140000)            mov r9, [ball_y_pos]
   790 0000056D 488B05(5F140000)            mov rax, [ball_direction_x]
   791 00000574 4901C0                      add r8, rax                  ; Nueva posición X
   792                                  
   793                                      ; Calcular la dirección de memoria para la siguiente posición
   794 00000577 4D89C2                      mov r10, r8
   795 0000057A 4981C2[000A0000]            add r10, board
   796 00000581 4C89C9                      mov rcx, r9
   797 00000584 B850000000                  mov rax, column_cells + 2
   798 00000589 48F7E9                      imul rcx
   799 0000058C 4901C2                      add r10, rax
   800                                  
   801                                      ; Verificar si hay una X en la siguiente posición X
   802 0000058F 418A02                      mov al, [r10]
   803 00000592 3C58                        cmp al, 'X'
   804 00000594 750C                        jne .check_block_x
   805 00000596 48F71D(5F140000)            neg qword [ball_direction_x]  ; Cambiar dirección X si hay una X
   806 0000059D E99C000000                  jmp .end
   807                                  
   808                                      .check_block_x:
   809                                          ; Verificar colisión con bloques en X
   810 000005A2 4150                            push r8     ; Guardar registros que usa check_block_collision
   811 000005A4 4151                            push r9
   812 000005A6 4152                            push r10
   813 000005A8 E813060000                      call check_block_collision
   814 000005AD 415A                            pop r10
   815 000005AF 4159                            pop r9
   816 000005B1 4158                            pop r8
   817 000005B3 4885C0                          test rax, rax
   818 000005B6 7409                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
   819 000005B8 48F71D(5F140000)                neg qword [ball_direction_x]  ; Si hay colisión, rebotar
   820 000005BF EB7D                            jmp .end
   821                                  
   822                                      .check_paddle_x:
   823                                          ; Verificar si hay una paleta (=) en la siguiente posición X
   824 000005C1 41803A3D                        cmp byte [r10], char_equal
   825 000005C5 7509                            jne .check_y_movement
   826 000005C7 48F71D(5F140000)                neg qword [ball_direction_x]  ; Cambiar dirección X si hay una paleta
   827 000005CE EB6E                            jmp .end
   828                                  
   829                                      .check_y_movement:
   830                                          ; Calcular siguiente posición Y
   831 000005D0 488B05(67140000)                mov rax, [ball_direction_y]
   832 000005D7 4901C1                          add r9, rax                  ; Nueva posición Y
   833                                  
   834                                          ; Calcular la dirección de memoria para la siguiente posición Y
   835 000005DA 4D89C2                          mov r10, r8
   836 000005DD 4981C2[000A0000]                add r10, board
   837 000005E4 4C89C9                          mov rcx, r9
   838 000005E7 B850000000                      mov rax, column_cells + 2
   839 000005EC 48F7E9                          imul rcx
   840 000005EF 4901C2                          add r10, rax
   841                                  
   842                                          ; Verificar si hay una X en la siguiente posición Y
   843 000005F2 418A02                          mov al, [r10]
   844 000005F5 3C58                            cmp al, 'X'
   845 000005F7 7509                            jne .check_block_y
   846 000005F9 48F71D(67140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una X
   847 00000600 EB3C                            jmp .end
   848                                  
   849                                      .check_block_y:
   850                                          ; Verificar colisión con bloques en Y
   851 00000602 4150                            push r8     ; Guardar registros que usa check_block_collision
   852 00000604 4151                            push r9
   853 00000606 4152                            push r10
   854 00000608 E8B3050000                      call check_block_collision
   855 0000060D 415A                            pop r10
   856 0000060F 4159                            pop r9
   857 00000611 4158                            pop r8
   858 00000613 4885C0                          test rax, rax
   859 00000616 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
   860 00000618 48F71D(67140000)                neg qword [ball_direction_y]  ; Si hay colisión, rebotar
   861 0000061F EB1D                            jmp .end
   862                                  
   863                                      .check_paddle_y:
   864                                      ; Verificar si hay una paleta (=) en la siguiente posición Y
   865 00000621 41803A3D                    cmp byte [r10], char_equal
   866 00000625 7509                        jne .update_position
   867 00000627 48F71D(67140000)            neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una paleta
   868 0000062E EB0E                        jmp .end
   869                                  
   870                                  
   871                                      .update_position:
   872 00000630 4C8905(4F140000)                mov [ball_x_pos], r8
   873 00000637 4C890D(57140000)                mov [ball_y_pos], r9
   874                                  
   875                                      .end:
   876 0000063E C3                              ret
   877                                  
   878                                  ; Función para inicializar el nivel
   879                                  ; Función para inicializar el nivel
   880                                  ; Función para mostrar el número de nivel
   881                                  display_level_number:
   882 0000063F 55                          push rbp
   883 00000640 4889E5                      mov rbp, rsp
   884                                      
   885                                      ; Limpiar la pantalla primero
   886                                      print clear, clear_length
    82 00000643 B801000000          <1>  mov eax, sys_write
    83 00000648 BF01000000          <1>  mov edi, 1
    84 0000064D 48BE-               <1>  mov rsi, %1
    84 0000064F [1000000000000000]  <1>
    85 00000657 BA07000000          <1>  mov edx, %2
    86 0000065C 0F05                <1>  syscall
   887                                      
   888                                      ; Calcular la posición central para el mensaje
   889                                      ; Para el mensaje "NIVEL X", necesitamos centrar 7 caracteres
   890 0000065E B84E000000                  mov rax, column_cells
   891 00000663 4883E807                    sub rax, 7                  ; longitud de "NIVEL X"
   892 00000667 48D1E8                      shr rax, 1                  ; dividir por 2 para centrar
   893                                      
   894                                      ; Calcular la fila central
   895 0000066A BB20000000                  mov rbx, row_cells
   896 0000066F 48D1EB                      shr rbx, 1                  ; dividir por 2 para obtener la fila central
   897                                      
   898                                      ; Calcular el offset en el buffer
   899 00000672 B950000000                  mov rcx, column_cells + 2   ; ancho total de una línea incluyendo newline
   900 00000677 48F7E3                      mul rbx                     ; multiplicar por la fila central
   901 0000067A 4801D8                      add rax, rbx                ; añadir el offset horizontal
   902                                      
   903                                      ; Escribir "NIVEL " en la posición calculada
   904 0000067D 488DB8[000A0000]            lea rdi, [board + rax]
   905 00000684 48BE-                       mov rsi, level_msg
   905 00000686 [2414000000000000] 
   906 0000068E B906000000                  mov rcx, level_msg_len
   907 00000693 F3A4                        rep movsb
   908                                      
   909                                      ; Escribir el número del nivel
   910 00000695 8A05(A4140000)              mov al, [current_level]
   911 0000069B 0430                        add al, '0'                 ; convertir a ASCII
   912 0000069D 8807                        mov [rdi], al
   913                                      
   914                                      ; Mostrar el board con el mensaje
   915                                      print board, board_size
    82 0000069F B801000000          <1>  mov eax, sys_write
    83 000006A4 BF01000000          <1>  mov edi, 1
    84 000006A9 48BE-               <1>  mov rsi, %1
    84 000006AB [000A000000000000]  <1>
    85 000006B3 BA000A0000          <1>  mov edx, %2
    86 000006B8 0F05                <1>  syscall
   916                                      
   917                                      ; Esperar un segundo
   918 000006BA B823000000                  mov rax, sys_nanosleep
   919 000006BF 48BF-                       mov rdi, level_display_time
   919 000006C1 [2F14000000000000] 
   920 000006C9 4831F6                      xor rsi, rsi
   921 000006CC 0F05                        syscall
   922                                      
   923 000006CE 5D                          pop rbp
   924 000006CF C3                          ret
   925                                  
   926                                  ; Función para inicializar un tablero vacío
   927                                  init_empty_board:
   928 000006D0 56                          push rsi
   929 000006D1 57                          push rdi
   930 000006D2 51                          push rcx
   931 000006D3 50                          push rax
   932                                  
   933 000006D4 488D35(00000000)            lea rsi, [board_template]   ; Copiar la plantilla del tablero
   934 000006DB 488D3D(000A0000)            lea rdi, [board]            ; Destino: el tablero actual
   935 000006E2 B9000A0000                  mov rcx, board_template_size
   936 000006E7 F3A4                        rep movsb                   ; Copiar el tablero
   937                                  
   938 000006E9 58                          pop rax
   939 000006EA 59                          pop rcx
   940 000006EB 5F                          pop rdi
   941 000006EC 5E                          pop rsi
   942 000006ED C3                          ret
   943                                  
   944                                  
   945                                  init_level:
   946                                      ; 1) Copiamos board_template en board para que quede "virgen"
   947 000006EE C605(35150000)00            mov byte [destroyed_blocks], 0 
   948 000006F5 E8D6FFFFFF                  call init_empty_board
   949 000006FA E840FFFFFF                  call display_level_number
   950 000006FF E8E5050000                  call init_enemies
   951                                      
   952 00000704 56                          push rsi
   953 00000705 57                          push rdi
   954 00000706 51                          push rcx
   955 00000707 50                          push rax
   956                                  
   957 00000708 488D35(00000000)            lea rsi, [board_template]
   958 0000070F 488D3D(000A0000)            lea rdi, [board]
   959 00000716 B9000A0000                  mov rcx, board_template_size
   960 0000071B F3A4                        rep movsb                 ; Copiamos la plantilla a board
   961                                  
   962 0000071D 58                          pop rax
   963 0000071E 59                          pop rcx
   964 0000071F 5F                          pop rdi
   965 00000720 5E                          pop rsi
   966                                  
   967 00000721 B90A000000                  mov rcx, 10
   968 00000726 4831C0                      xor rax, rax
   969 00000729 488D3D(D8150000)            lea rdi, [enemy_spawns_triggered]
   970 00000730 F3AA                        rep stosb      
   971                                  
   972                                      ; Verificar el nivel actual y cargar los bloques correspondientes
   973 00000732 803D(A4140000)01            cmp byte [current_level], 1
   974 00000739 7431                        je .level1
   975 0000073B 803D(A4140000)02            cmp byte [current_level], 2
   976 00000742 7454                        je .level2
   977 00000744 803D(A4140000)03            cmp byte [current_level], 3
   978 0000074B 7477                        je .level3
   979 0000074D 803D(A4140000)04            cmp byte [current_level], 4
   980 00000754 0F8492000000                je .level4
   981 0000075A 803D(A4140000)05            cmp byte [current_level], 5
   982 00000761 0F84AD000000                je .level5
   983 00000767 E9D0000000                  jmp .done
   984                                  
   985                                  
   986                                  
   987                                      .level1:
   988 0000076C C605(A5140000)03                mov byte [blocks_remaining], level1_blocks_count
   989 00000773 4831C9                          xor rcx, rcx             
   990                                          .init_loop1:
   991 00000776 4883F903                            cmp rcx, level1_blocks_count
   992 0000077A 0F8DBC000000                        jge .done
   993 00000780 4889C8                              mov rax, rcx         
   994 00000783 486BC005                            imul rax, 5         ; en vez de shl rax,2
   995 00000787 8A90[A9140000]                      mov dl, byte [level1_blocks + rax + 3]  
   996 0000078D 8891[C9140000]                      mov byte [block_states + rcx], dl
   997 00000793 48FFC1                              inc rcx
   998 00000796 EBDE                                jmp .init_loop1
   999                                  
  1000                                      .level2:
  1001 00000798 C605(A5140000)01                mov byte [blocks_remaining], level2_blocks_count
  1002 0000079F 4831C9                          xor rcx, rcx             
  1003                                          .init_loop2:
  1004 000007A2 4883F901                            cmp rcx, level2_blocks_count
  1005 000007A6 0F8D90000000                        jge .done
  1006 000007AC 4889C8                              mov rax, rcx         
  1007 000007AF 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1008 000007B3 8A90[B8140000]                      mov dl, byte [level2_blocks + rax + 3]  
  1009 000007B9 8891[C9140000]                      mov byte [block_states + rcx], dl
  1010 000007BF 48FFC1                              inc rcx
  1011 000007C2 EBDE                                jmp .init_loop2
  1012                                      .level3:
  1013 000007C4 C605(A5140000)01                mov byte [blocks_remaining], level3_blocks_count
  1014 000007CB 4831C9                          xor rcx, rcx             
  1015                                          .init_loop3:
  1016 000007CE 4883F901                            cmp rcx, level3_blocks_count
  1017 000007D2 7D68                                jge .done
  1018 000007D4 4889C8                              mov rax, rcx         
  1019 000007D7 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1020 000007DB 8A90[BD140000]                      mov dl, byte [level3_blocks + rax + 3]  
  1021 000007E1 8891[C9140000]                      mov byte [block_states + rcx], dl
  1022 000007E7 48FFC1                              inc rcx
  1023 000007EA EBE2                                jmp .init_loop3
  1024                                  
  1025                                      .level4:
  1026 000007EC C605(A5140000)01                mov byte [blocks_remaining], level4_blocks_count
  1027 000007F3 4831C9                          xor rcx, rcx             
  1028                                          .init_loop4:
  1029 000007F6 4883F901                            cmp rcx, level4_blocks_count
  1030 000007FA 7D40                                jge .done
  1031 000007FC 4889C8                              mov rax, rcx         
  1032 000007FF 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1033 00000803 8A90[C2140000]                      mov dl, byte [level4_blocks + rax + 3]  
  1034 00000809 8891[C9140000]                      mov byte [block_states + rcx], dl
  1035 0000080F 48FFC1                              inc rcx
  1036 00000812 EBE2                                jmp .init_loop4
  1037                                  
  1038                                      .level5:
  1039 00000814 C605(A5140000)01                mov byte [blocks_remaining], level5_blocks_count
  1040 0000081B 4831C9                          xor rcx, rcx             
  1041                                          .init_loop5:
  1042 0000081E 4883F901                            cmp rcx, level5_blocks_count
  1043 00000822 7D18                                jge .done
  1044 00000824 4889C8                              mov rax, rcx         
  1045 00000827 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1046 0000082B 8A90[C7140000]                      mov dl, byte [level5_blocks + rax + 3]  
  1047 00000831 8891[C9140000]                      mov byte [block_states + rcx], dl
  1048 00000837 48FFC1                              inc rcx
  1049 0000083A EBE2                                jmp .init_loop5
  1050                                      .done:
  1051 0000083C C3                              ret
  1052                                  
  1053                                  
  1054                                  ; Función para verificar y manejar la transición de nivel
  1055                                  check_level_complete:
  1056                                      ; Verificar si quedan bloques
  1057 0000083D 803D(A5140000)00            cmp byte [blocks_remaining], 0
  1058 00000844 753C                        jne .not_complete
  1059                                      
  1060                                      ; Incrementar el nivel
  1061 00000846 FE05(A4140000)              inc byte [current_level]
  1062                                      
  1063                                      ; Verificar si hemos completado todos los niveles (asumiendo 2 niveles por ahora)
  1064 0000084C 803D(A4140000)06            cmp byte [current_level], 6
  1065 00000853 742E                        je game_win
  1066                                      
  1067                                      ; Reinicializar el juego para el siguiente nivel
  1068 00000855 E894FEFFFF                  call init_level
  1069                                      
  1070                                      ; Reinicializar la posición de la bola y la paleta
  1071 0000085A 48C705(4F140000)28-         mov qword [ball_x_pos], 40
  1071 00000862 000000             
  1072 00000865 48C705(57140000)1C-         mov qword [ball_y_pos], 28
  1072 0000086D 000000             
  1073 00000870 C605(6F140000)00            mov byte [ball_moving], 0
  1074 00000877 48C705(3F140000)-           mov qword [pallet_position], board + 40 + 29 * (column_cells + 2)
  1074 0000087E [38130000]         
  1075                                      
  1076                                      .not_complete:
  1077 00000882 C3                              ret
  1078                                  
  1079                                      ; Nueva función para manejar la victoria del juego
  1080                                  game_win:
  1081                                      ; Limpiar la pantalla primero
  1082                                      print clear, clear_length
    82 00000883 B801000000          <1>  mov eax, sys_write
    83 00000888 BF01000000          <1>  mov edi, 1
    84 0000088D 48BE-               <1>  mov rsi, %1
    84 0000088F [1000000000000000]  <1>
    85 00000897 BA07000000          <1>  mov edx, %2
    86 0000089C 0F05                <1>  syscall
  1083                                      
  1084                                      ; Mensaje de victoria
  1085 0000089E 488B05(2D150000)            mov rax, [current_score]    ; Obtener el puntaje final
  1086 000008A5 48BF-                       mov rdi, number_buffer      ; Convertir a string
  1086 000008A7 [3615000000000000] 
  1087 000008AF E8B4010000                  call number_to_string
  1088                                      
  1089                                      ; Definir mensaje de victoria
  1090                                      section .data
  1091 000017CC C2A146656C69636964-             win_msg: db "¡Felicidades! ¡Has ganado!", 0xA, 0xD
  1091 000017D5 616465732120C2A148-
  1091 000017DE 61732067616E61646F-
  1091 000017E7 210A0D             
  1092                                          win_msg_len: equ $ - win_msg
  1093 000017EA 50756E74616A652066-             score_msg: db "Puntaje final: "
  1093 000017F3 696E616C3A20       
  1094                                          score_msg_len: equ $ - score_msg
  1095                                      section .text
  1096                                      
  1097                                      ; Imprimir mensajes
  1098                                      print win_msg, win_msg_len
    82 000008B4 B801000000          <1>  mov eax, sys_write
    83 000008B9 BF01000000          <1>  mov edi, 1
    84 000008BE 48BE-               <1>  mov rsi, %1
    84 000008C0 [CC17000000000000]  <1>
    85 000008C8 BA1E000000          <1>  mov edx, %2
    86 000008CD 0F05                <1>  syscall
  1099                                      print score_msg, score_msg_len
    82 000008CF B801000000          <1>  mov eax, sys_write
    83 000008D4 BF01000000          <1>  mov edi, 1
    84 000008D9 48BE-               <1>  mov rsi, %1
    84 000008DB [EA17000000000000]  <1>
    85 000008E3 BA0F000000          <1>  mov edx, %2
    86 000008E8 0F05                <1>  syscall
  1100                                      print number_buffer, 20
    82 000008EA B801000000          <1>  mov eax, sys_write
    83 000008EF BF01000000          <1>  mov edi, 1
    84 000008F4 48BE-               <1>  mov rsi, %1
    84 000008F6 [3615000000000000]  <1>
    85 000008FE BA14000000          <1>  mov edx, %2
    86 00000903 0F05                <1>  syscall
  1101                                      
  1102                                      ; Esperar un momento antes de salir
  1103 00000905 48C705F0F6FFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  1103 0000090E 0000               
  1104 00000910 48C705EDF6FFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  1104 00000919 0000               
  1105                                      sleeptime
    98 0000091B B823000000          <1>  mov eax, sys_nanosleep
    99 00000920 48BF-               <1>  mov rdi, timespec
    99 00000922 [0000000000000000]  <1>
   100 0000092A 31F6                <1>  xor esi, esi
   101 0000092C 0F05                <1>  syscall
  1106                                      
  1107 0000092E E90E090000                  jmp exit
  1108                                  
  1109                                  ; Función para imprimir los bloques
  1110                                  ; Función modificada para imprimir bloques
  1111                                  
  1112                                  ; Primero, agreguemos una función para obtener el puntero a los bloques del nivel actual
  1113                                  get_current_level_blocks:
  1114 00000933 803D(A4140000)01            cmp byte [current_level], 1
  1115 0000093A 7428                        je .level1
  1116 0000093C 803D(A4140000)02            cmp byte [current_level], 2
  1117 00000943 7427                        je .level2
  1118 00000945 803D(A4140000)03            cmp byte [current_level], 3
  1119 0000094C 7426                        je .level3
  1120 0000094E 803D(A4140000)04            cmp byte [current_level], 4
  1121 00000955 7425                        je .level4
  1122 00000957 803D(A4140000)05            cmp byte [current_level], 5
  1123 0000095E 7424                        je .level5
  1124                                      ; Si llegamos aquí, hay un error en el nivel
  1125 00000960 4831C0                      xor rax, rax
  1126 00000963 C3                          ret
  1127                                  
  1128                                      .level1:
  1129 00000964 488D05(A6140000)                lea rax, [level1_blocks]
  1130 0000096B C3                              ret
  1131                                      .level2:
  1132 0000096C 488D05(B5140000)                lea rax, [level2_blocks]
  1133 00000973 C3                              ret
  1134                                      .level3:
  1135 00000974 488D05(BA140000)                lea rax, [level3_blocks]
  1136 0000097B C3                              ret
  1137                                      .level4:
  1138 0000097C 488D05(BF140000)                lea rax, [level4_blocks]
  1139 00000983 C3                              ret
  1140                                      .level5:
  1141 00000984 488D05(C4140000)                lea rax, [level5_blocks]
  1142 0000098B C3                              ret
  1143                                  ; Función para obtener la cantidad de bloques del nivel actual
  1144                                  get_current_level_count:
  1145 0000098C 803D(A4140000)01            cmp byte [current_level], 1
  1146 00000993 7428                        je .level1
  1147 00000995 803D(A4140000)02            cmp byte [current_level], 2
  1148 0000099C 7425                        je .level2
  1149 0000099E 803D(A4140000)03            cmp byte [current_level], 3
  1150 000009A5 7422                        je .level3
  1151 000009A7 803D(A4140000)04            cmp byte [current_level], 4
  1152 000009AE 741F                        je .level4
  1153 000009B0 803D(A4140000)05            cmp byte [current_level], 5
  1154 000009B7 741C                        je .level5
  1155                                      ; Si llegamos aquí, hay un error en el nivel
  1156 000009B9 4831C0                      xor rax, rax
  1157 000009BC C3                          ret
  1158                                  
  1159                                      .level1:
  1160 000009BD B803000000                      mov rax, level1_blocks_count
  1161 000009C2 C3                              ret
  1162                                      .level2:
  1163 000009C3 B801000000                      mov rax, level2_blocks_count
  1164 000009C8 C3                              ret
  1165                                      .level3:
  1166 000009C9 B801000000                      mov rax, level3_blocks_count
  1167 000009CE C3                              ret
  1168                                      .level4:
  1169 000009CF B801000000                      mov rax, level4_blocks_count
  1170 000009D4 C3                              ret
  1171                                      .level5:
  1172 000009D5 B801000000                      mov rax, level5_blocks_count
  1173 000009DA C3                              ret
  1174                                  
  1175                                  
  1176                                  print_blocks:
  1177 000009DB 55                          push rbp
  1178 000009DC 4889E5                      mov rbp, rsp
  1179                                      
  1180                                      ; Obtener puntero a los bloques del nivel actual
  1181 000009DF E84FFFFFFF                  call get_current_level_blocks
  1182 000009E4 4989C5                      mov r13, rax                  ; Guardar puntero a los bloques en r13
  1183                                      
  1184                                      ; Obtener cantidad de bloques del nivel actual
  1185 000009E7 E8A0FFFFFF                  call get_current_level_count
  1186 000009EC 4989C6                      mov r14, rax                  ; Guardar cantidad de bloques en r14
  1187                                      
  1188 000009EF 4D31E4                      xor r12, r12                  ; Índice del bloque actual
  1189                                      
  1190                                      .print_loop:
  1191 000009F2 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
  1192 000009F5 7D6F                            jge .end
  1193                                          
  1194                                          ; Verificar si el bloque está activo
  1195 000009F7 490FB68424-                     movzx rax, byte [block_states + r12]
  1195 000009FC [C9140000]         
  1196 00000A00 4885C0                          test rax, rax
  1197 00000A03 745C                            jz .next_block
  1198                                          
  1199                                          ; Obtener posición y tipo del bloque usando r13
  1200 00000A05 4C89E0                          mov rax, r12
  1201 00000A08 486BC005                        imul rax, 5
  1202 00000A0C 4C01E8                          add rax, r13
  1203 00000A0F 448A00                          mov r8b, [rax]        ; X position
  1204 00000A12 448A4801                        mov r9b, [rax + 1]    ; Y position
  1205 00000A16 448A5002                        mov r10b, [rax + 2]   ; Tipo de bloque
  1206                                  
  1207                                          ; El resto de la lógica de impresión permanece igual
  1208 00000A1A 4D0FB6C0                        movzx r8, r8b
  1209 00000A1E 4D0FB6C9                        movzx r9, r9b
  1210 00000A22 4981C0[000A0000]                add r8, board
  1211 00000A29 B850000000                      mov rax, column_cells + 2
  1212 00000A2E 49F7E1                          mul r9
  1213 00000A31 4901C0                          add r8, rax
  1214                                          
  1215 00000A34 B906000000                      mov rcx, block_length
  1216 00000A39 48BE-                           mov rsi, block_type_1
  1216 00000A3B [8014000000000000] 
  1217 00000A43 490FB6C2                        movzx rax, r10b
  1218 00000A47 48FFC8                          dec rax
  1219 00000A4A 486BC006                        imul rax, block_length
  1220 00000A4E 4801C6                          add rsi, rax
  1221                                          
  1222                                      .print_block_chars:
  1223 00000A51 8A06                            mov al, [rsi]
  1224 00000A53 418800                          mov [r8], al
  1225 00000A56 48FFC6                          inc rsi
  1226 00000A59 49FFC0                          inc r8
  1227 00000A5C 48FFC9                          dec rcx
  1228 00000A5F 75F0                            jnz .print_block_chars
  1229                                          
  1230                                      .next_block:
  1231 00000A61 49FFC4                          inc r12
  1232 00000A64 EB8C                            jmp .print_loop
  1233                                          
  1234                                      .end:
  1235 00000A66 5D                              pop rbp
  1236 00000A67 C3                              ret
  1237                                  
  1238                                  ; Función para convertir número a string
  1239                                  ; Input: RAX = número a convertir
  1240                                  ; RDI = buffer donde escribir el string
  1241                                  number_to_string:
  1242 00000A68 53                          push rbx
  1243 00000A69 52                          push rdx
  1244 00000A6A 56                          push rsi
  1245 00000A6B BB0A000000                  mov rbx, 10          ; Divisor
  1246 00000A70 B900000000                  mov rcx, 0          ; Contador de dígitos
  1247                                      
  1248                                      ; Si el número es 0, manejarlo especialmente
  1249 00000A75 4885C0                      test rax, rax
  1250 00000A78 7509                        jnz .convert_loop
  1251 00000A7A C60730                      mov byte [rdi], '0'
  1252 00000A7D C6470100                    mov byte [rdi + 1], 0
  1253 00000A81 EB20                        jmp .end
  1254                                      
  1255                                      .convert_loop:
  1256 00000A83 4831D2                          xor rdx, rdx    ; Limpiar RDX para la división
  1257 00000A86 48F7F3                          div rbx         ; RAX/10, cociente en RAX, residuo en RDX
  1258 00000A89 80C230                          add dl, '0'     ; Convertir a ASCII
  1259 00000A8C 52                              push rdx        ; Guardar el dígito
  1260 00000A8D 48FFC1                          inc rcx         ; Incrementar contador
  1261 00000A90 4885C0                          test rax, rax   ; Verificar si quedan más dígitos
  1262 00000A93 75EE                            jnz .convert_loop
  1263                                          
  1264                                      .write_loop:
  1265 00000A95 5A                              pop rdx         ; Obtener dígito
  1266 00000A96 8817                            mov [rdi], dl   ; Escribir al buffer
  1267 00000A98 48FFC7                          inc rdi         ; Siguiente posición
  1268 00000A9B 48FFC9                          dec rcx         ; Decrementar contador
  1269 00000A9E 75F5                            jnz .write_loop
  1270                                          
  1271 00000AA0 C60700                      mov byte [rdi], 0   ; Null terminator
  1272                                      
  1273                                      .end:
  1274 00000AA3 5E                          pop rsi
  1275 00000AA4 5A                          pop rdx
  1276 00000AA5 5B                          pop rbx
  1277 00000AA6 C3                          ret
  1278                                  
  1279                                  ; Función para imprimir los labels
  1280                                  print_labels:
  1281 00000AA7 55                          push rbp
  1282 00000AA8 4889E5                      mov rbp, rsp
  1283                                  
  1284                                      ; Crear buffer temporal
  1285 00000AAB 4883EC20                    sub rsp, 32
  1286                                  
  1287                                      ; Copiar labels a buffer temporal
  1288 00000AAF 4889E7                      mov rdi, rsp
  1289 00000AB2 488D35(E2150000)            lea rsi, [score_label]
  1290 00000AB9 B917000000                  mov rcx, score_label_len
  1291 00000ABE F3A4                        rep movsb
  1292                                  
  1293                                      ; Convertir score a string
  1294 00000AC0 488B05(2D150000)            mov rax, [current_score]
  1295 00000AC7 48BF-                       mov rdi, number_buffer
  1295 00000AC9 [3615000000000000] 
  1296 00000AD1 E892FFFFFF                  call number_to_string
  1297                                  
  1298                                      ; Calcular longitud del número
  1299 00000AD6 B900000000                  mov rcx, 0
  1300 00000ADB 48BF-                       mov rdi, number_buffer
  1300 00000ADD [3615000000000000] 
  1301                                      .count_loop:
  1302 00000AE5 803C0F00                        cmp byte [rdi + rcx], 0
  1303 00000AE9 7405                            je .count_done
  1304 00000AEB 48FFC1                          inc rcx
  1305 00000AEE EBF5                            jmp .count_loop
  1306                                      .count_done:
  1307                                  
  1308                                      ; Insertar el número en la posición correcta, alineado a la derecha
  1309 00000AF0 4889E7                      mov rdi, rsp
  1310 00000AF3 4883C70A                    add rdi, score_pos           ; Moverse a la posición del número
  1311 00000AF7 BE0A000000                  mov rsi, 10                  ; Espacio reservado para el número
  1312 00000AFC 4829CE                      sub rsi, rcx                 ; Calcular padding necesario
  1313                                      .pad_loop:
  1314 00000AFF 4885F6                          test rsi, rsi
  1315 00000B02 740B                            jz .pad_done
  1316 00000B04 C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  1317 00000B07 48FFC7                          inc rdi
  1318 00000B0A 48FFCE                          dec rsi
  1319 00000B0D EBF0                            jmp .pad_loop
  1320                                      .pad_done:
  1321                                  
  1322                                      ; Copiar el número
  1323 00000B0F 48BE-                       mov rsi, number_buffer
  1323 00000B11 [3615000000000000] 
  1324 00000B19 F3A4                        rep movsb
  1325                                  
  1326                                      ; Imprimir el buffer completo
  1327                                      print rsp, score_label_len
    82 00000B1B B801000000          <1>  mov eax, sys_write
    83 00000B20 BF01000000          <1>  mov edi, 1
    84 00000B25 4889E6              <1>  mov rsi, %1
    85 00000B28 BA17000000          <1>  mov edx, %2
    86 00000B2D 0F05                <1>  syscall
  1328                                  
  1329                                      ; Repetir proceso para bloques destruidos
  1330 00000B2F 4889E7                      mov rdi, rsp
  1331 00000B32 488D35(F9150000)            lea rsi, [blocks_label]
  1332 00000B39 B91B000000                  mov rcx, blocks_label_len
  1333 00000B3E F3A4                        rep movsb
  1334                                  
  1335                                      ; Verificar que el `[` esté en su posición correcta
  1336 00000B40 4889E7                      mov rdi, rsp
  1337 00000B43 4883C713                    add rdi, blocks_pos - 1  ; Posición exacta donde debe ir el '['
  1338 00000B47 C6075B                      mov byte [rdi], '['      ; Garantizar que el `[` esté presente
  1339                                  
  1340                                      ; Convertir bloques destruidos a string
  1341 00000B4A 480FB605(35150000)          movzx rax, byte [destroyed_blocks]
  1342 00000B52 48BF-                       mov rdi, number_buffer
  1342 00000B54 [3615000000000000] 
  1343 00000B5C E807FFFFFF                  call number_to_string
  1344                                  
  1345                                      ; Calcular longitud del número
  1346 00000B61 B900000000                  mov rcx, 0
  1347 00000B66 48BF-                       mov rdi, number_buffer
  1347 00000B68 [3615000000000000] 
  1348                                      .count_loop2:
  1349 00000B70 803C0F00                        cmp byte [rdi + rcx], 0
  1350 00000B74 7405                            je .count_done2
  1351 00000B76 48FFC1                          inc rcx
  1352 00000B79 EBF5                            jmp .count_loop2
  1353                                      .count_done2:
  1354                                  
  1355                                      ; Insertar el número en la posición correcta, alineado a la derecha
  1356 00000B7B 4889E7                      mov rdi, rsp
  1357 00000B7E 4883C714                    add rdi, blocks_pos         ; Moverse a la posición del número
  1358 00000B82 BE03000000                  mov rsi, 3                  ; Espacio reservado para el número
  1359 00000B87 4829CE                      sub rsi, rcx                ; Calcular padding necesario
  1360                                      .pad_loop2:
  1361 00000B8A 4885F6                          test rsi, rsi
  1362 00000B8D 740B                            jz .pad_done2
  1363 00000B8F C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  1364 00000B92 48FFC7                          inc rdi
  1365 00000B95 48FFCE                          dec rsi
  1366 00000B98 EBF0                            jmp .pad_loop2
  1367                                      .pad_done2:
  1368                                  
  1369                                      ; Copiar el número
  1370 00000B9A 48BE-                       mov rsi, number_buffer
  1370 00000B9C [3615000000000000] 
  1371 00000BA4 F3A4                        rep movsb
  1372                                  
  1373                                      ; Imprimir el buffer completo
  1374                                      print rsp, blocks_label_len
    82 00000BA6 B801000000          <1>  mov eax, sys_write
    83 00000BAB BF01000000          <1>  mov edi, 1
    84 00000BB0 4889E6              <1>  mov rsi, %1
    85 00000BB3 BA1B000000          <1>  mov edx, %2
    86 00000BB8 0F05                <1>  syscall
  1375                                  
  1376                                      ; Restaurar stack
  1377 00000BBA 4883C420                    add rsp, 32
  1378 00000BBE 5D                          pop rbp
  1379 00000BBF C3                          ret
  1380                                  
  1381                                  
  1382                                  ; Función modificada para detectar colisión
  1383                                  ; Función mejorada para detectar colisión y manejar la física
  1384                                  ; Función corregida para manejar colisiones con bloques completos
  1385                                  ;---------------------------------------------------------
  1386                                  ; check_block_collision:
  1387                                  ;   Detecta si en la posición r10 (que apunta a board[])
  1388                                  ;   hay un bloque ("UUUU","OOOO","DDDD","LLLL","VVVV","8888").
  1389                                  ;   De ser así, localiza qué bloque es, lo "destruye" y
  1390                                  ;   retorna 1 para indicar colisión. Si no encuentra bloque,
  1391                                  ;   retorna 0.
  1392                                  ;---------------------------------------------------------
  1393                                  ;--------------------------------------
  1394                                  ; check_block_collision
  1395                                  ;--------------------------------------
  1396                                  ; Actualizar check_block_collision para usar el nivel actual
  1397                                  check_block_collision:
  1398 00000BC0 55                          push rbp
  1399 00000BC1 4889E5                      mov rbp, rsp
  1400                                  
  1401                                      ; Almacenar el carácter en la posición r10 (pos. de la bola en board[])
  1402 00000BC4 418A02                      mov al, [r10]
  1403                                  
  1404                                      ; Verificar si el carácter es un bloque
  1405 00000BC7 3C55                        cmp al, 'U'  
  1406 00000BC9 7419                        je .possible
  1407 00000BCB 3C4F                        cmp al, 'O'  
  1408 00000BCD 7415                        je .possible
  1409 00000BCF 3C44                        cmp al, 'D'  
  1410 00000BD1 7411                        je .possible
  1411 00000BD3 3C4C                        cmp al, 'L'  
  1412 00000BD5 740D                        je .possible
  1413 00000BD7 3C56                        cmp al, 'V'  
  1414 00000BD9 7409                        je .possible
  1415 00000BDB 3C38                        cmp al, '8'  
  1416 00000BDD 7405                        je .possible
  1417                                  
  1418                                      ; No es bloque, salir
  1419 00000BDF 4831C0                      xor rax, rax
  1420 00000BE2 5D                          pop rbp
  1421 00000BE3 C3                          ret
  1422                                  
  1423                                  .possible:
  1424 00000BE4 53                          push rbx
  1425 00000BE5 57                          push rdi
  1426 00000BE6 56                          push rsi
  1427 00000BE7 4154                        push r12
  1428 00000BE9 4155                        push r13
  1429 00000BEB 4156                        push r14
  1430 00000BED 4157                        push r15
  1431                                  
  1432                                      ; 1) Obtener base de los bloques del nivel actual
  1433 00000BEF E83FFDFFFF                  call get_current_level_blocks
  1434 00000BF4 4989C5                      mov r13, rax  ; (r13) = base de levelX_blocks
  1435                                  
  1436                                      ; 2) Obtener la cantidad de bloques
  1437 00000BF7 E890FDFFFF                  call get_current_level_count
  1438 00000BFC 4989C6                      mov r14, rax
  1439                                  
  1440 00000BFF 4D31E4                      xor r12, r12  ; Índice del bloque actual
  1441                                  
  1442                                  .find_block_loop:
  1443 00000C02 4D39F4                      cmp r12, r14
  1444 00000C05 0F8DCE000000                jge .no_block_found  ; Se acabaron los bloques
  1445                                  
  1446                                      ; Calcular puntero base del bloque actual en levelX_blocks
  1447 00000C0B 4C89E0                      mov rax, r12
  1448 00000C0E 486BC005                    imul rax, 5            ; (x, y, tipo, durabilidad_inicial, letra)
  1449 00000C12 4C01E8                      add rax, r13
  1450 00000C15 4989C7                      mov r15, rax           ; r15 apunta a los datos del bloque actual
  1451                                  
  1452                                      ; --- Aquí la diferencia: la durabilidad no la leemos de [r15+3], sino de block_states[r12]
  1453 00000C18 490FB69C24-                 movzx rbx, byte [block_states + r12]  ; Durabilidad "viva" en block_states
  1453 00000C1D [C9140000]         
  1454 00000C21 4885DB                      test rbx, rbx
  1455 00000C24 0F84A7000000                jz .next_block  ; si durabilidad=0 => bloque destruido => ignorar
  1456                                  
  1457                                      ; Obtener coordenadas
  1458 00000C2A 418A17                      mov dl, [r15]         ; x
  1459 00000C2D 418A4F01                    mov cl, [r15 + 1]     ; y
  1460                                  
  1461                                      ; Calcular posición en el board
  1462 00000C31 488D3D(000A0000)            lea rdi, [board]
  1463 00000C38 4831C0                      xor rax, rax
  1464 00000C3B B84E000000                  mov rax, column_cells
  1465 00000C40 4883C002                    add rax, 2
  1466 00000C44 480FB6C9                    movzx rcx, cl         ; y
  1467 00000C48 480FAFC1                    imul rax, rcx
  1468 00000C4C 4801C7                      add rdi, rax
  1469 00000C4F 480FB6C2                    movzx rax, dl         ; x
  1470 00000C53 4801C7                      add rdi, rax
  1471                                  
  1472                                      ; Guardar la posición base del bloque
  1473 00000C56 57                          push rdi
  1474                                  
  1475                                      ; Verificar si la bola (r10) está dentro de [rdi .. rdi+block_length)
  1476 00000C57 4939FA                      cmp r10, rdi
  1477 00000C5A 7274                        jb .skip_collision
  1478 00000C5C 488D5F06                    lea rbx, [rdi + block_length]
  1479 00000C60 4939DA                      cmp r10, rbx
  1480 00000C63 736B                        jae .skip_collision
  1481                                  
  1482                                      ; ------- Hay colisión, reducir durabilidad en block_states
  1483 00000C65 41FE8C24[C9140000]          dec byte [block_states + r12]
  1484                                      ; Volver a cargar durabilidad
  1485 00000C6D 490FB69C24-                 movzx rbx, byte [block_states + r12]
  1485 00000C72 [C9140000]         
  1486 00000C76 4885DB                      test rbx, rbx
  1487 00000C79 754D                        jnz .update_display  ; si no llegó a 0 => solo "golpeado"
  1488                                  
  1489                                      ; >>> Llegó a 0 => Bloque destruido
  1490 00000C7B 5F                          pop rdi  ; recuperar puntero base del bloque en board
  1491 00000C7C B906000000                  mov rcx, block_length
  1492                                  .clear_loop:
  1493 00000C81 C60720                      mov byte [rdi], ' '
  1494 00000C84 48FFC7                      inc rdi
  1495 00000C87 E2F8                        loop .clear_loop
  1496                                  
  1497                                      ; Dibujar letra del bloque destruido
  1498 00000C89 418A4704                    mov al, [r15 + 4]  ; Obtener la letra asociada
  1499 00000C8D 4883EF06                    sub rdi, block_length
  1500 00000C91 8807                        mov [rdi], al      ; Escribir la letra en la posición inicial
  1501                                      ; Después de escribir la letra en el tablero
  1502 00000C93 418A4704                    mov al, [r15 + 4]      ; Obtener la letra
  1503 00000C97 4D0FB607                    movzx r8, byte [r15]   ; Posición x del bloque
  1504 00000C9B 4D0FB64F01                  movzx r9, byte [r15 + 1] ; Posición y del bloque
  1505 00000CA0 E801F7FFFF                  call register_letter
  1506                                      ; Actualizar contadores globales
  1507 00000CA5 FE0D(A5140000)              dec byte [blocks_remaining]
  1508 00000CAB FE05(35150000)              inc byte [destroyed_blocks]
  1509                                  
  1510                                      ; Sumar puntos según el tipo
  1511 00000CB1 490FB64702                  movzx rax, byte [r15 + 2]  ; tipo del bloque original
  1512 00000CB6 486BC00A                    imul rax, 10
  1513 00000CBA 480105(2D150000)            add [current_score], rax
  1514                                  
  1515 00000CC1 B801000000                  mov rax, 1  ; colisión con destrucción
  1516 00000CC6 EB14                        jmp .end_pop
  1517                                  
  1518                                  .update_display:
  1519                                      ; => durabilidad >0, se podría actualizar el "look" del bloque
  1520 00000CC8 B801000000                  mov rax, 1  ; colisión con "rebote"  
  1521 00000CCD 5F                          pop rdi     ; pop que quedó pendiente
  1522 00000CCE EB0C                        jmp .end_pop
  1523                                  
  1524                                  .skip_collision:
  1525 00000CD0 5F                          pop rdi     ; si no hubo colisión, quita de la pila
  1526                                  .next_block:
  1527 00000CD1 49FFC4                      inc r12
  1528 00000CD4 E929FFFFFF                  jmp .find_block_loop
  1529                                  
  1530                                  .no_block_found:
  1531 00000CD9 4831C0                      xor rax, rax  ; 0 => no hubo colisión
  1532                                  
  1533                                  .end_pop:
  1534 00000CDC 415F                        pop r15
  1535 00000CDE 415E                        pop r14
  1536 00000CE0 415D                        pop r13
  1537 00000CE2 415C                        pop r12
  1538 00000CE4 5E                          pop rsi
  1539 00000CE5 5F                          pop rdi
  1540 00000CE6 5B                          pop rbx
  1541 00000CE7 5D                          pop rbp
  1542 00000CE8 C3                          ret
  1543                                  
  1544                                  
  1545                                  
  1546                                  init_enemies:
  1547 00000CE9 55                          push rbp
  1548 00000CEA 4889E5                      mov rbp, rsp
  1549                                      ; Reiniciar contadores de movimiento
  1550 00000CED C605(78150000)00            mov byte [enemy_move_total], 0
  1551 00000CF4 C605(79150000)00            mov byte [enemy_target], 0 ; Inicialmente persigue la bola
  1552                                      ; Limpiar estado previo de enemigos
  1553 00000CFB B90A000000                  mov rcx, 10 ; Máximo 10 enemigos
  1554 00000D00 488D3D(4F150000)            lea rdi, [enemies]
  1555 00000D07 30C0                        xor al, al
  1556 00000D09 F3AA                        rep stosb ; Limpiar datos de enemigos
  1557                                      
  1558                                      ; Marcar todos los enemigos como inactivos
  1559 00000D0B 488D3D(D8150000)            lea rdi, [enemy_spawns_triggered]
  1560 00000D12 30C0                        xor al, al
  1561 00000D14 B90A000000                  mov rcx, 10
  1562 00000D19 F3AA                        rep stosb ; Todos los enemigos no han sido activados aún
  1563                                  
  1564 00000D1B 5D                          pop rbp
  1565 00000D1C C3                          ret
  1566                                  
  1567                                  
  1568                                  ; Función para mover enemigos
  1569                                  move_enemies:
  1570 00000D1D 55                          push rbp
  1571 00000D1E 4889E5                      mov rbp, rsp
  1572                                      
  1573                                      ; Incrementar contador de movimiento
  1574 00000D21 FE05(76150000)              inc byte [enemy_move_counter]
  1575 00000D27 480FB605(76150000)          movzx rax, byte [enemy_move_counter]
  1576 00000D2F 3A05(77150000)              cmp al, [enemy_move_delay]
  1577 00000D35 0F85AA010000                jne .end
  1578                                      
  1579                                      ; Resetear contador
  1580 00000D3B C605(76150000)00            mov byte [enemy_move_counter], 0
  1581                                      
  1582 00000D42 4D31E4                      xor r12, r12                    ; Índice del enemigo
  1583                                      
  1584                                      .enemy_loop:
  1585 00000D45 4983FC0A                        cmp r12, 10                     ; Máximo 10 enemigos
  1586 00000D49 0F8D96010000                    jge .end
  1587                                          
  1588                                          ; Calcular offset del enemigo actual
  1589 00000D4F 4C89E0                          mov rax, r12
  1590 00000D52 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  1591 00000D56 488DB0[4F150000]                lea rsi, [enemies + rax]
  1592                                          
  1593                                          ; Verificar si el enemigo está activo
  1594 00000D5D 807E0201                        cmp byte [rsi + 2], 1
  1595 00000D61 0F8576010000                    jne .next_enemy
  1596                                          
  1597                                          ; Obtener posición actual
  1598 00000D67 4C0FB606                        movzx r8, byte [rsi]            ; X
  1599 00000D6B 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  1600                                          
  1601                                          ; Limpiar posición actual antes de mover
  1602 00000D70 4150                            push r8
  1603 00000D72 4151                            push r9
  1604 00000D74 B84E000000                      mov rax, column_cells
  1605 00000D79 4883C002                        add rax, 2
  1606 00000D7D 49F7E1                          mul r9
  1607 00000D80 4C01C0                          add rax, r8
  1608 00000D83 488DB8[000A0000]                lea rdi, [board + rax]
  1609 00000D8A C60720                          mov byte [rdi], ' '         ; Limpiar rastro
  1610 00000D8D 4159                            pop r9
  1611 00000D8F 4158                            pop r8
  1612                                  
  1613                                          ; Determinar comportamiento basado en índice
  1614 00000D91 4C89E0                          mov rax, r12
  1615 00000D94 4883E001                        and rax, 1                      ; 0 para índices pares, 1 para impares
  1616 00000D98 4885C0                          test rax, rax
  1617 00000D9B 7402                            jz .chase_ball
  1618 00000D9D EB31                            jmp .chase_paddle             ; Si es 1, perseguir paleta
  1619                                          
  1620                                          ; Perseguir bola (comportamiento original)
  1621                                      .chase_ball:
  1622 00000D9F 4C8B15(4F140000)                mov r10, [ball_x_pos]
  1623 00000DA6 4D39D0                          cmp r8, r10
  1624 00000DA9 0F8F96000000                    jg .move_left
  1625 00000DAF 0F8C95000000                    jl .move_right
  1626                                          
  1627 00000DB5 4C8B15(57140000)                mov r10, [ball_y_pos]
  1628 00000DBC 4D39D1                          cmp r9, r10
  1629 00000DBF 0F8F8A000000                    jg .move_up
  1630 00000DC5 0F8C89000000                    jl .move_down
  1631 00000DCB E9A5000000                      jmp .check_collision
  1632                                          
  1633                                      .chase_paddle:
  1634                                          ; Obtener la posición X actual de la paleta
  1635 00000DD0 4C8B15(3F140000)                mov r10, [pallet_position]
  1636 00000DD7 4981EA[000A0000]                sub r10, board              ; Convertir a offset relativo
  1637                                          
  1638                                          ; Calcular la posición X real de la paleta
  1639 00000DDE 4C89D0                          mov rax, r10
  1640 00000DE1 BB4E000000                      mov rbx, column_cells
  1641 00000DE6 4883C302                        add rbx, 2                  ; Añadir newline chars
  1642 00000DEA 4831D2                          xor rdx, rdx
  1643 00000DED 48F7F3                          div rbx                     ; rax = y, rdx = x
  1644                                          
  1645                                          ; rdx ahora contiene la posición X de la paleta
  1646                                          ; Añadir la mitad del tamaño de la paleta para apuntar al centro
  1647 00000DF0 488B0D(47140000)                mov rcx, [pallet_size]
  1648 00000DF7 48D1E9                          shr rcx, 1                  ; Dividir por 2
  1649 00000DFA 4801CA                          add rdx, rcx
  1650                                          
  1651                                          ; Comparar con posición X del enemigo y mover gradualmente
  1652 00000DFD 4939D0                          cmp r8, rdx
  1653 00000E00 7404                            je .check_y_paddle          ; Si está en la misma X, verificar Y
  1654 00000E02 7F41                            jg .move_left              ; Si está a la derecha, mover izquierda
  1655 00000E04 7C44                            jl .move_right             ; Si está a la izquierda, mover derecha
  1656                                  
  1657                                      .check_y_paddle:
  1658                                          ; La Y de la paleta siempre es row_cells - 2
  1659 00000E06 41BA20000000                    mov r10, row_cells
  1660 00000E0C 4983EA02                        sub r10, 2
  1661                                          
  1662                                          ; Comparar con posición Y del enemigo y mover gradualmente
  1663 00000E10 4D39D1                          cmp r9, r10
  1664 00000E13 7404                            je .no_movement            ; Si está en la misma Y, no mover
  1665 00000E15 7F38                            jg .move_up               ; Si está abajo, mover arriba
  1666 00000E17 7C3B                            jl .move_down             ; Si está arriba, mover abajo
  1667                                          
  1668                                      .no_movement:
  1669 00000E19 EB5A                            jmp .check_collision
  1670                                  
  1671                                      ; También agregar una nueva sección para el movimiento suave
  1672                                      .smooth_transition:
  1673                                          ; Si el enemigo está muy lejos de su objetivo, limitar el movimiento
  1674 00000E1B 8A05(79150000)                  mov al, [enemy_target]
  1675 00000E21 84C0                            test al, al
  1676 00000E23 7450                            jz .check_collision        ; Si persigue la bola, movimiento normal
  1677                                          
  1678                                          ; Verificar distancia en X
  1679 00000E25 4989D2                          mov r10, rdx              ; Posición X objetivo
  1680 00000E28 4D29C2                          sub r10, r8               ; Calcular diferencia
  1681 00000E2B 4983FA05                        cmp r10, 5               ; Si la diferencia es mayor a 5
  1682 00000E2F 7F08                            jg .limit_right_movement  ; Limitar movimiento a la derecha
  1683 00000E31 4983FAFB                        cmp r10, -5              ; Si la diferencia es menor a -5
  1684 00000E35 7C08                            jl .limit_left_movement   ; Limitar movimiento a la izquierda
  1685 00000E37 EB3C                            jmp .check_collision
  1686                                          
  1687                                      .limit_right_movement:
  1688 00000E39 4983C002                        add r8, 2                ; Mover solo 2 unidades a la derecha
  1689 00000E3D EB36                            jmp .check_collision
  1690                                          
  1691                                      .limit_left_movement:
  1692 00000E3F 4983E802                        sub r8, 2                ; Mover solo 2 unidades a la izquierda
  1693 00000E43 EB30                            jmp .check_collision
  1694                                      .move_left:
  1695 00000E45 49FFC8                          dec r8
  1696 00000E48 EB0F                            jmp .check_vertical
  1697                                          
  1698                                      .move_right:
  1699 00000E4A 49FFC0                          inc r8
  1700 00000E4D EB0A                            jmp .check_vertical
  1701                                          
  1702                                      .move_up:
  1703 00000E4F 49FFC9                          dec r9
  1704 00000E52 EB21                            jmp .check_collision
  1705                                          
  1706                                      .move_down:
  1707 00000E54 49FFC1                          inc r9
  1708 00000E57 EB1C                            jmp .check_collision
  1709                                          
  1710                                      .check_vertical:
  1711 00000E59 8A05(79150000)                  mov al, [enemy_target]
  1712 00000E5F 84C0                            test al, al
  1713 00000E61 0F8569FFFFFF                    jnz .chase_paddle         ; Si persigue paleta, volver a su lógica
  1714 00000E67 4C8B15(57140000)                mov r10, [ball_y_pos]     ; Si no, seguir persiguiendo la bola
  1715 00000E6E 4D39D1                          cmp r9, r10
  1716 00000E71 7FDC                            jg .move_up
  1717 00000E73 7CDF                            jl .move_down
  1718                                          
  1719                                      .check_collision:
  1720                                          ; Verificar colisión con bordes
  1721 00000E75 4983F801                        cmp r8, 1                       ; Borde izquierdo
  1722 00000E79 7E62                            jle .next_enemy
  1723 00000E7B 4983F84E                        cmp r8, column_cells
  1724 00000E7F 7D5C                            jge .next_enemy
  1725 00000E81 4983F901                        cmp r9, 1                       ; Borde superior
  1726 00000E85 7E56                            jle .next_enemy
  1727 00000E87 4983F920                        cmp r9, row_cells
  1728 00000E8B 7D50                            jge .next_enemy
  1729                                          
  1730                                          ; Verificar colisión con bloques antes de moverse
  1731 00000E8D 4150                            push r8
  1732 00000E8F 4151                            push r9
  1733 00000E91 4152                            push r10
  1734                                          
  1735                                          ; Calcular posición en el tablero para verificar
  1736 00000E93 B84E000000                      mov rax, column_cells
  1737 00000E98 4883C002                        add rax, 2
  1738 00000E9C 49F7E1                          mul r9
  1739 00000E9F 4C01C0                          add rax, r8
  1740 00000EA2 4C8D90[000A0000]                lea r10, [board + rax]
  1741                                          
  1742                                          ; Verificar si hay un bloque en la nueva posición
  1743 00000EA9 418A02                          mov al, [r10]
  1744 00000EAC 3C55                            cmp al, 'U'
  1745 00000EAE 7427                            je .invalid_move
  1746 00000EB0 3C4F                            cmp al, 'O'
  1747 00000EB2 7423                            je .invalid_move
  1748 00000EB4 3C44                            cmp al, 'D'
  1749 00000EB6 741F                            je .invalid_move
  1750 00000EB8 3C4C                            cmp al, 'L'
  1751 00000EBA 741B                            je .invalid_move
  1752 00000EBC 3C56                            cmp al, 'V'
  1753 00000EBE 7417                            je .invalid_move
  1754 00000EC0 3C38                            cmp al, '8'
  1755 00000EC2 7413                            je .invalid_move
  1756 00000EC4 3C58                            cmp al, 'X'
  1757 00000EC6 740F                            je .invalid_move
  1758                                          
  1759 00000EC8 415A                            pop r10
  1760 00000ECA 4159                            pop r9
  1761 00000ECC 4158                            pop r8
  1762                                          
  1763                                          ; Guardar nueva posición si es válida
  1764 00000ECE 448806                          mov [rsi], r8b
  1765 00000ED1 44884E01                        mov [rsi + 1], r9b
  1766 00000ED5 EB06                            jmp .next_enemy
  1767                                          
  1768                                      .invalid_move:
  1769 00000ED7 415A                            pop r10
  1770 00000ED9 4159                            pop r9
  1771 00000EDB 4158                            pop r8
  1772                                          
  1773                                      .next_enemy:
  1774 00000EDD 49FFC4                          inc r12
  1775 00000EE0 E960FEFFFF                      jmp .enemy_loop
  1776                                          
  1777                                      .end:
  1778 00000EE5 5D                              pop rbp
  1779 00000EE6 C3                              ret
  1780                                  
  1781                                  get_current_spawn_points:
  1782 00000EE7 55                          push rbp
  1783 00000EE8 4889E5                      mov rbp, rsp
  1784                                      
  1785 00000EEB 480FB605(A4140000)          movzx rax, byte [current_level]
  1786 00000EF3 48FFC8                      dec rax                         ; Ajustar para índice base 0
  1787 00000EF6 488B04C5[AD150000]          mov rax, [spawn_points_table + rax * 8]
  1788                                      
  1789 00000EFE 5D                          pop rbp
  1790 00000EFF C3                          ret
  1791                                  
  1792                                  ; Función para verificar si debe aparecer un nuevo enemigo
  1793                                  check_enemy_spawn:
  1794 00000F00 55                          push rbp
  1795 00000F01 4889E5                      mov rbp, rsp
  1796                                      
  1797                                      ; Obtener spawn points del nivel actual
  1798 00000F04 E8DEFFFFFF                  call get_current_spawn_points
  1799 00000F09 4989C4                      mov r12, rax                    ; r12 = puntero a spawn points
  1800                                      
  1801                                      ; Obtener cantidad de bloques destruidos
  1802 00000F0C 4C0FB62D(35150000)          movzx r13, byte [destroyed_blocks]
  1803                                      
  1804                                      ; Verificar cada punto de spawn
  1805 00000F14 4831C9                      xor rcx, rcx                    ; Índice del enemigo
  1806                                      
  1807                                      .check_loop:
  1808 00000F17 4883F90A                        cmp rcx, 10                     ; Máximo 10 enemigos
  1809 00000F1B 7D4B                            jge .end
  1810                                          
  1811                                          ; Verificar si este spawn point ya fue usado
  1812 00000F1D 80B9[D8150000]01                cmp byte [enemy_spawns_triggered + rcx], 1
  1813 00000F24 743D                            je .next_enemy
  1814                                          
  1815                                          ; Verificar si este enemigo ya está activo
  1816 00000F26 4889C8                          mov rax, rcx
  1817 00000F29 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  1818 00000F2D 488DB0[4F150000]                lea rsi, [enemies + rax]
  1819 00000F34 807E0201                        cmp byte [rsi + 2], 1          ; Verificar si está activo
  1820 00000F38 7429                            je .next_enemy
  1821                                          
  1822                                          ; Verificar si debemos spawnear este enemigo
  1823 00000F3A 490FB6040C                      movzx rax, byte [r12 + rcx]    ; Obtener punto de spawn
  1824 00000F3F 4939C5                          cmp r13, rax                   ; Comparar con bloques destruidos
  1825 00000F42 751F                            jne .next_enemy
  1826                                          
  1827                                          ; Marcar este spawn point como usado
  1828 00000F44 C681[D8150000]01                mov byte [enemy_spawns_triggered + rcx], 1
  1829                                          
  1830                                          ; Spawner nuevo enemigo
  1831 00000F4B C60628                          mov byte [rsi], 40             ; X inicial
  1832 00000F4E C6460102                        mov byte [rsi + 1], 2          ; Y inicial
  1833 00000F52 C6460201                        mov byte [rsi + 2], 1          ; Activar enemigo
  1834                                          
  1835                                          ; Inicializar comportamiento
  1836 00000F56 4889C8                          mov rax, rcx
  1837 00000F59 4883E001                        and rax, 1                     ; Alternar comportamiento basado en índice par/impar
  1838 00000F5D 8805(D7150000)                  mov [current_behavior], al      ; 0 = persigue bola, 1 = persigue paleta
  1839                                          
  1840                                      .next_enemy:
  1841 00000F63 48FFC1                          inc rcx
  1842 00000F66 EBAF                            jmp .check_loop
  1843                                          
  1844                                      .end:
  1845 00000F68 5D                              pop rbp
  1846 00000F69 C3                              ret
  1847                                  
  1848                                  
  1849                                  ; Función para dibujar enemigos
  1850                                  print_enemies:
  1851 00000F6A 55                          push rbp
  1852 00000F6B 4889E5                      mov rbp, rsp
  1853                                      
  1854 00000F6E 4D31E4                      xor r12, r12                    ; Índice del enemigo
  1855                                      
  1856                                      .print_loop:
  1857 00000F71 4983FC0A                        cmp r12, 10                      ; Máximo 5 enemigos
  1858 00000F75 7D4B                            jge .end
  1859                                          
  1860                                          ; Calcular offset del enemigo actual
  1861 00000F77 4C89E0                          mov rax, r12
  1862 00000F7A 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  1863 00000F7E 488DB0[4F150000]                lea rsi, [enemies + rax]
  1864                                          
  1865                                          ; Verificar si el enemigo está activo
  1866 00000F85 807E0201                        cmp byte [rsi + 2], 1
  1867 00000F89 7532                            jne .next_enemy
  1868                                          
  1869                                          ; Calcular posición en el tablero
  1870 00000F8B 4C0FB606                        movzx r8, byte [rsi]            ; X
  1871 00000F8F 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  1872                                          
  1873                                          ; Calcular offset en el tablero
  1874 00000F94 B84E000000                      mov rax, column_cells
  1875 00000F99 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  1876 00000F9D 49F7E1                          mul r9
  1877 00000FA0 4C01C0                          add rax, r8
  1878 00000FA3 488DB8[000A0000]                lea rdi, [board + rax]
  1879                                          
  1880                                          ; Obtener carácter del enemigo según el nivel
  1881 00000FAA 480FB605(A4140000)              movzx rax, byte [current_level]
  1882 00000FB2 48FFC8                          dec rax                         ; Ajustar para índice base 0
  1883 00000FB5 8A80[4A150000]                  mov al, [enemy_chars + rax]
  1884                                          
  1885                                          ; Dibujar enemigo
  1886 00000FBB 8807                            mov [rdi], al
  1887                                          
  1888                                      .next_enemy:
  1889 00000FBD 49FFC4                          inc r12
  1890 00000FC0 EBAF                            jmp .print_loop
  1891                                          
  1892                                      .end:
  1893 00000FC2 5D                              pop rbp
  1894 00000FC3 C3                              ret
  1895                                  
  1896                                  ; Función para verificar colisión con enemigos
  1897                                  ; Función para verificar colisión con enemigos
  1898                                  check_enemy_collision:
  1899 00000FC4 55                          push rbp
  1900 00000FC5 4889E5                      mov rbp, rsp
  1901                                      
  1902 00000FC8 4D31E4                      xor r12, r12                    ; Índice del enemigo
  1903 00000FCB 4831C0                      xor rax, rax                    ; Valor de retorno (0 = no colisión)
  1904                                      
  1905                                      .check_loop:
  1906 00000FCE 4983FC05                        cmp r12, 5                      ; Máximo 5 enemigos
  1907 00000FD2 0F8DE9000000                    jge .end
  1908                                          
  1909                                          ; Calcular offset del enemigo actual
  1910 00000FD8 4C89E1                          mov rcx, r12
  1911 00000FDB 486BC903                        imul rcx, 3                     ; Cada enemigo ocupa 3 bytes
  1912 00000FDF 488DB1[4F150000]                lea rsi, [enemies + rcx]
  1913                                          
  1914                                          ; Verificar si el enemigo está activo
  1915 00000FE6 807E0201                        cmp byte [rsi + 2], 1
  1916 00000FEA 0F85C9000000                    jne .next_enemy
  1917                                          
  1918                                          ; Verificar colisión con la bola
  1919 00000FF0 4C0FB606                        movzx r8, byte [rsi]            ; X enemigo
  1920 00000FF4 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y enemigo
  1921                                          
  1922                                          ; Verificar si la bola está en el rango del enemigo (considerando el enemigo como un área)
  1923 00000FF9 4C8B15(4F140000)                mov r10, [ball_x_pos]
  1924 00001000 4C8B1D(57140000)                mov r11, [ball_y_pos]
  1925                                          
  1926                                          ; Comprobar colisión vertical (misma columna)
  1927 00001007 4D39C2                          cmp r10, r8
  1928 0000100A 7525                            jne .check_horizontal
  1929 0000100C 4D29CB                          sub r11, r9
  1930 0000100F 4983FB01                        cmp r11, 1
  1931 00001013 7F1C                            jg .check_horizontal
  1932 00001015 4983FBFF                        cmp r11, -1
  1933 00001019 7C16                            jl .check_horizontal
  1934                                          
  1935                                          ; Colisión vertical detectada
  1936 0000101B E8A3000000                      call destroy_enemy
  1937 00001020 48F71D(67140000)                neg qword [ball_direction_y]    ; Invertir dirección vertical
  1938 00001027 B801000000                      mov rax, 1
  1939 0000102C E990000000                      jmp .end
  1940                                          
  1941                                      .check_horizontal:
  1942                                          ; Comprobar colisión horizontal (misma fila)
  1943 00001031 4C8B15(4F140000)                mov r10, [ball_x_pos]
  1944 00001038 4C8B1D(57140000)                mov r11, [ball_y_pos]
  1945 0000103F 4D39CB                          cmp r11, r9
  1946 00001042 7522                            jne .check_paddle
  1947 00001044 4D29C2                          sub r10, r8
  1948 00001047 4983FA01                        cmp r10, 1
  1949 0000104B 7F19                            jg .check_paddle
  1950 0000104D 4983FAFF                        cmp r10, -1
  1951 00001051 7C13                            jl .check_paddle
  1952                                          
  1953                                          ; Colisión horizontal detectada
  1954 00001053 E86B000000                      call destroy_enemy
  1955 00001058 48F71D(5F140000)                neg qword [ball_direction_x]    ; Invertir dirección horizontal
  1956 0000105F B801000000                      mov rax, 1
  1957 00001064 EB5B                            jmp .end
  1958                                          
  1959                                      .check_paddle:
  1960                                          ; Verificar colisión con la paleta
  1961 00001066 4C8B15(3F140000)                mov r10, [pallet_position]
  1962 0000106D 4981EA[000A0000]                sub r10, board
  1963 00001074 4C89D0                          mov rax, r10
  1964 00001077 41BB4E000000                    mov r11, column_cells
  1965 0000107D 4983C302                        add r11, 2
  1966 00001081 4831D2                          xor rdx, rdx
  1967 00001084 49F7F3                          div r11                     ; División para obtener la posición Y
  1968 00001087 4989D3                          mov r11, rdx               ; X de la paleta en r11
  1969                                          
  1970 0000108A 488B0D(47140000)                mov rcx, [pallet_size]     ; Obtener el tamaño de la paleta
  1971                                          
  1972                                          ; Verificar si el enemigo está en la misma fila que la paleta
  1973 00001091 41BD20000000                    mov r13, row_cells
  1974 00001097 4983ED02                        sub r13, 2                 ; Y de la paleta
  1975 0000109B 4D39E9                          cmp r9, r13               ; Comparar Y del enemigo con Y de la paleta
  1976 0000109E 7519                            jne .next_enemy
  1977                                          
  1978                                          ; Verificar si el enemigo está dentro del rango X de la paleta
  1979 000010A0 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X inicial de la paleta
  1980 000010A3 7C14                            jl .next_enemy
  1981                                          
  1982 000010A5 4901CB                          add r11, rcx              ; Añadir el tamaño de la paleta
  1983 000010A8 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X final de la paleta
  1984 000010AB 7F0C                            jg .next_enemy
  1985                                          
  1986                                          ; Si llegamos aquí, hay colisión con la paleta
  1987 000010AD E811000000                      call destroy_enemy        ; Destruir el enemigo
  1988 000010B2 B801000000                      mov rax, 1                ; Indicar que hubo colisión
  1989 000010B7 EB08                            jmp .end
  1990                                          
  1991                                      .next_enemy:
  1992 000010B9 49FFC4                          inc r12
  1993 000010BC E90DFFFFFF                      jmp .check_loop
  1994                                          
  1995                                      .end:
  1996 000010C1 5D                              pop rbp
  1997 000010C2 C3                              ret
  1998                                  
  1999                                  ; Función para destruir un enemigo
  2000                                  destroy_enemy:
  2001                                      ; Desactivar enemigo
  2002 000010C3 C6460200                    mov byte [rsi + 2], 0   ; Marcar enemigo como inactivo
  2003                                  
  2004                                      ; Sumar puntos por destruir enemigo
  2005 000010C7 488B05(6E150000)            mov rax, [enemy_points]
  2006 000010CE 480105(2D150000)            add [current_score], rax
  2007                                  
  2008                                      ; No tocar bloques destruidos aquí
  2009 000010D5 C3                          ret
  2010                                  
  2011                                  
  2012                                  _start:
  2013 000010D6 E850F0FFFF              	call canonical_off
  2014 000010DB E8EE000000              	call start_screen
  2015 000010E0 E809F6FFFF                  call init_level
  2016 000010E5 E8FFFBFFFF                  call init_enemies
  2017 000010EA EB00                    	jmp .main_loop
  2018                                  	
  2019                                  
  2020                                  	.main_loop:
  2021 000010EC E8B6F9FFFF                      call print_labels
  2022 000010F1 E8E5F8FFFF                      call print_blocks
  2023 000010F6 E8EDF2FFFF                      call print_letters
  2024 000010FB E89BF3FFFF              		call print_pallet
  2025 00001100 E826F4FFFF                      call move_ball
  2026 00001105 E8D4F1FFFF                      call check_bottom_collision
  2027 0000110A E8CEF0FFFF                      call print_lives
  2028 0000110F E829F7FFFF                      call check_level_complete
  2029 00001114 E8E7FDFFFF                      call check_enemy_spawn
  2030 00001119 E8FFFBFFFF                      call move_enemies
  2031 0000111E E8A1FEFFFF                      call check_enemy_collision
  2032 00001123 E842FEFFFF                      call print_enemies
  2033 00001128 E846F3FFFF              		call print_ball
  2034                                  		print board, board_size				
    82 0000112D B801000000          <1>  mov eax, sys_write
    83 00001132 BF01000000          <1>  mov edi, 1
    84 00001137 48BE-               <1>  mov rsi, %1
    84 00001139 [000A000000000000]  <1>
    85 00001141 BA000A0000          <1>  mov edx, %2
    86 00001146 0F05                <1>  syscall
  2035                                  		;setnonblocking	
  2036                                  	.read_more:	
  2037                                  		getchar	
    90 00001148 B800000000          <1>  mov rax, sys_read
    91 0000114D BF00000000          <1>  mov rdi, STDIN_FILENO
    92 00001152 48BE-               <1>  mov rsi, input_char
    92 00001154 [0000000000000000]  <1>
    93 0000115C BA01000000          <1>  mov rdx, 1
    94 00001161 0F05                <1>  syscall
  2038                                  		
  2039 00001163 4883F801                		cmp rax, 1
  2040 00001167 7532                        	jne .done
  2041                                  		
  2042 00001169 8A05(00000000)          		mov al,[input_char]
  2043                                  
  2044 0000116F 3C61                    		cmp al, 'a'
  2045 00001171 750E                    	    jne .not_left
  2046 00001173 48C7C7FFFFFFFF          	    mov rdi, left_direction
  2047 0000117A E837F3FFFF              		call move_pallet
  2048 0000117F EB1A                    	    jmp .done
  2049                                  		
  2050                                  		.not_left:
  2051 00001181 3C64                    		 	cmp al, 'd'
  2052 00001183 750C                    	    	jne .not_right
  2053 00001185 BF01000000              			mov rdi, right_direction
  2054 0000118A E827F3FFFF              	    	call move_pallet
  2055 0000118F EB0A                        		jmp .done		
  2056                                  
  2057                                  		.not_right:
  2058                                  
  2059 00001191 3C71                        		cmp al, 'q'
  2060 00001193 0F84A8000000                		je exit
  2061                                  
  2062 00001199 EBAD                    			jmp .read_more
  2063                                  		
  2064                                  		.done:	
  2065                                  			;unsetnonblocking		
  2066                                  			sleeptime	
    98 0000119B B823000000          <1>  mov eax, sys_nanosleep
    99 000011A0 48BF-               <1>  mov rdi, timespec
    99 000011A2 [0000000000000000]  <1>
   100 000011AA 31F6                <1>  xor esi, esi
   101 000011AC 0F05                <1>  syscall
  2067                                  			print clear, clear_length
    82 000011AE B801000000          <1>  mov eax, sys_write
    83 000011B3 BF01000000          <1>  mov edi, 1
    84 000011B8 48BE-               <1>  mov rsi, %1
    84 000011BA [1000000000000000]  <1>
    85 000011C2 BA07000000          <1>  mov edx, %2
    86 000011C7 0F05                <1>  syscall
  2068 000011C9 E91EFFFFFF                  		jmp .main_loop
  2069                                  
  2070                                  
  2071                                  
  2072                                  start_screen:
  2073                                      print clear, clear_length    ; Limpiamos la pantalla primero
    82 000011CE B801000000          <1>  mov eax, sys_write
    83 000011D3 BF01000000          <1>  mov edi, 1
    84 000011D8 48BE-               <1>  mov rsi, %1
    84 000011DA [1000000000000000]  <1>
    85 000011E2 BA07000000          <1>  mov edx, %2
    86 000011E7 0F05                <1>  syscall
  2074                                      print msg1, msg1_length
    82 000011E9 B801000000          <1>  mov eax, sys_write
    83 000011EE BF01000000          <1>  mov edi, 1
    84 000011F3 48BE-               <1>  mov rsi, %1
    84 000011F5 [1700000000000000]  <1>
    85 000011FD BA14010000          <1>  mov edx, %2
    86 00001202 0F05                <1>  syscall
  2075                                      
  2076                                      .wait_for_key:              ; Agregamos una etiqueta para esperar la tecla
  2077                                          getchar                 ; Esperamos una tecla
    90 00001204 B800000000          <1>  mov rax, sys_read
    91 00001209 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 0000120E 48BE-               <1>  mov rsi, input_char
    92 00001210 [0000000000000000]  <1>
    93 00001218 BA01000000          <1>  mov rdx, 1
    94 0000121D 0F05                <1>  syscall
  2078 0000121F 4883F801                        cmp rax, 1             ; Verificamos si se leyó un carácter
  2079 00001223 75DF                            jne .wait_for_key      ; Si no se leyó, seguimos esperando
  2080                                          
  2081                                      print clear, clear_length   ; Limpiamos la pantalla antes de salir
    82 00001225 B801000000          <1>  mov eax, sys_write
    83 0000122A BF01000000          <1>  mov edi, 1
    84 0000122F 48BE-               <1>  mov rsi, %1
    84 00001231 [1000000000000000]  <1>
    85 00001239 BA07000000          <1>  mov edx, %2
    86 0000123E 0F05                <1>  syscall
  2082 00001240 C3                          ret
  2083                                  
  2084                                  exit: 
  2085 00001241 E827EFFFFF              	call canonical_on
  2086 00001246 B83C000000              	mov    rax, 60
  2087 0000124B BF00000000                  mov    rdi, 0
  2088 00001250 0F05                        syscall
  2089                                  
