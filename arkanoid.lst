     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  sys_read: equ 0	
     7                                  sys_write:	equ 1
     8                                  sys_nanosleep:	equ 35
     9                                  sys_time:	equ 201
    10                                  sys_fcntl:	equ 72
    11                                  
    12                                  
    13                                  STDIN_FILENO: equ 0
    14                                  
    15                                  F_SETFL:	equ 0x0004
    16                                  O_NONBLOCK: equ 0x0004
    17                                  
    18                                  ;screen clean definition
    19                                  row_cells:	equ 32	; set to any (reasonable) value you wish
    20                                  column_cells: 	equ 78 ; set to any (reasonable) value you wish
    21                                  array_length:	equ row_cells * column_cells + row_cells ; cells are mapped to bytes in the array and a new line char ends each row
    22                                  
    23                                  ;This is regarding the sleep time
    24                                  timespec:
    25 00000000 0000000000000000            tv_sec  dq 0
    26 00000008 00C2EB0B00000000            tv_nsec dq 200000000
    27                                  
    28                                  
    29                                  ;This is for cleaning up the screen
    30 00000010 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"
    31                                  clear_length:	equ $-clear
    32                                  	
    33                                  	
    34                                  
    35                                  ; Start Message
    36 00000017 202020202020202054-     msg1: db "        TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    36 00000020 45434E4F4C4F474943-
    36 00000029 4F20444520434F5354-
    36 00000032 412052494341202020-
    36 0000003B 20202020200A0D     
    37 00000042 202020202020202041-     msg2: db "        ARQUITECTURA DE COMPUTADORAS I        ", 0xA, 0xD
    37 0000004B 525155495445435455-
    37 00000054 524120444520434F4D-
    37 0000005D 50555441444F524153-
    37 00000066 204920202020202020-
    37 0000006F 200A0D             
    38 00000072 202020202020202045-     msg3: db "        ESTUDIANTE: HENRY NUNEZ PEREZ        ", 0xA, 0xD
    38 0000007B 5354554449414E5445-
    38 00000084 3A2048454E5259204E-
    38 0000008D 554E455A2050455245-
    38 00000096 5A2020202020202020-
    38 0000009F 0A0D               
    39 000000A1 202020202020202050-     msg4: db "        PROFESOR: ERNESTO RIVERA ALVARADO        ", 0xA, 0xD
    39 000000AA 524F4645534F523A20-
    39 000000B3 45524E4553544F2052-
    39 000000BC 495645524120414C56-
    39 000000C5 415241444F20202020-
    39 000000CE 202020200A0D       
    40 000000D4 202020202020202041-     msg5: db "        ARKANOID RETRO        ", 0xA, 0xD
    40 000000DD 524B414E4F49442052-
    40 000000E6 4554524F2020202020-
    40 000000EF 2020200A0D         
    41 000000F4 202020202020202050-     msg6: db "        PRESIONE CUALQUIER TECLA PARA INICIAR        ", 0xA, 0xD
    41 000000FD 524553494F4E452043-
    41 00000106 55414C515549455220-
    41 0000010F 5445434C4120504152-
    41 00000118 4120494E4943494152-
    41 00000121 20202020202020200A-
    41 0000012A 0D                 
    42                                  msg1_length: equ $-msg1
    43                                  msg2_length: equ $-msg2
    44                                  msg3_length: equ $-msg3
    45                                  msg4_length: equ $-msg4
    46                                  msg5_length: equ $-msg5
    47                                  msg6_length: equ $-msg6
    48                                  
    49                                  ; Usefull macros
    50                                  
    51                                  
    52                                  
    53                                  %macro setnonblocking 0
    54                                  	mov rax, sys_fcntl
    55                                      mov rdi, STDIN_FILENO
    56                                      mov rsi, F_SETFL
    57                                      mov rdx, O_NONBLOCK
    58                                      syscall
    59                                  %endmacro
    60                                  
    61                                  %macro unsetnonblocking 0
    62                                  	mov rax, sys_fcntl
    63                                      mov rdi, STDIN_FILENO
    64                                      mov rsi, F_SETFL
    65                                      mov rdx, 0
    66                                      syscall
    67                                  %endmacro
    68                                  
    69                                  %macro full_line 0
    70                                      times column_cells db "X"
    71                                      db 0x0a, 0xD
    72                                  %endmacro
    73                                  
    74                                  %macro hollow_line 0
    75                                      db "X"
    76                                      times column_cells-2 db " "
    77                                      db "X", 0x0a, 0xD
    78                                  %endmacro
    79                                  
    80                                  
    81                                  %macro print 2
    82                                  	mov eax, sys_write
    83                                  	mov edi, 1 	; stdout
    84                                  	mov rsi, %1
    85                                  	mov edx, %2
    86                                  	syscall
    87                                  %endmacro
    88                                  
    89                                  %macro getchar 0
    90                                  	mov     rax, sys_read
    91                                      mov     rdi, STDIN_FILENO
    92                                      mov     rsi, input_char
    93                                      mov     rdx, 1 ; number of bytes
    94                                      syscall         ;read text input from keyboard
    95                                  %endmacro
    96                                  
    97                                  %macro sleeptime 0
    98                                  	mov eax, sys_nanosleep
    99                                  	mov rdi, timespec
   100                                  	xor esi, esi		; ignore remaining time in case of call interruption
   101                                  	syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   102                                  %endmacro
   103                                  
   104                                  
   105                                  
   106                                  global _start
   107                                  
   108                                  section .bss
   109                                  
   110 00000000 ??                      input_char: resb 1
   111                                  
   112                                  section .data
   113                                  
   114                                  	; Guardamos la plantilla del tablero (32 filas)
   115                                      board_template:
   116                                          full_line
    70 00000000 58<rep 4Eh>         <1>  times column_cells db "X"
    71 0000004E 0A0D                <1>  db 0x0a, 0xD
   117                                          %rep 30
   118                                          hollow_line
   119                                          %endrep
   118                              <1>  hollow_line
    75 00000050 58                  <2>  db "X"
    76 00000051 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000009D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000A0 58                  <2>  db "X"
    76 000000A1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000000ED 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000F0 58                  <2>  db "X"
    76 000000F1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000013D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000140 58                  <2>  db "X"
    76 00000141 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000018D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000190 58                  <2>  db "X"
    76 00000191 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000001DD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000001E0 58                  <2>  db "X"
    76 000001E1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000022D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000230 58                  <2>  db "X"
    76 00000231 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000027D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000280 58                  <2>  db "X"
    76 00000281 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000002CD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000002D0 58                  <2>  db "X"
    76 000002D1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000031D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000320 58                  <2>  db "X"
    76 00000321 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000036D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000370 58                  <2>  db "X"
    76 00000371 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000003BD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000003C0 58                  <2>  db "X"
    76 000003C1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000040D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000410 58                  <2>  db "X"
    76 00000411 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000045D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000460 58                  <2>  db "X"
    76 00000461 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000004AD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000004B0 58                  <2>  db "X"
    76 000004B1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000004FD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000500 58                  <2>  db "X"
    76 00000501 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000054D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000550 58                  <2>  db "X"
    76 00000551 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000059D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005A0 58                  <2>  db "X"
    76 000005A1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000005ED 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005F0 58                  <2>  db "X"
    76 000005F1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000063D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000640 58                  <2>  db "X"
    76 00000641 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000068D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000690 58                  <2>  db "X"
    76 00000691 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000006DD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000006E0 58                  <2>  db "X"
    76 000006E1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000072D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000730 58                  <2>  db "X"
    76 00000731 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000077D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000780 58                  <2>  db "X"
    76 00000781 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000007CD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000007D0 58                  <2>  db "X"
    76 000007D1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000081D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000820 58                  <2>  db "X"
    76 00000821 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000086D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000870 58                  <2>  db "X"
    76 00000871 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000008BD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008C0 58                  <2>  db "X"
    76 000008C1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000090D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000910 58                  <2>  db "X"
    76 00000911 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000095D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000960 58                  <2>  db "X"
    76 00000961 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000009AD 580A0D              <2>  db "X", 0x0a, 0xD
   120                                          full_line
    70 000009B0 58<rep 4Eh>         <1>  times column_cells db "X"
    71 000009FE 0A0D                <1>  db 0x0a, 0xD
   121                                      board_template_size: equ $ - board_template
   122                                  
   123                                      ; Espacio real que se usará en la ejecución
   124 00000A00 00<rep A00h>                board: times board_template_size db 0
   125                                      board_size: equ board_template_size
   126                                  
   127                                  	; Added for the terminal issue
   128 00001400 00<rep 24h>             	termios:        times 36 db 0
   129                                  	stdin:          equ 0
   130                                  	ICANON:         equ 1<<1
   131                                  	ECHO:           equ 1<<3
   132                                  	VTIME: 			equ 5
   133                                  	VMIN:			equ 6
   134                                  	CC_C:			equ 18
   135                                  
   136                                  section .text
   137                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   138                                  canonical_off:
   139 0000012B E86F000000                      call read_stdin_termios
   140                                  
   141                                          ; clear canonical bit in local mode flags
   142 00000130 50                              push rax
   143 00000131 B802000000                      mov eax, ICANON
   144 00000136 F7D0                            not eax
   145 00000138 2105(0C140000)                  and [termios+12], eax
   146 0000013E C605(17140000)00        		mov byte[termios+CC_C+VTIME], 0
   147 00000145 C605(18140000)00        		mov byte[termios+CC_C+VMIN], 0
   148 0000014C 58                              pop rax
   149                                  
   150 0000014D E86C000000                      call write_stdin_termios
   151 00000152 C3                              ret
   152                                  
   153                                  echo_off:
   154 00000153 E847000000                      call read_stdin_termios
   155                                  
   156                                          ; clear echo bit in local mode flags
   157 00000158 50                              push rax
   158 00000159 B808000000                      mov eax, ECHO
   159 0000015E F7D0                            not eax
   160 00000160 2105(0C140000)                  and [termios+12], eax
   161 00000166 58                              pop rax
   162                                  
   163 00000167 E852000000                      call write_stdin_termios
   164 0000016C C3                              ret
   165                                  
   166                                  canonical_on:
   167 0000016D E82D000000                      call read_stdin_termios
   168                                  
   169                                          ; set canonical bit in local mode flags
   170 00000172 830D(0C140000)02                or dword [termios+12], ICANON
   171 00000179 C605(17140000)00        		mov byte[termios+CC_C+VTIME], 0
   172 00000180 C605(18140000)01        		mov byte[termios+CC_C+VMIN], 1
   173 00000187 E832000000                      call write_stdin_termios
   174 0000018C C3                              ret
   175                                  
   176                                  echo_on:
   177 0000018D E80D000000                      call read_stdin_termios
   178                                  
   179                                          ; set echo bit in local mode flags
   180 00000192 830D(0C140000)08                or dword [termios+12], ECHO
   181                                  
   182 00000199 E820000000                      call write_stdin_termios
   183 0000019E C3                              ret
   184                                  
   185                                  read_stdin_termios:
   186 0000019F 50                              push rax
   187 000001A0 53                              push rbx
   188 000001A1 51                              push rcx
   189 000001A2 52                              push rdx
   190                                  
   191 000001A3 B836000000                      mov eax, 36h
   192 000001A8 BB00000000                      mov ebx, stdin
   193 000001AD B901540000                      mov ecx, 5401h
   194 000001B2 BA[00140000]                    mov edx, termios
   195 000001B7 CD80                            int 80h
   196                                  
   197 000001B9 5A                              pop rdx
   198 000001BA 59                              pop rcx
   199 000001BB 5B                              pop rbx
   200 000001BC 58                              pop rax
   201 000001BD C3                              ret
   202                                  
   203                                  write_stdin_termios:
   204 000001BE 50                              push rax
   205 000001BF 53                              push rbx
   206 000001C0 51                              push rcx
   207 000001C1 52                              push rdx
   208                                  
   209 000001C2 B836000000                      mov eax, 36h
   210 000001C7 BB00000000                      mov ebx, stdin
   211 000001CC B902540000                      mov ecx, 5402h
   212 000001D1 BA[00140000]                    mov edx, termios
   213 000001D6 CD80                            int 80h
   214                                  
   215 000001D8 5A                              pop rdx
   216 000001D9 59                              pop rcx
   217 000001DA 5B                              pop rbx
   218 000001DB 58                              pop rax
   219 000001DC C3                              ret
   220                                  
   221                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   222                                  
   223                                  char_equal: equ 61
   224                                  char_space: equ 32
   225                                  char_O: equ 79
   226                                  left_direction: equ -1
   227                                  right_direction: equ 1
   228                                  
   229                                  
   230                                  section .data
   231                                  
   232                                  ; Mensajes para los niveles
   233 00001424 4E4956454C20                level_msg: db "NIVEL "
   234                                      level_msg_len: equ $ - level_msg
   235 0000142A 31                          level_1_char: db "1"
   236 0000142B 32                          level_2_char: db "2"
   237 0000142C 33                          level_3_char: db "3"
   238 0000142D 34                          level_4_char: db "4"
   239 0000142E 35                          level_5_char: db "5"
   240                                      level_char_len: equ 1
   241                                  
   242                                      ; Timespec para la pausa del mensaje de nivel
   243                                      level_display_time:
   244 0000142F 0100000000000000                lvl_tv_sec dq 1           ; 1 segundo
   245 00001437 0000000000000000                lvl_tv_nsec dq 0
   246                                          
   247 0000143F [3613000000000000]      	pallet_position dq board + 38 + 29 * (column_cells +2)
   248 00001447 0500000000000000            pallet_size dq 5
   249 0000144F 0500000000000000            default_pallet_size dq 5    ; Tamaño normal de la paleta
   250 00001457 0700000000000000            extended_pallet_size dq 7   ; Tamaño extendido de la paleta
   251                                  
   252 0000145F 2800000000000000        	ball_x_pos: dq 40
   253 00001467 1C00000000000000        	ball_y_pos: dq 28
   254 0000146F 0100000000000000            ball_direction_x dq 1    ; 1 = derecha, -1 = izquierda
   255 00001477 FFFFFFFFFFFFFFFF            ball_direction_y dq -1   ; -1 = arriba, 1 = abajo
   256 0000147F 00                          ball_moving db 0         ; 0 = estática, 1 = en movimiento
   257                                  
   258                                  ; Definir los límites de la pantalla o área de juego
   259                                      board_top_left_x equ 1
   260                                      board_top_left_y equ 1
   261                                      board_bottom_right_x equ column_cells - 1
   262                                      board_bottom_right_y equ row_cells
   263                                  
   264                                      ; Limites laterales
   265                                      left_edge equ board_top_left_x               ; Límite izquierdo en la primera columna
   266                                      right_edge equ board_bottom_right_x         ; Límite derecho en la última columna
   267                                  
   268                                      ; O también puedes hacerlo así si prefieres usando las coordenadas en memoria para obtener la ubicación exacta:
   269 00001480 [500A000000000000]          left_edge_position dq board + (board_top_left_y * (column_cells + 2)) ; Coordenada de la parte izquierda del marco
   270 00001488 [9C0A000000000000]          right_edge_position dq board + (board_top_left_y * (column_cells + 2) + board_bottom_right_x - 1) ; Coordenada de la parte derecha del marco
   271                                  
   272                                      ; Definición de tipos de bloques
   273 00001490 555555555555                block_type_1: db "UUUUUU"    ; Durabilidad 1
   274 00001496 4F4F4F4F4F4F                block_type_2: db "OOOOOO"    ; Durabilidad 2
   275 0000149C 444444444444                block_type_3: db "DDDDDD"    ; Durabilidad 3
   276 000014A2 4C4C4C4C4C4C                block_type_4: db "LLLLLL"    ; Durabilidad 4
   277 000014A8 565656565656                block_type_5: db "VVVVVV"    ; Durabilidad 5
   278 000014AE 383838383838                block_type_6: db "888888"    ; Durabilidad 6
   279                                      block_length: equ 6        ; Longitud de cada bloque
   280                                  
   281                                      ; Estructura para el nivel actual
   282 000014B4 01                          current_level db 1
   283 000014B5 00                          blocks_remaining db 0
   284                                  
   285                                      ; Definición del nivel 1 (ejemplo con múltiples bloques)destroyed_blocks
   286                                      ; Formato: x_pos, y_pos, tipo_bloque, durabilidad_actual
   287                                      level1_blocks:
   288                                          ; Tercera fila (tipo 3)
   289 000014B6 3A07030143                      db 58, 7, 3, 1, 'C'    ; Bloque 7
   290 000014BB 3D09030153                      db 61, 9, 3, 1, 'S'    ; Bloque 7
   291 000014C0 1207030153                      db 18, 7, 3, 1, 'S'    ; Bloque 7
   292                                      level1_blocks_count equ 3   ; Cantidad total de bloques
   293                                  
   294                                      ; Nivel 2: Bloques de prueba
   295                                      level2_blocks:
   296 000014C5 3C07010145                      db 60, 7, 1, 1, 'E'    ; Un bloque simple en el nivel 2   ; Un bloque simple en el nivel 2
   297                                      level2_blocks_count equ 1
   298                                  
   299                                      ; Nivel 3
   300                                      level3_blocks:
   301 000014CA 3C07020145                      db 60, 7, 2, 1, 'E'    ; Bloque 1
   302                                  
   303                                      level3_blocks_count equ 1
   304                                  
   305                                      ; Nivel 4
   306                                      level4_blocks:
   307 000014CF 3C07040145                      db 60, 7, 4, 1, 'E'    ; Bloque 1
   308                                      level4_blocks_count equ 1
   309                                  
   310                                      ; Nivel 5
   311                                      level5_blocks:
   312 000014D4 3C07050145                      db 60, 7, 5, 1, 'E'    ; Bloque 1
   313                                      level5_blocks_count equ 1
   314                                  
   315                                      ; Array para mantener el estado de los bloques
   316 000014D9 00<rep 64h>                 block_states: times 100 db 0  ; Durabilidad actual de cada bloque
   317                                  
   318                                      
   319                                      ; Variables para almacenar los valores
   320 0000153D 0000000000000000            current_score dq 0          ; Score actual
   321 00001545 00                          destroyed_blocks db 0       ; Bloques destruidos en el nivel actual
   322                                      
   323                                      ; Buffer para convertir números a string
   324 00001546 00<rep 14h>                 number_buffer: times 20 db 0
   325                                  
   326 0000155A 4023242640                  enemy_chars db "@", "#", "$", "&", "@"    ; El nivel 1 y 5 comparten el mismo caracter (@)
   327                                      
   328                                      ; Estructura para los enemigos (x, y, activo)
   329 0000155F 00<rep 1Eh>                 enemies: times 10 * 3 db 0     ; Máximo 5 enemigos, cada uno con 3 bytes (x, y, activo)
   330 0000157D 0A                          enemies_count db 10            ; Cantidad de enemigos activos
   331                                      
   332 0000157E 3200000000000000            enemy_points dq 50              ; Puntos por destruir un enemigo
   333 00001586 00                          enemy_move_counter db 0         ; Contador para controlar velocidad de movimiento
   334 00001587 02                          enemy_move_delay db 2           ; Mover enemigos cada N ciclos
   335 00001588 00                          enemy_move_total db 0      ; Contador total de movimientos
   336 00001589 00                          enemy_target db 0          ; 0 = persigue bola, 1 = persigue paleta
   337 0000158A 14                          MOVEMENT_THRESHOLD db 20   ; Número de movimientos antes de cambiar objetivo
   338                                   ;Formato: número de bloques destruidos necesario para que aparezca cada enemigo
   339                                      ; Añade esto en la sección .dataa
   340 0000158B 00010206080A0C0E10-         level1_spawn_points: db 0, 1, 2, 6, 8, 10, 12, 14, 16, 18    ; 10 enemigos, cada 2 bloques
   340 00001594 12                 
   341 00001595 01030507090B0D0F11-         level2_spawn_points: db 1, 3, 5, 7, 9, 11, 13, 15, 17, 19    ; 10 enemigos, cada 2 bloques
   341 0000159E 13                 
   342 0000159F 000306090C0F121518-         level3_spawn_points: db 0, 3, 6, 9, 12, 15, 18, 21, 24, 27   ; 10 enemigos, cada 3 bloques
   342 000015A8 1B                 
   343 000015A9 0104070A0D10131619-         level4_spawn_points: db 1, 4, 7, 10, 13, 16, 19, 22, 25, 28  ; 10 enemigos, cada 3 bloques
   343 000015B2 1C                 
   344 000015B3 00050A0F14191E2328-         level5_spawn_points: db 0, 5, 10, 15, 20, 25, 30, 35, 40, 45 ; 10 enemigos, cada 5 bloques
   344 000015BC 2D                 
   345                                          ; Arreglo de punteros a los spawn points de cada nivel
   346                                      spawn_points_table:
   347 000015BD [8B15000000000000]              dq level1_spawn_points
   348 000015C5 [9515000000000000]              dq level2_spawn_points
   349 000015CD [9F15000000000000]              dq level3_spawn_points
   350 000015D5 [A915000000000000]              dq level4_spawn_points
   351 000015DD [B315000000000000]              dq level5_spawn_points
   352                                  
   353                                      ; Variables para el comportamiento de enemigos
   354 000015E5 1E                          BEHAVIOR_CHANGE_TIME db 30    ; Ciclos antes de cambiar comportamiento
   355 000015E6 00                          behavior_counter db 0          ; Contador para cambio de comportamiento
   356 000015E7 00                          current_behavior db 0          ; 0 = persigue bola, 1 = persigue paleta
   357 000015E8 00<rep Ah>                  enemy_spawns_triggered: times 10 db 0  ; 0 = no spawned, 1 = spawned
   358                                  
   359 000015F2 50756E74616A653A20-         score_label: db "Puntaje: [          ]", 0xA, 0xD  ; 10 espacios para el número
   359 000015FB 5B2020202020202020-
   359 00001604 20205D0A0D         
   360                                      score_label_len: equ $ - score_label
   361 00001609 426C6F717565732064-         blocks_label: db "Bloques destruidos: [   ]", 0xA, 0xD  ; 3 espacios para el número
   361 00001612 657374727569646F73-
   361 0000161B 3A205B2020205D0A0D 
   362                                      blocks_label_len: equ $ - blocks_label
   363                                      
   364                                      ; Posición donde insertar los números en los labels
   365                                      score_pos equ 10    ; Posición después de "Puntaje: ["
   366                                      blocks_pos equ 20   ; Posición después de "Bloques destruidos: ["
   367                                      
   368                                      ; Definición de las vidas (x, y, estado)
   369                                      ; Formato: posición_x, posición_y, estado (1 = activa, 0 = inactiva)
   370                                      lives_data: 
   371 00001624 021E01                          db 2, 30, 1     ; Vida 1 (activa)
   372 00001627 041E01                          db 4, 30, 1     ; Vida 2 (activa)
   373 0000162A 061E01                          db 6, 30, 1     ; Vida 3 (inactiva)
   374 0000162D 081E01                          db 8, 30, 1     ; Vida 4 (inactiva)
   375 00001630 0A1E00                          db 10, 30, 0    ; Vida 5 (inactiva)
   376 00001633 0C1E00                          db 12, 30, 0    ; Vida 6 (inactiva)
   377 00001636 0E1E00                          db 14, 30, 0    ; Vida 7 (inactiva)
   378                                      lives_count equ 7    ; Total de vidas
   379 00001639 5E                          life_char db "^"    
   380 0000163A 04                          current_lives db 4   ; Contador de vidas activas actual
   381                                  
   382                                  ; Estructura para almacenar las letras y sus posiciones
   383                                      ; Formato: x, y, letra, activo (1 = activo, 0 = inactivo)
   384 0000163B 00<rep 190h>                letters_map: times 100 * 4 db 0  ; Espacio para 100 letras
   385 000017CB 00                          letters_count db 0   
   386 000017CC 20                          last_letter db ' '    ; Variable para almacenar la última letra
   387 000017CD 506F64657220616374-         last_letter_msg db "Poder actual: [ ]", 0xA, 0xD  ; Mensaje para mostrar la última letra
   387 000017D6 75616C3A205B205D0A-
   387 000017DF 0D                 
   388                                      last_letter_msg_len equ $ - last_letter_msg
   389 000017E0 00                          current_power_processed db 0 ; 0 = no procesado, 1 = ya procesado
   390 000017E1 07                          max_lives db 7              ; Máximo número de vidas permitidas
   391 000017E2 0100000000000000            ball_speed dq 1             ; Velocidad normal de la bola
   392 000017EA 0200000000000000            slow_ball_speed dq 2        ; Velocidad lenta (se usará como divisor)
   393 000017F2 0000000000000000            speed_counter dq 0          ; Contador para ralentizar el movimiento
   394                                  
   395 000017FA 00                          catch_power_active db 0     ; 0 = inactivo, 1 = activo
   396 000017FB 00                          ball_caught db 0           ; 0 = no atrapada, 1 = atrapada
   397 000017FC 0000000000000000            ball_catch_offset dq 0     ; Offset respecto a la paleta cuando está atrapada
   398 00001804 00                          last_key db 0    ; Variable para almacenar la última tecla presionada
   399                                  
   400                                  
   401                                  section .text
   402                                  
   403                                  
   404                                  print_lives:
   405 000001DD 55                          push rbp
   406 000001DE 4889E5                      mov rbp, rsp
   407                                      
   408 000001E1 4D31E4                      xor r12, r12                    ; Índice de la vida actual
   409                                      
   410                                      .print_loop:
   411 000001E4 4983FC07                        cmp r12, lives_count
   412 000001E8 7D45                            jge .end
   413                                          
   414                                          ; Calcular offset de la vida actual
   415 000001EA 4C89E0                          mov rax, r12
   416 000001ED 486BC003                        imul rax, 3                     ; Cada vida ocupa 3 bytes (x, y, estado)
   417 000001F1 488DB0[24160000]                lea rsi, [lives_data + rax]
   418                                          
   419                                          ; Calcular posición en el tablero
   420 000001F8 4C0FB606                        movzx r8, byte [rsi]            ; X
   421 000001FC 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
   422                                          
   423                                          ; Calcular offset en el tablero
   424 00000201 B84E000000                      mov rax, column_cells
   425 00000206 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
   426 0000020A 49F7E1                          mul r9
   427 0000020D 4C01C0                          add rax, r8
   428 00000210 488DB8[000A0000]                lea rdi, [board + rax]
   429                                          
   430                                          ; Verificar estado de la vida y dibujar el carácter correspondiente
   431 00000217 807E0201                        cmp byte [rsi + 2], 1
   432 0000021B 7405                            je .draw_active
   433                                          
   434                                          ; Si está inactiva, dibujar espacio
   435 0000021D C60720                          mov byte [rdi], ' '
   436 00000220 EB08                            jmp .next_life
   437                                          
   438                                      .draw_active:
   439                                          ; Si está activa, dibujar el símbolo de vida
   440 00000222 8A05(39160000)                  mov al, [life_char]
   441 00000228 8807                            mov [rdi], al
   442                                          
   443                                      .next_life:
   444 0000022A 49FFC4                          inc r12
   445 0000022D EBB5                            jmp .print_loop
   446                                          
   447                                      .end:
   448 0000022F 5D                              pop rbp
   449 00000230 C3                              ret
   450                                  
   451                                  ; Función para desactivar una vida
   452                                  ; Función modificada para perder una vida
   453                                  lose_life:
   454 00000231 55                          push rbp
   455 00000232 4889E5                      mov rbp, rsp
   456                                      
   457                                      ; Verificar si aún quedan vidas
   458 00000235 803D(3A160000)00            cmp byte [current_lives], 0
   459 0000023C 0F8493000000                je .game_lost
   460                                      
   461                                      ; Encontrar la última vida activa
   462 00000242 B907000000                  mov rcx, lives_count
   463 00000247 48FFC9                      dec rcx                     ; Empezar desde la última vida
   464                                      
   465                                      .find_active_life:
   466 0000024A 4889C8                          mov rax, rcx
   467 0000024D 486BC003                        imul rax, 3            ; Cada vida ocupa 3 bytes
   468 00000251 488DB0[24160000]                lea rsi, [lives_data + rax]
   469 00000258 807E0201                        cmp byte [rsi + 2], 1  ; Verificar si está activa
   470 0000025C 7407                            je .deactivate_life
   471 0000025E 48FFC9                          dec rcx
   472 00000261 79E7                            jns .find_active_life  ; Continuar si no hemos llegado a -1
   473 00000263 EB70                            jmp .game_lost         ; Si no encontramos vidas activas
   474                                          
   475                                      .deactivate_life:
   476                                          ; Calcular posición correcta en el tablero para borrar la vida
   477 00000265 4C0FB606                        movzx r8, byte [rsi]            ; X
   478 00000269 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
   479                                          
   480                                          ; Calcular offset en el tablero: Y * (column_cells + 2) + X
   481 0000026E B84E000000                      mov rax, column_cells
   482 00000273 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
   483 00000277 49F7E1                          mul r9
   484 0000027A 4C01C0                          add rax, r8
   485 0000027D 488DB8[000A0000]                lea rdi, [board + rax]
   486                                          
   487                                          ; Borrar visualmente la vida
   488 00000284 C60720                          mov byte [rdi], ' '             
   489                                          
   490                                          ; Desactivar la vida en los datos
   491 00000287 C6460200                        mov byte [rsi + 2], 0          
   492 0000028B FE0D(3A160000)                  dec byte [current_lives]
   493                                          
   494                                          ; Borrar visualmente la paleta anterior
   495 00000291 4C8B05(3F140000)                mov r8, [pallet_position]
   496 00000298 488B0D(47140000)                mov rcx, [pallet_size]
   497                                          .erase_pallet_loop:
   498 0000029F 41C60020                            mov byte [r8], ' '          ; Reemplazar cada posición con un espacio
   499 000002A3 49FFC0                              inc r8
   500 000002A6 48FFC9                              dec rcx
   501 000002A9 75F4                                jnz .erase_pallet_loop
   502                                          
   503                                  
   504                                          ; Reiniciar posición de la bola y la paleta
   505 000002AB 48C705(5F140000)28-             mov qword [ball_x_pos], 40
   505 000002B3 000000             
   506 000002B6 48C705(67140000)1C-             mov qword [ball_y_pos], 28
   506 000002BE 000000             
   507 000002C1 C605(7F140000)00                mov byte [ball_moving], 0
   508 000002C8 48C705(3F140000)-               mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
   508 000002CF [36130000]         
   509                                          
   510 000002D3 EB07                            jmp .end
   511                                          
   512                                      .game_lost:
   513 000002D5 E81C000000                      call game_lost
   514 000002DA EB00                            jmp .end
   515                                          
   516                                      .end:
   517 000002DC 5D                              pop rbp
   518 000002DD C3                              ret
   519                                  ; Función modificada para verificar colisión con el borde inferior
   520                                  check_bottom_collision:
   521 000002DE 55                          push rbp
   522 000002DF 4889E5                      mov rbp, rsp
   523                                      
   524                                      ; Verificar si la bola está en la última fila (row_cells - 1)
   525 000002E2 488B05(67140000)            mov rax, [ball_y_pos]
   526 000002E9 4883F81E                    cmp rax, row_cells - 2
   527 000002ED 7505                        jne .no_collision
   528                                      
   529                                      ; Si hay colisión, perder una vida
   530 000002EF E83DFFFFFF                  call lose_life
   531                                      
   532                                      .no_collision:
   533 000002F4 5D                              pop rbp
   534 000002F5 C3                              ret
   535                                  
   536                                  ; Nueva función para game over
   537                                  game_lost:
   538                                      ; Limpiar la pantalla
   539                                      print clear, clear_length
    82 000002F6 B801000000          <1>  mov eax, sys_write
    83 000002FB BF01000000          <1>  mov edi, 1
    84 00000300 48BE-               <1>  mov rsi, %1
    84 00000302 [1000000000000000]  <1>
    85 0000030A BA07000000          <1>  mov edx, %2
    86 0000030F 0F05                <1>  syscall
   540                                      
   541                                      ; Mostrar mensaje de derrota
   542                                      section .data
   543 00001805 C2A148617320706572-             lost_msg: db "¡Has perdido!", 0xA, 0xD
   543 0000180E 6469646F210A0D     
   544                                          lost_msg_len: equ $ - lost_msg
   545                                      section .text
   546                                      
   547                                      ; Imprimir mensaje de derrota
   548                                      print lost_msg, lost_msg_len
    82 00000311 B801000000          <1>  mov eax, sys_write
    83 00000316 BF01000000          <1>  mov edi, 1
    84 0000031B 48BE-               <1>  mov rsi, %1
    84 0000031D [0518000000000000]  <1>
    85 00000325 BA10000000          <1>  mov edx, %2
    86 0000032A 0F05                <1>  syscall
   549                                      print score_msg, score_msg_len
    82 0000032C B801000000          <1>  mov eax, sys_write
    83 00000331 BF01000000          <1>  mov edi, 1
    84 00000336 48BE-               <1>  mov rsi, %1
    84 00000338 [3318000000000000]  <1>
    85 00000340 BA0F000000          <1>  mov edx, %2
    86 00000345 0F05                <1>  syscall
   550                                      
   551                                      ; Mostrar puntaje final
   552 00000347 488B05(3D150000)            mov rax, [current_score]
   553 0000034E 48BF-                       mov rdi, number_buffer
   553 00000350 [4615000000000000] 
   554 00000358 E8B90A0000                  call number_to_string
   555                                      print number_buffer, 20
    82 0000035D B801000000          <1>  mov eax, sys_write
    83 00000362 BF01000000          <1>  mov edi, 1
    84 00000367 48BE-               <1>  mov rsi, %1
    84 00000369 [4615000000000000]  <1>
    85 00000371 BA14000000          <1>  mov edx, %2
    86 00000376 0F05                <1>  syscall
   556                                      
   557                                      ; Esperar un momento antes de salir
   558 00000378 48C7057DFCFFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
   558 00000381 0000               
   559 00000383 48C7057AFCFFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
   559 0000038C 0000               
   560                                      sleeptime
    98 0000038E B823000000          <1>  mov eax, sys_nanosleep
    99 00000393 48BF-               <1>  mov rdi, timespec
    99 00000395 [0000000000000000]  <1>
   100 0000039D 31F6                <1>  xor esi, esi
   101 0000039F 0F05                <1>  syscall
   561                                      
   562 000003A1 E95F120000                  jmp exit
   563                                  
   564                                  
   565                                  ; Función para registrar una nueva letra en el mapa
   566                                  ; Entrada:
   567                                  ;   al - letra a registrar
   568                                  ;   r8b - posición x
   569                                  ;   r9b - posición y
   570                                  register_letter:
   571 000003A6 55                          push rbp
   572 000003A7 4889E5                      mov rbp, rsp
   573 000003AA 53                          push rbx
   574 000003AB 51                          push rcx
   575                                      
   576 000003AC 3C20                        cmp al, ' '
   577 000003AE 7438                        je .end
   578                                  
   579                                      ; Encontrar un espacio libre en el mapa
   580 000003B0 4831C9                      xor rcx, rcx
   581 000003B3 480FB615(CB170000)          movzx rdx, byte [letters_count]
   582                                      
   583                                      .find_slot:
   584 000003BB 4883F964                        cmp rcx, 100              ; Máximo de letras
   585 000003BF 7D27                            jge .end                  ; Si no hay espacio, salir
   586                                          
   587 000003C1 488D1C8D[3B160000]              lea rbx, [letters_map + rcx * 4]
   588 000003C9 807B0300                        cmp byte [rbx + 3], 0    ; Verificar si el slot está inactivo
   589 000003CD 7405                            je .found_slot
   590                                          
   591 000003CF 48FFC1                          inc rcx
   592 000003D2 EBE7                            jmp .find_slot
   593                                          
   594                                      .found_slot:
   595                                          ; Guardar la información de la letra
   596 000003D4 448803                          mov [rbx], r8b           ; x
   597 000003D7 44884B01                        mov [rbx + 1], r9b       ; y
   598 000003DB 884302                          mov [rbx + 2], al        ; letra
   599 000003DE C6430301                        mov byte [rbx + 3], 1    ; marcar como activo
   600                                          
   601 000003E2 FE05(CB170000)                  inc byte [letters_count]
   602                                          
   603                                      .end:
   604 000003E8 59                              pop rcx
   605 000003E9 5B                              pop rbx
   606 000003EA 5D                              pop rbp
   607 000003EB C3                              ret
   608                                  
   609                                  ; Función para imprimir todas las letras registradas
   610                                  print_letters:
   611 000003EC 55                          push rbp
   612 000003ED 4889E5                      mov rbp, rsp
   613 000003F0 53                          push rbx
   614 000003F1 51                          push rcx
   615                                      
   616 000003F2 4831C9                      xor rcx, rcx
   617                                      
   618                                      .print_loop:
   619 000003F5 4883F964                        cmp rcx, 100              ; Máximo de letras
   620 000003F9 7D37                            jge .end
   621                                          
   622                                          ; Obtener puntero a la letra actual
   623 000003FB 488D1C8D[3B160000]              lea rbx, [letters_map + rcx * 4]
   624                                          
   625                                          ; Verificar si está activa
   626 00000403 807B0300                        cmp byte [rbx + 3], 0
   627 00000407 7424                            je .next_letter
   628                                          
   629                                          ; Calcular posición en el tablero
   630 00000409 4C0FB603                        movzx r8, byte [rbx]      ; x
   631 0000040D 4C0FB64B01                      movzx r9, byte [rbx + 1]  ; y
   632                                          
   633                                          ; Calcular offset en el tablero
   634 00000412 B84E000000                      mov rax, column_cells
   635 00000417 4883C002                        add rax, 2                ; Incluir caracteres de nueva línea
   636 0000041B 49F7E1                          mul r9
   637 0000041E 4C01C0                          add rax, r8
   638 00000421 488DB8[000A0000]                lea rdi, [board + rax]
   639                                          
   640                                          ; Imprimir la letra
   641 00000428 8A4302                          mov al, [rbx + 2]
   642 0000042B 8807                            mov [rdi], al
   643                                          
   644                                      .next_letter:
   645 0000042D 48FFC1                          inc rcx
   646 00000430 EBC3                            jmp .print_loop
   647                                          
   648                                      .end:
   649 00000432 59                              pop rcx
   650 00000433 5B                              pop rbx
   651 00000434 5D                              pop rbp
   652 00000435 C3                              ret
   653                                  
   654                                  ; Función para borrar una letra específica
   655                                  ; Entrada:
   656                                  ;   r8b - posición x
   657                                  ;   r9b - posición y
   658                                  remove_letter:
   659 00000436 55                          push rbp
   660 00000437 4889E5                      mov rbp, rsp
   661 0000043A 53                          push rbx
   662 0000043B 51                          push rcx
   663                                      
   664 0000043C 4831C9                      xor rcx, rcx
   665                                      
   666                                      .find_loop:
   667 0000043F 4883F964                        cmp rcx, 100              ; Máximo de letras
   668 00000443 7D2E                            jge .end
   669                                          
   670 00000445 488D1C8D[3B160000]              lea rbx, [letters_map + rcx * 4]
   671                                          
   672                                          ; Verificar si está activa y coincide la posición
   673 0000044D 807B0300                        cmp byte [rbx + 3], 0
   674 00000451 741B                            je .next_letter
   675                                          
   676 00000453 8A03                            mov al, [rbx]
   677 00000455 4438C0                          cmp al, r8b
   678 00000458 7514                            jne .next_letter
   679                                          
   680 0000045A 8A4301                          mov al, [rbx + 1]
   681 0000045D 4438C8                          cmp al, r9b
   682 00000460 750C                            jne .next_letter
   683                                          
   684                                          ; Encontrada la letra, desactivarla
   685 00000462 C6430300                        mov byte [rbx + 3], 0
   686 00000466 FE0D(CB170000)                  dec byte [letters_count]
   687 0000046C EB05                            jmp .end
   688                                          
   689                                      .next_letter:
   690 0000046E 48FFC1                          inc rcx
   691 00000471 EBCC                            jmp .find_loop
   692                                          
   693                                      .end:
   694 00000473 59                              pop rcx
   695 00000474 5B                              pop rbx
   696 00000475 5D                              pop rbp
   697 00000476 C3                              ret
   698                                  ; Función para mover las letras hacia abajo
   699                                  move_letters:
   700 00000477 55                          push rbp
   701 00000478 4889E5                      mov rbp, rsp
   702 0000047B 53                          push rbx
   703 0000047C 57                          push rdi
   704 0000047D 56                          push rsi
   705 0000047E 4150                        push r8
   706 00000480 4151                        push r9
   707 00000482 4152                        push r10
   708 00000484 4153                        push r11
   709                                  
   710 00000486 4831C9                      xor rcx, rcx
   711                                  
   712                                      .move_loop:
   713 00000489 4883F964                        cmp rcx, 100
   714 0000048D 0F8D44010000                    jge .print_last_letter
   715                                          
   716 00000493 488D1C8D[3B160000]              lea rbx, [letters_map + rcx * 4]
   717 0000049B 807B0300                        cmp byte [rbx + 3], 0
   718 0000049F 0F842A010000                    je .next_letter
   719                                  
   720 000004A5 4C0FB603                        movzx r8, byte [rbx]
   721 000004A9 4C0FB64B01                      movzx r9, byte [rbx + 1]
   722                                  
   723 000004AE B84E000000                      mov rax, column_cells
   724 000004B3 4883C002                        add rax, 2
   725 000004B7 49F7E1                          mul r9
   726 000004BA 4C01C0                          add rax, r8
   727 000004BD 488DB8[000A0000]                lea rdi, [board + rax]
   728 000004C4 C60720                          mov byte [rdi], ' '
   729                                  
   730 000004C7 FE4301                          inc byte [rbx + 1]
   731 000004CA 4C0FB64B01                      movzx r9, byte [rbx + 1]
   732                                  
   733 000004CF 4983F91F                        cmp r9, row_cells - 1
   734 000004D3 7C09                            jl .check_pallet_collision
   735                                  
   736 000004D5 C6430300                        mov byte [rbx + 3], 0
   737 000004D9 E9F1000000                      jmp .next_letter
   738                                  
   739                                          .check_pallet_collision:
   740 000004DE B84E000000                          mov rax, column_cells
   741 000004E3 4883C002                            add rax, 2
   742 000004E7 49F7E1                              mul r9
   743 000004EA 4C01C0                              add rax, r8
   744 000004ED 488DB8[000A0000]                    lea rdi, [board + rax]
   745                                  
   746 000004F4 8A07                                mov al, [rdi]
   747 000004F6 3C20                                cmp al, ' '
   748 000004F8 0F84D1000000                        je .next_letter
   749 000004FE 3C3D                                cmp al, char_equal
   750 00000500 740A                                je .capture_letter
   751                                  
   752 00000502 8A4302                              mov al, [rbx + 2]
   753 00000505 8807                                mov [rdi], al
   754 00000507 E9C3000000                          jmp .next_letter
   755                                  
   756                                          .capture_letter:
   757                                              ; Obtener la nueva letra
   758 0000050C 8A4302                              mov al, [rbx + 2]
   759                                              
   760                                              ; Comparar con la última letra
   761 0000050F 3A05(CC170000)                      cmp al, [last_letter]
   762 00000515 7407                                je .same_letter
   763                                              
   764                                              ; Es una letra diferente, resetear el procesamiento
   765 00000517 C605(E0170000)00                    mov byte [current_power_processed], 0
   766                                              
   767                                              .same_letter:
   768                                              ; Guardar la nueva letra
   769 0000051E 8805(CC170000)                      mov [last_letter], al
   770                                              
   771                                              ; Verificar si es 'E' para extender la paleta
   772 00000524 3C45                                cmp al, 'E'
   773 00000526 7432                                je .extend_pallet
   774                                              
   775                                              ; Verificar si es 'P' para añadir vida
   776 00000528 3C50                                cmp al, 'P'
   777 0000052A 7449                                je .check_add_life
   778                                  
   779 0000052C 3C53                                cmp al, 'S'
   780 0000052E 7477                                je .slow_ball
   781                                  
   782 00000530 3C43                                cmp al, 'C'
   783 00000532 0F848A000000                        je .activate_catch
   784                                              
   785                                              ; Si no es ningún power-up, restaurar tamaño normal
   786 00000538 488B05(4F140000)                    mov rax, [default_pallet_size]
   787 0000053F 488905(47140000)                    mov [pallet_size], rax
   788 00000546 48C705(E2170000)01-                 mov qword [ball_speed], 1    ; Restaurar velocidad normal
   788 0000054E 000000             
   789 00000551 C605(FA170000)00                    mov byte [catch_power_active], 0
   790 00000558 EB71                                jmp .finish_capture
   791                                  
   792                                              .extend_pallet:
   793 0000055A 48C705(E2170000)01-                     mov qword [ball_speed], 1    ; Restaurar velocidad normal
   793 00000562 000000             
   794 00000565 488B05(57140000)                        mov rax, [extended_pallet_size]
   795 0000056C 488905(47140000)                        mov [pallet_size], rax
   796 00000573 EB56                                    jmp .finish_capture
   797                                  
   798                                              .check_add_life:
   799 00000575 488B05(4F140000)                        mov rax, [default_pallet_size]
   800 0000057C 488905(47140000)                        mov [pallet_size], rax
   801 00000583 48C705(E2170000)01-                     mov qword [ball_speed], 1 
   801 0000058B 000000             
   802                                                  ; Verificar si ya procesamos este power-up
   803 0000058E 803D(E0170000)00                        cmp byte [current_power_processed], 0
   804 00000595 7534                                    jne .finish_capture
   805                                                  
   806                                                  ; Preservar registros importantes
   807 00000597 51                                      push rcx
   808 00000598 53                                      push rbx
   809                                                  
   810                                                  ; Marcar como procesado
   811 00000599 C605(E0170000)01                        mov byte [current_power_processed], 1
   812                                                  
   813                                                  ; Añadir una vida
   814 000005A0 E881000000                              call add_life
   815                                                  
   816                                                  ; Restaurar registros
   817 000005A5 5B                                      pop rbx
   818 000005A6 59                                      pop rcx
   819                                                  
   820                                              .slow_ball:
   821 000005A7 488B05(4F140000)                        mov rax, [default_pallet_size]
   822 000005AE 488905(47140000)                        mov [pallet_size], rax
   823 000005B5 48C705(E2170000)02-                     mov qword [ball_speed], 2    ; Activar velocidad lenta
   823 000005BD 000000             
   824 000005C0 EB09                                    jmp .finish_capture
   825                                  
   826                                              .activate_catch:
   827 000005C2 C605(FA170000)01                        mov byte [catch_power_active], 1
   828 000005C9 EB00                                    jmp .finish_capture
   829                                  
   830                                              .finish_capture:
   831 000005CB C6430300                                mov byte [rbx + 3], 0
   832                                  
   833                                          .next_letter:
   834 000005CF 48FFC1                              inc rcx
   835 000005D2 E9B2FEFFFF                          jmp .move_loop
   836                                  
   837                                      .print_last_letter:
   838                                          print last_letter_msg, last_letter_msg_len - 3
    82 000005D7 B801000000          <1>  mov eax, sys_write
    83 000005DC BF01000000          <1>  mov edi, 1
    84 000005E1 48BE-               <1>  mov rsi, %1
    84 000005E3 [CD17000000000000]  <1>
    85 000005EB BA10000000          <1>  mov edx, %2
    86 000005F0 0F05                <1>  syscall
   839 000005F2 8A05(CC170000)                  mov al, [last_letter]
   840 000005F8 8805(DC170000)                  mov [last_letter_msg + 15], al
   841                                          print last_letter_msg + last_letter_msg_len - 3, 3
    82 000005FE B801000000          <1>  mov eax, sys_write
    83 00000603 BF01000000          <1>  mov edi, 1
    84 00000608 48BE-               <1>  mov rsi, %1
    84 0000060A [DD17000000000000]  <1>
    85 00000612 BA03000000          <1>  mov edx, %2
    86 00000617 0F05                <1>  syscall
   842                                  
   843                                      .end:
   844 00000619 415B                            pop r11
   845 0000061B 415A                            pop r10
   846 0000061D 4159                            pop r9
   847 0000061F 4158                            pop r8
   848 00000621 5E                              pop rsi
   849 00000622 5F                              pop rdi
   850 00000623 5B                              pop rbx
   851 00000624 5D                              pop rbp
   852 00000625 C3                              ret
   853                                  
   854                                  add_life:
   855 00000626 55                          push rbp
   856 00000627 4889E5                      mov rbp, rsp
   857 0000062A 53                          push rbx
   858 0000062B 51                          push rcx
   859 0000062C 57                          push rdi
   860 0000062D 56                          push rsi
   861 0000062E 4150                        push r8
   862 00000630 4151                        push r9
   863                                      
   864                                      ; Verificar si ya tenemos el máximo de vidas
   865 00000632 480FB605(3A160000)          movzx rax, byte [current_lives]
   866 0000063A 4883F807                    cmp rax, 7          ; Comparar con el máximo de vidas
   867 0000063E 7D2C                        jge .end
   868                                      
   869                                      ; Incrementar el contador de vidas
   870 00000640 FE05(3A160000)              inc byte [current_lives]
   871                                      
   872                                      ; Encontrar la siguiente vida inactiva
   873 00000646 4831C9                      xor rcx, rcx
   874                                      
   875                                      .find_inactive:
   876 00000649 4883F907                        cmp rcx, lives_count
   877 0000064D 7D1D                            jge .end
   878                                          
   879                                          ; Calcular offset de la vida actual
   880 0000064F 4889C8                          mov rax, rcx
   881 00000652 486BC003                        imul rax, 3
   882 00000656 488DB0[24160000]                lea rsi, [lives_data + rax]
   883                                          
   884                                          ; Verificar si está inactiva
   885 0000065D 807E0200                        cmp byte [rsi + 2], 0
   886 00000661 7405                            je .activate_life
   887                                          
   888 00000663 48FFC1                          inc rcx
   889 00000666 EBE1                            jmp .find_inactive
   890                                          
   891                                      .activate_life:
   892                                          ; Activar la vida
   893 00000668 C6460201                        mov byte [rsi + 2], 1
   894                                          
   895                                      .end:
   896 0000066C 4159                            pop r9
   897 0000066E 4158                            pop r8
   898 00000670 5E                              pop rsi
   899 00000671 5F                              pop rdi
   900 00000672 59                              pop rcx
   901 00000673 5B                              pop rbx
   902 00000674 5D                              pop rbp
   903 00000675 C3                              ret
   904                                  
   905                                  
   906                                  print_ball:
   907 00000676 4C8B05(5F140000)        	mov r8, [ball_x_pos]
   908 0000067D 4C8B0D(67140000)        	mov r9, [ball_y_pos]
   909 00000684 4981C0[000A0000]        	add r8, board
   910                                  
   911 0000068B 4C89C9                  	mov rcx, r9
   912 0000068E B850000000              	mov rax, column_cells + 2
   913 00000693 48F7E9                  	imul rcx
   914                                  	
   915 00000696 4901C0                  	add r8, rax
   916 00000699 41C6004F                	mov byte [r8], char_O
   917 0000069D C3                      	ret
   918                                  
   919                                  	
   920                                  	;mov rax, board + r8 + r9 * (column_cells + 2)
   921                                  	
   922                                  print_pallet:
   923                                      ; Primero borrar la paleta anterior completa (usando el tamaño máximo posible)
   924 0000069E 4C8B05(3F140000)            mov r8, [pallet_position]
   925 000006A5 488B0D(57140000)            mov rcx, [extended_pallet_size]
   926                                      .clear_pallet:
   927 000006AC 41C60020                        mov byte [r8], char_space
   928 000006B0 49FFC0                          inc r8
   929 000006B3 48FFC9                          dec rcx
   930 000006B6 75F4                            jnz .clear_pallet
   931                                  
   932                                      ; Luego dibujar la nueva paleta con el tamaño actual
   933 000006B8 4C8B05(3F140000)            mov r8, [pallet_position]
   934 000006BF 488B0D(47140000)            mov rcx, [pallet_size]
   935                                      .write_pallet:
   936 000006C6 41C6003D                        mov byte [r8], char_equal
   937 000006CA 49FFC0                          inc r8
   938 000006CD 48FFC9                          dec rcx
   939 000006D0 75F4                            jnz .write_pallet
   940                                  
   941 000006D2 C3                          ret
   942                                  
   943                                  move_pallet:
   944                                      
   945 000006D3 803D(7F140000)00            cmp byte [ball_moving], 0
   946 000006DA 7507                        jne .continue_movement
   947 000006DC C605(7F140000)01            mov byte [ball_moving], 1
   948                                  
   949                                      .continue_movement:
   950 000006E3 4883FFFF                        cmp rdi, left_direction
   951 000006E7 7531                            jne .move_right
   952                                  
   953                                          .move_left:
   954                                              ; Verificar si la siguiente posición sería una X (borde izquierdo)
   955 000006E9 4C8B05(3F140000)                    mov r8, [pallet_position]
   956 000006F0 49FFC8                              dec r8              ; Verificar la posición a la izquierda
   957 000006F3 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
   958 000006F6 3C58                                cmp al, 'X'        ; Comparar si es una X
   959 000006F8 744D                                je .end            ; Si es X, no mover
   960                                              
   961 000006FA 4C8B05(3F140000)                    mov r8, [pallet_position]
   962 00000701 4C8B0D(47140000)                    mov r9, [pallet_size]
   963 00000708 43C64408FF20                        mov byte [r8 + r9 - 1], char_space  ; Borrar último carácter de la paleta
   964 0000070E 49FFC8                              dec r8
   965 00000711 4C8905(3F140000)                    mov [pallet_position], r8
   966 00000718 EB2D                                jmp .end
   967                                              
   968                                          .move_right:
   969                                              ; Verificar si la siguiente posición después de la paleta sería una X
   970 0000071A 4C8B05(3F140000)                    mov r8, [pallet_position]
   971 00000721 4C8B0D(47140000)                    mov r9, [pallet_size]
   972 00000728 4D01C8                              add r8, r9         ; Moverse al final de la paleta
   973 0000072B 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
   974 0000072E 3C58                                cmp al, 'X'        ; Comparar si es una X
   975 00000730 7415                                je .end            ; Si es X, no mover
   976                                              
   977 00000732 4C8B05(3F140000)                    mov r8, [pallet_position]
   978 00000739 41C60020                            mov byte [r8], char_space
   979 0000073D 49FFC0                              inc r8
   980 00000740 4C8905(3F140000)                    mov [pallet_position], r8
   981                                          .end:
   982 00000747 C3                                  ret
   983                                  
   984                                  
   985                                              
   986                                  ; Nueva función auxiliar para actualizar la posición de la bola atrapada
   987                                  update_caught_ball_position:
   988 00000748 55                          push rbp
   989 00000749 4889E5                      mov rbp, rsp
   990                                      
   991                                      ; Calcular la nueva posición de la bola basada en la paleta
   992 0000074C 4C8B05(3F140000)            mov r8, [pallet_position]
   993 00000753 4981E8[000A0000]            sub r8, board          ; Obtener posición relativa
   994 0000075A B850000000                  mov rax, column_cells + 2
   995 0000075F 4831D2                      xor rdx, rdx
   996 00000762 48F7F0                      div rax                ; División para obtener X,Y
   997                                      
   998                                      ; rdx contiene X (resto), rax contiene Y (cociente)
   999 00000765 4989C1                      mov r9, rax            ; Y de la paleta
  1000 00000768 49FFC9                      dec r9                 ; Una posición arriba de la paleta
  1001                                      
  1002                                      ; Añadir el offset guardado a la posición X
  1003 0000076B 4889D0                      mov rax, rdx
  1004 0000076E 480305(FC170000)            add rax, [ball_catch_offset]
  1005 00000775 488905(5F140000)            mov [ball_x_pos], rax
  1006 0000077C 4C890D(67140000)            mov [ball_y_pos], r9
  1007                                      
  1008 00000783 5D                          pop rbp
  1009 00000784 C3                          ret
  1010                                  move_ball:
  1011                                  
  1012 00000785 803D(FB170000)01            cmp byte [ball_caught], 1
  1013 0000078C 0F849D000000                je .move_with_pallet
  1014                                  
  1015 00000792 803D(7F140000)00            cmp byte [ball_moving], 0
  1016 00000799 0F84B8010000                je .end
  1017                                  
  1018                                      ; Incrementar contador de velocidad
  1019 0000079F 48FF05(F2170000)            inc qword [speed_counter]
  1020                                      
  1021                                      ; Verificar si debemos mover la bola en este ciclo
  1022 000007A6 488B05(F2170000)            mov rax, [speed_counter]
  1023 000007AD 483B05(E2170000)            cmp rax, [ball_speed]
  1024 000007B4 0F8C9D010000                jl .end
  1025                                      
  1026                                      ; Resetear contador de velocidad
  1027 000007BA 48C705(F2170000)00-         mov qword [speed_counter], 0
  1027 000007C2 000000             
  1028                                  
  1029                                      ; Borrar la posición actual de la bola
  1030 000007C5 4C8B05(5F140000)            mov r8, [ball_x_pos]
  1031 000007CC 4C8B0D(67140000)            mov r9, [ball_y_pos]
  1032 000007D3 4981C0[000A0000]            add r8, board
  1033 000007DA 4C89C9                      mov rcx, r9
  1034 000007DD B850000000                  mov rax, column_cells + 2
  1035 000007E2 48F7E9                      imul rcx
  1036 000007E5 4901C0                      add r8, rax
  1037 000007E8 41C60020                    mov byte [r8], char_space
  1038                                  
  1039                                      ; Calcular siguiente posición X
  1040 000007EC 4C8B05(5F140000)            mov r8, [ball_x_pos]
  1041 000007F3 4C8B0D(67140000)            mov r9, [ball_y_pos]
  1042 000007FA 488B05(6F140000)            mov rax, [ball_direction_x]
  1043 00000801 4901C0                      add r8, rax               ; Nueva posición X
  1044                                  
  1045                                      ; Calcular la dirección de memoria para la siguiente posición
  1046 00000804 4D89C2                      mov r10, r8
  1047 00000807 4981C2[000A0000]            add r10, board
  1048 0000080E 4C89C9                      mov rcx, r9
  1049 00000811 B850000000                  mov rax, column_cells + 2
  1050 00000816 48F7E9                      imul rcx
  1051 00000819 4901C2                      add r10, rax
  1052                                  
  1053                                      ; Verificar si hay una X en la siguiente posición X
  1054 0000081C 418A02                      mov al, [r10]
  1055 0000081F 3C58                        cmp al, 'X'
  1056 00000821 7565                        jne .check_block_x
  1057 00000823 48F71D(6F140000)            neg qword [ball_direction_x]  ; Cambiar dirección X si hay una X
  1058 0000082A E928010000                  jmp .end
  1059                                  
  1060                                      .move_with_pallet:
  1061                                          ; Borrar la posición actual de la bola
  1062 0000082F 4C8B05(5F140000)                mov r8, [ball_x_pos]
  1063 00000836 4C8B0D(67140000)                mov r9, [ball_y_pos]
  1064 0000083D 4D89C2                          mov r10, r8
  1065 00000840 4981C2[000A0000]                add r10, board
  1066 00000847 4C89C9                          mov rcx, r9
  1067 0000084A B850000000                      mov rax, column_cells + 2
  1068 0000084F 48F7E9                          imul rcx
  1069 00000852 4901C2                          add r10, rax
  1070 00000855 41C60220                        mov byte [r10], char_space
  1071                                  
  1072                                          ; Actualizar posición X basada en la paleta
  1073 00000859 4C8B05(3F140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  1074 00000860 4981E8[000A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  1075 00000867 4C0305(FC170000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  1076 0000086E 4C8905(5F140000)                mov [ball_x_pos], r8          ; Guardar nueva posición X
  1077                                  
  1078                                          ; Mantener la bola una posición arriba de la paleta
  1079 00000875 4C8B0D(67140000)                mov r9, [ball_y_pos]          ; Mantener la misma altura
  1080 0000087C 4C890D(67140000)                mov [ball_y_pos], r9          ; Actualizar posición Y
  1081                                  
  1082 00000883 E9CF000000                      jmp .end
  1083                                  
  1084                                  
  1085                                      .check_block_x:
  1086                                          ; Verificar colisión con bloques en X
  1087 00000888 4150                            push r8     ; Guardar registros que usa check_block_collision
  1088 0000088A 4151                            push r9
  1089 0000088C 4152                            push r10
  1090 0000088E E8DB060000                      call check_block_collision
  1091 00000893 415A                            pop r10
  1092 00000895 4159                            pop r9
  1093 00000897 4158                            pop r8
  1094 00000899 4885C0                          test rax, rax
  1095 0000089C 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  1096 0000089E 48F71D(6F140000)                neg qword [ball_direction_x]  ; Si hay colisión, rebotar
  1097 000008A5 E9AD000000                      jmp .end
  1098                                  
  1099                                      .check_paddle_x:
  1100                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  1101 000008AA 41803A3D                        cmp byte [r10], char_equal
  1102 000008AE 750C                            jne .check_y_movement
  1103 000008B0 48F71D(6F140000)                neg qword [ball_direction_x]  ; Cambiar dirección X si hay una paleta
  1104 000008B7 E99B000000                      jmp .end
  1105                                  
  1106                                      .check_y_movement:
  1107                                          ; Calcular siguiente posición Y
  1108 000008BC 488B05(77140000)                mov rax, [ball_direction_y]
  1109 000008C3 4901C1                          add r9, rax                  ; Nueva posición Y
  1110                                  
  1111                                          ; Calcular la dirección de memoria para la siguiente posición Y
  1112 000008C6 4D89C2                          mov r10, r8
  1113 000008C9 4981C2[000A0000]                add r10, board
  1114 000008D0 4C89C9                          mov rcx, r9
  1115 000008D3 B850000000                      mov rax, column_cells + 2
  1116 000008D8 48F7E9                          imul rcx
  1117 000008DB 4901C2                          add r10, rax
  1118                                  
  1119                                          ; Verificar si hay una X en la siguiente posición Y
  1120 000008DE 418A02                          mov al, [r10]
  1121 000008E1 3C58                            cmp al, 'X'
  1122 000008E3 7509                            jne .check_block_y
  1123 000008E5 48F71D(77140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una X
  1124 000008EC EB69                            jmp .end
  1125                                  
  1126                                      .check_block_y:
  1127                                          ; Verificar colisión con bloques en Y
  1128 000008EE 4150                            push r8     ; Guardar registros que usa check_block_collision
  1129 000008F0 4151                            push r9
  1130 000008F2 4152                            push r10
  1131 000008F4 E875060000                      call check_block_collision
  1132 000008F9 415A                            pop r10
  1133 000008FB 4159                            pop r9
  1134 000008FD 4158                            pop r8
  1135 000008FF 4885C0                          test rax, rax
  1136 00000902 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  1137 00000904 48F71D(77140000)                neg qword [ball_direction_y]  ; Si hay colisión, rebotar
  1138 0000090B EB4A                            jmp .end
  1139                                  
  1140                                      .check_paddle_y:
  1141                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  1142 0000090D 41803A3D                        cmp byte [r10], char_equal
  1143 00000911 7536                            jne .update_position
  1144                                  
  1145                                          ; Verificar si el poder catch está activo
  1146 00000913 803D(FA170000)01                cmp byte [catch_power_active], 1
  1147 0000091A 7524                            jne .normal_bounce
  1148                                  
  1149                                          ; Activar el modo "atrapado"
  1150 0000091C C605(FB170000)01                mov byte [ball_caught], 1
  1151                                          
  1152                                          ; Guardar la posición X actual de la bola como offset
  1153 00000923 488B05(5F140000)                mov rax, [ball_x_pos]           ; Posición X actual de la bola
  1154 0000092A 482B05(3F140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  1155 00000931 4805[000A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  1156 00000937 488905(FC170000)                mov [ball_catch_offset], rax    ; Guardar el offset
  1157                                          
  1158 0000093E EB17                            jmp .end
  1159                                  
  1160                                      .normal_bounce:
  1161 00000940 48F71D(77140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una paleta
  1162 00000947 EB0E                            jmp .end
  1163                                  
  1164                                  
  1165                                      .update_position:
  1166 00000949 4C8905(5F140000)                mov [ball_x_pos], r8
  1167 00000950 4C890D(67140000)                mov [ball_y_pos], r9
  1168                                  
  1169                                      .end:
  1170 00000957 C3                              ret
  1171                                  
  1172                                  ; Nueva función para procesar la tecla C cuando la bola está atrapada
  1173                                  ; Procesar la tecla 'c' cuando el poder de atrapar está activo
  1174                                  process_catch_release:
  1175 00000958 55                          push rbp
  1176 00000959 4889E5                      mov rbp, rsp
  1177                                  
  1178                                      ; Verificar si la bola está atrapada
  1179 0000095C 803D(FB170000)00            cmp byte [ball_caught], 0
  1180 00000963 7436                        je .end
  1181                                  
  1182                                      ; Verificar si el poder catch está activo
  1183 00000965 803D(FA170000)01            cmp byte [catch_power_active], 1
  1184 0000096C 752D                        jne .end
  1185                                  
  1186                                      ; Verificar si se presionó la tecla 'c'
  1187 0000096E 803D(04180000)63            cmp byte [last_key], 'c'
  1188 00000975 7524                        jne .end
  1189                                  
  1190                                      ; Liberar la bola y asignar dirección inicial
  1191 00000977 C605(FB170000)00            mov byte [ball_caught], 0
  1192 0000097E 48C705(6F140000)01-         mov qword [ball_direction_x], 1
  1192 00000986 000000             
  1193 00000989 48C705(77140000)FF-         mov qword [ball_direction_y], -1
  1193 00000991 FFFFFF             
  1194                                  
  1195                                      ; Limpiar la tecla procesada
  1196 00000994 C605(04180000)00            mov byte [last_key], 0
  1197                                  
  1198                                      .end:
  1199 0000099B 5D                              pop rbp
  1200 0000099C C3                              ret
  1201                                  
  1202                                  
  1203                                  display_level_number:
  1204 0000099D 55                          push rbp
  1205 0000099E 4889E5                      mov rbp, rsp
  1206                                      
  1207                                      ; Limpiar la pantalla primero
  1208                                      print clear, clear_length
    82 000009A1 B801000000          <1>  mov eax, sys_write
    83 000009A6 BF01000000          <1>  mov edi, 1
    84 000009AB 48BE-               <1>  mov rsi, %1
    84 000009AD [1000000000000000]  <1>
    85 000009B5 BA07000000          <1>  mov edx, %2
    86 000009BA 0F05                <1>  syscall
  1209                                      
  1210                                      ; Calcular la posición central para el mensaje
  1211                                      ; Para el mensaje "NIVEL X", necesitamos centrar 7 caracteres
  1212 000009BC B84E000000                  mov rax, column_cells
  1213 000009C1 4883E807                    sub rax, 7                  ; longitud de "NIVEL X"
  1214 000009C5 48D1E8                      shr rax, 1                  ; dividir por 2 para centrar
  1215                                      
  1216                                      ; Calcular la fila central
  1217 000009C8 BB20000000                  mov rbx, row_cells
  1218 000009CD 48D1EB                      shr rbx, 1                  ; dividir por 2 para obtener la fila central
  1219                                      
  1220                                      ; Calcular el offset en el buffer
  1221 000009D0 B950000000                  mov rcx, column_cells + 2   ; ancho total de una línea incluyendo newline
  1222 000009D5 48F7E3                      mul rbx                     ; multiplicar por la fila central
  1223 000009D8 4801D8                      add rax, rbx                ; añadir el offset horizontal
  1224                                      
  1225                                      ; Escribir "NIVEL " en la posición calculada
  1226 000009DB 488DB8[000A0000]            lea rdi, [board + rax]
  1227 000009E2 48BE-                       mov rsi, level_msg
  1227 000009E4 [2414000000000000] 
  1228 000009EC B906000000                  mov rcx, level_msg_len
  1229 000009F1 F3A4                        rep movsb
  1230                                      
  1231                                      ; Escribir el número del nivel
  1232 000009F3 8A05(B4140000)              mov al, [current_level]
  1233 000009F9 0430                        add al, '0'                 ; convertir a ASCII
  1234 000009FB 8807                        mov [rdi], al
  1235                                      
  1236                                      ; Mostrar el board con el mensaje
  1237                                      print board, board_size
    82 000009FD B801000000          <1>  mov eax, sys_write
    83 00000A02 BF01000000          <1>  mov edi, 1
    84 00000A07 48BE-               <1>  mov rsi, %1
    84 00000A09 [000A000000000000]  <1>
    85 00000A11 BA000A0000          <1>  mov edx, %2
    86 00000A16 0F05                <1>  syscall
  1238                                      
  1239                                      ; Esperar un segundo
  1240 00000A18 B823000000                  mov rax, sys_nanosleep
  1241 00000A1D 48BF-                       mov rdi, level_display_time
  1241 00000A1F [2F14000000000000] 
  1242 00000A27 4831F6                      xor rsi, rsi
  1243 00000A2A 0F05                        syscall
  1244                                      
  1245 00000A2C 5D                          pop rbp
  1246 00000A2D C3                          ret
  1247                                  
  1248                                  ; Función para inicializar un tablero vacío
  1249                                  init_empty_board:
  1250 00000A2E 56                          push rsi
  1251 00000A2F 57                          push rdi
  1252 00000A30 51                          push rcx
  1253 00000A31 50                          push rax
  1254                                  
  1255 00000A32 488D35(00000000)            lea rsi, [board_template]   ; Copiar la plantilla del tablero
  1256 00000A39 488D3D(000A0000)            lea rdi, [board]            ; Destino: el tablero actual
  1257 00000A40 B9000A0000                  mov rcx, board_template_size
  1258 00000A45 F3A4                        rep movsb                   ; Copiar el tablero
  1259                                  
  1260 00000A47 58                          pop rax
  1261 00000A48 59                          pop rcx
  1262 00000A49 5F                          pop rdi
  1263 00000A4A 5E                          pop rsi
  1264 00000A4B C3                          ret
  1265                                  
  1266                                  
  1267                                  init_level:
  1268                                  
  1269 00000A4C 488B05(4F140000)            mov rax, [default_pallet_size]
  1270 00000A53 488905(47140000)            mov [pallet_size], rax
  1271 00000A5A 48C705(E2170000)01-         mov qword [ball_speed], 1    ; Restaurar velocidad normal
  1271 00000A62 000000             
  1272                                  
  1273                                      ; 1) Copiamos board_template en board para que quede "virgen"
  1274                                          ; Reiniciar letras activas
  1275 00000A65 488D3D(3B160000)            lea rdi, [letters_map]
  1276 00000A6C B990010000                  mov rcx, 100 * 4             ; Cada letra ocupa 4 bytes, limpiar 100 letras
  1277 00000A71 4831C0                      xor rax, rax
  1278 00000A74 F3AA                        rep stosb                    ; Llenar con ceros
  1279                                      
  1280                                      ; Inicializar dirección de la bola (derecha y arriba)
  1281 00000A76 48C705(6F140000)01-         mov qword [ball_direction_x], 1    ; Dirección hacia la derecha (1 = derecha, -1 = izquierda)
  1281 00000A7E 000000             
  1282 00000A81 48C705(77140000)FF-         mov qword [ball_direction_y], -1   ; Dirección hacia arriba (-1 = arriba, 1 = abajo)
  1282 00000A89 FFFFFF             
  1283                                  
  1284                                  
  1285                                      ; Reiniciar contador de letras activas
  1286 00000A8C 4831C0                      xor rax, rax
  1287 00000A8F 8805(CB170000)              mov [letters_count], al
  1288                                  
  1289                                      ; Reiniciar última letra capturada
  1290 00000A95 C605(CC170000)20            mov byte [last_letter], ' '
  1291 00000A9C C605(45150000)00            mov byte [destroyed_blocks], 0 
  1292 00000AA3 E886FFFFFF                  call init_empty_board
  1293 00000AA8 E8F0FEFFFF                  call display_level_number
  1294 00000AAD E8E5050000                  call init_enemies
  1295                                      
  1296 00000AB2 56                          push rsi
  1297 00000AB3 57                          push rdi
  1298 00000AB4 51                          push rcx
  1299 00000AB5 50                          push rax
  1300                                  
  1301 00000AB6 488D35(00000000)            lea rsi, [board_template]
  1302 00000ABD 488D3D(000A0000)            lea rdi, [board]
  1303 00000AC4 B9000A0000                  mov rcx, board_template_size
  1304 00000AC9 F3A4                        rep movsb                 ; Copiamos la plantilla a board
  1305                                  
  1306 00000ACB 58                          pop rax
  1307 00000ACC 59                          pop rcx
  1308 00000ACD 5F                          pop rdi
  1309 00000ACE 5E                          pop rsi
  1310                                  
  1311 00000ACF B90A000000                  mov rcx, 10
  1312 00000AD4 4831C0                      xor rax, rax
  1313 00000AD7 488D3D(E8150000)            lea rdi, [enemy_spawns_triggered]
  1314 00000ADE F3AA                        rep stosb      
  1315                                  
  1316                                      ; Verificar el nivel actual y cargar los bloques correspondientes
  1317 00000AE0 803D(B4140000)01            cmp byte [current_level], 1
  1318 00000AE7 7431                        je .level1
  1319 00000AE9 803D(B4140000)02            cmp byte [current_level], 2
  1320 00000AF0 7454                        je .level2
  1321 00000AF2 803D(B4140000)03            cmp byte [current_level], 3
  1322 00000AF9 7477                        je .level3
  1323 00000AFB 803D(B4140000)04            cmp byte [current_level], 4
  1324 00000B02 0F8492000000                je .level4
  1325 00000B08 803D(B4140000)05            cmp byte [current_level], 5
  1326 00000B0F 0F84AD000000                je .level5
  1327 00000B15 E9D0000000                  jmp .done
  1328                                  
  1329                                  
  1330                                  
  1331                                      .level1:
  1332 00000B1A C605(B5140000)03                mov byte [blocks_remaining], level1_blocks_count
  1333 00000B21 4831C9                          xor rcx, rcx             
  1334                                          .init_loop1:
  1335 00000B24 4883F903                            cmp rcx, level1_blocks_count
  1336 00000B28 0F8DBC000000                        jge .done
  1337 00000B2E 4889C8                              mov rax, rcx         
  1338 00000B31 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1339 00000B35 8A90[B9140000]                      mov dl, byte [level1_blocks + rax + 3]  
  1340 00000B3B 8891[D9140000]                      mov byte [block_states + rcx], dl
  1341 00000B41 48FFC1                              inc rcx
  1342 00000B44 EBDE                                jmp .init_loop1
  1343                                  
  1344                                      .level2:
  1345 00000B46 C605(B5140000)01                mov byte [blocks_remaining], level2_blocks_count
  1346 00000B4D 4831C9                          xor rcx, rcx             
  1347                                          .init_loop2:
  1348 00000B50 4883F901                            cmp rcx, level2_blocks_count
  1349 00000B54 0F8D90000000                        jge .done
  1350 00000B5A 4889C8                              mov rax, rcx         
  1351 00000B5D 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1352 00000B61 8A90[C8140000]                      mov dl, byte [level2_blocks + rax + 3]  
  1353 00000B67 8891[D9140000]                      mov byte [block_states + rcx], dl
  1354 00000B6D 48FFC1                              inc rcx
  1355 00000B70 EBDE                                jmp .init_loop2
  1356                                      .level3:
  1357 00000B72 C605(B5140000)01                mov byte [blocks_remaining], level3_blocks_count
  1358 00000B79 4831C9                          xor rcx, rcx             
  1359                                          .init_loop3:
  1360 00000B7C 4883F901                            cmp rcx, level3_blocks_count
  1361 00000B80 7D68                                jge .done
  1362 00000B82 4889C8                              mov rax, rcx         
  1363 00000B85 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1364 00000B89 8A90[CD140000]                      mov dl, byte [level3_blocks + rax + 3]  
  1365 00000B8F 8891[D9140000]                      mov byte [block_states + rcx], dl
  1366 00000B95 48FFC1                              inc rcx
  1367 00000B98 EBE2                                jmp .init_loop3
  1368                                  
  1369                                      .level4:
  1370 00000B9A C605(B5140000)01                mov byte [blocks_remaining], level4_blocks_count
  1371 00000BA1 4831C9                          xor rcx, rcx             
  1372                                          .init_loop4:
  1373 00000BA4 4883F901                            cmp rcx, level4_blocks_count
  1374 00000BA8 7D40                                jge .done
  1375 00000BAA 4889C8                              mov rax, rcx         
  1376 00000BAD 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1377 00000BB1 8A90[D2140000]                      mov dl, byte [level4_blocks + rax + 3]  
  1378 00000BB7 8891[D9140000]                      mov byte [block_states + rcx], dl
  1379 00000BBD 48FFC1                              inc rcx
  1380 00000BC0 EBE2                                jmp .init_loop4
  1381                                  
  1382                                      .level5:
  1383 00000BC2 C605(B5140000)01                mov byte [blocks_remaining], level5_blocks_count
  1384 00000BC9 4831C9                          xor rcx, rcx             
  1385                                          .init_loop5:
  1386 00000BCC 4883F901                            cmp rcx, level5_blocks_count
  1387 00000BD0 7D18                                jge .done
  1388 00000BD2 4889C8                              mov rax, rcx         
  1389 00000BD5 486BC005                            imul rax, 5         ; en vez de shl rax,2
  1390 00000BD9 8A90[D7140000]                      mov dl, byte [level5_blocks + rax + 3]  
  1391 00000BDF 8891[D9140000]                      mov byte [block_states + rcx], dl
  1392 00000BE5 48FFC1                              inc rcx
  1393 00000BE8 EBE2                                jmp .init_loop5
  1394                                      .done:
  1395 00000BEA C3                              ret
  1396                                  
  1397                                  
  1398                                  ; Función para verificar y manejar la transición de nivel
  1399                                  check_level_complete:
  1400                                      ; Verificar si quedan bloques
  1401 00000BEB 803D(B5140000)00            cmp byte [blocks_remaining], 0
  1402 00000BF2 753C                        jne .not_complete
  1403                                      
  1404                                      ; Incrementar el nivel
  1405 00000BF4 FE05(B4140000)              inc byte [current_level]
  1406                                      
  1407                                      ; Verificar si hemos completado todos los niveles (asumiendo 2 niveles por ahora)
  1408 00000BFA 803D(B4140000)06            cmp byte [current_level], 6
  1409 00000C01 742E                        je game_win
  1410                                      
  1411                                      ; Reinicializar el juego para el siguiente nivel
  1412 00000C03 E844FEFFFF                  call init_level
  1413                                      
  1414                                      ; Reinicializar la posición de la bola y la paleta
  1415 00000C08 48C705(5F140000)28-         mov qword [ball_x_pos], 40
  1415 00000C10 000000             
  1416 00000C13 48C705(67140000)1C-         mov qword [ball_y_pos], 28
  1416 00000C1B 000000             
  1417 00000C1E C605(7F140000)00            mov byte [ball_moving], 0
  1418 00000C25 48C705(3F140000)-           mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  1418 00000C2C [36130000]         
  1419                                      
  1420                                      .not_complete:
  1421 00000C30 C3                              ret
  1422                                  
  1423                                      ; Nueva función para manejar la victoria del juego
  1424                                  game_win:
  1425                                      ; Limpiar la pantalla primero
  1426                                      print clear, clear_length
    82 00000C31 B801000000          <1>  mov eax, sys_write
    83 00000C36 BF01000000          <1>  mov edi, 1
    84 00000C3B 48BE-               <1>  mov rsi, %1
    84 00000C3D [1000000000000000]  <1>
    85 00000C45 BA07000000          <1>  mov edx, %2
    86 00000C4A 0F05                <1>  syscall
  1427                                      
  1428                                      ; Mensaje de victoria
  1429 00000C4C 488B05(3D150000)            mov rax, [current_score]    ; Obtener el puntaje final
  1430 00000C53 48BF-                       mov rdi, number_buffer      ; Convertir a string
  1430 00000C55 [4615000000000000] 
  1431 00000C5D E8B4010000                  call number_to_string
  1432                                      
  1433                                      ; Definir mensaje de victoria
  1434                                      section .data
  1435 00001815 C2A146656C69636964-             win_msg: db "¡Felicidades! ¡Has ganado!", 0xA, 0xD
  1435 0000181E 616465732120C2A148-
  1435 00001827 61732067616E61646F-
  1435 00001830 210A0D             
  1436                                          win_msg_len: equ $ - win_msg
  1437 00001833 50756E74616A652066-             score_msg: db "Puntaje final: "
  1437 0000183C 696E616C3A20       
  1438                                          score_msg_len: equ $ - score_msg
  1439                                      section .text
  1440                                      
  1441                                      ; Imprimir mensajes
  1442                                      print win_msg, win_msg_len
    82 00000C62 B801000000          <1>  mov eax, sys_write
    83 00000C67 BF01000000          <1>  mov edi, 1
    84 00000C6C 48BE-               <1>  mov rsi, %1
    84 00000C6E [1518000000000000]  <1>
    85 00000C76 BA1E000000          <1>  mov edx, %2
    86 00000C7B 0F05                <1>  syscall
  1443                                      print score_msg, score_msg_len
    82 00000C7D B801000000          <1>  mov eax, sys_write
    83 00000C82 BF01000000          <1>  mov edi, 1
    84 00000C87 48BE-               <1>  mov rsi, %1
    84 00000C89 [3318000000000000]  <1>
    85 00000C91 BA0F000000          <1>  mov edx, %2
    86 00000C96 0F05                <1>  syscall
  1444                                      print number_buffer, 20
    82 00000C98 B801000000          <1>  mov eax, sys_write
    83 00000C9D BF01000000          <1>  mov edi, 1
    84 00000CA2 48BE-               <1>  mov rsi, %1
    84 00000CA4 [4615000000000000]  <1>
    85 00000CAC BA14000000          <1>  mov edx, %2
    86 00000CB1 0F05                <1>  syscall
  1445                                      
  1446                                      ; Esperar un momento antes de salir
  1447 00000CB3 48C70542F3FFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  1447 00000CBC 0000               
  1448 00000CBE 48C7053FF3FFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  1448 00000CC7 0000               
  1449                                      sleeptime
    98 00000CC9 B823000000          <1>  mov eax, sys_nanosleep
    99 00000CCE 48BF-               <1>  mov rdi, timespec
    99 00000CD0 [0000000000000000]  <1>
   100 00000CD8 31F6                <1>  xor esi, esi
   101 00000CDA 0F05                <1>  syscall
  1450                                      
  1451 00000CDC E924090000                  jmp exit
  1452                                  
  1453                                  ; Función para imprimir los bloques
  1454                                  ; Función modificada para imprimir bloques
  1455                                  
  1456                                  ; Primero, agreguemos una función para obtener el puntero a los bloques del nivel actual
  1457                                  get_current_level_blocks:
  1458 00000CE1 803D(B4140000)01            cmp byte [current_level], 1
  1459 00000CE8 7428                        je .level1
  1460 00000CEA 803D(B4140000)02            cmp byte [current_level], 2
  1461 00000CF1 7427                        je .level2
  1462 00000CF3 803D(B4140000)03            cmp byte [current_level], 3
  1463 00000CFA 7426                        je .level3
  1464 00000CFC 803D(B4140000)04            cmp byte [current_level], 4
  1465 00000D03 7425                        je .level4
  1466 00000D05 803D(B4140000)05            cmp byte [current_level], 5
  1467 00000D0C 7424                        je .level5
  1468                                      ; Si llegamos aquí, hay un error en el nivel
  1469 00000D0E 4831C0                      xor rax, rax
  1470 00000D11 C3                          ret
  1471                                  
  1472                                      .level1:
  1473 00000D12 488D05(B6140000)                lea rax, [level1_blocks]
  1474 00000D19 C3                              ret
  1475                                      .level2:
  1476 00000D1A 488D05(C5140000)                lea rax, [level2_blocks]
  1477 00000D21 C3                              ret
  1478                                      .level3:
  1479 00000D22 488D05(CA140000)                lea rax, [level3_blocks]
  1480 00000D29 C3                              ret
  1481                                      .level4:
  1482 00000D2A 488D05(CF140000)                lea rax, [level4_blocks]
  1483 00000D31 C3                              ret
  1484                                      .level5:
  1485 00000D32 488D05(D4140000)                lea rax, [level5_blocks]
  1486 00000D39 C3                              ret
  1487                                  ; Función para obtener la cantidad de bloques del nivel actual
  1488                                  get_current_level_count:
  1489 00000D3A 803D(B4140000)01            cmp byte [current_level], 1
  1490 00000D41 7428                        je .level1
  1491 00000D43 803D(B4140000)02            cmp byte [current_level], 2
  1492 00000D4A 7425                        je .level2
  1493 00000D4C 803D(B4140000)03            cmp byte [current_level], 3
  1494 00000D53 7422                        je .level3
  1495 00000D55 803D(B4140000)04            cmp byte [current_level], 4
  1496 00000D5C 741F                        je .level4
  1497 00000D5E 803D(B4140000)05            cmp byte [current_level], 5
  1498 00000D65 741C                        je .level5
  1499                                      ; Si llegamos aquí, hay un error en el nivel
  1500 00000D67 4831C0                      xor rax, rax
  1501 00000D6A C3                          ret
  1502                                  
  1503                                      .level1:
  1504 00000D6B B803000000                      mov rax, level1_blocks_count
  1505 00000D70 C3                              ret
  1506                                      .level2:
  1507 00000D71 B801000000                      mov rax, level2_blocks_count
  1508 00000D76 C3                              ret
  1509                                      .level3:
  1510 00000D77 B801000000                      mov rax, level3_blocks_count
  1511 00000D7C C3                              ret
  1512                                      .level4:
  1513 00000D7D B801000000                      mov rax, level4_blocks_count
  1514 00000D82 C3                              ret
  1515                                      .level5:
  1516 00000D83 B801000000                      mov rax, level5_blocks_count
  1517 00000D88 C3                              ret
  1518                                  
  1519                                  
  1520                                  print_blocks:
  1521 00000D89 55                          push rbp
  1522 00000D8A 4889E5                      mov rbp, rsp
  1523                                      
  1524                                      ; Obtener puntero a los bloques del nivel actual
  1525 00000D8D E84FFFFFFF                  call get_current_level_blocks
  1526 00000D92 4989C5                      mov r13, rax                  ; Guardar puntero a los bloques en r13
  1527                                      
  1528                                      ; Obtener cantidad de bloques del nivel actual
  1529 00000D95 E8A0FFFFFF                  call get_current_level_count
  1530 00000D9A 4989C6                      mov r14, rax                  ; Guardar cantidad de bloques en r14
  1531                                      
  1532 00000D9D 4D31E4                      xor r12, r12                  ; Índice del bloque actual
  1533                                      
  1534                                      .print_loop:
  1535 00000DA0 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
  1536 00000DA3 7D6F                            jge .end
  1537                                          
  1538                                          ; Verificar si el bloque está activo
  1539 00000DA5 490FB68424-                     movzx rax, byte [block_states + r12]
  1539 00000DAA [D9140000]         
  1540 00000DAE 4885C0                          test rax, rax
  1541 00000DB1 745C                            jz .next_block
  1542                                          
  1543                                          ; Obtener posición y tipo del bloque usando r13
  1544 00000DB3 4C89E0                          mov rax, r12
  1545 00000DB6 486BC005                        imul rax, 5
  1546 00000DBA 4C01E8                          add rax, r13
  1547 00000DBD 448A00                          mov r8b, [rax]        ; X position
  1548 00000DC0 448A4801                        mov r9b, [rax + 1]    ; Y position
  1549 00000DC4 448A5002                        mov r10b, [rax + 2]   ; Tipo de bloque
  1550                                  
  1551                                          ; El resto de la lógica de impresión permanece igual
  1552 00000DC8 4D0FB6C0                        movzx r8, r8b
  1553 00000DCC 4D0FB6C9                        movzx r9, r9b
  1554 00000DD0 4981C0[000A0000]                add r8, board
  1555 00000DD7 B850000000                      mov rax, column_cells + 2
  1556 00000DDC 49F7E1                          mul r9
  1557 00000DDF 4901C0                          add r8, rax
  1558                                          
  1559 00000DE2 B906000000                      mov rcx, block_length
  1560 00000DE7 48BE-                           mov rsi, block_type_1
  1560 00000DE9 [9014000000000000] 
  1561 00000DF1 490FB6C2                        movzx rax, r10b
  1562 00000DF5 48FFC8                          dec rax
  1563 00000DF8 486BC006                        imul rax, block_length
  1564 00000DFC 4801C6                          add rsi, rax
  1565                                          
  1566                                      .print_block_chars:
  1567 00000DFF 8A06                            mov al, [rsi]
  1568 00000E01 418800                          mov [r8], al
  1569 00000E04 48FFC6                          inc rsi
  1570 00000E07 49FFC0                          inc r8
  1571 00000E0A 48FFC9                          dec rcx
  1572 00000E0D 75F0                            jnz .print_block_chars
  1573                                          
  1574                                      .next_block:
  1575 00000E0F 49FFC4                          inc r12
  1576 00000E12 EB8C                            jmp .print_loop
  1577                                          
  1578                                      .end:
  1579 00000E14 5D                              pop rbp
  1580 00000E15 C3                              ret
  1581                                  
  1582                                  ; Función para convertir número a string
  1583                                  ; Input: RAX = número a convertir
  1584                                  ; RDI = buffer donde escribir el string
  1585                                  number_to_string:
  1586 00000E16 53                          push rbx
  1587 00000E17 52                          push rdx
  1588 00000E18 56                          push rsi
  1589 00000E19 BB0A000000                  mov rbx, 10          ; Divisor
  1590 00000E1E B900000000                  mov rcx, 0          ; Contador de dígitos
  1591                                      
  1592                                      ; Si el número es 0, manejarlo especialmente
  1593 00000E23 4885C0                      test rax, rax
  1594 00000E26 7509                        jnz .convert_loop
  1595 00000E28 C60730                      mov byte [rdi], '0'
  1596 00000E2B C6470100                    mov byte [rdi + 1], 0
  1597 00000E2F EB20                        jmp .end
  1598                                      
  1599                                      .convert_loop:
  1600 00000E31 4831D2                          xor rdx, rdx    ; Limpiar RDX para la división
  1601 00000E34 48F7F3                          div rbx         ; RAX/10, cociente en RAX, residuo en RDX
  1602 00000E37 80C230                          add dl, '0'     ; Convertir a ASCII
  1603 00000E3A 52                              push rdx        ; Guardar el dígito
  1604 00000E3B 48FFC1                          inc rcx         ; Incrementar contador
  1605 00000E3E 4885C0                          test rax, rax   ; Verificar si quedan más dígitos
  1606 00000E41 75EE                            jnz .convert_loop
  1607                                          
  1608                                      .write_loop:
  1609 00000E43 5A                              pop rdx         ; Obtener dígito
  1610 00000E44 8817                            mov [rdi], dl   ; Escribir al buffer
  1611 00000E46 48FFC7                          inc rdi         ; Siguiente posición
  1612 00000E49 48FFC9                          dec rcx         ; Decrementar contador
  1613 00000E4C 75F5                            jnz .write_loop
  1614                                          
  1615 00000E4E C60700                      mov byte [rdi], 0   ; Null terminator
  1616                                      
  1617                                      .end:
  1618 00000E51 5E                          pop rsi
  1619 00000E52 5A                          pop rdx
  1620 00000E53 5B                          pop rbx
  1621 00000E54 C3                          ret
  1622                                  
  1623                                  ; Función para imprimir los labels
  1624                                  print_labels:
  1625 00000E55 55                          push rbp
  1626 00000E56 4889E5                      mov rbp, rsp
  1627                                  
  1628                                      ; Crear buffer temporal
  1629 00000E59 4883EC20                    sub rsp, 32
  1630                                  
  1631                                      ; Copiar labels a buffer temporal
  1632 00000E5D 4889E7                      mov rdi, rsp
  1633 00000E60 488D35(F2150000)            lea rsi, [score_label]
  1634 00000E67 B917000000                  mov rcx, score_label_len
  1635 00000E6C F3A4                        rep movsb
  1636                                  
  1637                                      ; Convertir score a string
  1638 00000E6E 488B05(3D150000)            mov rax, [current_score]
  1639 00000E75 48BF-                       mov rdi, number_buffer
  1639 00000E77 [4615000000000000] 
  1640 00000E7F E892FFFFFF                  call number_to_string
  1641                                  
  1642                                      ; Calcular longitud del número
  1643 00000E84 B900000000                  mov rcx, 0
  1644 00000E89 48BF-                       mov rdi, number_buffer
  1644 00000E8B [4615000000000000] 
  1645                                      .count_loop:
  1646 00000E93 803C0F00                        cmp byte [rdi + rcx], 0
  1647 00000E97 7405                            je .count_done
  1648 00000E99 48FFC1                          inc rcx
  1649 00000E9C EBF5                            jmp .count_loop
  1650                                      .count_done:
  1651                                  
  1652                                      ; Insertar el número en la posición correcta, alineado a la derecha
  1653 00000E9E 4889E7                      mov rdi, rsp
  1654 00000EA1 4883C70A                    add rdi, score_pos           ; Moverse a la posición del número
  1655 00000EA5 BE0A000000                  mov rsi, 10                  ; Espacio reservado para el número
  1656 00000EAA 4829CE                      sub rsi, rcx                 ; Calcular padding necesario
  1657                                      .pad_loop:
  1658 00000EAD 4885F6                          test rsi, rsi
  1659 00000EB0 740B                            jz .pad_done
  1660 00000EB2 C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  1661 00000EB5 48FFC7                          inc rdi
  1662 00000EB8 48FFCE                          dec rsi
  1663 00000EBB EBF0                            jmp .pad_loop
  1664                                      .pad_done:
  1665                                  
  1666                                      ; Copiar el número
  1667 00000EBD 48BE-                       mov rsi, number_buffer
  1667 00000EBF [4615000000000000] 
  1668 00000EC7 F3A4                        rep movsb
  1669                                  
  1670                                      ; Imprimir el buffer completo
  1671                                      print rsp, score_label_len
    82 00000EC9 B801000000          <1>  mov eax, sys_write
    83 00000ECE BF01000000          <1>  mov edi, 1
    84 00000ED3 4889E6              <1>  mov rsi, %1
    85 00000ED6 BA17000000          <1>  mov edx, %2
    86 00000EDB 0F05                <1>  syscall
  1672                                  
  1673                                      ; Repetir proceso para bloques destruidos
  1674 00000EDD 4889E7                      mov rdi, rsp
  1675 00000EE0 488D35(09160000)            lea rsi, [blocks_label]
  1676 00000EE7 B91B000000                  mov rcx, blocks_label_len
  1677 00000EEC F3A4                        rep movsb
  1678                                  
  1679                                      ; Verificar que el `[` esté en su posición correcta
  1680 00000EEE 4889E7                      mov rdi, rsp
  1681 00000EF1 4883C713                    add rdi, blocks_pos - 1  ; Posición exacta donde debe ir el '['
  1682 00000EF5 C6075B                      mov byte [rdi], '['      ; Garantizar que el `[` esté presente
  1683                                  
  1684                                      ; Convertir bloques destruidos a string
  1685 00000EF8 480FB605(45150000)          movzx rax, byte [destroyed_blocks]
  1686 00000F00 48BF-                       mov rdi, number_buffer
  1686 00000F02 [4615000000000000] 
  1687 00000F0A E807FFFFFF                  call number_to_string
  1688                                  
  1689                                      ; Calcular longitud del número
  1690 00000F0F B900000000                  mov rcx, 0
  1691 00000F14 48BF-                       mov rdi, number_buffer
  1691 00000F16 [4615000000000000] 
  1692                                      .count_loop2:
  1693 00000F1E 803C0F00                        cmp byte [rdi + rcx], 0
  1694 00000F22 7405                            je .count_done2
  1695 00000F24 48FFC1                          inc rcx
  1696 00000F27 EBF5                            jmp .count_loop2
  1697                                      .count_done2:
  1698                                  
  1699                                      ; Insertar el número en la posición correcta, alineado a la derecha
  1700 00000F29 4889E7                      mov rdi, rsp
  1701 00000F2C 4883C714                    add rdi, blocks_pos         ; Moverse a la posición del número
  1702 00000F30 BE03000000                  mov rsi, 3                  ; Espacio reservado para el número
  1703 00000F35 4829CE                      sub rsi, rcx                ; Calcular padding necesario
  1704                                      .pad_loop2:
  1705 00000F38 4885F6                          test rsi, rsi
  1706 00000F3B 740B                            jz .pad_done2
  1707 00000F3D C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  1708 00000F40 48FFC7                          inc rdi
  1709 00000F43 48FFCE                          dec rsi
  1710 00000F46 EBF0                            jmp .pad_loop2
  1711                                      .pad_done2:
  1712                                  
  1713                                      ; Copiar el número
  1714 00000F48 48BE-                       mov rsi, number_buffer
  1714 00000F4A [4615000000000000] 
  1715 00000F52 F3A4                        rep movsb
  1716                                  
  1717                                      ; Imprimir el buffer completo
  1718                                      print rsp, blocks_label_len
    82 00000F54 B801000000          <1>  mov eax, sys_write
    83 00000F59 BF01000000          <1>  mov edi, 1
    84 00000F5E 4889E6              <1>  mov rsi, %1
    85 00000F61 BA1B000000          <1>  mov edx, %2
    86 00000F66 0F05                <1>  syscall
  1719                                  
  1720                                      ; Restaurar stack
  1721 00000F68 4883C420                    add rsp, 32
  1722 00000F6C 5D                          pop rbp
  1723 00000F6D C3                          ret
  1724                                  
  1725                                  
  1726                                  
  1727                                  check_block_collision:
  1728 00000F6E 55                          push rbp
  1729 00000F6F 4889E5                      mov rbp, rsp
  1730                                  
  1731                                      ; Almacenar el carácter en la posición r10 (pos. de la bola en board[])
  1732 00000F72 418A02                      mov al, [r10]
  1733                                  
  1734                                      ; Verificar si el carácter es un bloque
  1735 00000F75 3C55                        cmp al, 'U'  
  1736 00000F77 7419                        je .possible
  1737 00000F79 3C4F                        cmp al, 'O'  
  1738 00000F7B 7415                        je .possible
  1739 00000F7D 3C44                        cmp al, 'D'  
  1740 00000F7F 7411                        je .possible
  1741 00000F81 3C4C                        cmp al, 'L'  
  1742 00000F83 740D                        je .possible
  1743 00000F85 3C56                        cmp al, 'V'  
  1744 00000F87 7409                        je .possible
  1745 00000F89 3C38                        cmp al, '8'  
  1746 00000F8B 7405                        je .possible
  1747                                  
  1748                                      ; No es bloque, salir
  1749 00000F8D 4831C0                      xor rax, rax
  1750 00000F90 5D                          pop rbp
  1751 00000F91 C3                          ret
  1752                                  
  1753                                  .possible:
  1754 00000F92 53                          push rbx
  1755 00000F93 57                          push rdi
  1756 00000F94 56                          push rsi
  1757 00000F95 4154                        push r12
  1758 00000F97 4155                        push r13
  1759 00000F99 4156                        push r14
  1760 00000F9B 4157                        push r15
  1761                                  
  1762                                      ; 1) Obtener base de los bloques del nivel actual
  1763 00000F9D E83FFDFFFF                  call get_current_level_blocks
  1764 00000FA2 4989C5                      mov r13, rax  ; (r13) = base de levelX_blocks
  1765                                  
  1766                                      ; 2) Obtener la cantidad de bloques
  1767 00000FA5 E890FDFFFF                  call get_current_level_count
  1768 00000FAA 4989C6                      mov r14, rax
  1769                                  
  1770 00000FAD 4D31E4                      xor r12, r12  ; Índice del bloque actual
  1771                                  
  1772                                  .find_block_loop:
  1773 00000FB0 4D39F4                      cmp r12, r14
  1774 00000FB3 0F8DCE000000                jge .no_block_found  ; Se acabaron los bloques
  1775                                  
  1776                                      ; Calcular puntero base del bloque actual en levelX_blocks
  1777 00000FB9 4C89E0                      mov rax, r12
  1778 00000FBC 486BC005                    imul rax, 5            ; (x, y, tipo, durabilidad_inicial, letra)
  1779 00000FC0 4C01E8                      add rax, r13
  1780 00000FC3 4989C7                      mov r15, rax           ; r15 apunta a los datos del bloque actual
  1781                                  
  1782                                      ; --- Aquí la diferencia: la durabilidad no la leemos de [r15+3], sino de block_states[r12]
  1783 00000FC6 490FB69C24-                 movzx rbx, byte [block_states + r12]  ; Durabilidad "viva" en block_states
  1783 00000FCB [D9140000]         
  1784 00000FCF 4885DB                      test rbx, rbx
  1785 00000FD2 0F84A7000000                jz .next_block  ; si durabilidad=0 => bloque destruido => ignorar
  1786                                  
  1787                                      ; Obtener coordenadas
  1788 00000FD8 418A17                      mov dl, [r15]         ; x
  1789 00000FDB 418A4F01                    mov cl, [r15 + 1]     ; y
  1790                                  
  1791                                      ; Calcular posición en el board
  1792 00000FDF 488D3D(000A0000)            lea rdi, [board]
  1793 00000FE6 4831C0                      xor rax, rax
  1794 00000FE9 B84E000000                  mov rax, column_cells
  1795 00000FEE 4883C002                    add rax, 2
  1796 00000FF2 480FB6C9                    movzx rcx, cl         ; y
  1797 00000FF6 480FAFC1                    imul rax, rcx
  1798 00000FFA 4801C7                      add rdi, rax
  1799 00000FFD 480FB6C2                    movzx rax, dl         ; x
  1800 00001001 4801C7                      add rdi, rax
  1801                                  
  1802                                      ; Guardar la posición base del bloque
  1803 00001004 57                          push rdi
  1804                                  
  1805                                      ; Verificar si la bola (r10) está dentro de [rdi .. rdi+block_length)
  1806 00001005 4939FA                      cmp r10, rdi
  1807 00001008 7274                        jb .skip_collision
  1808 0000100A 488D5F06                    lea rbx, [rdi + block_length]
  1809 0000100E 4939DA                      cmp r10, rbx
  1810 00001011 736B                        jae .skip_collision
  1811                                  
  1812                                      ; ------- Hay colisión, reducir durabilidad en block_states
  1813 00001013 41FE8C24[D9140000]          dec byte [block_states + r12]
  1814                                      ; Volver a cargar durabilidad
  1815 0000101B 490FB69C24-                 movzx rbx, byte [block_states + r12]
  1815 00001020 [D9140000]         
  1816 00001024 4885DB                      test rbx, rbx
  1817 00001027 754D                        jnz .update_display  ; si no llegó a 0 => solo "golpeado"
  1818                                  
  1819                                      ; >>> Llegó a 0 => Bloque destruido
  1820 00001029 5F                          pop rdi  ; recuperar puntero base del bloque en board
  1821 0000102A B906000000                  mov rcx, block_length
  1822                                  .clear_loop:
  1823 0000102F C60720                      mov byte [rdi], ' '
  1824 00001032 48FFC7                      inc rdi
  1825 00001035 E2F8                        loop .clear_loop
  1826                                  
  1827                                      ; Dibujar letra del bloque destruido
  1828 00001037 418A4704                    mov al, [r15 + 4]  ; Obtener la letra asociada
  1829 0000103B 4883EF06                    sub rdi, block_length
  1830 0000103F 8807                        mov [rdi], al      ; Escribir la letra en la posición inicial
  1831                                      ; Después de escribir la letra en el tablero
  1832 00001041 418A4704                    mov al, [r15 + 4]      ; Obtener la letra
  1833 00001045 4D0FB607                    movzx r8, byte [r15]   ; Posición x del bloque
  1834 00001049 4D0FB64F01                  movzx r9, byte [r15 + 1] ; Posición y del bloque
  1835 0000104E E853F3FFFF                  call register_letter
  1836                                      ; Actualizar contadores globales
  1837 00001053 FE0D(B5140000)              dec byte [blocks_remaining]
  1838 00001059 FE05(45150000)              inc byte [destroyed_blocks]
  1839                                  
  1840                                      ; Sumar puntos según el tipo
  1841 0000105F 490FB64702                  movzx rax, byte [r15 + 2]  ; tipo del bloque original
  1842 00001064 486BC00A                    imul rax, 10
  1843 00001068 480105(3D150000)            add [current_score], rax
  1844                                  
  1845 0000106F B801000000                  mov rax, 1  ; colisión con destrucción
  1846 00001074 EB14                        jmp .end_pop
  1847                                  
  1848                                  .update_display:
  1849                                      ; => durabilidad >0, se podría actualizar el "look" del bloque
  1850 00001076 B801000000                  mov rax, 1  ; colisión con "rebote"  
  1851 0000107B 5F                          pop rdi     ; pop que quedó pendiente
  1852 0000107C EB0C                        jmp .end_pop
  1853                                  
  1854                                  .skip_collision:
  1855 0000107E 5F                          pop rdi     ; si no hubo colisión, quita de la pila
  1856                                  .next_block:
  1857 0000107F 49FFC4                      inc r12
  1858 00001082 E929FFFFFF                  jmp .find_block_loop
  1859                                  
  1860                                  .no_block_found:
  1861 00001087 4831C0                      xor rax, rax  ; 0 => no hubo colisión
  1862                                  
  1863                                  .end_pop:
  1864 0000108A 415F                        pop r15
  1865 0000108C 415E                        pop r14
  1866 0000108E 415D                        pop r13
  1867 00001090 415C                        pop r12
  1868 00001092 5E                          pop rsi
  1869 00001093 5F                          pop rdi
  1870 00001094 5B                          pop rbx
  1871 00001095 5D                          pop rbp
  1872 00001096 C3                          ret
  1873                                  
  1874                                  
  1875                                  
  1876                                  init_enemies:
  1877 00001097 55                          push rbp
  1878 00001098 4889E5                      mov rbp, rsp
  1879                                      ; Reiniciar contadores de movimiento
  1880 0000109B C605(88150000)00            mov byte [enemy_move_total], 0
  1881 000010A2 C605(89150000)00            mov byte [enemy_target], 0 ; Inicialmente persigue la bola
  1882                                      ; Limpiar estado previo de enemigos
  1883 000010A9 B90A000000                  mov rcx, 10 ; Máximo 10 enemigos
  1884 000010AE 488D3D(5F150000)            lea rdi, [enemies]
  1885 000010B5 30C0                        xor al, al
  1886 000010B7 F3AA                        rep stosb ; Limpiar datos de enemigos
  1887                                      
  1888                                      ; Marcar todos los enemigos como inactivos
  1889 000010B9 488D3D(E8150000)            lea rdi, [enemy_spawns_triggered]
  1890 000010C0 30C0                        xor al, al
  1891 000010C2 B90A000000                  mov rcx, 10
  1892 000010C7 F3AA                        rep stosb ; Todos los enemigos no han sido activados aún
  1893                                  
  1894 000010C9 5D                          pop rbp
  1895 000010CA C3                          ret
  1896                                  
  1897                                  
  1898                                  ; Función para mover enemigos
  1899                                  move_enemies:
  1900 000010CB 55                          push rbp
  1901 000010CC 4889E5                      mov rbp, rsp
  1902                                      
  1903                                      ; Incrementar contador de movimiento
  1904 000010CF FE05(86150000)              inc byte [enemy_move_counter]
  1905 000010D5 480FB605(86150000)          movzx rax, byte [enemy_move_counter]
  1906 000010DD 3A05(87150000)              cmp al, [enemy_move_delay]
  1907 000010E3 0F85AA010000                jne .end
  1908                                      
  1909                                      ; Resetear contador
  1910 000010E9 C605(86150000)00            mov byte [enemy_move_counter], 0
  1911                                      
  1912 000010F0 4D31E4                      xor r12, r12                    ; Índice del enemigo
  1913                                      
  1914                                      .enemy_loop:
  1915 000010F3 4983FC0A                        cmp r12, 10                     ; Máximo 10 enemigos
  1916 000010F7 0F8D96010000                    jge .end
  1917                                          
  1918                                          ; Calcular offset del enemigo actual
  1919 000010FD 4C89E0                          mov rax, r12
  1920 00001100 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  1921 00001104 488DB0[5F150000]                lea rsi, [enemies + rax]
  1922                                          
  1923                                          ; Verificar si el enemigo está activo
  1924 0000110B 807E0201                        cmp byte [rsi + 2], 1
  1925 0000110F 0F8576010000                    jne .next_enemy
  1926                                          
  1927                                          ; Obtener posición actual
  1928 00001115 4C0FB606                        movzx r8, byte [rsi]            ; X
  1929 00001119 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  1930                                          
  1931                                          ; Limpiar posición actual antes de mover
  1932 0000111E 4150                            push r8
  1933 00001120 4151                            push r9
  1934 00001122 B84E000000                      mov rax, column_cells
  1935 00001127 4883C002                        add rax, 2
  1936 0000112B 49F7E1                          mul r9
  1937 0000112E 4C01C0                          add rax, r8
  1938 00001131 488DB8[000A0000]                lea rdi, [board + rax]
  1939 00001138 C60720                          mov byte [rdi], ' '         ; Limpiar rastro
  1940 0000113B 4159                            pop r9
  1941 0000113D 4158                            pop r8
  1942                                  
  1943                                          ; Determinar comportamiento basado en índice
  1944 0000113F 4C89E0                          mov rax, r12
  1945 00001142 4883E001                        and rax, 1                      ; 0 para índices pares, 1 para impares
  1946 00001146 4885C0                          test rax, rax
  1947 00001149 7402                            jz .chase_ball
  1948 0000114B EB31                            jmp .chase_paddle             ; Si es 1, perseguir paleta
  1949                                          
  1950                                          ; Perseguir bola (comportamiento original)
  1951                                      .chase_ball:
  1952 0000114D 4C8B15(5F140000)                mov r10, [ball_x_pos]
  1953 00001154 4D39D0                          cmp r8, r10
  1954 00001157 0F8F96000000                    jg .move_left
  1955 0000115D 0F8C95000000                    jl .move_right
  1956                                          
  1957 00001163 4C8B15(67140000)                mov r10, [ball_y_pos]
  1958 0000116A 4D39D1                          cmp r9, r10
  1959 0000116D 0F8F8A000000                    jg .move_up
  1960 00001173 0F8C89000000                    jl .move_down
  1961 00001179 E9A5000000                      jmp .check_collision
  1962                                          
  1963                                      .chase_paddle:
  1964                                          ; Obtener la posición X actual de la paleta
  1965 0000117E 4C8B15(3F140000)                mov r10, [pallet_position]
  1966 00001185 4981EA[000A0000]                sub r10, board              ; Convertir a offset relativo
  1967                                          
  1968                                          ; Calcular la posición X real de la paleta
  1969 0000118C 4C89D0                          mov rax, r10
  1970 0000118F BB4E000000                      mov rbx, column_cells
  1971 00001194 4883C302                        add rbx, 2                  ; Añadir newline chars
  1972 00001198 4831D2                          xor rdx, rdx
  1973 0000119B 48F7F3                          div rbx                     ; rax = y, rdx = x
  1974                                          
  1975                                          ; rdx ahora contiene la posición X de la paleta
  1976                                          ; Añadir la mitad del tamaño de la paleta para apuntar al centro
  1977 0000119E 488B0D(47140000)                mov rcx, [pallet_size]
  1978 000011A5 48D1E9                          shr rcx, 1                  ; Dividir por 2
  1979 000011A8 4801CA                          add rdx, rcx
  1980                                          
  1981                                          ; Comparar con posición X del enemigo y mover gradualmente
  1982 000011AB 4939D0                          cmp r8, rdx
  1983 000011AE 7404                            je .check_y_paddle          ; Si está en la misma X, verificar Y
  1984 000011B0 7F41                            jg .move_left              ; Si está a la derecha, mover izquierda
  1985 000011B2 7C44                            jl .move_right             ; Si está a la izquierda, mover derecha
  1986                                  
  1987                                      .check_y_paddle:
  1988                                          ; La Y de la paleta siempre es row_cells - 2
  1989 000011B4 41BA20000000                    mov r10, row_cells
  1990 000011BA 4983EA02                        sub r10, 2
  1991                                          
  1992                                          ; Comparar con posición Y del enemigo y mover gradualmente
  1993 000011BE 4D39D1                          cmp r9, r10
  1994 000011C1 7404                            je .no_movement            ; Si está en la misma Y, no mover
  1995 000011C3 7F38                            jg .move_up               ; Si está abajo, mover arriba
  1996 000011C5 7C3B                            jl .move_down             ; Si está arriba, mover abajo
  1997                                          
  1998                                      .no_movement:
  1999 000011C7 EB5A                            jmp .check_collision
  2000                                  
  2001                                      ; También agregar una nueva sección para el movimiento suave
  2002                                      .smooth_transition:
  2003                                          ; Si el enemigo está muy lejos de su objetivo, limitar el movimiento
  2004 000011C9 8A05(89150000)                  mov al, [enemy_target]
  2005 000011CF 84C0                            test al, al
  2006 000011D1 7450                            jz .check_collision        ; Si persigue la bola, movimiento normal
  2007                                          
  2008                                          ; Verificar distancia en X
  2009 000011D3 4989D2                          mov r10, rdx              ; Posición X objetivo
  2010 000011D6 4D29C2                          sub r10, r8               ; Calcular diferencia
  2011 000011D9 4983FA05                        cmp r10, 5               ; Si la diferencia es mayor a 5
  2012 000011DD 7F08                            jg .limit_right_movement  ; Limitar movimiento a la derecha
  2013 000011DF 4983FAFB                        cmp r10, -5              ; Si la diferencia es menor a -5
  2014 000011E3 7C08                            jl .limit_left_movement   ; Limitar movimiento a la izquierda
  2015 000011E5 EB3C                            jmp .check_collision
  2016                                          
  2017                                      .limit_right_movement:
  2018 000011E7 4983C002                        add r8, 2                ; Mover solo 2 unidades a la derecha
  2019 000011EB EB36                            jmp .check_collision
  2020                                          
  2021                                      .limit_left_movement:
  2022 000011ED 4983E802                        sub r8, 2                ; Mover solo 2 unidades a la izquierda
  2023 000011F1 EB30                            jmp .check_collision
  2024                                      .move_left:
  2025 000011F3 49FFC8                          dec r8
  2026 000011F6 EB0F                            jmp .check_vertical
  2027                                          
  2028                                      .move_right:
  2029 000011F8 49FFC0                          inc r8
  2030 000011FB EB0A                            jmp .check_vertical
  2031                                          
  2032                                      .move_up:
  2033 000011FD 49FFC9                          dec r9
  2034 00001200 EB21                            jmp .check_collision
  2035                                          
  2036                                      .move_down:
  2037 00001202 49FFC1                          inc r9
  2038 00001205 EB1C                            jmp .check_collision
  2039                                          
  2040                                      .check_vertical:
  2041 00001207 8A05(89150000)                  mov al, [enemy_target]
  2042 0000120D 84C0                            test al, al
  2043 0000120F 0F8569FFFFFF                    jnz .chase_paddle         ; Si persigue paleta, volver a su lógica
  2044 00001215 4C8B15(67140000)                mov r10, [ball_y_pos]     ; Si no, seguir persiguiendo la bola
  2045 0000121C 4D39D1                          cmp r9, r10
  2046 0000121F 7FDC                            jg .move_up
  2047 00001221 7CDF                            jl .move_down
  2048                                          
  2049                                      .check_collision:
  2050                                          ; Verificar colisión con bordes
  2051 00001223 4983F801                        cmp r8, 1                       ; Borde izquierdo
  2052 00001227 7E62                            jle .next_enemy
  2053 00001229 4983F84E                        cmp r8, column_cells
  2054 0000122D 7D5C                            jge .next_enemy
  2055 0000122F 4983F901                        cmp r9, 1                       ; Borde superior
  2056 00001233 7E56                            jle .next_enemy
  2057 00001235 4983F920                        cmp r9, row_cells
  2058 00001239 7D50                            jge .next_enemy
  2059                                          
  2060                                          ; Verificar colisión con bloques antes de moverse
  2061 0000123B 4150                            push r8
  2062 0000123D 4151                            push r9
  2063 0000123F 4152                            push r10
  2064                                          
  2065                                          ; Calcular posición en el tablero para verificar
  2066 00001241 B84E000000                      mov rax, column_cells
  2067 00001246 4883C002                        add rax, 2
  2068 0000124A 49F7E1                          mul r9
  2069 0000124D 4C01C0                          add rax, r8
  2070 00001250 4C8D90[000A0000]                lea r10, [board + rax]
  2071                                          
  2072                                          ; Verificar si hay un bloque en la nueva posición
  2073 00001257 418A02                          mov al, [r10]
  2074 0000125A 3C55                            cmp al, 'U'
  2075 0000125C 7427                            je .invalid_move
  2076 0000125E 3C4F                            cmp al, 'O'
  2077 00001260 7423                            je .invalid_move
  2078 00001262 3C44                            cmp al, 'D'
  2079 00001264 741F                            je .invalid_move
  2080 00001266 3C4C                            cmp al, 'L'
  2081 00001268 741B                            je .invalid_move
  2082 0000126A 3C56                            cmp al, 'V'
  2083 0000126C 7417                            je .invalid_move
  2084 0000126E 3C38                            cmp al, '8'
  2085 00001270 7413                            je .invalid_move
  2086 00001272 3C58                            cmp al, 'X'
  2087 00001274 740F                            je .invalid_move
  2088                                          
  2089 00001276 415A                            pop r10
  2090 00001278 4159                            pop r9
  2091 0000127A 4158                            pop r8
  2092                                          
  2093                                          ; Guardar nueva posición si es válida
  2094 0000127C 448806                          mov [rsi], r8b
  2095 0000127F 44884E01                        mov [rsi + 1], r9b
  2096 00001283 EB06                            jmp .next_enemy
  2097                                          
  2098                                      .invalid_move:
  2099 00001285 415A                            pop r10
  2100 00001287 4159                            pop r9
  2101 00001289 4158                            pop r8
  2102                                          
  2103                                      .next_enemy:
  2104 0000128B 49FFC4                          inc r12
  2105 0000128E E960FEFFFF                      jmp .enemy_loop
  2106                                          
  2107                                      .end:
  2108 00001293 5D                              pop rbp
  2109 00001294 C3                              ret
  2110                                  
  2111                                  get_current_spawn_points:
  2112 00001295 55                          push rbp
  2113 00001296 4889E5                      mov rbp, rsp
  2114                                      
  2115 00001299 480FB605(B4140000)          movzx rax, byte [current_level]
  2116 000012A1 48FFC8                      dec rax                         ; Ajustar para índice base 0
  2117 000012A4 488B04C5[BD150000]          mov rax, [spawn_points_table + rax * 8]
  2118                                      
  2119 000012AC 5D                          pop rbp
  2120 000012AD C3                          ret
  2121                                  
  2122                                  ; Función para verificar si debe aparecer un nuevo enemigo
  2123                                  check_enemy_spawn:
  2124 000012AE 55                          push rbp
  2125 000012AF 4889E5                      mov rbp, rsp
  2126                                      
  2127                                      ; Obtener spawn points del nivel actual
  2128 000012B2 E8DEFFFFFF                  call get_current_spawn_points
  2129 000012B7 4989C4                      mov r12, rax                    ; r12 = puntero a spawn points
  2130                                      
  2131                                      ; Obtener cantidad de bloques destruidos
  2132 000012BA 4C0FB62D(45150000)          movzx r13, byte [destroyed_blocks]
  2133                                      
  2134                                      ; Verificar cada punto de spawn
  2135 000012C2 4831C9                      xor rcx, rcx                    ; Índice del enemigo
  2136                                      
  2137                                      .check_loop:
  2138 000012C5 4883F90A                        cmp rcx, 10                     ; Máximo 10 enemigos
  2139 000012C9 7D4B                            jge .end
  2140                                          
  2141                                          ; Verificar si este spawn point ya fue usado
  2142 000012CB 80B9[E8150000]01                cmp byte [enemy_spawns_triggered + rcx], 1
  2143 000012D2 743D                            je .next_enemy
  2144                                          
  2145                                          ; Verificar si este enemigo ya está activo
  2146 000012D4 4889C8                          mov rax, rcx
  2147 000012D7 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  2148 000012DB 488DB0[5F150000]                lea rsi, [enemies + rax]
  2149 000012E2 807E0201                        cmp byte [rsi + 2], 1          ; Verificar si está activo
  2150 000012E6 7429                            je .next_enemy
  2151                                          
  2152                                          ; Verificar si debemos spawnear este enemigo
  2153 000012E8 490FB6040C                      movzx rax, byte [r12 + rcx]    ; Obtener punto de spawn
  2154 000012ED 4939C5                          cmp r13, rax                   ; Comparar con bloques destruidos
  2155 000012F0 751F                            jne .next_enemy
  2156                                          
  2157                                          ; Marcar este spawn point como usado
  2158 000012F2 C681[E8150000]01                mov byte [enemy_spawns_triggered + rcx], 1
  2159                                          
  2160                                          ; Spawner nuevo enemigo
  2161 000012F9 C60628                          mov byte [rsi], 40             ; X inicial
  2162 000012FC C6460102                        mov byte [rsi + 1], 2          ; Y inicial
  2163 00001300 C6460201                        mov byte [rsi + 2], 1          ; Activar enemigo
  2164                                          
  2165                                          ; Inicializar comportamiento
  2166 00001304 4889C8                          mov rax, rcx
  2167 00001307 4883E001                        and rax, 1                     ; Alternar comportamiento basado en índice par/impar
  2168 0000130B 8805(E7150000)                  mov [current_behavior], al      ; 0 = persigue bola, 1 = persigue paleta
  2169                                          
  2170                                      .next_enemy:
  2171 00001311 48FFC1                          inc rcx
  2172 00001314 EBAF                            jmp .check_loop
  2173                                          
  2174                                      .end:
  2175 00001316 5D                              pop rbp
  2176 00001317 C3                              ret
  2177                                  
  2178                                  
  2179                                  ; Función para dibujar enemigos
  2180                                  print_enemies:
  2181 00001318 55                          push rbp
  2182 00001319 4889E5                      mov rbp, rsp
  2183                                      
  2184 0000131C 4D31E4                      xor r12, r12                    ; Índice del enemigo
  2185                                      
  2186                                      .print_loop:
  2187 0000131F 4983FC0A                        cmp r12, 10                      ; Máximo 5 enemigos
  2188 00001323 7D4B                            jge .end
  2189                                          
  2190                                          ; Calcular offset del enemigo actual
  2191 00001325 4C89E0                          mov rax, r12
  2192 00001328 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  2193 0000132C 488DB0[5F150000]                lea rsi, [enemies + rax]
  2194                                          
  2195                                          ; Verificar si el enemigo está activo
  2196 00001333 807E0201                        cmp byte [rsi + 2], 1
  2197 00001337 7532                            jne .next_enemy
  2198                                          
  2199                                          ; Calcular posición en el tablero
  2200 00001339 4C0FB606                        movzx r8, byte [rsi]            ; X
  2201 0000133D 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  2202                                          
  2203                                          ; Calcular offset en el tablero
  2204 00001342 B84E000000                      mov rax, column_cells
  2205 00001347 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  2206 0000134B 49F7E1                          mul r9
  2207 0000134E 4C01C0                          add rax, r8
  2208 00001351 488DB8[000A0000]                lea rdi, [board + rax]
  2209                                          
  2210                                          ; Obtener carácter del enemigo según el nivel
  2211 00001358 480FB605(B4140000)              movzx rax, byte [current_level]
  2212 00001360 48FFC8                          dec rax                         ; Ajustar para índice base 0
  2213 00001363 8A80[5A150000]                  mov al, [enemy_chars + rax]
  2214                                          
  2215                                          ; Dibujar enemigo
  2216 00001369 8807                            mov [rdi], al
  2217                                          
  2218                                      .next_enemy:
  2219 0000136B 49FFC4                          inc r12
  2220 0000136E EBAF                            jmp .print_loop
  2221                                          
  2222                                      .end:
  2223 00001370 5D                              pop rbp
  2224 00001371 C3                              ret
  2225                                  
  2226                                  ; Función para verificar colisión con enemigos
  2227                                  ; Función para verificar colisión con enemigos
  2228                                  check_enemy_collision:
  2229 00001372 55                          push rbp
  2230 00001373 4889E5                      mov rbp, rsp
  2231                                      
  2232 00001376 4D31E4                      xor r12, r12                    ; Índice del enemigo
  2233 00001379 4831C0                      xor rax, rax                    ; Valor de retorno (0 = no colisión)
  2234                                      
  2235                                      .check_loop:
  2236 0000137C 4983FC05                        cmp r12, 5                      ; Máximo 5 enemigos
  2237 00001380 0F8DE9000000                    jge .end
  2238                                          
  2239                                          ; Calcular offset del enemigo actual
  2240 00001386 4C89E1                          mov rcx, r12
  2241 00001389 486BC903                        imul rcx, 3                     ; Cada enemigo ocupa 3 bytes
  2242 0000138D 488DB1[5F150000]                lea rsi, [enemies + rcx]
  2243                                          
  2244                                          ; Verificar si el enemigo está activo
  2245 00001394 807E0201                        cmp byte [rsi + 2], 1
  2246 00001398 0F85C9000000                    jne .next_enemy
  2247                                          
  2248                                          ; Verificar colisión con la bola
  2249 0000139E 4C0FB606                        movzx r8, byte [rsi]            ; X enemigo
  2250 000013A2 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y enemigo
  2251                                          
  2252                                          ; Verificar si la bola está en el rango del enemigo (considerando el enemigo como un área)
  2253 000013A7 4C8B15(5F140000)                mov r10, [ball_x_pos]
  2254 000013AE 4C8B1D(67140000)                mov r11, [ball_y_pos]
  2255                                          
  2256                                          ; Comprobar colisión vertical (misma columna)
  2257 000013B5 4D39C2                          cmp r10, r8
  2258 000013B8 7525                            jne .check_horizontal
  2259 000013BA 4D29CB                          sub r11, r9
  2260 000013BD 4983FB01                        cmp r11, 1
  2261 000013C1 7F1C                            jg .check_horizontal
  2262 000013C3 4983FBFF                        cmp r11, -1
  2263 000013C7 7C16                            jl .check_horizontal
  2264                                          
  2265                                          ; Colisión vertical detectada
  2266 000013C9 E8A3000000                      call destroy_enemy
  2267 000013CE 48F71D(77140000)                neg qword [ball_direction_y]    ; Invertir dirección vertical
  2268 000013D5 B801000000                      mov rax, 1
  2269 000013DA E990000000                      jmp .end
  2270                                          
  2271                                      .check_horizontal:
  2272                                          ; Comprobar colisión horizontal (misma fila)
  2273 000013DF 4C8B15(5F140000)                mov r10, [ball_x_pos]
  2274 000013E6 4C8B1D(67140000)                mov r11, [ball_y_pos]
  2275 000013ED 4D39CB                          cmp r11, r9
  2276 000013F0 7522                            jne .check_paddle
  2277 000013F2 4D29C2                          sub r10, r8
  2278 000013F5 4983FA01                        cmp r10, 1
  2279 000013F9 7F19                            jg .check_paddle
  2280 000013FB 4983FAFF                        cmp r10, -1
  2281 000013FF 7C13                            jl .check_paddle
  2282                                          
  2283                                          ; Colisión horizontal detectada
  2284 00001401 E86B000000                      call destroy_enemy
  2285 00001406 48F71D(6F140000)                neg qword [ball_direction_x]    ; Invertir dirección horizontal
  2286 0000140D B801000000                      mov rax, 1
  2287 00001412 EB5B                            jmp .end
  2288                                          
  2289                                      .check_paddle:
  2290                                          ; Verificar colisión con la paleta
  2291 00001414 4C8B15(3F140000)                mov r10, [pallet_position]
  2292 0000141B 4981EA[000A0000]                sub r10, board
  2293 00001422 4C89D0                          mov rax, r10
  2294 00001425 41BB4E000000                    mov r11, column_cells
  2295 0000142B 4983C302                        add r11, 2
  2296 0000142F 4831D2                          xor rdx, rdx
  2297 00001432 49F7F3                          div r11                     ; División para obtener la posición Y
  2298 00001435 4989D3                          mov r11, rdx               ; X de la paleta en r11
  2299                                          
  2300 00001438 488B0D(47140000)                mov rcx, [pallet_size]     ; Obtener el tamaño de la paleta
  2301                                          
  2302                                          ; Verificar si el enemigo está en la misma fila que la paleta
  2303 0000143F 41BD20000000                    mov r13, row_cells
  2304 00001445 4983ED02                        sub r13, 2                 ; Y de la paleta
  2305 00001449 4D39E9                          cmp r9, r13               ; Comparar Y del enemigo con Y de la paleta
  2306 0000144C 7519                            jne .next_enemy
  2307                                          
  2308                                          ; Verificar si el enemigo está dentro del rango X de la paleta
  2309 0000144E 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X inicial de la paleta
  2310 00001451 7C14                            jl .next_enemy
  2311                                          
  2312 00001453 4901CB                          add r11, rcx              ; Añadir el tamaño de la paleta
  2313 00001456 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X final de la paleta
  2314 00001459 7F0C                            jg .next_enemy
  2315                                          
  2316                                          ; Si llegamos aquí, hay colisión con la paleta
  2317 0000145B E811000000                      call destroy_enemy        ; Destruir el enemigo
  2318 00001460 B801000000                      mov rax, 1                ; Indicar que hubo colisión
  2319 00001465 EB08                            jmp .end
  2320                                          
  2321                                      .next_enemy:
  2322 00001467 49FFC4                          inc r12
  2323 0000146A E90DFFFFFF                      jmp .check_loop
  2324                                          
  2325                                      .end:
  2326 0000146F 5D                              pop rbp
  2327 00001470 C3                              ret
  2328                                  
  2329                                  ; Función para destruir un enemigo
  2330                                  destroy_enemy:
  2331                                      ; Desactivar enemigo
  2332 00001471 C6460200                    mov byte [rsi + 2], 0   ; Marcar enemigo como inactivo
  2333                                  
  2334                                      ; Sumar puntos por destruir enemigo
  2335 00001475 488B05(7E150000)            mov rax, [enemy_points]
  2336 0000147C 480105(3D150000)            add [current_score], rax
  2337                                  
  2338                                      ; No tocar bloques destruidos aquí
  2339 00001483 C3                          ret
  2340                                  
  2341                                  
  2342                                  _start:
  2343 00001484 E8A2ECFFFF              	call canonical_off
  2344 00001489 E804010000              	call start_screen
  2345 0000148E E8B9F5FFFF                  call init_level
  2346 00001493 E8FFFBFFFF                  call init_enemies
  2347 00001498 EB00                    	jmp .main_loop
  2348                                  	
  2349                                  
  2350                                  	.main_loop:
  2351 0000149A E8B6F9FFFF                      call print_labels
  2352 0000149F E8E5F8FFFF                      call print_blocks
  2353 000014A4 E8CEEFFFFF                      call move_letters
  2354 000014A9 E83EEFFFFF                      call print_letters
  2355 000014AE E8EBF1FFFF              		call print_pallet
  2356 000014B3 E8CDF2FFFF                      call move_ball
  2357 000014B8 E821EEFFFF                      call check_bottom_collision
  2358 000014BD E81BEDFFFF                      call print_lives
  2359 000014C2 E824F7FFFF                      call check_level_complete
  2360 000014C7 E8E2FDFFFF                      call check_enemy_spawn
  2361 000014CC E8FAFBFFFF                      call move_enemies
  2362 000014D1 E89CFEFFFF                      call check_enemy_collision
  2363 000014D6 E83DFEFFFF                      call print_enemies
  2364 000014DB E896F1FFFF              		call print_ball
  2365                                  		print board, board_size				
    82 000014E0 B801000000          <1>  mov eax, sys_write
    83 000014E5 BF01000000          <1>  mov edi, 1
    84 000014EA 48BE-               <1>  mov rsi, %1
    84 000014EC [000A000000000000]  <1>
    85 000014F4 BA000A0000          <1>  mov edx, %2
    86 000014F9 0F05                <1>  syscall
  2366                                  		;setnonblocking	
  2367                                  	.read_more:	
  2368                                  	    getchar	
    90 000014FB B800000000          <1>  mov rax, sys_read
    91 00001500 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 00001505 48BE-               <1>  mov rsi, input_char
    92 00001507 [0000000000000000]  <1>
    93 0000150F BA01000000          <1>  mov rdx, 1
    94 00001514 0F05                <1>  syscall
  2369 00001516 4883F801                	    cmp rax, 1
  2370 0000151A 7543                    	    jne .done
  2371                                  	
  2372 0000151C 8A05(00000000)          	    mov al, [input_char]
  2373 00001522 8805(04180000)          	    mov [last_key], al      ; Registrar la última tecla presionada
  2374                                  	
  2375 00001528 3C61                    	    cmp al, 'a'
  2376 0000152A 750E                    	    jne .not_left
  2377 0000152C 48C7C7FFFFFFFF          	    mov rdi, left_direction
  2378 00001533 E89BF1FFFF              	    call move_pallet
  2379 00001538 EB25                    	    jmp .done
  2380                                  	
  2381                                      .not_left:
  2382 0000153A 3C64                    	    cmp al, 'd'
  2383 0000153C 750C                    	    jne .not_right
  2384 0000153E BF01000000              	    mov rdi, right_direction
  2385 00001543 E88BF1FFFF              	    call move_pallet
  2386 00001548 EB15                    	    jmp .done
  2387                                  	
  2388                                      .not_right:
  2389 0000154A 3C63                    	    cmp al, 'c'             ; Verificar si se presionó la tecla 'c'
  2390 0000154C 740A                    	    je .release_ball        ; Si sí, liberar la bola
  2391                                  	
  2392 0000154E 3C71                    	    cmp al, 'q' 
  2393 00001550 0F84AF000000            	    je exit
  2394 00001556 EBA3                    	    jmp .read_more
  2395                                  	
  2396                                      .release_ball:
  2397 00001558 E8FBF3FFFF              	    call process_catch_release
  2398 0000155D EB00                    	    jmp .done
  2399                                  	
  2400                                      .done:
  2401                                  	    sleeptime
    98 0000155F B823000000          <1>  mov eax, sys_nanosleep
    99 00001564 48BF-               <1>  mov rdi, timespec
    99 00001566 [0000000000000000]  <1>
   100 0000156E 31F6                <1>  xor esi, esi
   101 00001570 0F05                <1>  syscall
  2402                                  	    print clear, clear_length
    82 00001572 B801000000          <1>  mov eax, sys_write
    83 00001577 BF01000000          <1>  mov edi, 1
    84 0000157C 48BE-               <1>  mov rsi, %1
    84 0000157E [1000000000000000]  <1>
    85 00001586 BA07000000          <1>  mov edx, %2
    86 0000158B 0F05                <1>  syscall
  2403 0000158D E908FFFFFF              	    jmp .main_loop
  2404                                  
  2405                                  
  2406                                  
  2407                                  
  2408                                  start_screen:
  2409                                      print clear, clear_length    ; Limpiamos la pantalla primero
    82 00001592 B801000000          <1>  mov eax, sys_write
    83 00001597 BF01000000          <1>  mov edi, 1
    84 0000159C 48BE-               <1>  mov rsi, %1
    84 0000159E [1000000000000000]  <1>
    85 000015A6 BA07000000          <1>  mov edx, %2
    86 000015AB 0F05                <1>  syscall
  2410                                      print msg1, msg1_length
    82 000015AD B801000000          <1>  mov eax, sys_write
    83 000015B2 BF01000000          <1>  mov edi, 1
    84 000015B7 48BE-               <1>  mov rsi, %1
    84 000015B9 [1700000000000000]  <1>
    85 000015C1 BA14010000          <1>  mov edx, %2
    86 000015C6 0F05                <1>  syscall
  2411                                      
  2412                                      .wait_for_key:              ; Agregamos una etiqueta para esperar la tecla
  2413                                          getchar                 ; Esperamos una tecla
    90 000015C8 B800000000          <1>  mov rax, sys_read
    91 000015CD BF00000000          <1>  mov rdi, STDIN_FILENO
    92 000015D2 48BE-               <1>  mov rsi, input_char
    92 000015D4 [0000000000000000]  <1>
    93 000015DC BA01000000          <1>  mov rdx, 1
    94 000015E1 0F05                <1>  syscall
  2414 000015E3 4883F801                        cmp rax, 1             ; Verificamos si se leyó un carácter
  2415 000015E7 75DF                            jne .wait_for_key      ; Si no se leyó, seguimos esperando
  2416                                          
  2417                                      print clear, clear_length   ; Limpiamos la pantalla antes de salir
    82 000015E9 B801000000          <1>  mov eax, sys_write
    83 000015EE BF01000000          <1>  mov edi, 1
    84 000015F3 48BE-               <1>  mov rsi, %1
    84 000015F5 [1000000000000000]  <1>
    85 000015FD BA07000000          <1>  mov edx, %2
    86 00001602 0F05                <1>  syscall
  2418 00001604 C3                          ret
  2419                                  
  2420                                  exit: 
  2421 00001605 E863EBFFFF              	call canonical_on
  2422 0000160A B83C000000              	mov    rax, 60
  2423 0000160F BF00000000                  mov    rdi, 0
  2424 00001614 0F05                        syscall
  2425                                  
