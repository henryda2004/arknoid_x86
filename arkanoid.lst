     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  sys_read: equ 0	
     7                                  sys_write:	equ 1
     8                                  sys_nanosleep:	equ 35
     9                                  sys_time:	equ 201
    10                                  sys_fcntl:	equ 72
    11                                  
    12                                  
    13                                  STDIN_FILENO: equ 0
    14                                  
    15                                  F_SETFL:	equ 0x0004
    16                                  O_NONBLOCK: equ 0x0004
    17                                  
    18                                  ;screen clean definition
    19                                  row_cells:	equ 32	; set to any (reasonable) value you wish
    20                                  column_cells: 	equ 80 ; set to any (reasonable) value you wish
    21                                  array_length:	equ row_cells * column_cells + row_cells ; cells are mapped to bytes in the array and a new line char ends each row
    22                                  
    23                                  ;This is regarding the sleep time
    24                                  timespec:
    25 00000000 0000000000000000            tv_sec  dq 0
    26 00000008 002D310100000000            tv_nsec dq 20000000
    27                                  
    28                                  
    29                                  ;This is for cleaning up the screen
    30 00000010 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"
    31                                  clear_length:	equ $-clear
    32                                  	
    33                                  	
    34                                  
    35                                  ; Start Message
    36 00000017 202020202020202054-     msg1: db "        TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    36 00000020 45434E4F4C4F474943-
    36 00000029 4F20444520434F5354-
    36 00000032 412052494341202020-
    36 0000003B 20202020200A0D     
    37 00000042 202020202020202041-     msg2: db "        ARQUITECTURA DE COMPUTADORAS I        ", 0xA, 0xD
    37 0000004B 525155495445435455-
    37 00000054 524120444520434F4D-
    37 0000005D 50555441444F524153-
    37 00000066 204920202020202020-
    37 0000006F 200A0D             
    38 00000072 202020202020202045-     msg3: db "        ESTUDIANTE: HENRY NUNEZ PEREZ        ", 0xA, 0xD
    38 0000007B 5354554449414E5445-
    38 00000084 3A2048454E5259204E-
    38 0000008D 554E455A2050455245-
    38 00000096 5A2020202020202020-
    38 0000009F 0A0D               
    39 000000A1 202020202020202050-     msg4: db "        PROFESOR: ERNESTO RIVERA ALVARADO        ", 0xA, 0xD
    39 000000AA 524F4645534F523A20-
    39 000000B3 45524E4553544F2052-
    39 000000BC 495645524120414C56-
    39 000000C5 415241444F20202020-
    39 000000CE 202020200A0D       
    40 000000D4 202020202020202041-     msg5: db "        ARKANOID RETRO        ", 0xA, 0xD
    40 000000DD 524B414E4F49442052-
    40 000000E6 4554524F2020202020-
    40 000000EF 2020200A0D         
    41 000000F4 202020202020202050-     msg6: db "        PRESIONE CUALQUIER TECLA PARA INICIAR        ", 0xA, 0xD
    41 000000FD 524553494F4E452043-
    41 00000106 55414C515549455220-
    41 0000010F 5445434C4120504152-
    41 00000118 4120494E4943494152-
    41 00000121 20202020202020200A-
    41 0000012A 0D                 
    42                                  msg1_length: equ $-msg1
    43                                  msg2_length: equ $-msg2
    44                                  msg3_length: equ $-msg3
    45                                  msg4_length: equ $-msg4
    46                                  msg5_length: equ $-msg5
    47                                  msg6_length: equ $-msg6
    48                                  
    49                                  ; Usefull macros
    50                                  
    51                                  
    52                                  
    53                                  %macro setnonblocking 0
    54                                  	mov rax, sys_fcntl
    55                                      mov rdi, STDIN_FILENO
    56                                      mov rsi, F_SETFL
    57                                      mov rdx, O_NONBLOCK
    58                                      syscall
    59                                  %endmacro
    60                                  
    61                                  %macro unsetnonblocking 0
    62                                  	mov rax, sys_fcntl
    63                                      mov rdi, STDIN_FILENO
    64                                      mov rsi, F_SETFL
    65                                      mov rdx, 0
    66                                      syscall
    67                                  %endmacro
    68                                  
    69                                  %macro full_line 0
    70                                      times column_cells db "X"
    71                                      db 0x0a, 0xD
    72                                  %endmacro
    73                                  
    74                                  %macro hollow_line 0
    75                                      db "X"
    76                                      times column_cells-2 db " "
    77                                      db "X", 0x0a, 0xD
    78                                  %endmacro
    79                                  
    80                                  
    81                                  %macro print 2
    82                                  	mov eax, sys_write
    83                                  	mov edi, 1 	; stdout
    84                                  	mov rsi, %1
    85                                  	mov edx, %2
    86                                  	syscall
    87                                  %endmacro
    88                                  
    89                                  %macro getchar 0
    90                                  	mov     rax, sys_read
    91                                      mov     rdi, STDIN_FILENO
    92                                      mov     rsi, input_char
    93                                      mov     rdx, 1 ; number of bytes
    94                                      syscall         ;read text input from keyboard
    95                                  %endmacro
    96                                  
    97                                  %macro sleeptime 0
    98                                  	mov eax, sys_nanosleep
    99                                  	mov rdi, timespec
   100                                  	xor esi, esi		; ignore remaining time in case of call interruption
   101                                  	syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   102                                  %endmacro
   103                                  
   104                                  
   105                                  
   106                                  global _start
   107                                  
   108                                  section .bss
   109                                  
   110 00000000 ??                      input_char: resb 1
   111                                  
   112                                  section .data
   113                                  
   114                                  	; Guardamos la plantilla del tablero (32 filas)
   115                                      board_template:
   116                                          full_line
    70 00000000 58<rep 50h>         <1>  times column_cells db "X"
    71 00000050 0A0D                <1>  db 0x0a, 0xD
   117                                          %rep 30
   118                                          hollow_line
   119                                          %endrep
   118                              <1>  hollow_line
    75 00000052 58                  <2>  db "X"
    76 00000053 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000A1 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000A4 58                  <2>  db "X"
    76 000000A5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000F3 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000F6 58                  <2>  db "X"
    76 000000F7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000145 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000148 58                  <2>  db "X"
    76 00000149 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000197 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000019A 58                  <2>  db "X"
    76 0000019B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000001E9 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000001EC 58                  <2>  db "X"
    76 000001ED 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000023B 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000023E 58                  <2>  db "X"
    76 0000023F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000028D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000290 58                  <2>  db "X"
    76 00000291 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000002DF 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000002E2 58                  <2>  db "X"
    76 000002E3 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000331 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000334 58                  <2>  db "X"
    76 00000335 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000383 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000386 58                  <2>  db "X"
    76 00000387 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000003D5 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000003D8 58                  <2>  db "X"
    76 000003D9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000427 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000042A 58                  <2>  db "X"
    76 0000042B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000479 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000047C 58                  <2>  db "X"
    76 0000047D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000004CB 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000004CE 58                  <2>  db "X"
    76 000004CF 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000051D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000520 58                  <2>  db "X"
    76 00000521 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000056F 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000572 58                  <2>  db "X"
    76 00000573 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000005C1 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005C4 58                  <2>  db "X"
    76 000005C5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000613 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000616 58                  <2>  db "X"
    76 00000617 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000665 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000668 58                  <2>  db "X"
    76 00000669 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000006B7 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000006BA 58                  <2>  db "X"
    76 000006BB 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000709 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000070C 58                  <2>  db "X"
    76 0000070D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000075B 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000075E 58                  <2>  db "X"
    76 0000075F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007AD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000007B0 58                  <2>  db "X"
    76 000007B1 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007FF 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000802 58                  <2>  db "X"
    76 00000803 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000851 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000854 58                  <2>  db "X"
    76 00000855 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008A3 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008A6 58                  <2>  db "X"
    76 000008A7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008F5 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008F8 58                  <2>  db "X"
    76 000008F9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000947 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000094A 58                  <2>  db "X"
    76 0000094B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000999 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000099C 58                  <2>  db "X"
    76 0000099D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000009EB 580A0D              <2>  db "X", 0x0a, 0xD
   120                                          full_line
    70 000009EE 58<rep 50h>         <1>  times column_cells db "X"
    71 00000A3E 0A0D                <1>  db 0x0a, 0xD
   121                                      board_template_size: equ $ - board_template
   122                                  
   123                                      ; Espacio real que se usará en la ejecución
   124 00000A40 00<rep A40h>                board: times board_template_size db 0
   125                                      board_size: equ board_template_size
   126                                  
   127                                  	; Added for the terminal issue
   128 00001480 00<rep 24h>             	termios:        times 36 db 0
   129                                  	stdin:          equ 0
   130                                  	ICANON:         equ 1<<1
   131                                  	ECHO:           equ 1<<3
   132                                  	VTIME: 			equ 5
   133                                  	VMIN:			equ 6
   134                                  	CC_C:			equ 18
   135                                  
   136                                  section .text
   137                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   138                                  canonical_off:
   139 0000012B E86F000000                      call read_stdin_termios
   140                                  
   141                                          ; clear canonical bit in local mode flags
   142 00000130 50                              push rax
   143 00000131 B802000000                      mov eax, ICANON
   144 00000136 F7D0                            not eax
   145 00000138 2105(8C140000)                  and [termios+12], eax
   146 0000013E C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   147 00000145 C605(98140000)00        		mov byte[termios+CC_C+VMIN], 0
   148 0000014C 58                              pop rax
   149                                  
   150 0000014D E86C000000                      call write_stdin_termios
   151 00000152 C3                              ret
   152                                  
   153                                  echo_off:
   154 00000153 E847000000                      call read_stdin_termios
   155                                  
   156                                          ; clear echo bit in local mode flags
   157 00000158 50                              push rax
   158 00000159 B808000000                      mov eax, ECHO
   159 0000015E F7D0                            not eax
   160 00000160 2105(8C140000)                  and [termios+12], eax
   161 00000166 58                              pop rax
   162                                  
   163 00000167 E852000000                      call write_stdin_termios
   164 0000016C C3                              ret
   165                                  
   166                                  canonical_on:
   167 0000016D E82D000000                      call read_stdin_termios
   168                                  
   169                                          ; set canonical bit in local mode flags
   170 00000172 830D(8C140000)02                or dword [termios+12], ICANON
   171 00000179 C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   172 00000180 C605(98140000)01        		mov byte[termios+CC_C+VMIN], 1
   173 00000187 E832000000                      call write_stdin_termios
   174 0000018C C3                              ret
   175                                  
   176                                  echo_on:
   177 0000018D E80D000000                      call read_stdin_termios
   178                                  
   179                                          ; set echo bit in local mode flags
   180 00000192 830D(8C140000)08                or dword [termios+12], ECHO
   181                                  
   182 00000199 E820000000                      call write_stdin_termios
   183 0000019E C3                              ret
   184                                  
   185                                  read_stdin_termios:
   186 0000019F 50                              push rax
   187 000001A0 53                              push rbx
   188 000001A1 51                              push rcx
   189 000001A2 52                              push rdx
   190                                  
   191 000001A3 B836000000                      mov eax, 36h
   192 000001A8 BB00000000                      mov ebx, stdin
   193 000001AD B901540000                      mov ecx, 5401h
   194 000001B2 BA[80140000]                    mov edx, termios
   195 000001B7 CD80                            int 80h
   196                                  
   197 000001B9 5A                              pop rdx
   198 000001BA 59                              pop rcx
   199 000001BB 5B                              pop rbx
   200 000001BC 58                              pop rax
   201 000001BD C3                              ret
   202                                  
   203                                  write_stdin_termios:
   204 000001BE 50                              push rax
   205 000001BF 53                              push rbx
   206 000001C0 51                              push rcx
   207 000001C1 52                              push rdx
   208                                  
   209 000001C2 B836000000                      mov eax, 36h
   210 000001C7 BB00000000                      mov ebx, stdin
   211 000001CC B902540000                      mov ecx, 5402h
   212 000001D1 BA[80140000]                    mov edx, termios
   213 000001D6 CD80                            int 80h
   214                                  
   215 000001D8 5A                              pop rdx
   216 000001D9 59                              pop rcx
   217 000001DA 5B                              pop rbx
   218 000001DB 58                              pop rax
   219 000001DC C3                              ret
   220                                  
   221                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   222                                  
   223                                  char_equal: equ 61
   224                                  char_space: equ 32
   225                                  char_O: equ 79
   226                                  left_direction: equ -1
   227                                  right_direction: equ 1
   228                                  
   229                                  
   230                                  section .data
   231                                  
   232                                  ; Mensajes para los niveles
   233 000014A4 4E4956454C20                level_msg: db "NIVEL "
   234                                      level_msg_len: equ $ - level_msg
   235 000014AA 31                          level_1_char: db "1"
   236 000014AB 32                          level_2_char: db "2"
   237 000014AC 33                          level_3_char: db "3"
   238 000014AD 34                          level_4_char: db "4"
   239 000014AE 35                          level_5_char: db "5"
   240                                      level_char_len: equ 1
   241                                  
   242                                      ; Timespec para la pausa del mensaje de nivel
   243                                      level_display_time:
   244 000014AF 0100000000000000                lvl_tv_sec dq 1           ; 1 segundo
   245 000014B7 0000000000000000                lvl_tv_nsec dq 0
   246                                          
   247 000014BF [B013000000000000]      	pallet_position dq board + 38 + 29 * (column_cells +2)
   248 000014C7 0500000000000000            pallet_size dq 5
   249 000014CF 0500000000000000            default_pallet_size dq 5    ; Tamaño normal de la paleta
   250 000014D7 0700000000000000            extended_pallet_size dq 7   ; Tamaño extendido de la paleta
   251                                  
   252 000014DF 2800000000000000        	ball_x_pos: dq 40
   253 000014E7 1C00000000000000        	ball_y_pos: dq 28
   254 000014EF 0100000000000000            ball_direction_x dq 1    ; 1 = derecha, -1 = izquierda
   255 000014F7 FFFFFFFFFFFFFFFF            ball_direction_y dq -1   ; -1 = arriba, 1 = abajo
   256 000014FF 00                          ball_moving db 0         ; 0 = estática, 1 = en movimiento
   257 00001500 00                          ball_active db 0
   258                                  
   259 00001501 0000000000000000            ball2_x_pos:        dq 0
   260 00001509 0000000000000000            ball2_y_pos:        dq 0
   261 00001511 0000000000000000            ball2_direction_x:  dq 0
   262 00001519 0000000000000000            ball2_direction_y:  dq 0
   263 00001521 00                          ball2_moving:       db 0    ; 0 = estática, 1 = en movimiento
   264 00001522 00                          ball2_active:       db 0    ; 0 = inactiva, 1 = activa
   265                                  
   266                                      ; -- Pelota 3 --
   267 00001523 0000000000000000            ball3_x_pos:        dq 0
   268 0000152B 0000000000000000            ball3_y_pos:        dq 0
   269 00001533 0000000000000000            ball3_direction_x:  dq 0
   270 0000153B 0000000000000000            ball3_direction_y:  dq 0
   271 00001543 00                          ball3_moving:       db 0
   272 00001544 00                          ball3_active:       db 0
   273                                  
   274                                  
   275                                  ; Definir los límites de la pantalla o área de juego
   276                                      board_top_left_x equ 1
   277                                      board_top_left_y equ 1
   278                                      board_bottom_right_x equ column_cells - 1
   279                                      board_bottom_right_y equ row_cells
   280                                  
   281                                      ; Limites laterales
   282                                      left_edge equ board_top_left_x               ; Límite izquierdo en la primera columna
   283                                      right_edge equ board_bottom_right_x         ; Límite derecho en la última columna
   284                                  
   285                                      ; O también puedes hacerlo así si prefieres usando las coordenadas en memoria para obtener la ubicación exacta:
   286 00001545 [920A000000000000]          left_edge_position dq board + (board_top_left_y * (column_cells + 2)) ; Coordenada de la parte izquierda del marco
   287 0000154D [E00A000000000000]          right_edge_position dq board + (board_top_left_y * (column_cells + 2) + board_bottom_right_x - 1) ; Coordenada de la parte derecha del marco
   288                                  
   289                                      ; Definición de tipos de bloques
   290 00001555 555555555555                block_type_1: db "UUUUUU"    ; Durabilidad 1
   291 0000155B 4F4F4F4F4F4F                block_type_2: db "OOOOOO"    ; Durabilidad 2
   292 00001561 444444444444                block_type_3: db "DDDDDD"    ; Durabilidad 3
   293 00001567 4C4C4C4C4C4C                block_type_4: db "LLLLLL"    ; Durabilidad 4
   294 0000156D 565656565656                block_type_5: db "VVVVVV"    ; Durabilidad 5
   295 00001573 383838383838                block_type_6: db "888888"    ; Durabilidad 6
   296                                      block_length: equ 6        ; Longitud de cada bloque
   297                                  
   298                                      ; Estructura para el nivel actual
   299 00001579 01                          current_level db 1
   300 0000157A 00                          blocks_remaining db 0
   301                                  
   302                                      ; Definición del nivel 1 (ejemplo con múltiples bloques)destroyed_blocks
   303                                      ; Formato: x_pos, y_pos, tipo_bloque, durabilidad_actual
   304                                      level1_blocks:
   305                                          ; Tercera fila (tipo 3)
   306 0000157B 0105050220                      db 1, 5, 5, 2, ' '   
   307 00001580 0705050220                      db 7, 5, 5, 2, ' '    
   308 00001585 0D05050220                      db 13, 5, 5, 2, ' '   
   309 0000158A 1305050220                      db 19, 5, 5, 2, ' '   
   310 0000158F 1905050220                      db 25, 5, 5, 2, ' '   
   311 00001594 1F05050220                      db 31, 5, 5, 2, ' '   
   312 00001599 2505050220                      db 37, 5, 5, 2, ' '   
   313 0000159E 2B05050220                      db 43, 5, 5, 2, ' '   
   314 000015A3 3105050220                      db 49, 5, 5, 2, ' '   
   315 000015A8 3705050220                      db 55, 5, 5, 2, ' '   
   316 000015AD 3D05050220                      db 61, 5, 5, 2, ' '  
   317 000015B2 4305050220                      db 67, 5, 5, 2, ' '   
   318 000015B7 4905050220                      db 73, 5, 5, 2, ' '   
   319                                  
   320 000015BC 0106040145                      db 1, 6, 4, 1, 'E'   
   321 000015C1 0706020153                      db 7, 6, 2, 1, 'S'    
   322 000015C6 0D06040153                      db 13, 6, 4, 1, 'S'   
   323 000015CB 1306020153                      db 19, 6, 2, 1, 'S'   
   324 000015D0 1906040120                      db 25, 6, 4, 1, ' '   
   325 000015D5 1F06020120                      db 31, 6, 2, 1, ' '   
   326 000015DA 2506040120                      db 37, 6, 4, 1, ' '   
   327 000015DF 2B06020143                      db 43, 6, 2, 1, 'C'   
   328 000015E4 3106040120                      db 49, 6, 4, 1, ' '   
   329 000015E9 3706020120                      db 55, 6, 2, 1, ' '   
   330 000015EE 3D06040120                      db 61, 6, 4, 1, ' '  
   331 000015F3 4306020120                      db 67, 6, 2, 1, ' '   
   332 000015F8 4906040120                      db 73, 6, 4, 1, ' ' 
   333                                  
   334 000015FD 0107010120                      db 1, 7, 1, 1, ' '   
   335 00001602 0707030120                      db 7, 7, 3, 1, ' '    
   336 00001607 0D07010120                      db 13, 7, 1, 1, ' '   
   337 0000160C 1307030120                      db 19, 7, 3, 1, ' '   
   338 00001611 1907010120                      db 25, 7, 1, 1, ' '   
   339 00001616 1F07030120                      db 31, 7, 3, 1, ' '   
   340 0000161B 2507010120                      db 37, 7, 1, 1, ' '   
   341 00001620 2B07030120                      db 43, 7, 3, 1, ' '   
   342 00001625 3107010120                      db 49, 7, 1, 1, ' '   
   343 0000162A 3707030120                      db 55, 7, 3, 1, ' '   
   344 0000162F 3D07010120                      db 61, 7, 1, 1, ' '  
   345 00001634 4307030120                      db 67, 7, 3, 1, ' '   
   346 00001639 4907010120                      db 73, 7, 1, 1, ' ' 
   347                                  
   348 0000163E 0108040120                      db 1, 8, 4, 1, ' '   
   349 00001643 0708020120                      db 7, 8, 2, 1, ' '    
   350 00001648 0D08040150                      db 13, 8, 4, 1, 'P'   
   351 0000164D 1308020120                      db 19, 8, 2, 1, ' '   
   352 00001652 1908040120                      db 25, 8, 4, 1, ' '   
   353 00001657 1F08020120                      db 31, 8, 2, 1, ' '   
   354 0000165C 2508040145                      db 37, 8, 4, 1, 'E'   
   355 00001661 2B08020143                      db 43, 8, 2, 1, 'C'   
   356 00001666 3108040120                      db 49, 8, 4, 1, ' '   
   357 0000166B 3708020120                      db 55, 8, 2, 1, ' '   
   358 00001670 3D08040120                      db 61, 8, 4, 1, ' '  
   359 00001675 4308020120                      db 67, 8, 2, 1, ' '   
   360 0000167A 4908040120                      db 73, 8, 4, 1, ' ' 
   361                                  
   362 0000167F 0109010120                      db 1, 9, 1, 1, ' '   
   363 00001684 0709030120                      db 7, 9, 3, 1, ' '    
   364 00001689 0D09010120                      db 13, 9, 1, 1, ' '   
   365 0000168E 1309030120                      db 19, 9, 3, 1, ' '   
   366 00001693 1909010120                      db 25, 9, 1, 1, ' '   
   367 00001698 1F09030120                      db 31, 9, 3, 1, ' '   
   368 0000169D 2509010120                      db 37, 9, 1, 1, ' '   
   369 000016A2 2B09030120                      db 43, 9, 3, 1, ' '     
   370 000016A7 3109010120                      db 49, 9, 1, 1, ' '   
   371 000016AC 3709030120                      db 55, 9, 3, 1, ' '   
   372 000016B1 3D09010120                      db 61, 9, 1, 1, ' '  
   373 000016B6 4309030120                      db 67, 9, 3, 1, ' '   
   374 000016BB 4909010120                      db 73, 9, 1, 1, ' ' 
   375                                  
   376 000016C0 010A040145                      db 1, 10, 4, 1, 'E'   
   377 000016C5 070A020120                      db 7, 10, 2, 1, ' '    
   378 000016CA 0D0A040120                      db 13, 10, 4, 1, ' '   
   379 000016CF 130A020120                      db 19, 10, 2, 1, ' '   
   380 000016D4 190A040120                      db 25, 10, 4, 1, ' '   
   381 000016D9 1F0A020120                      db 31, 10, 2, 1, ' '   
   382 000016DE 250A040143                      db 37, 10, 4, 1, 'C'   
   383 000016E3 2B0A020120                      db 43, 10, 2, 1, ' '   
   384 000016E8 310A040120                      db 49, 10, 4, 1, ' '   
   385 000016ED 370A02014C                      db 55, 10, 2, 1, 'L'   
   386 000016F2 3D0A040120                      db 61, 10, 4, 1, ' '  
   387 000016F7 430A020120                      db 67, 10, 2, 1, ' '   
   388 000016FC 490A040120                      db 73, 10, 4, 1, ' ' 
   389                                  
   390                                      level1_blocks_count equ 78   ; Cantidad total de bloques
   391                                  
   392                                      ; Nivel 2: Bloques de prueba
   393                                      level2_blocks:
   394 00001701 0103040120                      db 1, 3, 4, 1, ' '
   395                                  
   396 00001706 0104030120                      db 1, 4, 3, 1, ' '   
   397 0000170B 0704040120                      db 7, 4, 4, 1, ' '   
   398                                                  
   399 00001710 0105020120                      db 1, 5, 2, 1, ' '   
   400 00001715 0705030120                      db 7, 5, 3, 1, ' '
   401 0000171A 0D05040144                      db 13, 5, 4, 1, 'D'
   402                                  
   403 0000171F 0106010120                      db 1, 6, 1, 1, ' '   
   404 00001724 0706020120                      db 7, 6, 2, 1, ' '
   405 00001729 0D06030120                      db 13, 6, 3, 1, ' '
   406 0000172E 1306040120                      db 19, 6, 4, 1, ' '   
   407                                  
   408 00001733 0107040120                      db 1, 7, 4, 1, ' '   
   409 00001738 0707010120                      db 7, 7, 1, 1, ' '
   410 0000173D 0D07020120                      db 13, 7, 2, 1, ' '
   411 00001742 1307030120                      db 19, 7, 3, 1, ' '  
   412 00001747 1907040120                      db 25, 7, 4, 1, ' '   
   413                                  
   414 0000174C 0108030120                      db 1, 8, 3, 1, ' '   
   415 00001751 0708040120                      db 7, 8, 4, 1, ' '
   416 00001756 0D08010120                      db 13, 8, 1, 1, ' '
   417 0000175B 1308020120                      db 19, 8, 2, 1, ' '  
   418 00001760 1908030120                      db 25, 8, 3, 1, ' ' 
   419 00001765 1F08040120                      db 31, 8, 4, 1, ' '   
   420                                  
   421 0000176A 0109020120                      db 1, 9, 2, 1, ' '   
   422 0000176F 0709030120                      db 7, 9, 3, 1, ' '
   423 00001774 0D09040120                      db 13, 9, 4, 1, ' '
   424 00001779 1309010120                      db 19, 9, 1, 1, ' '  
   425 0000177E 1909020120                      db 25, 9, 2, 1, ' ' 
   426 00001783 1F09030143                      db 31, 9, 3, 1, 'C' 
   427 00001788 2509040120                      db 37, 9, 4, 1, ' '   
   428                                  
   429 0000178D 010A010120                      db 1, 10, 1, 1, ' '   
   430 00001792 070A020120                      db 7, 10, 2, 1, ' '
   431 00001797 0D0A030120                      db 13, 10, 3, 1, ' '
   432 0000179C 130A040120                      db 19, 10, 4, 1, ' '  
   433 000017A1 190A010120                      db 25, 10, 1, 1, ' ' 
   434 000017A6 1F0A020120                      db 31, 10, 2, 1, ' ' 
   435 000017AB 250A03014C                      db 37, 10, 3, 1, 'L'  
   436 000017B0 2B0A040120                      db 43, 10, 4, 1, ' '   
   437                                  
   438 000017B5 010B040120                      db 1, 11, 4, 1, ' '   
   439 000017BA 070B010120                      db 7, 11, 1, 1, ' '
   440 000017BF 0D0B020120                      db 13, 11, 2, 1, ' '
   441 000017C4 130B030144                      db 19, 11, 3, 1, 'D'  
   442 000017C9 190B040120                      db 25, 11, 4, 1, ' ' 
   443 000017CE 1F0B010120                      db 31, 11, 1, 1, ' ' 
   444 000017D3 250B020120                      db 37, 11, 2, 1, ' '  
   445 000017D8 2B0B030120                      db 43, 11, 3, 1, ' ' 
   446 000017DD 310B040120                      db 49, 11, 4, 1, ' '   
   447                                  
   448 000017E2 010C030120                      db 1, 12, 3, 1, ' '   
   449 000017E7 070C040120                      db 7, 12, 4, 1, ' '
   450 000017EC 0D0C010120                      db 13, 12, 1, 1, ' '
   451 000017F1 130C020120                      db 19, 12, 2, 1, ' '  
   452 000017F6 190C030120                      db 25, 12, 3, 1, ' ' 
   453 000017FB 1F0C040120                      db 31, 12, 4, 1, ' ' 
   454 00001800 250C010120                      db 37, 12, 1, 1, ' '  
   455 00001805 2B0C020120                      db 43, 12, 2, 1, ' ' 
   456 0000180A 310C030120                      db 49, 12, 3, 1, ' '
   457 0000180F 370C040120                      db 55, 12, 4, 1, ' '   
   458                                  
   459 00001814 010D020120                      db 1, 13, 2, 1, ' '   
   460 00001819 070D030120                      db 7, 13, 3, 1, ' '
   461 0000181E 0D0D040120                      db 13, 13, 4, 1, ' '
   462 00001823 130D010144                      db 19, 13, 1, 1, 'D'  
   463 00001828 190D020120                      db 25, 13, 2, 1, ' ' 
   464 0000182D 1F0D030120                      db 31, 13, 3, 1, ' ' 
   465 00001832 250D040120                      db 37, 13, 4, 1, ' '  
   466 00001837 2B0D010120                      db 43, 13, 1, 1, ' ' 
   467 0000183C 310D020120                      db 49, 13, 2, 1, ' '
   468 00001841 370D030120                      db 55, 13, 3, 1, ' ' 
   469 00001846 3D0D040120                      db 61, 13, 4, 1, ' '   
   470                                  
   471 0000184B 010E010120                      db 1, 14, 1, 1, ' '   
   472 00001850 070E020120                      db 7, 14, 2, 1, ' '
   473 00001855 0D0E030120                      db 13, 14, 3, 1, ' '
   474 0000185A 130E040120                      db 19, 14, 4, 1, ' '  
   475 0000185F 190E010120                      db 25, 14, 1, 1, ' ' 
   476 00001864 1F0E020120                      db 31, 14, 2, 1, ' ' 
   477 00001869 250E030120                      db 37, 14, 3, 1, ' '  
   478 0000186E 2B0E040120                      db 43, 14, 4, 1, ' ' 
   479 00001873 310E010120                      db 49, 14, 1, 1, ' '
   480 00001878 370E020120                      db 55, 14, 2, 1, ' ' 
   481 0000187D 3D0E030120                      db 61, 14, 3, 1, ' '  
   482 00001882 430E040120                      db 67, 14, 4, 1, ' '   
   483                                  
   484 00001887 010F050220                      db 1, 15, 5, 2, ' '   
   485 0000188C 070F050220                      db 7, 15, 5, 2, ' '
   486 00001891 0D0F050220                      db 13, 15, 5, 2, ' '
   487 00001896 130F050220                      db 19, 15, 5, 2, ' '  
   488 0000189B 190F050220                      db 25, 15, 5, 2, ' ' 
   489 000018A0 1F0F050220                      db 31, 15, 5, 2, ' ' 
   490 000018A5 250F050220                      db 37, 15, 5, 2, ' '  
   491 000018AA 2B0F050220                      db 43, 15, 5, 2, ' ' 
   492 000018AF 310F050220                      db 49, 15, 5, 2, ' '
   493 000018B4 370F050220                      db 55, 15, 5, 2, ' ' 
   494 000018B9 3D0F050220                      db 61, 15, 5, 2, ' '  
   495 000018BE 430F050220                      db 67, 15, 5, 2, ' '
   496 000018C3 490F040120                      db 73, 15, 4, 1, ' '   
   497                                         
   498                                  
   499                                      level2_blocks_count equ 91
   500                                  
   501                                      ; Nivel 3
   502                                      level3_blocks:
   503                                  
   504 000018C8 0105010120                      db 1, 5, 1, 1, ' '   
   505 000018CD 0705020120                      db 7, 5, 2, 1, ' '    
   506 000018D2 0D05010120                      db 13, 5, 1, 1, ' '   
   507 000018D7 1305020120                      db 19, 5, 2, 1, ' '   
   508 000018DC 1905010120                      db 25, 5, 1, 1, ' '   
   509 000018E1 1F05020120                      db 31, 5, 2, 1, ' '   
   510 000018E6 2505010120                      db 37, 5, 1, 1, ' '   
   511 000018EB 2B05020120                      db 43, 5, 2, 1, ' '   
   512 000018F0 3105010120                      db 49, 5, 1, 1, ' '   
   513 000018F5 3705020120                      db 55, 5, 2, 1, ' '   
   514 000018FA 3D05010120                      db 61, 5, 1, 1, ' '  
   515 000018FF 4305020120                      db 67, 5, 2, 1, ' '   
   516 00001904 4905010120                      db 73, 5, 1, 1, ' ' 
   517                                  
   518 00001909 0107040120                      db 1, 7, 4, 1, ' '   
   519 0000190E 0707040120                      db 7, 7, 4, 1, ' '    
   520 00001913 0D07040120                      db 13, 7, 4, 1, ' '   
   521 00001918 1307063C20                      db 19, 7, 6, 60, ' '   
   522 0000191D 1907063C20                      db 25, 7, 6, 60, ' '   
   523 00001922 1F07063C20                      db 31, 7, 6, 60, ' '   
   524 00001927 2507063C20                      db 37, 7, 6, 60, ' '   
   525 0000192C 2B07063C20                      db 43, 7, 6, 60, ' '   
   526 00001931 3107063C20                      db 49, 7, 6, 60, ' '   
   527 00001936 3707063C20                      db 55, 7, 6, 60, ' '   
   528 0000193B 3D07063C20                      db 61, 7, 6, 60, ' '  
   529 00001940 4307063C20                      db 67, 7, 6, 60, ' '   
   530 00001945 4907063C20                      db 73, 7, 6, 60, ' ' 
   531                                  
   532 0000194A 0109040120                      db 1, 9, 4, 1, ' '   
   533 0000194F 0709030120                      db 7, 9, 3, 1, ' '    
   534 00001954 0D09040120                      db 13, 9, 4, 1, ' '   
   535 00001959 1309030120                      db 19, 9, 3, 1, ' '   
   536 0000195E 1909040120                      db 25, 9, 4, 1, ' '   
   537 00001963 1F09030120                      db 31, 9, 3, 1, ' '   
   538 00001968 2509040120                      db 37, 9, 4, 1, ' '   
   539 0000196D 2B09030120                      db 43, 9, 3, 1, ' '   
   540 00001972 3109040120                      db 49, 9, 4, 1, ' '   
   541 00001977 3709030120                      db 55, 9, 3, 1, ' '   
   542 0000197C 3D09040120                      db 61, 9, 4, 1, ' '  
   543 00001981 4309030120                      db 67, 9, 3, 1, ' '   
   544 00001986 4909040120                      db 73, 9, 4, 1, ' ' 
   545                                  
   546 0000198B 010B063C20                      db 1, 11, 6, 60, ' '   
   547 00001990 070B063C20                      db 7, 11, 6, 60, ' '    
   548 00001995 0D0B063C20                      db 13, 11, 6, 60, ' '   
   549 0000199A 130B063C20                      db 19, 11, 6, 60, ' '   
   550 0000199F 190B063C20                      db 25, 11, 6, 60, ' '   
   551 000019A4 1F0B063C20                      db 31, 11, 6, 60, ' '   
   552 000019A9 250B063C20                      db 37, 11, 6, 60, ' '   
   553 000019AE 2B0B063C20                      db 43, 11, 6, 60, ' '   
   554 000019B3 310B063C20                      db 49, 11, 6, 60, ' '   
   555 000019B8 370B063C20                      db 55, 11, 6, 60, ' '   
   556 000019BD 3D0B030144                      db 61, 11, 3, 1, 'D'  
   557 000019C2 430B030120                      db 67, 11, 3, 1, ' '   
   558 000019C7 490B030120                      db 73, 11, 3, 1, ' ' 
   559                                  
   560 000019CC 010D010120                      db 1, 13, 1, 1, ' '   
   561 000019D1 070D020150                      db 7, 13, 2, 1, 'P'    
   562 000019D6 0D0D010120                      db 13, 13, 1, 1, ' '   
   563 000019DB 130D020120                      db 19, 13, 2, 1, ' '   
   564 000019E0 190D010120                      db 25, 13, 1, 1, ' '   
   565 000019E5 1F0D020120                      db 31, 13, 2, 1, ' '   
   566 000019EA 250D010120                      db 37, 13, 1, 1, ' '   
   567 000019EF 2B0D020120                      db 43, 13, 2, 1, ' '   
   568 000019F4 310D010120                      db 49, 13, 1, 1, ' '   
   569 000019F9 370D020120                      db 55, 13, 2, 1, ' '   
   570 000019FE 3D0D010120                      db 61, 13, 1, 1, ' '  
   571 00001A03 430D020120                      db 67, 13, 2, 1, ' '   
   572 00001A08 490D010120                      db 73, 13, 1, 1, ' ' 
   573                                  
   574 00001A0D 010F020120                      db 1, 15, 2, 1, ' '   
   575 00001A12 070F020120                      db 7, 15, 2, 1, ' '    
   576 00001A17 0D0F020120                      db 13, 15, 2, 1, ' '   
   577 00001A1C 130F063C20                      db 19, 15, 6, 60, ' '   
   578 00001A21 190F063C20                      db 25, 15, 6, 60, ' '   
   579 00001A26 1F0F063C20                      db 31, 15, 6, 60, ' '   
   580 00001A2B 250F063C20                      db 37, 15, 6, 60, ' '   
   581 00001A30 2B0F063C20                      db 43, 15, 6, 60, ' '   
   582 00001A35 310F063C20                      db 49, 15, 6, 60, ' '   
   583 00001A3A 370F063C20                      db 55, 15, 6, 60, ' '   
   584 00001A3F 3D0F063C20                      db 61, 15, 6, 60, ' '  
   585 00001A44 430F063C20                      db 67, 15, 6, 60, ' '   
   586 00001A49 490F063C20                      db 73, 15, 6, 60, ' ' 
   587                                  
   588 00001A4E 0111020120                      db 1, 17, 2, 1, ' '   
   589 00001A53 0711030120                      db 7, 17, 3, 1, ' '    
   590 00001A58 0D11020120                      db 13, 17, 2, 1, ' '   
   591 00001A5D 1311030120                      db 19, 17, 3, 1, ' '   
   592 00001A62 1911020120                      db 25, 17, 2, 1, ' '   
   593 00001A67 1F11030120                      db 31, 17, 3, 1, ' '   
   594 00001A6C 2511020120                      db 37, 17, 2, 1, ' '   
   595 00001A71 2B11030120                      db 43, 17, 3, 1, ' '   
   596 00001A76 3111020120                      db 49, 17, 2, 1, ' '   
   597 00001A7B 3711030120                      db 55, 17, 3, 1, ' '   
   598 00001A80 3D11020120                      db 61, 17, 2, 1, ' '  
   599 00001A85 4311030143                      db 67, 17, 3, 1, 'C'   
   600 00001A8A 4911020120                      db 73, 17, 2, 1, ' ' 
   601                                  
   602                                  
   603 00001A8F 0113063C20                      db 1, 19, 6, 60, ' '   
   604 00001A94 0713063C20                      db 7, 19, 6, 60, ' '    
   605 00001A99 0D13063C20                      db 13, 19, 6, 60, ' '   
   606 00001A9E 1313063C20                      db 19, 19, 6, 60, ' '   
   607 00001AA3 1913063C20                      db 25, 19, 6, 60, ' '   
   608 00001AA8 1F13063C20                      db 31, 19, 6, 60, ' '   
   609 00001AAD 2513063C20                      db 37, 19, 6, 60, ' '   
   610 00001AB2 2B13063C20                      db 43, 19, 6, 60, ' '   
   611 00001AB7 3113063C20                      db 49, 19, 6, 60, ' '   
   612 00001ABC 3713063C20                      db 55, 19, 6, 60, ' '   
   613 00001AC1 3D13010120                      db 61, 19, 1, 1, ' '  
   614 00001AC6 4313010153                      db 67, 19, 1, 1, 'S'   
   615 00001ACB 4913010120                      db 73, 19, 1, 1, ' ' 
   616                                  
   617                                      level3_blocks_count equ 104
   618                                  
   619                                      ; Nivel 4
   620                                      level4_blocks:
   621                                  
   622 00001AD0 0704010120                      db 7, 4, 1, 1, ' '    
   623 00001AD5 0D04020120                      db 13, 4, 2, 1, ' '   
   624 00001ADA 1304030120                      db 19, 4, 3, 1, ' '   
   625 00001ADF 1904050220                      db 25, 4, 5, 2, ' '   
   626 00001AE4 1F04020120                      db 31, 4, 2, 1, ' '
   627                                  
   628 00001AE9 2B04010120                      db 43, 4, 1, 1, ' '   
   629 00001AEE 3104020120                      db 49, 4, 2, 1, ' '   
   630 00001AF3 3704030144                      db 55, 4, 3, 1, 'D'   
   631 00001AF8 3D04040120                      db 61, 4, 4, 1, ' '  
   632 00001AFD 4304020120                      db 67, 4, 2, 1, ' ' 
   633                                  
   634 00001B02 0705020120                      db 7, 5, 2, 1, ' '    
   635 00001B07 0D05030120                      db 13, 5, 3, 1, ' '   
   636 00001B0C 1305050220                      db 19, 5, 5, 2, ' '   
   637 00001B11 1905020120                      db 25, 5, 2, 1, ' '   
   638 00001B16 1F05010120                      db 31, 5, 1, 1, ' '
   639                                  
   640 00001B1B 2B05020120                      db 43, 5, 2, 1, ' '   
   641 00001B20 3105030120                      db 49, 5, 3, 1, ' '   
   642 00001B25 3705040120                      db 55, 5, 4, 1, ' '   
   643 00001B2A 3D05020120                      db 61, 5, 2, 1, ' '  
   644 00001B2F 4305050220                      db 67, 5, 5, 2, ' '  
   645                                  
   646 00001B34 0706030120                      db 7, 6, 3, 1, ' '    
   647 00001B39 0D06050220                      db 13, 6, 5, 2, ' '   
   648 00001B3E 1306020120                      db 19, 6, 2, 1, ' '   
   649 00001B43 1906010120                      db 25, 6, 1, 1, ' '   
   650 00001B48 1F06020120                      db 31, 6, 2, 1, ' '
   651                                  
   652 00001B4D 2B06030120                      db 43, 6, 3, 1, ' '   
   653 00001B52 3106040120                      db 49, 6, 4, 1, ' '   
   654 00001B57 3706020120                      db 55, 6, 2, 1, ' '   
   655 00001B5C 3D06050220                      db 61, 6, 5, 2, ' '  
   656 00001B61 4306020120                      db 67, 6, 2, 1, ' '
   657                                  
   658 00001B66 0707050220                      db 7, 7, 5, 2, ' '    
   659 00001B6B 0D07020120                      db 13, 7, 2, 1, ' '   
   660 00001B70 1307010120                      db 19, 7, 1, 1, ' '   
   661 00001B75 1907020120                      db 25, 7, 2, 1, ' '   
   662 00001B7A 1F07030120                      db 31, 7, 3, 1, ' '
   663                                  
   664 00001B7F 2B07040120                      db 43, 7, 4, 1, ' '   
   665 00001B84 3107020120                      db 49, 7, 2, 1, ' '   
   666 00001B89 3707050220                      db 55, 7, 5, 2, ' '   
   667 00001B8E 3D07020120                      db 61, 7, 2, 1, ' '  
   668 00001B93 4307030120                      db 67, 7, 3, 1, ' '
   669                                  
   670 00001B98 0708020120                      db 7, 8, 2, 1, ' '    
   671 00001B9D 0D08010120                      db 13, 8, 1, 1, ' '   
   672 00001BA2 1308020120                      db 19, 8, 2, 1, ' '   
   673 00001BA7 1908030120                      db 25, 8, 3, 1, ' '   
   674 00001BAC 1F08040120                      db 31, 8, 4, 1, ' '
   675                                  
   676 00001BB1 2B08020120                      db 43, 8, 2, 1, ' '   
   677 00001BB6 3108050220                      db 49, 8, 5, 2, ' '   
   678 00001BBB 3708020120                      db 55, 8, 2, 1, ' '   
   679 00001BC0 3D08030120                      db 61, 8, 3, 1, ' '  
   680 00001BC5 4308040120                      db 67, 8, 4, 1, ' '
   681                                  
   682 00001BCA 0709010120                      db 7, 9, 1, 1, ' '    
   683 00001BCF 0D09020120                      db 13, 9, 2, 1, ' '   
   684 00001BD4 1309030120                      db 19, 9, 3, 1, ' '   
   685 00001BD9 1909040120                      db 25, 9, 4, 1, ' '   
   686 00001BDE 1F09020120                      db 31, 9, 2, 1, ' '
   687                                  
   688 00001BE3 2B09050220                      db 43, 9, 5, 2, ' '   
   689 00001BE8 3109020120                      db 49, 9, 2, 1, ' '   
   690 00001BED 3709030120                      db 55, 9, 3, 1, ' '   
   691 00001BF2 3D09040120                      db 61, 9, 4, 1, ' '  
   692 00001BF7 4309020120                      db 67, 9, 2, 1, ' '
   693                                  
   694 00001BFC 070A020120                      db 7, 10, 2, 1, ' '    
   695 00001C01 0D0A030120                      db 13, 10, 3, 1, ' '   
   696 00001C06 130A040120                      db 19, 10, 4, 1, ' '   
   697 00001C0B 190A020120                      db 25, 10, 2, 1, ' '   
   698 00001C10 1F0A010120                      db 31, 10, 1, 1, ' '
   699                                  
   700 00001C15 2B0A020120                      db 43, 10, 2, 1, ' '   
   701 00001C1A 310A030120                      db 49, 10, 3, 1, ' '   
   702 00001C1F 370A040120                      db 55, 10, 4, 1, ' '   
   703 00001C24 3D0A020120                      db 61, 10, 2, 1, ' '  
   704 00001C29 430A010120                      db 67, 10, 1, 1, ' '
   705                                  
   706 00001C2E 070B030120                      db 7, 11, 3, 1, ' '   
   707 00001C33 0D0B040120                      db 13, 11, 4, 1, ' '   
   708 00001C38 130B020120                      db 19, 11, 2, 1, ' '   
   709 00001C3D 190B010120                      db 25, 11, 1, 1, ' '  
   710 00001C42 1F0B050220                      db 31, 11, 5, 2, ' '
   711                                  
   712 00001C47 2B0B030120                      db 43, 11, 3, 1, ' '   
   713 00001C4C 310B040120                      db 49, 11, 4, 1, ' '   
   714 00001C51 370B020120                      db 55, 11, 2, 1, ' '   
   715 00001C56 3D0B010120                      db 61, 11, 1, 1, ' '  
   716 00001C5B 430B020120                      db 67, 11, 2, 1, ' '
   717                                  
   718 00001C60 070C040120                      db 7, 12, 4, 1, ' '   
   719 00001C65 0D0C020120                      db 13, 12, 2, 1, ' '   
   720 00001C6A 130C010120                      db 19, 12, 1, 1, ' '   
   721 00001C6F 190C050220                      db 25, 12, 5, 2, ' '  
   722 00001C74 1F0C030120                      db 31, 12, 3, 1, ' '
   723                                  
   724 00001C79 2B0C040120                      db 43, 12, 4, 1, ' '    
   725 00001C7E 310C020120                      db 49, 12, 2, 1, ' '   
   726 00001C83 370C010120                      db 55, 12, 1, 1, ' '   
   727 00001C88 3D0C020120                      db 61, 12, 2, 1, ' '   
   728 00001C8D 430C030120                      db 67, 12, 3, 1, ' '
   729                                  
   730 00001C92 070D020120                      db 7, 13, 2, 1, ' '   
   731 00001C97 0D0D010120                      db 13, 13, 1, 1, ' '   
   732 00001C9C 130D050220                      db 19, 13, 5, 2, ' '   
   733 00001CA1 190D030143                      db 25, 13, 3, 1, 'C'  
   734 00001CA6 1F0D040120                      db 31, 13, 4, 1, ' '
   735                                  
   736 00001CAB 2B0D020120                      db 43, 13, 2, 1, ' '    
   737 00001CB0 310D010120                      db 49, 13, 1, 1, ' '   
   738 00001CB5 370D020120                      db 55, 13, 2, 1, ' '   
   739 00001CBA 3D0D030120                      db 61, 13, 3, 1, ' '   
   740 00001CBF 430D050220                      db 67, 13, 5, 2, ' '
   741                                  
   742 00001CC4 070E010120                      db 7, 14, 1, 1, ' '   
   743 00001CC9 0D0E050220                      db 13, 14, 5, 2, ' '   
   744 00001CCE 130E030120                      db 19, 14, 3, 1, ' '   
   745 00001CD3 190E040120                      db 25, 14, 4, 1, ' '  
   746 00001CD8 1F0E020120                      db 31, 14, 2, 1, ' '
   747                                  
   748 00001CDD 2B0E010120                      db 43, 14, 1, 1, ' '    
   749 00001CE2 310E020120                      db 49, 14, 2, 1, ' '   
   750 00001CE7 370E030120                      db 55, 14, 3, 1, ' '   
   751 00001CEC 3D0E050220                      db 61, 14, 5, 2, ' '   
   752 00001CF1 430E020120                      db 67, 14, 2, 1, ' '
   753                                  
   754 00001CF6 070F050220                      db 7, 15, 5, 2, ' '   
   755 00001CFB 0D0F030120                      db 13, 15, 3, 1, ' '   
   756 00001D00 130F040120                      db 19, 15, 4, 1, ' '   
   757 00001D05 190F020120                      db 25, 15, 2, 1, ' '  
   758 00001D0A 1F0F010120                      db 31, 15, 1, 1, ' '
   759                                  
   760 00001D0F 2B0F020145                      db 43, 15, 2, 1, 'E'    
   761 00001D14 310F03014C                      db 49, 15, 3, 1, 'L'   
   762 00001D19 370F050220                      db 55, 15, 5, 2, ' '   
   763 00001D1E 3D0F020120                      db 61, 15, 2, 1, ' '   
   764 00001D23 430F010120                      db 67, 15, 1, 1, ' '
   765                                  
   766 00001D28 0710030120                      db 7, 16, 3, 1, ' '   
   767 00001D2D 0D10040120                      db 13, 16, 4, 1, ' '   
   768 00001D32 1310020120                      db 19, 16, 2, 1, ' '   
   769 00001D37 1910010120                      db 25, 16, 1, 1, ' '  
   770 00001D3C 1F10020120                      db 31, 16, 2, 1, ' '
   771                                  
   772 00001D41 2B10030120                      db 43, 16, 3, 1, ' '    
   773 00001D46 3110050220                      db 49, 16, 5, 2, ' '   
   774 00001D4B 3710020120                      db 55, 16, 2, 1, ' '   
   775 00001D50 3D10010120                      db 61, 16, 1, 1, ' '   
   776 00001D55 4310020120                      db 67, 16, 2, 1, ' '
   777                                  
   778 00001D5A 0711040120                      db 7, 17, 4, 1, ' '   
   779 00001D5F 0D11020120                      db 13, 17, 2, 1, ' '   
   780 00001D64 1311010120                      db 19, 17, 1, 1, ' '   
   781 00001D69 1911020120                      db 25, 17, 2, 1, ' '  
   782 00001D6E 1F11030120                      db 31, 17, 3, 1, ' '
   783                                  
   784 00001D73 2B11050220                      db 43, 17, 5, 2, ' '    
   785 00001D78 3111020120                      db 49, 17, 2, 1, ' '    
   786 00001D7D 3711010120                      db 55, 17, 1, 1, ' '   
   787 00001D82 3D11020120                      db 61, 17, 2, 1, ' '   
   788 00001D87 4311030120                      db 67, 17, 3, 1, ' '
   789                                  
   790                                      level4_blocks_count equ 140
   791                                  
   792                                      ; Nivel 5
   793                                      level5_blocks:
   794                                  
   795 00001D8C 1303020145                      db 19, 3, 2, 1, 'E'   
   796 00001D91 3703020120                      db 55, 3, 2, 1, ' '   
   797                                  
   798 00001D96 1304020120                      db 19, 4, 2, 1, ' '   
   799 00001D9B 370402014C                      db 55, 4, 2, 1, 'L' 
   800                                  
   801 00001DA0 1905020120                      db 25, 5, 2, 1, ' '   
   802 00001DA5 3105020153                      db 49, 5, 2, 1, 'S'   
   803                                  
   804 00001DAA 1906020120                      db 25, 6, 2, 1, ' '   
   805 00001DAF 3106020120                      db 49, 6, 2, 1, ' '   
   806                                  
   807 00001DB4 1307050220                      db 19, 7, 5, 2, ' '   
   808 00001DB9 1907050220                      db 25, 7, 5, 2, ' '  
   809 00001DBE 1F07050220                      db 31, 7, 5, 2, ' '
   810 00001DC3 2507050220                      db 37, 7, 5, 2, ' '
   811 00001DC8 2B07050220                      db 43, 7, 5, 2, ' '    
   812 00001DCD 3107050220                      db 49, 7, 5, 2, ' '    
   813 00001DD2 3707050220                      db 55, 7, 5, 2, ' '   
   814                                  
   815 00001DD7 1308050220                      db 19, 8, 5, 2, ' '   
   816 00001DDC 1908050220                      db 25, 8, 5, 2, ' '  
   817 00001DE1 1F08050220                      db 31, 8, 5, 2, ' '
   818 00001DE6 2508050220                      db 37, 8, 5, 2, ' '
   819 00001DEB 2B08050220                      db 43, 8, 5, 2, ' '    
   820 00001DF0 3108050220                      db 49, 8, 5, 2, ' '    
   821 00001DF5 3708050220                      db 55, 8, 5, 2, ' '   
   822                                  
   823 00001DFA 0D09050220                      db 13, 9, 5, 2, ' '   
   824 00001DFF 1309050220                      db 19, 9, 5, 2, ' '   
   825 00001E04 1909040143                      db 25, 9, 4, 1, 'C'  
   826 00001E09 1F09050220                      db 31, 9, 5, 2, ' '
   827 00001E0E 2509050220                      db 37, 9, 5, 2, ' '
   828 00001E13 2B09050220                      db 43, 9, 5, 2, ' '    
   829 00001E18 3109040144                      db 49, 9, 4, 1, 'D'    
   830 00001E1D 3709050220                      db 55, 9, 5, 2, ' '   
   831 00001E22 3D09050220                      db 61, 9, 5, 2, ' '  
   832                                  
   833 00001E27 0D0A050220                      db 13, 10, 5, 2, ' '   
   834 00001E2C 130A050220                      db 19, 10, 5, 2, ' '   
   835 00001E31 190A040120                      db 25, 10, 4, 1, ' '  
   836 00001E36 1F0A050220                      db 31, 10, 5, 2, ' '
   837 00001E3B 250A050220                      db 37, 10, 5, 2, ' '
   838 00001E40 2B0A050220                      db 43, 10, 5, 2, ' '    
   839 00001E45 310A040120                      db 49, 10, 4, 1, ' '    
   840 00001E4A 370A050220                      db 55, 10, 5, 2, ' '   
   841 00001E4F 3D0A050220                      db 61, 10, 5, 2, ' '   
   842                                          
   843 00001E54 070B050220                      db 7, 11, 5, 2, ' '   
   844 00001E59 0D0B050220                      db 13, 11, 5, 2, ' '   
   845 00001E5E 130B050220                      db 19, 11, 5, 2, ' '   
   846 00001E63 190B050220                      db 25, 11, 5, 2, ' '  
   847 00001E68 1F0B050220                      db 31, 11, 5, 2, ' '
   848 00001E6D 250B050220                      db 37, 11, 5, 2, ' '
   849 00001E72 2B0B050220                      db 43, 11, 5, 2, ' '    
   850 00001E77 310B050220                      db 49, 11, 5, 2, ' '    
   851 00001E7C 370B050220                      db 55, 11, 5, 2, ' '   
   852 00001E81 3D0B050220                      db 61, 11, 5, 2, ' '   
   853 00001E86 430B050220                      db 67, 11, 5, 2, ' '
   854                                  
   855 00001E8B 070C050220                      db 7, 12, 5, 2, ' '   
   856 00001E90 0D0C050220                      db 13, 12, 5, 2, ' '   
   857 00001E95 130C050220                      db 19, 12, 5, 2, ' '   
   858 00001E9A 190C050220                      db 25, 12, 5, 2, ' '  
   859 00001E9F 1F0C050220                      db 31, 12, 5, 2, ' '
   860 00001EA4 250C050220                      db 37, 12, 5, 2, ' '
   861 00001EA9 2B0C050220                      db 43, 12, 5, 2, ' '    
   862 00001EAE 310C050220                      db 49, 12, 5, 2, ' '    
   863 00001EB3 370C050220                      db 55, 12, 5, 2, ' '   
   864 00001EB8 3D0C050220                      db 61, 12, 5, 2, ' '   
   865 00001EBD 430C050220                      db 67, 12, 5, 2, ' '
   866                                  
   867 00001EC2 070D050220                      db 7, 13, 5, 2, ' '   
   868 00001EC7 0D0D050220                      db 13, 13, 5, 2, ' '   
   869 00001ECC 130D050220                      db 19, 13, 5, 2, ' '   
   870 00001ED1 190D050220                      db 25, 13, 5, 2, ' '  
   871 00001ED6 1F0D050220                      db 31, 13, 5, 2, ' '
   872 00001EDB 250D050220                      db 37, 13, 5, 2, ' '
   873 00001EE0 2B0D050220                      db 43, 13, 5, 2, ' '    
   874 00001EE5 310D050220                      db 49, 13, 5, 2, ' '    
   875 00001EEA 370D050220                      db 55, 13, 5, 2, ' '   
   876 00001EEF 3D0D050220                      db 61, 13, 5, 2, ' '   
   877 00001EF4 430D050220                      db 67, 13, 5, 2, ' '
   878                                  
   879                                          
   880 00001EF9 070E050220                      db 7, 14, 5, 2, ' '   
   881 00001EFE 130E050220                      db 19, 14, 5, 2, ' '   
   882 00001F03 190E050220                      db 25, 14, 5, 2, ' '  
   883 00001F08 1F0E050220                      db 31, 14, 5, 2, ' '
   884 00001F0D 250E050220                      db 37, 14, 5, 2, ' '
   885 00001F12 2B0E050220                      db 43, 14, 5, 2, ' '    
   886 00001F17 310E050220                      db 49, 14, 5, 2, ' '    
   887 00001F1C 370E050220                      db 55, 14, 5, 2, ' '   
   888 00001F21 430E050220                      db 67, 14, 5, 2, ' '
   889                                  
   890 00001F26 070F050220                      db 7, 15, 5, 2, ' '   
   891 00001F2B 130F050220                      db 19, 15, 5, 2, ' '      
   892 00001F30 370F050220                      db 55, 15, 5, 2, ' '   
   893 00001F35 430F050220                      db 67, 15, 5, 2, ' '
   894                                   
   895 00001F3A 0710050220                      db 7, 16, 5, 2, ' '   
   896 00001F3F 1310050220                      db 19, 16, 5, 2, ' '      
   897 00001F44 3710050220                      db 55, 16, 5, 2, ' '   
   898 00001F49 4310050220                      db 67, 16, 5, 2, ' '
   899                                  
   900                                  
   901 00001F4E 1911050220                      db 25, 17, 5, 2, ' '  
   902 00001F53 1F11050220                      db 31, 17, 5, 2, ' '
   903 00001F58 2B11050220                      db 43, 17, 5, 2, ' '    
   904 00001F5D 3111050220                      db 49, 17, 5, 2, ' ' 
   905                                  
   906 00001F62 1912050220                      db 25, 18, 5, 2, ' '  
   907 00001F67 1F12050220                      db 31, 18, 5, 2, ' '
   908 00001F6C 2B12050220                      db 43, 18, 5, 2, ' '    
   909 00001F71 3112050220                      db 49, 18, 5, 2, ' ' 
   910                                  
   911                                      level5_blocks_count equ 98
   912                                  
   913                                      ; Array para mantener el estado de los bloques
   914 00001F76 00<rep C8h>                 block_states: times 200 db 0  ; Durabilidad actual de cada bloque
   915                                  
   916                                      
   917                                      ; Variables para almacenar los valores
   918 0000203E 0000000000000000            current_score dq 0          ; Score actual
   919 00002046 00                          destroyed_blocks db 0       ; Bloques destruidos en el nivel actual
   920                                      
   921                                      ; Buffer para convertir números a string
   922 00002047 00<rep 14h>                 number_buffer: times 20 db 0
   923                                  
   924 0000205B 4023242640                  enemy_chars db "@", "#", "$", "&", "@"    ; El nivel 1 y 5 comparten el mismo caracter (@)
   925                                      
   926                                      ; Estructura para los enemigos (x, y, activo)
   927 00002060 00<rep 1Eh>                 enemies: times 10 * 3 db 0     ; Máximo 5 enemigos, cada uno con 3 bytes (x, y, activo)
   928 0000207E 0A                          enemies_count db 10            ; Cantidad de enemigos activos
   929                                      
   930 0000207F 3200000000000000            enemy_points dq 50              ; Puntos por destruir un enemigo
   931 00002087 00                          enemy_move_counter db 0         ; Contador para controlar velocidad de movimiento
   932 00002088 09                          enemy_move_delay db 9           ; Mover enemigos cada N ciclos
   933 00002089 00                          enemy_move_total db 0      ; Contador total de movimientos
   934 0000208A 00                          enemy_target db 0          ; 0 = persigue bola, 1 = persigue paleta
   935 0000208B 14                          MOVEMENT_THRESHOLD db 20   ; Número de movimientos antes de cambiar objetivo
   936                                   ;Formato: número de bloques destruidos necesario para que aparezca cada enemigo
   937                                      ; Añade esto en la sección .dataa
   938 0000208C 464748494A4C788CA0-         level1_spawn_points: db 70, 71, 72, 73, 74, 76, 120, 140, 160, 180    ; 10 enemigos, cada 2 bloques
   938 00002095 B4                 
   939 00002096 001E3246556E8296AA-         level2_spawn_points: db 0, 30, 50, 70, 85, 110, 130, 150, 170, 190    ; 10 enemigos, cada 2 bloques
   939 0000209F BE                 
   940 000020A0 00000032373C646464-         level3_spawn_points: db 0, 0, 0, 50, 55, 60, 100, 100, 100, 100   ; 10 enemigos, cada 3 bloques
   940 000020A9 64                 
   941 000020AA 00040F1E2832465A64-         level4_spawn_points: db 0, 4, 15, 30, 40, 50, 70, 90, 100, 120  ; 10 enemigos, cada 3 bloques
   941 000020B3 78                 
   942 000020B4 00000A141E2328323C-         level5_spawn_points: db 0, 0, 10, 20, 30, 35, 40, 50, 60, 80 ; 10 enemigos, cada 5 bloques
   942 000020BD 50                 
   943                                          ; Arreglo de punteros a los spawn points de cada nivel
   944                                      spawn_points_table:
   945 000020BE [8C20000000000000]              dq level1_spawn_points
   946 000020C6 [9620000000000000]              dq level2_spawn_points
   947 000020CE [A020000000000000]              dq level3_spawn_points
   948 000020D6 [AA20000000000000]              dq level4_spawn_points
   949 000020DE [B420000000000000]              dq level5_spawn_points
   950                                  
   951                                      ; Variables para el comportamiento de enemigos
   952 000020E6 1E                          BEHAVIOR_CHANGE_TIME db 30    ; Ciclos antes de cambiar comportamiento
   953 000020E7 00                          behavior_counter db 0          ; Contador para cambio de comportamiento
   954 000020E8 00                          current_behavior db 0          ; 0 = persigue bola, 1 = persigue paleta
   955 000020E9 00<rep Ah>                  enemy_spawns_triggered: times 10 db 0  ; 0 = no spawned, 1 = spawned
   956                                  
   957 000020F3 50756E74616A653A20-         score_label: db "Puntaje: [          ]", 0xA, 0xD  ; 10 espacios para el número
   957 000020FC 5B2020202020202020-
   957 00002105 20205D0A0D         
   958                                      score_label_len: equ $ - score_label
   959 0000210A 426C6F717565732064-         blocks_label: db "Bloques destruidos: [   ]", 0xA, 0xD  ; 3 espacios para el número
   959 00002113 657374727569646F73-
   959 0000211C 3A205B2020205D0A0D 
   960                                      blocks_label_len: equ $ - blocks_label
   961                                      
   962                                      ; Posición donde insertar los números en los labels
   963                                      score_pos equ 10    ; Posición después de "Puntaje: ["
   964                                      blocks_pos equ 20   ; Posición después de "Bloques destruidos: ["
   965                                      
   966                                      ; Definición de las vidas (x, y, estado)
   967                                      ; Formato: posición_x, posición_y, estado (1 = activa, 0 = inactiva)
   968                                      lives_data: 
   969 00002125 021E01                          db 2, 30, 1     ; Vida 1 (activa)
   970 00002128 041E01                          db 4, 30, 1     ; Vida 2 (activa)
   971 0000212B 061E01                          db 6, 30, 1     ; Vida 3 (inactiva)
   972 0000212E 081E01                          db 8, 30, 1     ; Vida 4 (inactiva)
   973 00002131 0A1E01                          db 10, 30, 1    ; Vida 5 (inactiva)
   974 00002134 0C1E01                          db 12, 30, 1    ; Vida 6 (inactiva)
   975 00002137 0E1E01                          db 14, 30, 1    ; Vida 7 (inactiva)
   976                                      lives_count equ 7    ; Total de vidas
   977 0000213A 5E                          life_char db "^"    
   978 0000213B 07                          current_lives db 7   ; Contador de vidas activas actual
   979                                  
   980                                  ; Estructura para almacenar las letras y sus posiciones
   981                                      ; Formato: x, y, letra, activo (1 = activo, 0 = inactivo)
   982 0000213C 00<rep 190h>                letters_map: times 100 * 4 db 0  ; Espacio para 100 letras
   983 000022CC 00                          letters_count db 0   
   984 000022CD 20                          last_letter db ' '    ; Variable para almacenar la última letra
   985 000022CE 506F64657220616374-         last_letter_msg db "Poder actual: [ ]", 0xA, 0xD  ; Mensaje para mostrar la última letra
   985 000022D7 75616C3A205B205D0A-
   985 000022E0 0D                 
   986                                      last_letter_msg_len equ $ - last_letter_msg
   987 000022E1 00                          current_power_processed db 0 ; 0 = no procesado, 1 = ya procesado
   988 000022E2 07                          max_lives db 7              ; Máximo número de vidas permitidas
   989 000022E3 0700000000000000            ball_speed dq 7             ; Velocidad normal de la bola
   990 000022EB 0200000000000000            slow_ball_speed dq 2        ; Velocidad lenta (se usará como divisor)
   991 000022F3 0000000000000000            speed_counter dq 0          ; Contador para ralentizar el movimiento
   992                                     
   993 000022FB 00                          initial_catch_active db 0   ; 0 = inactivo, 1 = activo
   994                                  
   995 000022FC 00                          catch_power_active db 0     ; 0 = inactivo, 1 = activo
   996 000022FD 00                          ball_caught db 0           ; 0 = no atrapada, 1 = atrapada
   997 000022FE 00                          ball_caught_2 db 0           ; 0 = no atrapada, 1 = atrapada
   998 000022FF 00                          ball_caught_3 db 0           ; 0 = no atrapada, 1 = atrapada
   999                                  
  1000 00002300 0000000000000000            ball_catch_offset dq 0     ; Offset respecto a la paleta cuando está atrapada
  1001 00002308 00                          last_key db 0    ; Variable para almacenar la última tecla presionada
  1002                                  
  1003 00002309 00                          laser_power_active: db 0         ; Flag para indicar si el poder láser está activo
  1004 0000230A 7C                          laser_symbol: db '|'             ; Símbolo para representar el láser
  1005 0000230B 00                          laser_count: db 0                ; Contador de láseres activos
  1006 0000230C 00<rep C8h>                 lasers: times 200 db 0           ; Array para almacenar posiciones de láseres (x,y)
  1007 000023D4 0100000000000000            laser_speed: dq 1                ; Velocidad del láser
  1008                                  
  1009                                      balls_data:     ; Array para almacenar hasta 3 bolas
  1010                                          ; Bola 1 (principal)
  1011 000023DC 0000000000000000                dq 0        ; x_pos
  1012 000023E4 0000000000000000                dq 0        ; y_pos
  1013 000023EC 0100000000000000                dq 1        ; direction_x
  1014 000023F4 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1015 000023FC 01                              db 1        ; active
  1016                                          ; Bola 2
  1017 000023FD 0000000000000000                dq 0        ; x_pos
  1018 00002405 0000000000000000                dq 0        ; y_pos
  1019 0000240D FFFFFFFFFFFFFFFF                dq -1       ; direction_x
  1020 00002415 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1021 0000241D 00                              db 0        ; active
  1022                                          ; Bola 3
  1023 0000241E 0000000000000000                dq 0        ; x_pos
  1024 00002426 0000000000000000                dq 0        ; y_pos
  1025 0000242E 0000000000000000                dq 0        ; direction_x
  1026 00002436 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1027 0000243E 00                              db 0        ; active
  1028                                      
  1029 0000243F 01                          balls_count db 1     ; Contador de bolas activas
  1030                                      BALL_STRUCT_SIZE equ 33  ; Tamaño de cada estructura de bola (8*4 + 1)
  1031 00002440 00<rep Ah>                  enemy_last_x:       times 10 db 0
  1032 0000244A 00<rep Ah>                  enemy_last_y:       times 10 db 0
  1033 00002454 00<rep Ah>                  enemy_stuck_count:  times 10 db 0
  1034 0000245E 00                          letter_move_counter db 0
  1035                                      initial_ball_offset_x equ 2    ; Offset desde el centro de la paleta
  1036                                      initial_ball_offset_y equ -1   ; Offset vertical desde la paleta
  1037                                  
  1038                                  section .text
  1039                                  
  1040                                  
  1041                                  print_lives:
  1042 000001DD 55                          push rbp
  1043 000001DE 4889E5                      mov rbp, rsp
  1044                                      
  1045 000001E1 4D31E4                      xor r12, r12                    ; Índice de la vida actual
  1046                                      
  1047                                      .print_loop:
  1048 000001E4 4983FC07                        cmp r12, lives_count
  1049 000001E8 7D45                            jge .end
  1050                                          
  1051                                          ; Calcular offset de la vida actual
  1052 000001EA 4C89E0                          mov rax, r12
  1053 000001ED 486BC003                        imul rax, 3                     ; Cada vida ocupa 3 bytes (x, y, estado)
  1054 000001F1 488DB0[25210000]                lea rsi, [lives_data + rax]
  1055                                          
  1056                                          ; Calcular posición en el tablero
  1057 000001F8 4C0FB606                        movzx r8, byte [rsi]            ; X
  1058 000001FC 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  1059                                          
  1060                                          ; Calcular offset en el tablero
  1061 00000201 B850000000                      mov rax, column_cells
  1062 00000206 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  1063 0000020A 49F7E1                          mul r9
  1064 0000020D 4C01C0                          add rax, r8
  1065 00000210 488DB8[400A0000]                lea rdi, [board + rax]
  1066                                          
  1067                                          ; Verificar estado de la vida y dibujar el carácter correspondiente
  1068 00000217 807E0201                        cmp byte [rsi + 2], 1
  1069 0000021B 7405                            je .draw_active
  1070                                          
  1071                                          ; Si está inactiva, dibujar espacio
  1072 0000021D C60720                          mov byte [rdi], ' '
  1073 00000220 EB08                            jmp .next_life
  1074                                          
  1075                                      .draw_active:
  1076                                          ; Si está activa, dibujar el símbolo de vida
  1077 00000222 8A05(3A210000)                  mov al, [life_char]
  1078 00000228 8807                            mov [rdi], al
  1079                                          
  1080                                      .next_life:
  1081 0000022A 49FFC4                          inc r12
  1082 0000022D EBB5                            jmp .print_loop
  1083                                          
  1084                                      .end:
  1085 0000022F 5D                              pop rbp
  1086 00000230 C3                              ret
  1087                                  
  1088                                  ; Función para desactivar una vida
  1089                                  ; Función modificada para perder una vida
  1090                                  ; Modificar lose_life para reiniciar solo la bola principal
  1091                                  lose_life:
  1092 00000231 55                          push rbp
  1093 00000232 4889E5                      mov rbp, rsp
  1094                                      
  1095                                      ; Verificar si aún quedan vidas
  1096 00000235 803D(3B210000)00            cmp byte [current_lives], 0
  1097 0000023C 0F84AB000000                je .game_lost
  1098                                      
  1099                                      ; Encontrar la última vida activa
  1100 00000242 B907000000                  mov rcx, lives_count
  1101 00000247 48FFC9                      dec rcx
  1102                                      
  1103                                      .find_active_life:
  1104 0000024A 4889C8                          mov rax, rcx
  1105 0000024D 486BC003                        imul rax, 3
  1106 00000251 488DB0[25210000]                lea rsi, [lives_data + rax]
  1107 00000258 807E0201                        cmp byte [rsi + 2], 1
  1108 0000025C 740A                            je .deactivate_life
  1109 0000025E 48FFC9                          dec rcx
  1110 00000261 79E7                            jns .find_active_life
  1111 00000263 E985000000                      jmp .game_lost
  1112                                          
  1113                                      .deactivate_life:
  1114                                          ; Borrar vida visualmente y en datos
  1115 00000268 4C0FB606                        movzx r8, byte [rsi]
  1116 0000026C 4C0FB64E01                      movzx r9, byte [rsi + 1]
  1117 00000271 B850000000                      mov rax, column_cells
  1118 00000276 4883C002                        add rax, 2
  1119 0000027A 49F7E1                          mul r9
  1120 0000027D 4C01C0                          add rax, r8
  1121 00000280 488DB8[400A0000]                lea rdi, [board + rax]
  1122 00000287 C60720                          mov byte [rdi], ' '
  1123 0000028A C6460200                        mov byte [rsi + 2], 0
  1124 0000028E FE0D(3B210000)                  dec byte [current_lives]
  1125                                          
  1126                                          ; Borrar paleta anterior
  1127 00000294 4C8B05(BF140000)                mov r8, [pallet_position]
  1128 0000029B 488B0D(C7140000)                mov rcx, [pallet_size]
  1129                                          .erase_pallet_loop:
  1130 000002A2 41C60020                            mov byte [r8], ' '
  1131 000002A6 49FFC0                              inc r8
  1132 000002A9 48FFC9                              dec rcx
  1133 000002AC 75F4                                jnz .erase_pallet_loop
  1134                                          
  1135                                          ; Reiniciar solo la bola principal
  1136 000002AE 48C705(DF140000)28-             mov qword [ball_x_pos], 40
  1136 000002B6 000000             
  1137 000002B9 48C705(E7140000)1C-             mov qword [ball_y_pos], 28
  1137 000002C1 000000             
  1138 000002C4 C605(FF140000)00                mov byte [ball_moving], 0
  1139 000002CB C605(00150000)01                mov byte [ball_active], 1       ; Activar bola principal
  1140 000002D2 48C705(BF140000)-               mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  1140 000002D9 [B0130000]         
  1141                                          
  1142                                          ; Asegurarse que las otras bolas están desactivadas
  1143 000002DD C605(22150000)00                mov byte [ball2_active], 0
  1144 000002E4 C605(44150000)00                mov byte [ball3_active], 0
  1145                                          
  1146 000002EB EB07                            jmp .end
  1147                                          
  1148                                      .game_lost:
  1149 000002ED E8C7000000                      call game_lost
  1150 000002F2 EB00                            jmp .end
  1151                                          
  1152                                      .end:
  1153 000002F4 5D                              pop rbp
  1154 000002F5 C3                              ret
  1155                                  ; Función modificada para verificar colisión con el borde inferior
  1156                                  check_bottom_collision:
  1157 000002F6 55                          push rbp
  1158 000002F7 4889E5                      mov rbp, rsp
  1159                                      
  1160                                      ; Verificar bola principal
  1161 000002FA 803D(00150000)01            cmp byte [ball_active], 1
  1162 00000301 7542                        jne .check_ball2
  1163 00000303 488B05(E7140000)            mov rax, [ball_y_pos]
  1164 0000030A 4883F81E                    cmp rax, row_cells - 2
  1165 0000030E 7535                        jne .check_ball2
  1166                                      
  1167                                      ; Borrar visualmente la bola principal
  1168 00000310 4C8B05(DF140000)            mov r8, [ball_x_pos]
  1169 00000317 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  1170 0000031E 4981C0[400A0000]            add r8, board
  1171 00000325 4C89C9                      mov rcx, r9
  1172 00000328 B852000000                  mov rax, column_cells + 2
  1173 0000032D 48F7E9                      imul rcx
  1174 00000330 4901C0                      add r8, rax
  1175 00000333 41C60020                    mov byte [r8], char_space    ; Borrar la bola del tablero
  1176                                      
  1177 00000337 C605(00150000)00            mov byte [ball_active], 0
  1178 0000033E C605(FF140000)00            mov byte [ball_moving], 0
  1179                                  
  1180                                  .check_ball2:
  1181 00000345 803D(22150000)01            cmp byte [ball2_active], 1
  1182 0000034C 751B                        jne .check_ball3
  1183 0000034E 488B05(09150000)            mov rax, [ball2_y_pos]
  1184 00000355 4883F81E                    cmp rax, row_cells - 2
  1185 00000359 750E                        jne .check_ball3
  1186 0000035B C605(22150000)00            mov byte [ball2_active], 0
  1187 00000362 C605(21150000)00            mov byte [ball2_moving], 0
  1188                                  
  1189                                  .check_ball3:
  1190 00000369 803D(44150000)01            cmp byte [ball3_active], 1
  1191 00000370 751B                        jne .check_active_balls
  1192 00000372 488B05(2B150000)            mov rax, [ball3_y_pos]
  1193 00000379 4883F81E                    cmp rax, row_cells - 2
  1194 0000037D 750E                        jne .check_active_balls
  1195 0000037F C605(44150000)00            mov byte [ball3_active], 0
  1196 00000386 C605(43150000)00            mov byte [ball3_moving], 0
  1197                                  
  1198                                  .check_active_balls:
  1199                                      ; Verificar si quedan bolas activas
  1200 0000038D 4831C9                      xor rcx, rcx
  1201 00000390 803D(00150000)01            cmp byte [ball_active], 1
  1202 00000397 741E                        je .balls_remain
  1203 00000399 803D(22150000)01            cmp byte [ball2_active], 1
  1204 000003A0 7415                        je .balls_remain
  1205 000003A2 803D(44150000)01            cmp byte [ball3_active], 1
  1206 000003A9 740C                        je .balls_remain
  1207                                      
  1208                                      ; Si no quedan bolas activas, perder una vida y reiniciar
  1209 000003AB E881FEFFFF                  call lose_life
  1210 000003B0 C605(00150000)01            mov byte [ball_active], 1    ; Reactivar bola principal
  1211                                      
  1212                                  .balls_remain:
  1213 000003B7 5D                          pop rbp
  1214 000003B8 C3                          ret
  1215                                  
  1216                                  
  1217                                  
  1218                                  ; Nueva función para game over
  1219                                  game_lost:
  1220                                      ; Limpiar la pantalla
  1221                                      print clear, clear_length
    82 000003B9 B801000000          <1>  mov eax, sys_write
    83 000003BE BF01000000          <1>  mov edi, 1
    84 000003C3 48BE-               <1>  mov rsi, %1
    84 000003C5 [1000000000000000]  <1>
    85 000003CD BA07000000          <1>  mov edx, %2
    86 000003D2 0F05                <1>  syscall
  1222                                      
  1223                                      ; Mostrar mensaje de derrota
  1224                                      section .data
  1225 0000245F C2A148617320706572-             lost_msg: db "¡Has perdido!", 0xA, 0xD
  1225 00002468 6469646F210A0D     
  1226                                          lost_msg_len: equ $ - lost_msg
  1227                                      section .text
  1228                                      
  1229                                      ; Imprimir mensaje de derrota
  1230                                      print lost_msg, lost_msg_len
    82 000003D4 B801000000          <1>  mov eax, sys_write
    83 000003D9 BF01000000          <1>  mov edi, 1
    84 000003DE 48BE-               <1>  mov rsi, %1
    84 000003E0 [5F24000000000000]  <1>
    85 000003E8 BA10000000          <1>  mov edx, %2
    86 000003ED 0F05                <1>  syscall
  1231                                      print score_msg, score_msg_len
    82 000003EF B801000000          <1>  mov eax, sys_write
    83 000003F4 BF01000000          <1>  mov edi, 1
    84 000003F9 48BE-               <1>  mov rsi, %1
    84 000003FB [8D24000000000000]  <1>
    85 00000403 BA0F000000          <1>  mov edx, %2
    86 00000408 0F05                <1>  syscall
  1232                                      
  1233                                      ; Mostrar puntaje final
  1234 0000040A 488B05(3E200000)            mov rax, [current_score]
  1235 00000411 48BF-                       mov rdi, number_buffer
  1235 00000413 [4720000000000000] 
  1236 0000041B E899140000                  call number_to_string
  1237                                      print number_buffer, 20
    82 00000420 B801000000          <1>  mov eax, sys_write
    83 00000425 BF01000000          <1>  mov edi, 1
    84 0000042A 48BE-               <1>  mov rsi, %1
    84 0000042C [4720000000000000]  <1>
    85 00000434 BA14000000          <1>  mov edx, %2
    86 00000439 0F05                <1>  syscall
  1238                                      
  1239                                      ; Esperar un momento antes de salir
  1240 0000043B 48C705BAFBFFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  1240 00000444 0000               
  1241 00000446 48C705B7FBFFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  1241 0000044F 0000               
  1242                                      sleeptime
    98 00000451 B823000000          <1>  mov eax, sys_nanosleep
    99 00000456 48BF-               <1>  mov rdi, timespec
    99 00000458 [0000000000000000]  <1>
   100 00000460 31F6                <1>  xor esi, esi
   101 00000462 0F05                <1>  syscall
  1243                                      
  1244 00000464 E96D1E0000                  jmp exit
  1245                                  
  1246                                  
  1247                                  ; Función para registrar una nueva letra en el mapa
  1248                                  ; Entrada:
  1249                                  ;   al - letra a registrar
  1250                                  ;   r8b - posición x
  1251                                  ;   r9b - posición y
  1252                                  register_letter:
  1253 00000469 55                          push rbp
  1254 0000046A 4889E5                      mov rbp, rsp
  1255 0000046D 53                          push rbx
  1256 0000046E 51                          push rcx
  1257                                      
  1258 0000046F 3C20                        cmp al, ' '
  1259 00000471 7438                        je .end
  1260                                  
  1261                                      ; Encontrar un espacio libre en el mapa
  1262 00000473 4831C9                      xor rcx, rcx
  1263 00000476 480FB615(CC220000)          movzx rdx, byte [letters_count]
  1264                                      
  1265                                      .find_slot:
  1266 0000047E 4883F964                        cmp rcx, 100              ; Máximo de letras
  1267 00000482 7D27                            jge .end                  ; Si no hay espacio, salir
  1268                                          
  1269 00000484 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1270 0000048C 807B0300                        cmp byte [rbx + 3], 0    ; Verificar si el slot está inactivo
  1271 00000490 7405                            je .found_slot
  1272                                          
  1273 00000492 48FFC1                          inc rcx
  1274 00000495 EBE7                            jmp .find_slot
  1275                                          
  1276                                      .found_slot:
  1277                                          ; Guardar la información de la letra
  1278 00000497 448803                          mov [rbx], r8b           ; x
  1279 0000049A 44884B01                        mov [rbx + 1], r9b       ; y
  1280 0000049E 884302                          mov [rbx + 2], al        ; letra
  1281 000004A1 C6430301                        mov byte [rbx + 3], 1    ; marcar como activo
  1282                                          
  1283 000004A5 FE05(CC220000)                  inc byte [letters_count]
  1284                                          
  1285                                      .end:
  1286 000004AB 59                              pop rcx
  1287 000004AC 5B                              pop rbx
  1288 000004AD 5D                              pop rbp
  1289 000004AE C3                              ret
  1290                                  
  1291                                  ; Función para imprimir todas las letras registradas
  1292                                  print_letters:
  1293 000004AF 55                          push rbp
  1294 000004B0 4889E5                      mov rbp, rsp
  1295 000004B3 53                          push rbx
  1296 000004B4 51                          push rcx
  1297                                      
  1298 000004B5 4831C9                      xor rcx, rcx
  1299                                      
  1300                                      .print_loop:
  1301 000004B8 4883F964                        cmp rcx, 100              ; Máximo de letras
  1302 000004BC 7D37                            jge .end
  1303                                          
  1304                                          ; Obtener puntero a la letra actual
  1305 000004BE 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1306                                          
  1307                                          ; Verificar si está activa
  1308 000004C6 807B0300                        cmp byte [rbx + 3], 0
  1309 000004CA 7424                            je .next_letter
  1310                                          
  1311                                          ; Calcular posición en el tablero
  1312 000004CC 4C0FB603                        movzx r8, byte [rbx]      ; x
  1313 000004D0 4C0FB64B01                      movzx r9, byte [rbx + 1]  ; y
  1314                                          
  1315                                          ; Calcular offset en el tablero
  1316 000004D5 B850000000                      mov rax, column_cells
  1317 000004DA 4883C002                        add rax, 2                ; Incluir caracteres de nueva línea
  1318 000004DE 49F7E1                          mul r9
  1319 000004E1 4C01C0                          add rax, r8
  1320 000004E4 488DB8[400A0000]                lea rdi, [board + rax]
  1321                                          
  1322                                          ; Imprimir la letra
  1323 000004EB 8A4302                          mov al, [rbx + 2]
  1324 000004EE 8807                            mov [rdi], al
  1325                                          
  1326                                      .next_letter:
  1327 000004F0 48FFC1                          inc rcx
  1328 000004F3 EBC3                            jmp .print_loop
  1329                                          
  1330                                      .end:
  1331 000004F5 59                              pop rcx
  1332 000004F6 5B                              pop rbx
  1333 000004F7 5D                              pop rbp
  1334 000004F8 C3                              ret
  1335                                  
  1336                                  ; Función para borrar una letra específica
  1337                                  ; Entrada:
  1338                                  ;   r8b - posición x
  1339                                  ;   r9b - posición y
  1340                                  remove_letter:
  1341 000004F9 55                          push rbp
  1342 000004FA 4889E5                      mov rbp, rsp
  1343 000004FD 53                          push rbx
  1344 000004FE 51                          push rcx
  1345                                      
  1346 000004FF 4831C9                      xor rcx, rcx
  1347                                      
  1348                                      .find_loop:
  1349 00000502 4883F964                        cmp rcx, 100              ; Máximo de letras
  1350 00000506 7D2E                            jge .end
  1351                                          
  1352 00000508 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1353                                          
  1354                                          ; Verificar si está activa y coincide la posición
  1355 00000510 807B0300                        cmp byte [rbx + 3], 0
  1356 00000514 741B                            je .next_letter
  1357                                          
  1358 00000516 8A03                            mov al, [rbx]
  1359 00000518 4438C0                          cmp al, r8b
  1360 0000051B 7514                            jne .next_letter
  1361                                          
  1362 0000051D 8A4301                          mov al, [rbx + 1]
  1363 00000520 4438C8                          cmp al, r9b
  1364 00000523 750C                            jne .next_letter
  1365                                          
  1366                                          ; Encontrada la letra, desactivarla
  1367 00000525 C6430300                        mov byte [rbx + 3], 0
  1368 00000529 FE0D(CC220000)                  dec byte [letters_count]
  1369 0000052F EB05                            jmp .end
  1370                                          
  1371                                      .next_letter:
  1372 00000531 48FFC1                          inc rcx
  1373 00000534 EBCC                            jmp .find_loop
  1374                                          
  1375                                      .end:
  1376 00000536 59                              pop rcx
  1377 00000537 5B                              pop rbx
  1378 00000538 5D                              pop rbp
  1379 00000539 C3                              ret
  1380                                  ; Función para mover las letras hacia abajo
  1381                                  move_letters:
  1382 0000053A 55                          push rbp
  1383 0000053B 4889E5                      mov rbp, rsp
  1384 0000053E 53                          push rbx
  1385 0000053F 57                          push rdi
  1386 00000540 56                          push rsi
  1387 00000541 4150                        push r8
  1388 00000543 4151                        push r9
  1389 00000545 4152                        push r10
  1390 00000547 4153                        push r11
  1391                                  
  1392 00000549 4831C9                      xor rcx, rcx
  1393                                  
  1394                                      ; Verificar si debemos mover la letra en este frame
  1395 0000054C FE05(5E240000)              inc byte [letter_move_counter]    ; Incrementar contador
  1396 00000552 803D(5E240000)09            cmp byte [letter_move_counter], 9 ; Ajusta este número para cambiar velocidad
  1397 00000559 0F8C20020000                jl .skip_all                         ; Si no es momento de mover, terminar
  1398 0000055F C605(5E240000)00            mov byte [letter_move_counter], 0 ; Resetear contador
  1399                                  
  1400                                      .move_loop:
  1401 00000566 4883F964                        cmp rcx, 100
  1402 0000056A 0F8D0D020000                    jge .print_last_letter
  1403                                          
  1404 00000570 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1405 00000578 807B0300                        cmp byte [rbx + 3], 0
  1406 0000057C 0F84F3010000                    je .next_letter
  1407                                  
  1408 00000582 4C0FB603                        movzx r8, byte [rbx]
  1409 00000586 4C0FB64B01                      movzx r9, byte [rbx + 1]
  1410                                  
  1411 0000058B B850000000                      mov rax, column_cells
  1412 00000590 4883C002                        add rax, 2
  1413 00000594 49F7E1                          mul r9
  1414 00000597 4C01C0                          add rax, r8
  1415 0000059A 488DB8[400A0000]                lea rdi, [board + rax]
  1416 000005A1 C60720                          mov byte [rdi], ' '
  1417                                  
  1418 000005A4 FE4301                          inc byte [rbx + 1]
  1419 000005A7 4C0FB64B01                      movzx r9, byte [rbx + 1]
  1420                                  
  1421 000005AC 4983F91F                        cmp r9, row_cells - 1
  1422 000005B0 7C09                            jl .check_pallet_collision
  1423                                  
  1424 000005B2 C6430300                        mov byte [rbx + 3], 0
  1425 000005B6 E9BA010000                      jmp .next_letter
  1426                                  
  1427                                          .check_pallet_collision:
  1428 000005BB B850000000                          mov rax, column_cells
  1429 000005C0 4883C002                            add rax, 2
  1430 000005C4 49F7E1                              mul r9
  1431 000005C7 4C01C0                              add rax, r8
  1432 000005CA 488DB8[400A0000]                    lea rdi, [board + rax]
  1433                                  
  1434 000005D1 8A07                                mov al, [rdi]
  1435 000005D3 3C20                                cmp al, ' '
  1436 000005D5 0F849A010000                        je .next_letter
  1437 000005DB 3C3D                                cmp al, char_equal
  1438 000005DD 740A                                je .capture_letter
  1439                                  
  1440 000005DF 8A4302                              mov al, [rbx + 2]
  1441 000005E2 8807                                mov [rdi], al
  1442 000005E4 E98C010000                          jmp .next_letter
  1443                                  
  1444                                          .capture_letter:
  1445                                              ; Obtener la nueva letra
  1446 000005E9 8A4302                              mov al, [rbx + 2]
  1447                                              
  1448                                              ; Comparar con la última letra
  1449 000005EC 3A05(CD220000)                      cmp al, [last_letter]
  1450 000005F2 7407                                je .same_letter
  1451                                              
  1452                                              ; Es una letra diferente, resetear el procesamiento
  1453 000005F4 C605(E1220000)00                    mov byte [current_power_processed], 0
  1454                                              
  1455                                              .same_letter:
  1456                                              ; Guardar la nueva letra
  1457 000005FB 8805(CD220000)                      mov [last_letter], al
  1458                                              
  1459                                              ; Verificar si es 'E' para extender la paleta
  1460 00000601 3C45                                cmp al, 'E'
  1461 00000603 7450                                je .extend_pallet
  1462                                              
  1463                                              ; Verificar si es 'P' para añadir vida
  1464 00000605 3C50                                cmp al, 'P'
  1465 00000607 7478                                je .check_add_life
  1466                                  
  1467 00000609 3C53                                cmp al, 'S'
  1468 0000060B 0F84B4000000                        je .slow_ball
  1469                                  
  1470 00000611 3C43                                cmp al, 'C'
  1471 00000613 0F84D8000000                        je .activate_catch
  1472                                              
  1473 00000619 3C4C                                cmp al, 'L'
  1474 0000061B 0F84F9000000                        je .activate_laser
  1475                                  
  1476 00000621 3C44                                cmp al, 'D'
  1477 00000623 0F841A010000                        je .activate_split
  1478                                  
  1479                                              ; Si no es ningún power-up, restaurar tamaño normal
  1480 00000629 488B05(CF140000)                    mov rax, [default_pallet_size]
  1481 00000630 488905(C7140000)                    mov [pallet_size], rax
  1482 00000637 48C705(E3220000)07-                 mov qword [ball_speed], 7    ; Restaurar velocidad normal
  1482 0000063F 000000             
  1483 00000642 C605(FC220000)00                    mov byte [catch_power_active], 0
  1484 00000649 C605(09230000)00                    mov byte [laser_power_active], 0
  1485 00000650 E91C010000                          jmp .finish_capture
  1486                                  
  1487                                              .extend_pallet:
  1488 00000655 C605(09230000)00                        mov byte [laser_power_active], 0
  1489 0000065C C605(FC220000)00                        mov byte [catch_power_active], 0
  1490 00000663 48C705(E3220000)07-                     mov qword [ball_speed], 7    ; Restaurar velocidad normal
  1490 0000066B 000000             
  1491 0000066E 488B05(D7140000)                        mov rax, [extended_pallet_size]
  1492 00000675 488905(C7140000)                        mov [pallet_size], rax
  1493 0000067C E9F0000000                              jmp .finish_capture
  1494                                  
  1495                                              .check_add_life:
  1496 00000681 C605(09230000)00                        mov byte [laser_power_active], 0
  1497 00000688 C605(FC220000)00                        mov byte [catch_power_active], 0
  1498 0000068F 488B05(CF140000)                        mov rax, [default_pallet_size]
  1499 00000696 488905(C7140000)                        mov [pallet_size], rax
  1500 0000069D 48C705(E3220000)07-                     mov qword [ball_speed], 7 
  1500 000006A5 000000             
  1501                                                  ; Verificar si ya procesamos este power-up
  1502 000006A8 803D(E1220000)00                        cmp byte [current_power_processed], 0
  1503 000006AF 0F85BC000000                            jne .finish_capture
  1504                                                  
  1505                                                  ; Preservar registros importantes
  1506 000006B5 51                                      push rcx
  1507 000006B6 53                                      push rbx
  1508                                                  
  1509                                                  ; Marcar como procesado
  1510 000006B7 C605(E1220000)01                        mov byte [current_power_processed], 1
  1511                                                  
  1512                                                  ; Añadir una vida
  1513 000006BE E845040000                              call add_life
  1514                                                  
  1515                                                  ; Restaurar registros
  1516 000006C3 5B                                      pop rbx
  1517 000006C4 59                                      pop rcx
  1518                                                  
  1519                                              .slow_ball:
  1520 000006C5 C605(09230000)00                        mov byte [laser_power_active], 0
  1521 000006CC C605(FC220000)00                        mov byte [catch_power_active], 0                
  1522 000006D3 488B05(CF140000)                        mov rax, [default_pallet_size]
  1523 000006DA 488905(C7140000)                        mov [pallet_size], rax
  1524 000006E1 48C705(E3220000)0A-                     mov qword [ball_speed], 10    ; Activar velocidad lenta
  1524 000006E9 000000             
  1525 000006EC E980000000                              jmp .finish_capture
  1526                                  
  1527                                              .activate_catch:
  1528 000006F1 C605(09230000)00                        mov byte [laser_power_active], 0
  1529 000006F8 488B05(CF140000)                        mov rax, [default_pallet_size]
  1530 000006FF 488905(C7140000)                        mov [pallet_size], rax
  1531 00000706 48C705(E3220000)07-                     mov qword [ball_speed], 7
  1531 0000070E 000000             
  1532 00000711 C605(FC220000)01                        mov byte [catch_power_active], 1
  1533 00000718 EB57                                    jmp .finish_capture
  1534                                  
  1535                                              .activate_laser:
  1536 0000071A C605(FC220000)00                        mov byte [catch_power_active], 0
  1537 00000721 488B05(CF140000)                        mov rax, [default_pallet_size]
  1538 00000728 488905(C7140000)                        mov [pallet_size], rax
  1539 0000072F 48C705(E3220000)07-                     mov qword [ball_speed], 7
  1539 00000737 000000             
  1540 0000073A C605(09230000)01                        mov byte [laser_power_active], 1    ; Activar el poder láser
  1541 00000741 EB2E                                    jmp .finish_capture
  1542                                  
  1543                                              .activate_split:
  1544 00000743 C605(09230000)00                        mov byte [laser_power_active], 0
  1545 0000074A C605(FC220000)00                        mov byte [catch_power_active], 0
  1546 00000751 488B05(CF140000)                        mov rax, [default_pallet_size]
  1547 00000758 488905(C7140000)                        mov [pallet_size], rax
  1548 0000075F 48C705(E3220000)07-                     mov qword [ball_speed], 7 
  1548 00000767 000000             
  1549 0000076A E8DF000000                              call activate_split_power
  1550 0000076F EB00                                    jmp .finish_capture
  1551                                  
  1552                                              .finish_capture:
  1553 00000771 C6430300                                mov byte [rbx + 3], 0
  1554                                  
  1555                                          .next_letter:
  1556 00000775 48FFC1                              inc rcx
  1557 00000778 E9E9FDFFFF                          jmp .move_loop
  1558                                  
  1559                                      .print_last_letter:
  1560                                          ; ;; en vez de imprimir, saltamos
  1561 0000077D EB0D                            jmp .end
  1562                                  
  1563                                  
  1564                                      .skip_all:                        ; Nueva etiqueta para saltar todo cuando no movemos
  1565 0000077F 415B                            pop r11
  1566 00000781 415A                            pop r10
  1567 00000783 4159                            pop r9
  1568 00000785 4158                            pop r8
  1569 00000787 5E                              pop rsi
  1570 00000788 5F                              pop rdi
  1571 00000789 5B                              pop rbx
  1572 0000078A 5D                              pop rbp
  1573 0000078B C3                              ret
  1574                                  
  1575                                      .end:
  1576 0000078C 415B                            pop r11
  1577 0000078E 415A                            pop r10
  1578 00000790 4159                            pop r9
  1579 00000792 4158                            pop r8
  1580 00000794 5E                              pop rsi
  1581 00000795 5F                              pop rdi
  1582 00000796 5B                              pop rbx
  1583 00000797 5D                              pop rbp
  1584 00000798 C3                              ret
  1585                                  
  1586                                  print_power_label:
  1587 00000799 55                          push rbp
  1588 0000079A 4889E5                      mov  rbp, rsp
  1589                                      
  1590                                      ; Crear buffer temporal
  1591 0000079D 4883EC20                    sub rsp, 32
  1592                                      
  1593                                      ; Copiar el mensaje base al buffer
  1594 000007A1 4889E7                      mov rdi, rsp
  1595 000007A4 48BE-                       mov rsi, last_letter_msg
  1595 000007A6 [CE22000000000000] 
  1596 000007AE B913000000                  mov rcx, last_letter_msg_len
  1597 000007B3 F3A4                        rep movsb
  1598                                      
  1599                                      ; Insertar la última letra capturada
  1600 000007B5 8A05(CD220000)              mov al, [last_letter]
  1601 000007BB 8844240F                    mov byte [rsp + 15], al    ; Asumiendo que 15 es la posición correcta
  1602                                      
  1603                                      ; Imprimir el buffer completo
  1604                                      print rsp, last_letter_msg_len
    82 000007BF B801000000          <1>  mov eax, sys_write
    83 000007C4 BF01000000          <1>  mov edi, 1
    84 000007C9 4889E6              <1>  mov rsi, %1
    85 000007CC BA13000000          <1>  mov edx, %2
    86 000007D1 0F05                <1>  syscall
  1605                                      
  1606                                      ; Restaurar stack
  1607 000007D3 4883C420                    add rsp, 32
  1608 000007D7 5D                          pop rbp
  1609 000007D8 C3                          ret
  1610                                  
  1611                                  
  1612                                  
  1613                                  clear_lasers:
  1614 000007D9 55                          push rbp
  1615 000007DA 4889E5                      mov  rbp, rsp
  1616                                  
  1617                                      ; Recorrer el array de láseres
  1618 000007DD 4831C9                      xor rcx, rcx                ; Índice del láser
  1619 000007E0 480FB61D(0B230000)          movzx rbx, byte [laser_count]  ; Cantidad de láseres activos
  1620                                  
  1621                                      .clear_loop:
  1622 000007E8 4839D9                          cmp rcx, rbx
  1623 000007EB 7D2F                            jge .done                ; Salir si no quedan láseres
  1624                                  
  1625                                          ; Obtener posición del láser actual
  1626 000007ED 488DB409[0C230000]              lea rsi, [lasers + rcx * 2]
  1627 000007F5 4C0FB606                        movzx r8, byte [rsi]     ; X
  1628 000007F9 4C0FB64E01                      movzx r9, byte [rsi + 1] ; Y
  1629                                  
  1630                                          ; Calcular posición en el tablero
  1631 000007FE B850000000                      mov rax, column_cells
  1632 00000803 4883C002                        add rax, 2
  1633 00000807 49F7E1                          mul r9
  1634 0000080A 4C01C0                          add rax, r8
  1635 0000080D 488DB8[400A0000]                lea rdi, [board + rax]
  1636                                  
  1637                                          ; Borrar el láser visualmente
  1638 00000814 C60720                          mov byte [rdi], ' '
  1639                                  
  1640                                          ; Pasar al siguiente láser
  1641 00000817 48FFC1                          inc rcx
  1642 0000081A EBCC                            jmp .clear_loop
  1643                                  
  1644                                      .done:
  1645                                          ; Resetear contador de láseres
  1646 0000081C C605(0B230000)00                mov byte [laser_count], 0
  1647                                  
  1648 00000823 5D                              pop rbp
  1649 00000824 C3                              ret
  1650                                  
  1651                                  
  1652                                  ; Nueva función para actualizar los láseres
  1653                                  update_lasers:
  1654 00000825 55                          push rbp
  1655 00000826 4889E5                      mov rbp, rsp
  1656                                      
  1657                                      ; Verificar si el poder láser está activo
  1658 00000829 803D(09230000)00            cmp byte [laser_power_active], 0
  1659 00000830 741A                        je .end
  1660                                      
  1661                                      ; Verificar si se presionó la tecla de espacio
  1662 00000832 803D(08230000)20            cmp byte [last_key], ' '
  1663 00000839 750C                        jne .skip_shooting
  1664                                      
  1665                                      ; Disparar nuevos láseres
  1666 0000083B E89A000000                  call shoot_lasers
  1667 00000840 C605(08230000)00            mov byte [last_key], 0    ; Limpiar la tecla procesada
  1668                                      
  1669                                      .skip_shooting:
  1670                                      ; Mover los láseres existentes
  1671 00000847 E828010000                  call move_lasers
  1672                                      
  1673                                      .end:
  1674 0000084C 5D                              pop rbp
  1675 0000084D C3                              ret
  1676                                  
  1677                                  activate_split_power:
  1678 0000084E 55                          push rbp
  1679 0000084F 4889E5                      mov rbp, rsp
  1680                                      
  1681                                      ; Verificar si la bola2 y bola3 ya están activas
  1682 00000852 803D(22150000)01            cmp byte [ball2_active], 1
  1683 00000859 750B                        jne .enable_balls
  1684 0000085B 803D(44150000)01            cmp byte [ball3_active], 1
  1685 00000862 7502                        jne .enable_balls
  1686                                      
  1687                                      ; Si ambas ya están activas, no hacemos nada.
  1688 00000864 EB72                        jmp .end
  1689                                  
  1690                                  .enable_balls:
  1691                                      ; Copiamos la posición de la bola principal
  1692 00000866 488B05(DF140000)            mov rax, [ball_x_pos]
  1693 0000086D 488905(01150000)            mov [ball2_x_pos], rax
  1694 00000874 488905(23150000)            mov [ball3_x_pos], rax
  1695                                  
  1696 0000087B 488B05(E7140000)            mov rax, [ball_y_pos]
  1697 00000882 488905(09150000)            mov [ball2_y_pos], rax
  1698 00000889 488905(2B150000)            mov [ball3_y_pos], rax
  1699                                  
  1700                                      ; Activamos bola2 y bola3 con direcciones diferentes
  1701                                      ; Por ejemplo: una va diagonal izq-arriba, otra diagonal der-arriba
  1702 00000890 48C705(11150000)FF-         mov qword [ball2_direction_x], -1
  1702 00000898 FFFFFF             
  1703 0000089B 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  1703 000008A3 FFFFFF             
  1704 000008A6 C605(21150000)01            mov byte [ball2_moving], 1
  1705 000008AD C605(22150000)01            mov byte [ball2_active], 1
  1706                                  
  1707 000008B4 48C705(33150000)01-         mov qword [ball3_direction_x], 1
  1707 000008BC 000000             
  1708 000008BF 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  1708 000008C7 FFFFFF             
  1709 000008CA C605(43150000)01            mov byte [ball3_moving], 1
  1710 000008D1 C605(44150000)01            mov byte [ball3_active], 1
  1711                                  
  1712                                  .end:
  1713 000008D8 5D                          pop rbp
  1714 000008D9 C3                          ret
  1715                                  
  1716                                  
  1717                                  shoot_lasers:
  1718 000008DA 55                          push rbp
  1719 000008DB 4889E5                      mov rbp, rsp
  1720 000008DE 53                          push rbx
  1721                                      
  1722                                      ; Verificar si hay espacio para más láseres
  1723 000008DF 480FB605(0B230000)          movzx rax, byte [laser_count]
  1724 000008E7 4883F862                    cmp rax, 98  ; Asegurar que hay espacio para 2 láseres
  1725 000008EB 0F8D80000000                jge .end
  1726                                      
  1727                                      ; Obtener posición de la paleta
  1728 000008F1 4C8B05(BF140000)            mov r8, [pallet_position]
  1729 000008F8 4981E8[400A0000]            sub r8, board                  ; Offset relativo de la paleta
  1730                                      
  1731                                      ; Calcular coordenadas x,y
  1732 000008FF 4C89C0                      mov rax, r8
  1733 00000902 41B950000000                mov r9, column_cells
  1734 00000908 4983C102                    add r9, 2                     ; Ancho total de línea
  1735 0000090C 4831D2                      xor rdx, rdx
  1736 0000090F 49F7F1                      div r9                        ; rax = y, rdx = x
  1737                                      
  1738                                      ; Guardar coordenadas
  1739 00000912 4989C2                      mov r10, rax                  ; Y en r10
  1740 00000915 4989D3                      mov r11, rdx                  ; X en r11
  1741                                      
  1742                                      ; Validar coordenadas
  1743 00000918 4983FA00                    cmp r10, 0
  1744 0000091C 7C53                        jl .end
  1745 0000091E 4983FA20                    cmp r10, row_cells
  1746 00000922 7D4D                        jge .end
  1747 00000924 4983FB00                    cmp r11, 0
  1748 00000928 7C47                        jl .end
  1749 0000092A 4983FB50                    cmp r11, column_cells
  1750 0000092E 7D41                        jge .end
  1751                                      
  1752                                      ; Calcular índice para el primer láser
  1753 00000930 480FB61D(0B230000)          movzx rbx, byte [laser_count]
  1754 00000938 486BDB02                    imul rbx, 2                   ; Cada láser usa 2 bytes
  1755                                      
  1756                                      ; Primer láser (izquierda)
  1757 0000093C 488DBB[0C230000]            lea rdi, [lasers + rbx]
  1758 00000943 44881F                      mov [rdi], r11b              ; X
  1759 00000946 4488D0                      mov al, r10b
  1760 00000949 FEC8                        dec al                       ; Y - 1
  1761 0000094B 884701                      mov [rdi + 1], al           ; Y
  1762                                      
  1763                                      ; Segundo láser (derecha)
  1764 0000094E 4488D8                      mov al, r11b
  1765 00000951 0205(C7140000)              add al, byte [pallet_size]
  1766 00000957 FEC8                        dec al                       ; Ajustar para el último carácter
  1767 00000959 488DBB[0E230000]            lea rdi, [lasers + rbx + 2]
  1768 00000960 8807                        mov [rdi], al               ; X
  1769 00000962 4488D0                      mov al, r10b
  1770 00000965 FEC8                        dec al                      ; Y - 1
  1771 00000967 884701                      mov [rdi + 1], al          ; Y
  1772                                      
  1773                                      ; Incrementar contador de láseres
  1774 0000096A 8005(0B230000)02            add byte [laser_count], 2
  1775                                      
  1776                                      
  1777                                      .end:
  1778 00000971 5B                              pop rbx
  1779 00000972 5D                              pop rbp
  1780 00000973 C3                              ret
  1781                                  
  1782                                  ; Función corregida para mover láseres
  1783                                  ; Función corregida para mover láseres
  1784                                  ; Esta es la parte clave para recorrer los láseres de atrás hacia adelante.
  1785                                  
  1786                                  ; Actualizar la función move_lasers para incluir verificación de colisiones
  1787                                  ; ============================================================
  1788                                  ; NUEVA FUNCIÓN move_lasers (todo-en-uno)
  1789                                  ; ============================================================
  1790                                  ; Mueve cada láser hacia arriba, verifica colisiones (bloques/enemigos)
  1791                                  ; y lo elimina inmediatamente si choca, de lo contrario lo dibuja.
  1792                                  ; ============================================================
  1793                                  move_lasers:
  1794 00000974 55                          push rbp
  1795 00000975 4889E5                      mov  rbp, rsp
  1796 00000978 53                          push rbx
  1797 00000979 57                          push rdi
  1798 0000097A 56                          push rsi
  1799 0000097B 4154                        push r12
  1800 0000097D 4155                        push r13
  1801 0000097F 4156                        push r14
  1802 00000981 4157                        push r15
  1803                                  
  1804                                      ; 1) Tomamos la cantidad de láseres
  1805 00000983 480FB60D(0B230000)          movzx rcx, byte [laser_count]
  1806 0000098B 4885C9                      test rcx, rcx
  1807 0000098E 0F84BB000000                jz .fin              ; Si es cero, no hay láseres => salir
  1808                                  
  1809                                      ; Ajustamos RCX para que sea el último índice (laser_count - 1)
  1810 00000994 48FFC9                      dec rcx              ; Empezamos desde el último láser
  1811                                  
  1812                                  .loop_lasers:
  1813                                      ; RSI apunta a lasers + (rcx * 2) => (x, y) del láser
  1814 00000997 488DB409[0C230000]          lea rsi, [lasers + rcx*2]
  1815                                  
  1816                                      ; 2) Cargar x,y actuales del láser
  1817 0000099F 4C0FB606                    movzx r8,  byte [rsi]      ; X
  1818 000009A3 4C0FB64E01                  movzx r9,  byte [rsi + 1]  ; Y
  1819                                  
  1820                                      ; 3) Borrar el láser de su posición actual en pantalla
  1821                                      ;    (por si en el ciclo anterior se había dibujado)
  1822 000009A8 B850000000                  mov rax, column_cells
  1823 000009AD 4883C002                    add rax, 2
  1824 000009B1 49F7E1                      mul r9
  1825 000009B4 4C01C0                      add rax, r8
  1826 000009B7 488DB8[400A0000]            lea rdi, [board + rax]
  1827 000009BE C60720                      mov byte [rdi], ' '        ; Borramos el símbolo anterior (láser)
  1828                                  
  1829                                      ; 4) Mover el láser hacia arriba (y - 1)
  1830 000009C1 49FFC9                      dec r9
  1831                                  
  1832                                      ; Si y < 1, está fuera de pantalla => eliminarlo
  1833 000009C4 4983F901                    cmp r9, 1
  1834 000009C8 7C57                        jl .delete_laser
  1835                                  
  1836                                      ; Guardamos la posición nueva en el array (aún no lo dibujamos)
  1837 000009CA 44884E01                    mov byte [rsi + 1], r9b
  1838                                  
  1839                                      ; 5) Verificamos colisión inmediata con bloques o enemigos
  1840                                      ;    - Primero colisión con bloques
  1841                                      ; ---------------------------------------------------------
  1842                                      ; Calculamos la nueva dirección de memoria para esa posición (r9,r8)
  1843 000009CE B850000000                  mov rax, column_cells
  1844 000009D3 4883C002                    add rax, 2
  1845 000009D7 49F7E1                      mul r9
  1846 000009DA 4C01C0                      add rax, r8
  1847 000009DD 488DB8[400A0000]            lea rdi, [board + rax]   ; rdi apunta a la celda donde estaría el láser
  1848                                  
  1849                                      ; Revisar si hay bloque
  1850 000009E4 51                          push rcx
  1851 000009E5 56                          push rsi
  1852 000009E6 57                          push rdi
  1853 000009E7 4989FA                      mov r10, rdi    ; En check_block_collision, r10 = posición en board
  1854 000009EA E822100000                  call check_block_collision
  1855 000009EF 5F                          pop rdi
  1856 000009F0 5E                          pop rsi
  1857 000009F1 59                          pop rcx
  1858                                  
  1859 000009F2 4885C0                      test rax, rax          ; rax=1 => hubo colisión con bloque
  1860 000009F5 752A                        jnz .delete_laser      ; si chocó, eliminar ya el láser
  1861                                  
  1862                                      ;    - Luego colisión con enemigos
  1863                                      ; ---------------------------------------------------------
  1864 000009F7 51                          push rcx
  1865 000009F8 56                          push rsi
  1866 000009F9 57                          push rdi
  1867                                      ; Pasamos (r8=X, r9=Y, r10=punteroEnBoard) a la función
  1868                                      ; o podemos crear una versión inlined. A modo de ejemplo:
  1869                                      ; Llamamos a check_laser_enemy_collision, que retorna
  1870                                      ; rax=1 si hubo colisión con enemigo, 0 si no.
  1871                                      ;
  1872                                      ; Hacemos algo como:
  1873 000009FA 4989FA                      mov r10, rdi
  1874 000009FD E85A000000                  call check_laser_enemy_collision
  1875 00000A02 5F                          pop rdi
  1876 00000A03 5E                          pop rsi
  1877 00000A04 59                          pop rcx
  1878                                  
  1879 00000A05 4885C0                      test rax, rax          ; rax=1 => colisión con un enemigo
  1880 00000A08 7517                        jnz .delete_laser
  1881                                  
  1882                                      ; 6) Si NO hubo colisión, dibujamos el láser en la nueva posición
  1883 00000A0A 8A05(0A230000)              mov al, [laser_symbol]
  1884 00000A10 8807                        mov [rdi], al
  1885                                  
  1886                                  .next_laser:
  1887                                      ; Pasamos al láser anterior en el array
  1888 00000A12 48FFC9                      dec rcx
  1889 00000A15 4883F9FF                    cmp rcx, -1
  1890 00000A19 0F8F78FFFFFF                jg .loop_lasers   ; Mientras rcx >= 0, seguir iterando
  1891 00000A1F EB2E                        jmp .fin
  1892                                  
  1893                                  ; -----------------------------------------------------------------
  1894                                  ; Subrutina interna: .delete_laser
  1895                                  ; -----------------------------------------------------------------
  1896                                  ; Elimina el láser actual del array 'lasers' moviendo el último
  1897                                  ; láser a su posición (si no es el último). Decrementa laser_count.
  1898                                  .delete_laser:
  1899 00000A21 4C0FB625(0B230000)          movzx r12, byte [laser_count]
  1900 00000A29 49FFCC                      dec r12                    ; r12 = índice del último láser
  1901 00000A2C 4939CC                      cmp r12, rcx
  1902 00000A2F 7616                        jbe .just_decrement        ; Si rcx ya apunta al último, no copiamos
  1903                                  
  1904                                      ; Copiamos el último láser a la posición actual
  1905 00000A31 488DBC09[0C230000]          lea rdi, [lasers + rcx*2]
  1906 00000A39 4B8DB424[0C230000]          lea rsi, [lasers + r12*2]
  1907 00000A41 668B06                      mov ax, [rsi]             ; lee 2 bytes (X,Y) del último láser
  1908 00000A44 668907                      mov [rdi], ax             ; copiamos X,Y
  1909                                  
  1910                                  .just_decrement:
  1911 00000A47 FE0D(0B230000)              dec byte [laser_count]    ; Decrementar contador de láseres
  1912 00000A4D EBC3                        jmp .next_laser
  1913                                  
  1914                                  .fin:
  1915 00000A4F 415F                        pop r15
  1916 00000A51 415E                        pop r14
  1917 00000A53 415D                        pop r13
  1918 00000A55 415C                        pop r12
  1919 00000A57 5E                          pop rsi
  1920 00000A58 5F                          pop rdi
  1921 00000A59 5B                          pop rbx
  1922 00000A5A 5D                          pop rbp
  1923 00000A5B C3                          ret
  1924                                  
  1925                                  
  1926                                  ; Nueva función para verificar colisión entre láser y enemigos
  1927                                  ; ==========================================================
  1928                                  ; NUEVA check_laser_enemy_collision - inlined destroy
  1929                                  ; ==========================================================
  1930                                  check_laser_enemy_collision:
  1931 00000A5C 55                          push rbp
  1932 00000A5D 4889E5                      mov  rbp, rsp
  1933                                      
  1934 00000A60 4D31ED                      xor r13, r13            ; Índice del enemigo
  1935 00000A63 4831C0                      xor rax, rax            ; 0 = no colisión
  1936                                  
  1937                                  .loop_enemies:
  1938 00000A66 4983FD05                    cmp r13, 5              ; Máximo 5 enemigos
  1939 00000A6A 7D64                        jge .end
  1940                                  
  1941                                      ; r13 * 3 => offset del enemigo i
  1942 00000A6C 4C89E9                      mov rcx, r13
  1943 00000A6F 486BC903                    imul rcx, 3
  1944 00000A73 488DB1[60200000]            lea rsi, [enemies + rcx]   ; rsi => &enemies[i]
  1945                                  
  1946                                      ; Verificar si está activo
  1947 00000A7A 807E0201                    cmp byte [rsi+2], 1
  1948 00000A7E 754B                        jne .next_enemy
  1949                                  
  1950                                      ; Cargar posición X/Y del enemigo
  1951 00000A80 4C0FB636                    movzx r14, byte [rsi]      ; X
  1952 00000A84 4C0FB67E01                  movzx r15, byte [rsi+1]    ; Y
  1953                                  
  1954                                      ; Comparar con posición del láser (r8=X, r9=Y)
  1955 00000A89 4D39F0                      cmp r8, r14
  1956 00000A8C 753D                        jne .next_enemy
  1957 00000A8E 4D39F9                      cmp r9, r15
  1958 00000A91 7538                        jne .next_enemy
  1959                                  
  1960                                      ; ==== Colisión detectada con láser ====
  1961                                  
  1962                                      ; 1) Desactivar enemigo
  1963 00000A93 C6460200                    mov byte [rsi+2], 0     ; (activo=0)
  1964                                  
  1965                                      ; 2) Sumar puntos
  1966 00000A97 488B05(7F200000)            mov rax, [enemy_points]
  1967 00000A9E 480105(3E200000)            add [current_score], rax
  1968                                  
  1969                                      ; 3) (Opcional) Borrar del board, SOLO si no coincide con la paleta
  1970                                      ;    Evita crasheos en la fila de la paleta (row_cells - 2).
  1971 00000AA5 4983FF1E                    cmp r15, row_cells - 2
  1972 00000AA9 7419                        je .skip_erase
  1973                                  
  1974                                      ; Borrar visualmente del board
  1975 00000AAB B850000000                  mov rax, column_cells
  1976 00000AB0 4883C002                    add rax, 2
  1977 00000AB4 49F7E7                      mul r15
  1978 00000AB7 4C01F0                      add rax, r14
  1979 00000ABA 488DB8[400A0000]            lea rdi, [board + rax]
  1980 00000AC1 C60720                      mov byte [rdi], ' '
  1981                                  
  1982                                  .skip_erase:
  1983                                  
  1984                                      ; 4) Devolver rax=1 => colisión con enemigo
  1985 00000AC4 B801000000                  mov rax, 1
  1986 00000AC9 EB05                        jmp .end
  1987                                  
  1988                                  .next_enemy:
  1989 00000ACB 49FFC5                      inc r13
  1990 00000ACE EB96                        jmp .loop_enemies
  1991                                  
  1992                                  .end:
  1993 00000AD0 5D                          pop rbp
  1994 00000AD1 C3                          ret
  1995                                  
  1996                                  
  1997                                  ; Función auxiliar para eliminar un láser específico
  1998                                  remove_laser:
  1999 00000AD2 55                          push rbp
  2000 00000AD3 4889E5                      mov rbp, rsp
  2001                                  
  2002                                      ; Borrar el láser del tablero
  2003 00000AD6 41C60220                    mov byte [r10], ' '
  2004                                  
  2005                                      ; Mover el último láser a esta posición si no es el último
  2006 00000ADA 480FB605(0B230000)          movzx rax, byte [laser_count]
  2007 00000AE2 48FFC8                      dec rax                    ; Índice del último láser
  2008 00000AE5 4939C4                      cmp r12, rax              ; Comparar con láser actual
  2009 00000AE8 7416                        je .just_decrease         ; Si es el último, solo decrementar contador
  2010                                  
  2011                                      ; Copiar último láser a la posición actual
  2012 00000AEA 4B8DBC24[0C230000]          lea rdi, [lasers + r12*2]
  2013 00000AF2 488DB400[0C230000]          lea rsi, [lasers + rax*2]
  2014 00000AFA 668B16                      mov dx, [rsi]             ; Copiar X,Y del último láser
  2015 00000AFD 668917                      mov [rdi], dx
  2016                                  
  2017                                  .just_decrease:
  2018 00000B00 FE0D(0B230000)              dec byte [laser_count]    ; Decrementar contador de láseres
  2019                                  
  2020 00000B06 5D                          pop rbp
  2021 00000B07 C3                          ret
  2022                                  
  2023                                  add_life:
  2024 00000B08 55                          push rbp
  2025 00000B09 4889E5                      mov rbp, rsp
  2026 00000B0C 53                          push rbx
  2027 00000B0D 51                          push rcx
  2028 00000B0E 57                          push rdi
  2029 00000B0F 56                          push rsi
  2030 00000B10 4150                        push r8
  2031 00000B12 4151                        push r9
  2032                                      
  2033                                      ; Verificar si ya tenemos el máximo de vidas
  2034 00000B14 480FB605(3B210000)          movzx rax, byte [current_lives]
  2035 00000B1C 4883F807                    cmp rax, 7          ; Comparar con el máximo de vidas
  2036 00000B20 7D2C                        jge .end
  2037                                      
  2038                                      ; Incrementar el contador de vidas
  2039 00000B22 FE05(3B210000)              inc byte [current_lives]
  2040                                      
  2041                                      ; Encontrar la siguiente vida inactiva
  2042 00000B28 4831C9                      xor rcx, rcx
  2043                                      
  2044                                      .find_inactive:
  2045 00000B2B 4883F907                        cmp rcx, lives_count
  2046 00000B2F 7D1D                            jge .end
  2047                                          
  2048                                          ; Calcular offset de la vida actual
  2049 00000B31 4889C8                          mov rax, rcx
  2050 00000B34 486BC003                        imul rax, 3
  2051 00000B38 488DB0[25210000]                lea rsi, [lives_data + rax]
  2052                                          
  2053                                          ; Verificar si está inactiva
  2054 00000B3F 807E0200                        cmp byte [rsi + 2], 0
  2055 00000B43 7405                            je .activate_life
  2056                                          
  2057 00000B45 48FFC1                          inc rcx
  2058 00000B48 EBE1                            jmp .find_inactive
  2059                                          
  2060                                      .activate_life:
  2061                                          ; Activar la vida
  2062 00000B4A C6460201                        mov byte [rsi + 2], 1
  2063                                          
  2064                                      .end:
  2065 00000B4E 4159                            pop r9
  2066 00000B50 4158                            pop r8
  2067 00000B52 5E                              pop rsi
  2068 00000B53 5F                              pop rdi
  2069 00000B54 59                              pop rcx
  2070 00000B55 5B                              pop rbx
  2071 00000B56 5D                              pop rbp
  2072 00000B57 C3                              ret
  2073                                  
  2074                                  
  2075                                  print_ball:
  2076 00000B58 4C8B05(DF140000)        	mov r8, [ball_x_pos]
  2077 00000B5F 4C8B0D(E7140000)        	mov r9, [ball_y_pos]
  2078 00000B66 4981C0[400A0000]        	add r8, board
  2079                                  
  2080 00000B6D 4C89C9                  	mov rcx, r9
  2081 00000B70 B852000000              	mov rax, column_cells + 2
  2082 00000B75 48F7E9                  	imul rcx
  2083                                  	
  2084 00000B78 4901C0                  	add r8, rax
  2085 00000B7B 41C6004F                	mov byte [r8], char_O
  2086 00000B7F C3                      	ret
  2087                                  
  2088                                  print_ball_2:
  2089 00000B80 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2090 00000B87 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2091 00000B8E 4981C0[400A0000]            add r8, board
  2092 00000B95 4C89C9                      mov rcx, r9
  2093 00000B98 B852000000                  mov rax, column_cells + 2
  2094 00000B9D 48F7E9                      imul rcx
  2095 00000BA0 4901C0                      add r8, rax
  2096 00000BA3 41C6004F                    mov byte [r8], char_O
  2097 00000BA7 C3                          ret
  2098                                  
  2099                                  print_ball_3:
  2100 00000BA8 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2101 00000BAF 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2102 00000BB6 4981C0[400A0000]            add r8, board
  2103 00000BBD 4C89C9                      mov rcx, r9
  2104 00000BC0 B852000000                  mov rax, column_cells + 2
  2105 00000BC5 48F7E9                      imul rcx
  2106 00000BC8 4901C0                      add r8, rax
  2107 00000BCB 41C6004F                    mov byte [r8], char_O
  2108 00000BCF C3                          ret
  2109                                  
  2110                                  	;mov rax, board + r8 + r9 * (column_cells + 2)
  2111                                  	
  2112                                  print_pallet:
  2113                                      ; Primero borrar la paleta anterior completa (usando el tamaño máximo posible)
  2114 00000BD0 4C8B05(BF140000)            mov r8, [pallet_position]
  2115 00000BD7 488B0D(C7140000)            mov rcx, [pallet_size]
  2116                                      .clear_pallet:
  2117 00000BDE 41C60020                        mov byte [r8], char_space
  2118 00000BE2 49FFC0                          inc r8
  2119 00000BE5 48FFC9                          dec rcx
  2120 00000BE8 75F4                            jnz .clear_pallet
  2121                                  
  2122                                      ; Luego dibujar la nueva paleta con el tamaño actual
  2123 00000BEA 4C8B05(BF140000)            mov r8, [pallet_position]
  2124 00000BF1 488B0D(C7140000)            mov rcx, [pallet_size]
  2125                                      .write_pallet:
  2126 00000BF8 41C6003D                        mov byte [r8], char_equal
  2127 00000BFC 49FFC0                          inc r8
  2128 00000BFF 48FFC9                          dec rcx
  2129 00000C02 75F4                            jnz .write_pallet
  2130                                  
  2131 00000C04 C3                          ret
  2132                                  
  2133                                  move_pallet:
  2134                                      
  2135 00000C05 803D(FF140000)00            cmp byte [ball_moving], 0
  2136 00000C0C 7507                        jne .continue_movement
  2137 00000C0E C605(FF140000)01            mov byte [ball_moving], 1
  2138                                  
  2139                                      .continue_movement:
  2140 00000C15 4883FFFF                        cmp rdi, left_direction
  2141 00000C19 7531                            jne .move_right
  2142                                  
  2143                                          .move_left:
  2144                                              ; Verificar si la siguiente posición sería una X (borde izquierdo)
  2145 00000C1B 4C8B05(BF140000)                    mov r8, [pallet_position]
  2146 00000C22 49FFC8                              dec r8              ; Verificar la posición a la izquierda
  2147 00000C25 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
  2148 00000C28 3C58                                cmp al, 'X'        ; Comparar si es una X
  2149 00000C2A 744D                                je .end            ; Si es X, no mover
  2150                                              
  2151 00000C2C 4C8B05(BF140000)                    mov r8, [pallet_position]
  2152 00000C33 4C8B0D(C7140000)                    mov r9, [pallet_size]
  2153 00000C3A 43C64408FF20                        mov byte [r8 + r9 - 1], char_space  ; Borrar último carácter de la paleta
  2154 00000C40 49FFC8                              dec r8
  2155 00000C43 4C8905(BF140000)                    mov [pallet_position], r8
  2156 00000C4A EB2D                                jmp .end
  2157                                              
  2158                                          .move_right:
  2159                                              ; Verificar si la siguiente posición después de la paleta sería una X
  2160 00000C4C 4C8B05(BF140000)                    mov r8, [pallet_position]
  2161 00000C53 4C8B0D(C7140000)                    mov r9, [pallet_size]
  2162 00000C5A 4D01C8                              add r8, r9         ; Moverse al final de la paleta
  2163 00000C5D 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
  2164 00000C60 3C58                                cmp al, 'X'        ; Comparar si es una X
  2165 00000C62 7415                                je .end            ; Si es X, no mover
  2166                                              
  2167 00000C64 4C8B05(BF140000)                    mov r8, [pallet_position]
  2168 00000C6B 41C60020                            mov byte [r8], char_space
  2169 00000C6F 49FFC0                              inc r8
  2170 00000C72 4C8905(BF140000)                    mov [pallet_position], r8
  2171                                          .end:
  2172 00000C79 C3                                  ret
  2173                                  
  2174                                  
  2175                                  
  2176                                              
  2177                                  ; Nueva función auxiliar para actualizar la posición de la bola atrapada
  2178                                  update_caught_ball_position:
  2179 00000C7A 55                          push rbp
  2180 00000C7B 4889E5                      mov rbp, rsp
  2181                                      
  2182                                      ; Calcular la nueva posición de la bola basada en la paleta
  2183 00000C7E 4C8B05(BF140000)            mov r8, [pallet_position]
  2184 00000C85 4981E8[400A0000]            sub r8, board          ; Obtener posición relativa
  2185 00000C8C B852000000                  mov rax, column_cells + 2
  2186 00000C91 4831D2                      xor rdx, rdx
  2187 00000C94 48F7F0                      div rax                ; División para obtener X,Y
  2188                                      
  2189                                      ; rdx contiene X (resto), rax contiene Y (cociente)
  2190 00000C97 4989C1                      mov r9, rax            ; Y de la paleta
  2191 00000C9A 49FFC9                      dec r9                 ; Una posición arriba de la paleta
  2192                                      
  2193                                      ; Añadir el offset guardado a la posición X
  2194 00000C9D 4889D0                      mov rax, rdx
  2195 00000CA0 480305(00230000)            add rax, [ball_catch_offset]
  2196 00000CA7 488905(DF140000)            mov [ball_x_pos], rax
  2197 00000CAE 4C890D(E7140000)            mov [ball_y_pos], r9
  2198                                      
  2199 00000CB5 5D                          pop rbp
  2200 00000CB6 C3                          ret
  2201                                  
  2202                                  
  2203                                  move_all_balls:
  2204 00000CB7 55                          push rbp
  2205 00000CB8 4889E5                      mov rbp, rsp
  2206 00000CBB 53                          push rbx
  2207                                      
  2208                                      ; Inicializar contador de bolas
  2209 00000CBC 4831DB                      xor rbx, rbx
  2210                                      
  2211                                  .loop_balls:
  2212                                      ; Verificar si hemos procesado todas las bolas
  2213 00000CBF 3A1D(3F240000)              cmp bl, byte [balls_count]
  2214 00000CC5 7D1D                        jge .end
  2215                                      
  2216                                      ; Calcular offset de la bola actual
  2217 00000CC7 B821000000                  mov rax, BALL_STRUCT_SIZE
  2218 00000CCC 48F7E3                      mul rbx
  2219                                      
  2220                                      ; Verificar si la bola está activa
  2221 00000CCF 80B8[FC230000]01            cmp byte [balls_data + rax + 32], 1
  2222 00000CD6 7507                        jne .next_ball
  2223                                      
  2224                                      ; Guardar offset en la pila
  2225 00000CD8 50                          push rax
  2226                                      
  2227                                      ; Llamar a move_ball con los parámetros de esta bola
  2228 00000CD9 E809000000                  call move_ball
  2229                                      
  2230                                      ; Restaurar offset
  2231 00000CDE 58                          pop rax
  2232                                      
  2233                                  .next_ball:
  2234 00000CDF 48FFC3                      inc rbx
  2235 00000CE2 EBDB                        jmp .loop_balls
  2236                                      
  2237                                  .end:
  2238 00000CE4 5B                          pop rbx
  2239 00000CE5 5D                          pop rbp
  2240 00000CE6 C3                          ret
  2241                                  
  2242                                  move_ball:
  2243                                  
  2244 00000CE7 803D(FD220000)01            cmp byte [ball_caught], 1
  2245 00000CEE 0F849D000000                je .move_with_pallet
  2246                                  
  2247 00000CF4 803D(FF140000)00            cmp byte [ball_moving], 0
  2248 00000CFB 0F84B8010000                je .end
  2249                                  
  2250                                      ; Incrementar contador de velocidad
  2251 00000D01 48FF05(F3220000)            inc qword [speed_counter]
  2252                                      
  2253                                      ; Verificar si debemos mover la bola en este ciclo
  2254 00000D08 488B05(F3220000)            mov rax, [speed_counter]
  2255 00000D0F 483B05(E3220000)            cmp rax, [ball_speed]
  2256 00000D16 0F8C9D010000                jl .end
  2257                                      
  2258                                      ; Resetear contador de velocidad
  2259 00000D1C 48C705(F3220000)00-         mov qword [speed_counter], 0
  2259 00000D24 000000             
  2260                                  
  2261                                      ; Borrar la posición actual de la bola
  2262 00000D27 4C8B05(DF140000)            mov r8, [ball_x_pos]
  2263 00000D2E 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  2264 00000D35 4981C0[400A0000]            add r8, board
  2265 00000D3C 4C89C9                      mov rcx, r9
  2266 00000D3F B852000000                  mov rax, column_cells + 2
  2267 00000D44 48F7E9                      imul rcx
  2268 00000D47 4901C0                      add r8, rax
  2269 00000D4A 41C60020                    mov byte [r8], char_space
  2270                                  
  2271                                      ; Calcular siguiente posición X
  2272 00000D4E 4C8B05(DF140000)            mov r8, [ball_x_pos]
  2273 00000D55 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  2274 00000D5C 488B05(EF140000)            mov rax, [ball_direction_x]
  2275 00000D63 4901C0                      add r8, rax               ; Nueva posición X
  2276                                  
  2277                                      ; Calcular la dirección de memoria para la siguiente posición
  2278 00000D66 4D89C2                      mov r10, r8
  2279 00000D69 4981C2[400A0000]            add r10, board
  2280 00000D70 4C89C9                      mov rcx, r9
  2281 00000D73 B852000000                  mov rax, column_cells + 2
  2282 00000D78 48F7E9                      imul rcx
  2283 00000D7B 4901C2                      add r10, rax
  2284                                  
  2285                                      ; Verificar si hay una X en la siguiente posición X
  2286 00000D7E 418A02                      mov al, [r10]
  2287 00000D81 3C58                        cmp al, 'X'
  2288 00000D83 7565                        jne .check_block_x
  2289 00000D85 48F71D(EF140000)            neg qword [ball_direction_x]  ; Cambiar dirección X si hay una X
  2290 00000D8C E928010000                  jmp .end
  2291                                  
  2292                                      .move_with_pallet:
  2293                                          ; Borrar la posición actual de la bola
  2294 00000D91 4C8B05(DF140000)                mov r8, [ball_x_pos]
  2295 00000D98 4C8B0D(E7140000)                mov r9, [ball_y_pos]
  2296 00000D9F 4D89C2                          mov r10, r8
  2297 00000DA2 4981C2[400A0000]                add r10, board
  2298 00000DA9 4C89C9                          mov rcx, r9
  2299 00000DAC B852000000                      mov rax, column_cells + 2
  2300 00000DB1 48F7E9                          imul rcx
  2301 00000DB4 4901C2                          add r10, rax
  2302 00000DB7 41C60220                        mov byte [r10], char_space
  2303                                  
  2304                                          ; Actualizar posición X basada en la paleta
  2305 00000DBB 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2306 00000DC2 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2307 00000DC9 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2308 00000DD0 4C8905(DF140000)                mov [ball_x_pos], r8          ; Guardar nueva posición X
  2309                                  
  2310                                          ; Mantener la bola una posición arriba de la paleta
  2311 00000DD7 4C8B0D(E7140000)                mov r9, [ball_y_pos]          ; Mantener la misma altura
  2312 00000DDE 4C890D(E7140000)                mov [ball_y_pos], r9          ; Actualizar posición Y
  2313                                  
  2314 00000DE5 E9CF000000                      jmp .end
  2315                                  
  2316                                  
  2317                                      .check_block_x:
  2318                                          ; Verificar colisión con bloques en X
  2319 00000DEA 4150                            push r8     ; Guardar registros que usa check_block_collision
  2320 00000DEC 4151                            push r9
  2321 00000DEE 4152                            push r10
  2322 00000DF0 E81C0C0000                      call check_block_collision
  2323 00000DF5 415A                            pop r10
  2324 00000DF7 4159                            pop r9
  2325 00000DF9 4158                            pop r8
  2326 00000DFB 4885C0                          test rax, rax
  2327 00000DFE 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2328 00000E00 48F71D(EF140000)                neg qword [ball_direction_x]  ; Si hay colisión, rebotar
  2329 00000E07 E9AD000000                      jmp .end
  2330                                  
  2331                                      .check_paddle_x:
  2332                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2333 00000E0C 41803A3D                        cmp byte [r10], char_equal
  2334 00000E10 750C                            jne .check_y_movement
  2335 00000E12 48F71D(EF140000)                neg qword [ball_direction_x]  ; Cambiar dirección X si hay una paleta
  2336 00000E19 E99B000000                      jmp .end
  2337                                  
  2338                                      .check_y_movement:
  2339                                          ; Calcular siguiente posición Y
  2340 00000E1E 488B05(F7140000)                mov rax, [ball_direction_y]
  2341 00000E25 4901C1                          add r9, rax                  ; Nueva posición Y
  2342                                  
  2343                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2344 00000E28 4D89C2                          mov r10, r8
  2345 00000E2B 4981C2[400A0000]                add r10, board
  2346 00000E32 4C89C9                          mov rcx, r9
  2347 00000E35 B852000000                      mov rax, column_cells + 2
  2348 00000E3A 48F7E9                          imul rcx
  2349 00000E3D 4901C2                          add r10, rax
  2350                                  
  2351                                          ; Verificar si hay una X en la siguiente posición Y
  2352 00000E40 418A02                          mov al, [r10]
  2353 00000E43 3C58                            cmp al, 'X'
  2354 00000E45 7509                            jne .check_block_y
  2355 00000E47 48F71D(F7140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una X
  2356 00000E4E EB69                            jmp .end
  2357                                  
  2358                                      .check_block_y:
  2359                                          ; Verificar colisión con bloques en Y
  2360 00000E50 4150                            push r8     ; Guardar registros que usa check_block_collision
  2361 00000E52 4151                            push r9
  2362 00000E54 4152                            push r10
  2363 00000E56 E8B60B0000                      call check_block_collision
  2364 00000E5B 415A                            pop r10
  2365 00000E5D 4159                            pop r9
  2366 00000E5F 4158                            pop r8
  2367 00000E61 4885C0                          test rax, rax
  2368 00000E64 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2369 00000E66 48F71D(F7140000)                neg qword [ball_direction_y]  ; Si hay colisión, rebotar
  2370 00000E6D EB4A                            jmp .end
  2371                                  
  2372                                      .check_paddle_y:
  2373                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2374 00000E6F 41803A3D                        cmp byte [r10], char_equal
  2375 00000E73 7536                            jne .update_position
  2376                                  
  2377                                          ; Verificar si el poder catch está activo
  2378 00000E75 803D(FC220000)01                cmp byte [catch_power_active], 1
  2379 00000E7C 7524                            jne .normal_bounce
  2380                                  
  2381                                          ; Activar el modo "atrapado"
  2382 00000E7E C605(FD220000)01                mov byte [ball_caught], 1
  2383                                          
  2384                                          ; Guardar la posición X actual de la bola como offset
  2385 00000E85 488B05(DF140000)                mov rax, [ball_x_pos]           ; Posición X actual de la bola
  2386 00000E8C 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2387 00000E93 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2388 00000E99 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2389                                          
  2390 00000EA0 EB17                            jmp .end
  2391                                  
  2392                                      .normal_bounce:
  2393 00000EA2 48F71D(F7140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una paleta
  2394 00000EA9 EB0E                            jmp .end
  2395                                  
  2396                                  
  2397                                      .update_position:
  2398 00000EAB 4C8905(DF140000)                mov [ball_x_pos], r8
  2399 00000EB2 4C890D(E7140000)                mov [ball_y_pos], r9
  2400                                  
  2401                                      .end:
  2402 00000EB9 C3                              ret
  2403                                  
  2404                                  
  2405                                  move_ball_2:
  2406                                  
  2407 00000EBA 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2408 00000EC1 0F849D000000                je .move_with_pallet
  2409                                  
  2410 00000EC7 803D(21150000)00            cmp byte [ball2_moving], 0
  2411 00000ECE 0F84B8010000                je .end
  2412                                  
  2413                                      ; Incrementar contador de velocidad
  2414 00000ED4 48FF05(F3220000)            inc qword [speed_counter]
  2415                                      
  2416                                      ; Verificar si debemos mover la bola en este ciclo
  2417 00000EDB 488B05(F3220000)            mov rax, [speed_counter]
  2418 00000EE2 483B05(E3220000)            cmp rax, [ball_speed]
  2419 00000EE9 0F8C9D010000                jl .end
  2420                                      
  2421                                      ; Resetear contador de velocidad
  2422 00000EEF 48C705(F3220000)00-         mov qword [speed_counter], 0
  2422 00000EF7 000000             
  2423                                  
  2424                                      ; Borrar la posición actual de la bola
  2425 00000EFA 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2426 00000F01 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2427 00000F08 4981C0[400A0000]            add r8, board
  2428 00000F0F 4C89C9                      mov rcx, r9
  2429 00000F12 B852000000                  mov rax, column_cells + 2
  2430 00000F17 48F7E9                      imul rcx
  2431 00000F1A 4901C0                      add r8, rax
  2432 00000F1D 41C60020                    mov byte [r8], char_space
  2433                                  
  2434                                      ; Calcular siguiente posición X
  2435 00000F21 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2436 00000F28 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2437 00000F2F 488B05(11150000)            mov rax, [ball2_direction_x]
  2438 00000F36 4901C0                      add r8, rax               ; Nueva posición X
  2439                                  
  2440                                      ; Calcular la dirección de memoria para la siguiente posición
  2441 00000F39 4D89C2                      mov r10, r8
  2442 00000F3C 4981C2[400A0000]            add r10, board
  2443 00000F43 4C89C9                      mov rcx, r9
  2444 00000F46 B852000000                  mov rax, column_cells + 2
  2445 00000F4B 48F7E9                      imul rcx
  2446 00000F4E 4901C2                      add r10, rax
  2447                                  
  2448                                      ; Verificar si hay una X en la siguiente posición X
  2449 00000F51 418A02                      mov al, [r10]
  2450 00000F54 3C58                        cmp al, 'X'
  2451 00000F56 7565                        jne .check_block_x
  2452 00000F58 48F71D(11150000)            neg qword [ball2_direction_x]  ; Cambiar dirección X si hay una X
  2453 00000F5F E928010000                  jmp .end
  2454                                  
  2455                                      .move_with_pallet:
  2456                                          ; Borrar la posición actual de la bola
  2457 00000F64 4C8B05(01150000)                mov r8, [ball2_x_pos]
  2458 00000F6B 4C8B0D(09150000)                mov r9, [ball2_y_pos]
  2459 00000F72 4D89C2                          mov r10, r8
  2460 00000F75 4981C2[400A0000]                add r10, board
  2461 00000F7C 4C89C9                          mov rcx, r9
  2462 00000F7F B852000000                      mov rax, column_cells + 2
  2463 00000F84 48F7E9                          imul rcx
  2464 00000F87 4901C2                          add r10, rax
  2465 00000F8A 41C60220                        mov byte [r10], char_space
  2466                                  
  2467                                          ; Actualizar posición X basada en la paleta
  2468 00000F8E 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2469 00000F95 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2470 00000F9C 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2471 00000FA3 4C8905(01150000)                mov [ball2_x_pos], r8          ; Guardar nueva posición X
  2472                                  
  2473                                          ; Mantener la bola una posición arriba de la paleta
  2474 00000FAA 4C8B0D(09150000)                mov r9, [ball2_y_pos]          ; Mantener la misma altura
  2475 00000FB1 4C890D(09150000)                mov [ball2_y_pos], r9          ; Actualizar posición Y
  2476                                  
  2477 00000FB8 E9CF000000                      jmp .end
  2478                                  
  2479                                  
  2480                                      .check_block_x:
  2481                                          ; Verificar colisión con bloques en X
  2482 00000FBD 4150                            push r8     ; Guardar registros que usa check_block_collision
  2483 00000FBF 4151                            push r9
  2484 00000FC1 4152                            push r10
  2485 00000FC3 E8490A0000                      call check_block_collision
  2486 00000FC8 415A                            pop r10
  2487 00000FCA 4159                            pop r9
  2488 00000FCC 4158                            pop r8
  2489 00000FCE 4885C0                          test rax, rax
  2490 00000FD1 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2491 00000FD3 48F71D(11150000)                neg qword [ball2_direction_x]  ; Si hay colisión, rebotar
  2492 00000FDA E9AD000000                      jmp .end
  2493                                  
  2494                                      .check_paddle_x:
  2495                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2496 00000FDF 41803A3D                        cmp byte [r10], char_equal
  2497 00000FE3 750C                            jne .check_y_movement
  2498 00000FE5 48F71D(11150000)                neg qword [ball2_direction_x]  ; Cambiar dirección X si hay una paleta
  2499 00000FEC E99B000000                      jmp .end
  2500                                  
  2501                                      .check_y_movement:
  2502                                          ; Calcular siguiente posición Y
  2503 00000FF1 488B05(19150000)                mov rax, [ball2_direction_y]
  2504 00000FF8 4901C1                          add r9, rax                  ; Nueva posición Y
  2505                                  
  2506                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2507 00000FFB 4D89C2                          mov r10, r8
  2508 00000FFE 4981C2[400A0000]                add r10, board
  2509 00001005 4C89C9                          mov rcx, r9
  2510 00001008 B852000000                      mov rax, column_cells + 2
  2511 0000100D 48F7E9                          imul rcx
  2512 00001010 4901C2                          add r10, rax
  2513                                  
  2514                                          ; Verificar si hay una X en la siguiente posición Y
  2515 00001013 418A02                          mov al, [r10]
  2516 00001016 3C58                            cmp al, 'X'
  2517 00001018 7509                            jne .check_block_y
  2518 0000101A 48F71D(19150000)                neg qword [ball2_direction_y]  ; Cambiar dirección Y si hay una X
  2519 00001021 EB69                            jmp .end
  2520                                  
  2521                                      .check_block_y:
  2522                                          ; Verificar colisión con bloques en Y
  2523 00001023 4150                            push r8     ; Guardar registros que usa check_block_collision
  2524 00001025 4151                            push r9
  2525 00001027 4152                            push r10
  2526 00001029 E8E3090000                      call check_block_collision
  2527 0000102E 415A                            pop r10
  2528 00001030 4159                            pop r9
  2529 00001032 4158                            pop r8
  2530 00001034 4885C0                          test rax, rax
  2531 00001037 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2532 00001039 48F71D(19150000)                neg qword [ball2_direction_y]  ; Si hay colisión, rebotar
  2533 00001040 EB4A                            jmp .end
  2534                                  
  2535                                      .check_paddle_y:
  2536                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2537 00001042 41803A3D                        cmp byte [r10], char_equal
  2538 00001046 7536                            jne .update_position
  2539                                  
  2540                                          ; Verificar si el poder catch está activo
  2541 00001048 803D(FC220000)01                cmp byte [catch_power_active], 1
  2542 0000104F 7524                            jne .normal_bounce
  2543                                  
  2544                                          ; Activar el modo "atrapado"
  2545 00001051 C605(FE220000)01                mov byte [ball_caught_2], 1
  2546                                          
  2547                                          ; Guardar la posición X actual de la bola como offset
  2548 00001058 488B05(01150000)                mov rax, [ball2_x_pos]           ; Posición X actual de la bola
  2549 0000105F 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2550 00001066 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2551 0000106C 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2552                                          
  2553 00001073 EB17                            jmp .end
  2554                                  
  2555                                      .normal_bounce:
  2556 00001075 48F71D(19150000)                neg qword [ball2_direction_y]  ; Cambiar dirección Y si hay una paleta
  2557 0000107C EB0E                            jmp .end
  2558                                  
  2559                                  
  2560                                      .update_position:
  2561 0000107E 4C8905(01150000)                mov [ball2_x_pos], r8
  2562 00001085 4C890D(09150000)                mov [ball2_y_pos], r9
  2563                                  
  2564                                      .end:
  2565 0000108C C3                              ret
  2566                                  
  2567                                  move_ball_3:
  2568                                  
  2569 0000108D 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2570 00001094 0F849D000000                je .move_with_pallet
  2571                                  
  2572 0000109A 803D(43150000)00            cmp byte [ball3_moving], 0
  2573 000010A1 0F84B8010000                je .end
  2574                                  
  2575                                      ; Incrementar contador de velocidad
  2576 000010A7 48FF05(F3220000)            inc qword [speed_counter]
  2577                                      
  2578                                      ; Verificar si debemos mover la bola en este ciclo
  2579 000010AE 488B05(F3220000)            mov rax, [speed_counter]
  2580 000010B5 483B05(E3220000)            cmp rax, [ball_speed]
  2581 000010BC 0F8C9D010000                jl .end
  2582                                      
  2583                                      ; Resetear contador de velocidad
  2584 000010C2 48C705(F3220000)00-         mov qword [speed_counter], 0
  2584 000010CA 000000             
  2585                                  
  2586                                      ; Borrar la posición actual de la bola
  2587 000010CD 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2588 000010D4 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2589 000010DB 4981C0[400A0000]            add r8, board
  2590 000010E2 4C89C9                      mov rcx, r9
  2591 000010E5 B852000000                  mov rax, column_cells + 2
  2592 000010EA 48F7E9                      imul rcx
  2593 000010ED 4901C0                      add r8, rax
  2594 000010F0 41C60020                    mov byte [r8], char_space
  2595                                  
  2596                                      ; Calcular siguiente posición X
  2597 000010F4 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2598 000010FB 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2599 00001102 488B05(33150000)            mov rax, [ball3_direction_x]
  2600 00001109 4901C0                      add r8, rax               ; Nueva posición X
  2601                                  
  2602                                      ; Calcular la dirección de memoria para la siguiente posición
  2603 0000110C 4D89C2                      mov r10, r8
  2604 0000110F 4981C2[400A0000]            add r10, board
  2605 00001116 4C89C9                      mov rcx, r9
  2606 00001119 B852000000                  mov rax, column_cells + 2
  2607 0000111E 48F7E9                      imul rcx
  2608 00001121 4901C2                      add r10, rax
  2609                                  
  2610                                      ; Verificar si hay una X en la siguiente posición X
  2611 00001124 418A02                      mov al, [r10]
  2612 00001127 3C58                        cmp al, 'X'
  2613 00001129 7565                        jne .check_block_x
  2614 0000112B 48F71D(33150000)            neg qword [ball3_direction_x]  ; Cambiar dirección X si hay una X
  2615 00001132 E928010000                  jmp .end
  2616                                  
  2617                                      .move_with_pallet:
  2618                                          ; Borrar la posición actual de la bola
  2619 00001137 4C8B05(23150000)                mov r8, [ball3_x_pos]
  2620 0000113E 4C8B0D(2B150000)                mov r9, [ball3_y_pos]
  2621 00001145 4D89C2                          mov r10, r8
  2622 00001148 4981C2[400A0000]                add r10, board
  2623 0000114F 4C89C9                          mov rcx, r9
  2624 00001152 B852000000                      mov rax, column_cells + 2
  2625 00001157 48F7E9                          imul rcx
  2626 0000115A 4901C2                          add r10, rax
  2627 0000115D 41C60220                        mov byte [r10], char_space
  2628                                  
  2629                                          ; Actualizar posición X basada en la paleta
  2630 00001161 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2631 00001168 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2632 0000116F 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2633 00001176 4C8905(23150000)                mov [ball3_x_pos], r8          ; Guardar nueva posición X
  2634                                  
  2635                                          ; Mantener la bola una posición arriba de la paleta
  2636 0000117D 4C8B0D(2B150000)                mov r9, [ball3_y_pos]          ; Mantener la misma altura
  2637 00001184 4C890D(2B150000)                mov [ball3_y_pos], r9          ; Actualizar posición Y
  2638                                  
  2639 0000118B E9CF000000                      jmp .end
  2640                                  
  2641                                  
  2642                                      .check_block_x:
  2643                                          ; Verificar colisión con bloques en X
  2644 00001190 4150                            push r8     ; Guardar registros que usa check_block_collision
  2645 00001192 4151                            push r9
  2646 00001194 4152                            push r10
  2647 00001196 E876080000                      call check_block_collision
  2648 0000119B 415A                            pop r10
  2649 0000119D 4159                            pop r9
  2650 0000119F 4158                            pop r8
  2651 000011A1 4885C0                          test rax, rax
  2652 000011A4 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2653 000011A6 48F71D(33150000)                neg qword [ball3_direction_x]  ; Si hay colisión, rebotar
  2654 000011AD E9AD000000                      jmp .end
  2655                                  
  2656                                      .check_paddle_x:
  2657                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2658 000011B2 41803A3D                        cmp byte [r10], char_equal
  2659 000011B6 750C                            jne .check_y_movement
  2660 000011B8 48F71D(33150000)                neg qword [ball3_direction_x]  ; Cambiar dirección X si hay una paleta
  2661 000011BF E99B000000                      jmp .end
  2662                                  
  2663                                      .check_y_movement:
  2664                                          ; Calcular siguiente posición Y
  2665 000011C4 488B05(3B150000)                mov rax, [ball3_direction_y]
  2666 000011CB 4901C1                          add r9, rax                  ; Nueva posición Y
  2667                                  
  2668                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2669 000011CE 4D89C2                          mov r10, r8
  2670 000011D1 4981C2[400A0000]                add r10, board
  2671 000011D8 4C89C9                          mov rcx, r9
  2672 000011DB B852000000                      mov rax, column_cells + 2
  2673 000011E0 48F7E9                          imul rcx
  2674 000011E3 4901C2                          add r10, rax
  2675                                  
  2676                                          ; Verificar si hay una X en la siguiente posición Y
  2677 000011E6 418A02                          mov al, [r10]
  2678 000011E9 3C58                            cmp al, 'X'
  2679 000011EB 7509                            jne .check_block_y
  2680 000011ED 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Cambiar dirección Y si hay una X
  2681 000011F4 EB69                            jmp .end
  2682                                  
  2683                                      .check_block_y:
  2684                                          ; Verificar colisión con bloques en Y
  2685 000011F6 4150                            push r8     ; Guardar registros que usa check_block_collision
  2686 000011F8 4151                            push r9
  2687 000011FA 4152                            push r10
  2688 000011FC E810080000                      call check_block_collision
  2689 00001201 415A                            pop r10
  2690 00001203 4159                            pop r9
  2691 00001205 4158                            pop r8
  2692 00001207 4885C0                          test rax, rax
  2693 0000120A 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2694 0000120C 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Si hay colisión, rebotar
  2695 00001213 EB4A                            jmp .end
  2696                                  
  2697                                      .check_paddle_y:
  2698                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2699 00001215 41803A3D                        cmp byte [r10], char_equal
  2700 00001219 7536                            jne .update_position
  2701                                  
  2702                                          ; Verificar si el poder catch está activo
  2703 0000121B 803D(FC220000)01                cmp byte [catch_power_active], 1
  2704 00001222 7524                            jne .normal_bounce
  2705                                  
  2706                                          ; Activar el modo "atrapado"
  2707 00001224 C605(FF220000)01                mov byte [ball_caught_3], 1
  2708                                          
  2709                                          ; Guardar la posición X actual de la bola como offset
  2710 0000122B 488B05(23150000)                mov rax, [ball3_x_pos]           ; Posición X actual de la bola
  2711 00001232 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2712 00001239 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2713 0000123F 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2714                                          
  2715 00001246 EB17                            jmp .end
  2716                                  
  2717                                      .normal_bounce:
  2718 00001248 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Cambiar dirección Y si hay una paleta
  2719 0000124F EB0E                            jmp .end
  2720                                  
  2721                                  
  2722                                      .update_position:
  2723 00001251 4C8905(23150000)                mov [ball3_x_pos], r8
  2724 00001258 4C890D(2B150000)                mov [ball3_y_pos], r9
  2725                                  
  2726                                      .end:
  2727 0000125F C3                              ret
  2728                                  
  2729                                  ; Nueva función para procesar la tecla C cuando la bola está atrapada
  2730                                  ; Procesar la tecla 'c' cuando el poder de atrapar está activo
  2731                                  process_catch_release:
  2732 00001260 55                          push rbp
  2733 00001261 4889E5                      mov  rbp, rsp
  2734                                  
  2735                                      ; Verificar si el poder de catch está activo
  2736 00001264 803D(FC220000)01            cmp byte [catch_power_active], 1
  2737 0000126B 0F8531010000                jne .no_catch_power
  2738                                  
  2739                                      ; Verificar si se presionó 'c' (derecha y arriba)
  2740 00001271 803D(08230000)63            cmp byte [last_key], 'c'
  2741 00001278 7412                        je .release_right
  2742                                      
  2743                                      ; Verificar si se presionó 'x' (izquierda y arriba)
  2744 0000127A 803D(08230000)78            cmp byte [last_key], 'x'
  2745 00001281 0F8487000000                je .release_left
  2746                                      
  2747 00001287 E916010000                  jmp .no_catch_power
  2748                                  
  2749                                  .release_right:
  2750                                      ; Liberar la bola hacia la derecha
  2751 0000128C 803D(FD220000)01            cmp byte [ball_caught], 1
  2752 00001293 7522                        jne .check_ball2_right
  2753 00001295 C605(FD220000)00            mov byte [ball_caught], 0
  2754 0000129C 48C705(EF140000)01-         mov qword [ball_direction_x], 1    ; Derecha
  2754 000012A4 000000             
  2755 000012A7 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Arriba
  2755 000012AF FFFFFF             
  2756 000012B2 E9CD000000                  jmp .release_complete
  2757                                  
  2758                                  .check_ball2_right:
  2759 000012B7 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2760 000012BE 7522                        jne .check_ball3_right
  2761 000012C0 C605(FE220000)00            mov byte [ball_caught_2], 0
  2762 000012C7 48C705(11150000)01-         mov qword [ball2_direction_x], 1
  2762 000012CF 000000             
  2763 000012D2 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  2763 000012DA FFFFFF             
  2764 000012DD E9A2000000                  jmp .release_complete
  2765                                  
  2766                                  .check_ball3_right:
  2767 000012E2 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2768 000012E9 0F8595000000                jne .release_complete
  2769 000012EF C605(FF220000)00            mov byte [ball_caught_3], 0
  2770 000012F6 48C705(33150000)01-         mov qword [ball3_direction_x], 1
  2770 000012FE 000000             
  2771 00001301 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  2771 00001309 FFFFFF             
  2772 0000130C EB76                        jmp .release_complete
  2773                                  
  2774                                  .release_left:
  2775                                      ; Liberar la bola hacia la izquierda
  2776 0000130E 803D(FD220000)01            cmp byte [ball_caught], 1
  2777 00001315 751F                        jne .check_ball2_left
  2778 00001317 C605(FD220000)00            mov byte [ball_caught], 0
  2779 0000131E 48C705(EF140000)FF-         mov qword [ball_direction_x], -1   ; Izquierda
  2779 00001326 FFFFFF             
  2780 00001329 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Arriba
  2780 00001331 FFFFFF             
  2781 00001334 EB4E                        jmp .release_complete
  2782                                  
  2783                                  .check_ball2_left:
  2784 00001336 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2785 0000133D 751F                        jne .check_ball3_left
  2786 0000133F C605(FE220000)00            mov byte [ball_caught_2], 0
  2787 00001346 48C705(11150000)FF-         mov qword [ball2_direction_x], -1
  2787 0000134E FFFFFF             
  2788 00001351 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  2788 00001359 FFFFFF             
  2789 0000135C EB26                        jmp .release_complete
  2790                                  
  2791                                  .check_ball3_left:
  2792 0000135E 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2793 00001365 751D                        jne .release_complete
  2794 00001367 C605(FF220000)00            mov byte [ball_caught_3], 0
  2795 0000136E 48C705(33150000)FF-         mov qword [ball3_direction_x], -1
  2795 00001376 FFFFFF             
  2796 00001379 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  2796 00001381 FFFFFF             
  2797                                  
  2798                                  .release_complete:
  2799                                      ; Si era el catch inicial, desactivarlo
  2800 00001384 803D(FB220000)01            cmp byte [initial_catch_active], 1
  2801 0000138B 750E                        jne .finish
  2802 0000138D C605(FB220000)00            mov byte [initial_catch_active], 0
  2803 00001394 C605(FC220000)00            mov byte [catch_power_active], 0  ; Desactivar poder de catch después de la 1ra vez
  2804                                  
  2805                                  .finish:
  2806 0000139B C605(08230000)00            mov byte [last_key], 0  ; Limpiar la tecla
  2807                                  .no_catch_power:
  2808 000013A2 5D                          pop rbp
  2809 000013A3 C3                          ret
  2810                                  
  2811                                  
  2812                                  
  2813                                  display_level_number:
  2814 000013A4 55                          push rbp
  2815 000013A5 4889E5                      mov rbp, rsp
  2816                                      
  2817                                      ; Limpiar la pantalla primero
  2818                                      print clear, clear_length
    82 000013A8 B801000000          <1>  mov eax, sys_write
    83 000013AD BF01000000          <1>  mov edi, 1
    84 000013B2 48BE-               <1>  mov rsi, %1
    84 000013B4 [1000000000000000]  <1>
    85 000013BC BA07000000          <1>  mov edx, %2
    86 000013C1 0F05                <1>  syscall
  2819                                      
  2820                                      ; Calcular la posición central para el mensaje
  2821                                      ; Para el mensaje "NIVEL X", necesitamos centrar 7 caracteres
  2822 000013C3 B850000000                  mov rax, column_cells
  2823 000013C8 4883E807                    sub rax, 7                  ; longitud de "NIVEL X"
  2824 000013CC 48D1E8                      shr rax, 1                  ; dividir por 2 para centrar
  2825                                      
  2826                                      ; Calcular la fila central
  2827 000013CF BB20000000                  mov rbx, row_cells
  2828 000013D4 48D1EB                      shr rbx, 1                  ; dividir por 2 para obtener la fila central
  2829                                      
  2830                                      ; Calcular el offset en el buffer
  2831 000013D7 B952000000                  mov rcx, column_cells + 2   ; ancho total de una línea incluyendo newline
  2832 000013DC 48F7E3                      mul rbx                     ; multiplicar por la fila central
  2833 000013DF 4801D8                      add rax, rbx                ; añadir el offset horizontal
  2834                                      
  2835                                      ; Escribir "NIVEL " en la posición calculada
  2836 000013E2 488DB8[400A0000]            lea rdi, [board + rax]
  2837 000013E9 48BE-                       mov rsi, level_msg
  2837 000013EB [A414000000000000] 
  2838 000013F3 B906000000                  mov rcx, level_msg_len
  2839 000013F8 F3A4                        rep movsb
  2840                                      
  2841                                      ; Escribir el número del nivel
  2842 000013FA 8A05(79150000)              mov al, [current_level]
  2843 00001400 0430                        add al, '0'                 ; convertir a ASCII
  2844 00001402 8807                        mov [rdi], al
  2845                                      
  2846                                      ; Mostrar el board con el mensaje
  2847                                      print board, board_size
    82 00001404 B801000000          <1>  mov eax, sys_write
    83 00001409 BF01000000          <1>  mov edi, 1
    84 0000140E 48BE-               <1>  mov rsi, %1
    84 00001410 [400A000000000000]  <1>
    85 00001418 BA400A0000          <1>  mov edx, %2
    86 0000141D 0F05                <1>  syscall
  2848                                      
  2849                                      ; Esperar un segundo
  2850 0000141F B823000000                  mov rax, sys_nanosleep
  2851 00001424 48BF-                       mov rdi, level_display_time
  2851 00001426 [AF14000000000000] 
  2852 0000142E 4831F6                      xor rsi, rsi
  2853 00001431 0F05                        syscall
  2854                                      
  2855 00001433 5D                          pop rbp
  2856 00001434 C3                          ret
  2857                                  
  2858                                  ; Función para inicializar un tablero vacío
  2859                                  init_empty_board:
  2860 00001435 56                          push rsi
  2861 00001436 57                          push rdi
  2862 00001437 51                          push rcx
  2863 00001438 50                          push rax
  2864                                  
  2865 00001439 488D35(00000000)            lea rsi, [board_template]   ; Copiar la plantilla del tablero
  2866 00001440 488D3D(400A0000)            lea rdi, [board]            ; Destino: el tablero actual
  2867 00001447 B9400A0000                  mov rcx, board_template_size
  2868 0000144C F3A4                        rep movsb                   ; Copiar el tablero
  2869                                  
  2870 0000144E 58                          pop rax
  2871 0000144F 59                          pop rcx
  2872 00001450 5F                          pop rdi
  2873 00001451 5E                          pop rsi
  2874 00001452 C3                          ret
  2875                                  
  2876                                  clear_enemies_from_board:
  2877                                  
  2878 00001453 55                          push rbp
  2879 00001454 4889E5                      mov rbp, rsp
  2880                                  
  2881 00001457 B9400A0000                  mov rcx, board_size   ; 32 filas * (80 chars + 2 newlines) ...
  2882 0000145C 488D35(400A0000)            lea rsi, [board]
  2883                                  .clear_loop:
  2884 00001463 803E40                      cmp byte [rsi], '@'
  2885 00001466 7411                        je .make_space
  2886 00001468 803E23                      cmp byte [rsi], '#'
  2887 0000146B 740C                        je .make_space
  2888 0000146D 803E24                      cmp byte [rsi], '$'
  2889 00001470 7407                        je .make_space
  2890 00001472 803E26                      cmp byte [rsi], '&'
  2891 00001475 7402                        je .make_space
  2892                                  
  2893 00001477 EB03                        jmp .next
  2894                                  
  2895                                  .make_space:
  2896 00001479 C60620                      mov byte [rsi], ' '
  2897                                  .next:
  2898 0000147C 48FFC6                      inc rsi
  2899 0000147F E2E2                        loop .clear_loop
  2900                                  
  2901 00001481 5D                          pop rbp
  2902 00001482 C3                          ret
  2903                                  
  2904                                  
  2905                                  
  2906                                  init_level:
  2907 00001483 E8CBFFFFFF                  call clear_enemies_from_board
  2908 00001488 E8AD060000                  call init_enemies
  2909 0000148D C605(22150000)00            mov byte [ball2_active], 0
  2910 00001494 C605(44150000)00            mov byte [ball3_active], 0
  2911 0000149B C605(09230000)00            mov byte [laser_power_active], 0
  2912 000014A2 E832F3FFFF                  call clear_lasers
  2913 000014A7 488B05(CF140000)            mov rax, [default_pallet_size]
  2914 000014AE 488905(C7140000)            mov [pallet_size], rax
  2915 000014B5 48C705(E3220000)07-         mov qword [ball_speed], 7    ; Restaurar velocidad normal
  2915 000014BD 000000             
  2916                                  
  2917                                      ; 1) Copiamos board_template en board para que quede "virgen"
  2918                                          ; Reiniciar letras activas
  2919 000014C0 488D3D(3C210000)            lea rdi, [letters_map]
  2920 000014C7 B990010000                  mov rcx, 100 * 4             ; Cada letra ocupa 4 bytes, limpiar 100 letras
  2921 000014CC 4831C0                      xor rax, rax
  2922 000014CF F3AA                        rep stosb                    ; Llenar con ceros
  2923                                      
  2924                                      ; Inicializar dirección de la bola (derecha y arriba)
  2925 000014D1 48C705(EF140000)01-         mov qword [ball_direction_x], 1    ; Dirección hacia la derecha (1 = derecha, -1 = izquierda)
  2925 000014D9 000000             
  2926 000014DC 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Dirección hacia arriba (-1 = arriba, 1 = abajo)
  2926 000014E4 FFFFFF             
  2927                                  
  2928                                      ; En init_level, después de inicializar las direcciones
  2929 000014E7 C605(FC220000)01            mov byte [catch_power_active], 1    ; Activar el poder catch
  2930 000014EE C605(FD220000)01            mov byte [ball_caught], 1           ; Marcar la bola como atrapada
  2931 000014F5 C605(FB220000)01            mov byte [initial_catch_active], 1  ; Marcar que es el catch inicial
  2932                                  
  2933                                      ; Calcular y guardar el offset inicial de la bola respecto a la paleta
  2934 000014FC 488B05(DF140000)            mov rax, [ball_x_pos]              ; Posición X actual de la bola
  2935 00001503 482B05(BF140000)            sub rax, [pallet_position]         ; Restar la posición de la paleta
  2936 0000150A 4805[400A0000]              add rax, board                     ; Ajustar por el offset del tablero
  2937 00001510 488905(00230000)            mov [ball_catch_offset], rax       ; Guardar el offset
  2938                                  
  2939                                  
  2940                                  
  2941                                      ; Reiniciar contador de letras activas
  2942 00001517 4831C0                      xor rax, rax
  2943 0000151A 8805(CC220000)              mov [letters_count], al
  2944                                  
  2945                                      ; Reiniciar última letra capturada
  2946 00001520 C605(CD220000)20            mov byte [last_letter], ' '
  2947 00001527 C605(46200000)00            mov byte [destroyed_blocks], 0 
  2948 0000152E E802FFFFFF                  call init_empty_board
  2949 00001533 E86CFEFFFF                  call display_level_number
  2950 00001538 E8FD050000                  call init_enemies
  2951                                      
  2952 0000153D 56                          push rsi
  2953 0000153E 57                          push rdi
  2954 0000153F 51                          push rcx
  2955 00001540 50                          push rax
  2956                                  
  2957 00001541 488D35(00000000)            lea rsi, [board_template]
  2958 00001548 488D3D(400A0000)            lea rdi, [board]
  2959 0000154F B9400A0000                  mov rcx, board_template_size
  2960 00001554 F3A4                        rep movsb                 ; Copiamos la plantilla a board
  2961                                  
  2962 00001556 58                          pop rax
  2963 00001557 59                          pop rcx
  2964 00001558 5F                          pop rdi
  2965 00001559 5E                          pop rsi
  2966                                  
  2967 0000155A B90A000000                  mov rcx, 10
  2968 0000155F 4831C0                      xor rax, rax
  2969 00001562 488D3D(E9200000)            lea rdi, [enemy_spawns_triggered]
  2970 00001569 F3AA                        rep stosb      
  2971                                  
  2972                                      ; Verificar el nivel actual y cargar los bloques correspondientes
  2973 0000156B 803D(79150000)01            cmp byte [current_level], 1
  2974 00001572 7431                        je .level1
  2975 00001574 803D(79150000)02            cmp byte [current_level], 2
  2976 0000157B 7454                        je .level2
  2977 0000157D 803D(79150000)03            cmp byte [current_level], 3
  2978 00001584 7477                        je .level3
  2979 00001586 803D(79150000)04            cmp byte [current_level], 4
  2980 0000158D 0F8492000000                je .level4
  2981 00001593 803D(79150000)05            cmp byte [current_level], 5
  2982 0000159A 0F84B0000000                je .level5
  2983 000015A0 E9D3000000                  jmp .done
  2984                                  
  2985                                  
  2986                                  
  2987                                      .level1:
  2988 000015A5 C605(7A150000)4E                mov byte [blocks_remaining], level1_blocks_count
  2989 000015AC 4831C9                          xor rcx, rcx             
  2990                                          .init_loop1:
  2991 000015AF 4883F94E                            cmp rcx, level1_blocks_count
  2992 000015B3 0F8DBF000000                        jge .done
  2993 000015B9 4889C8                              mov rax, rcx         
  2994 000015BC 486BC005                            imul rax, 5         ; en vez de shl rax,2
  2995 000015C0 8A90[7E150000]                      mov dl, byte [level1_blocks + rax + 3]  
  2996 000015C6 8891[761F0000]                      mov byte [block_states + rcx], dl
  2997 000015CC 48FFC1                              inc rcx
  2998 000015CF EBDE                                jmp .init_loop1
  2999                                  
  3000                                      .level2:
  3001 000015D1 C605(7A150000)5B                mov byte [blocks_remaining], level2_blocks_count
  3002 000015D8 4831C9                          xor rcx, rcx             
  3003                                          .init_loop2:
  3004 000015DB 4883F95B                            cmp rcx, level2_blocks_count
  3005 000015DF 0F8D93000000                        jge .done
  3006 000015E5 4889C8                              mov rax, rcx         
  3007 000015E8 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3008 000015EC 8A90[04170000]                      mov dl, byte [level2_blocks + rax + 3]  
  3009 000015F2 8891[761F0000]                      mov byte [block_states + rcx], dl
  3010 000015F8 48FFC1                              inc rcx
  3011 000015FB EBDE                                jmp .init_loop2
  3012                                      .level3:
  3013 000015FD C605(7A150000)40                mov byte [blocks_remaining], 64
  3014 00001604 4831C9                          xor rcx, rcx             
  3015                                          .init_loop3:
  3016 00001607 4883F968                            cmp rcx, level3_blocks_count
  3017 0000160B 7D6B                                jge .done
  3018 0000160D 4889C8                              mov rax, rcx         
  3019 00001610 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3020 00001614 8A90[CB180000]                      mov dl, byte [level3_blocks + rax + 3]  
  3021 0000161A 8891[761F0000]                      mov byte [block_states + rcx], dl
  3022 00001620 48FFC1                              inc rcx
  3023 00001623 EBE2                                jmp .init_loop3
  3024                                  
  3025                                      .level4:
  3026 00001625 C605(7A150000)8C                mov byte [blocks_remaining], level4_blocks_count
  3027 0000162C 4831C9                          xor rcx, rcx             
  3028                                          .init_loop4:
  3029 0000162F 4881F98C000000                      cmp rcx, level4_blocks_count
  3030 00001636 7D40                                jge .done
  3031 00001638 4889C8                              mov rax, rcx         
  3032 0000163B 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3033 0000163F 8A90[D31A0000]                      mov dl, byte [level4_blocks + rax + 3]  
  3034 00001645 8891[761F0000]                      mov byte [block_states + rcx], dl
  3035 0000164B 48FFC1                              inc rcx
  3036 0000164E EBDF                                jmp .init_loop4
  3037                                  
  3038                                      .level5:
  3039 00001650 C605(7A150000)62                mov byte [blocks_remaining], level5_blocks_count
  3040 00001657 4831C9                          xor rcx, rcx             
  3041                                          .init_loop5:
  3042 0000165A 4883F962                            cmp rcx, level5_blocks_count
  3043 0000165E 7D18                                jge .done
  3044 00001660 4889C8                              mov rax, rcx         
  3045 00001663 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3046 00001667 8A90[8F1D0000]                      mov dl, byte [level5_blocks + rax + 3]  
  3047 0000166D 8891[761F0000]                      mov byte [block_states + rcx], dl
  3048 00001673 48FFC1                              inc rcx
  3049 00001676 EBE2                                jmp .init_loop5
  3050                                      .done:
  3051 00001678 C3                              ret
  3052                                  
  3053                                  
  3054                                  ; Función para verificar y manejar la transición de nivel
  3055                                  check_level_complete:
  3056                                      ; Verificar si quedan bloques
  3057 00001679 803D(7A150000)00            cmp byte [blocks_remaining], 0
  3058 00001680 7551                        jne .not_complete
  3059                                      
  3060                                      ; Incrementar el nivel
  3061 00001682 FE05(79150000)              inc byte [current_level]
  3062                                      
  3063                                      ; Verificar si hemos completado todos los niveles
  3064 00001688 803D(79150000)06            cmp byte [current_level], 6
  3065 0000168F 7443                        je game_win
  3066                                      
  3067                                      ; Primero establecer las posiciones seguras
  3068 00001691 48C705(BF140000)-           mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  3068 00001698 [B0130000]         
  3069 0000169C 48C705(DF140000)28-         mov qword [ball_x_pos], 40
  3069 000016A4 000000             
  3070 000016A7 48C705(E7140000)1C-         mov qword [ball_y_pos], 28
  3070 000016AF 000000             
  3071 000016B2 C605(FF140000)00            mov byte [ball_moving], 0
  3072                                      
  3073                                      ; Asegurar que la bola esté en un estado seguro
  3074 000016B9 C605(FC220000)01            mov byte [catch_power_active], 1
  3075 000016C0 C605(FD220000)01            mov byte [ball_caught], 1
  3076 000016C7 C605(FB220000)01            mov byte [initial_catch_active], 1
  3077                                      
  3078                                      ; Reinicializar el juego para el siguiente nivel
  3079 000016CE E8B0FDFFFF                  call init_level
  3080                                      
  3081                                  .not_complete:
  3082 000016D3 C3                          ret
  3083                                  
  3084                                      ; Nueva función para manejar la victoria del juego
  3085                                  game_win:
  3086                                      ; Limpiar la pantalla primero
  3087                                      print clear, clear_length
    82 000016D4 B801000000          <1>  mov eax, sys_write
    83 000016D9 BF01000000          <1>  mov edi, 1
    84 000016DE 48BE-               <1>  mov rsi, %1
    84 000016E0 [1000000000000000]  <1>
    85 000016E8 BA07000000          <1>  mov edx, %2
    86 000016ED 0F05                <1>  syscall
  3088                                      
  3089                                      ; Mensaje de victoria
  3090 000016EF 488B05(3E200000)            mov rax, [current_score]    ; Obtener el puntaje final
  3091 000016F6 48BF-                       mov rdi, number_buffer      ; Convertir a string
  3091 000016F8 [4720000000000000] 
  3092 00001700 E8B4010000                  call number_to_string
  3093                                      
  3094                                      ; Definir mensaje de victoria
  3095                                      section .data
  3096 0000246F C2A146656C69636964-             win_msg: db "¡Felicidades! ¡Has ganado!", 0xA, 0xD
  3096 00002478 616465732120C2A148-
  3096 00002481 61732067616E61646F-
  3096 0000248A 210A0D             
  3097                                          win_msg_len: equ $ - win_msg
  3098 0000248D 50756E74616A652066-             score_msg: db "Puntaje final: "
  3098 00002496 696E616C3A20       
  3099                                          score_msg_len: equ $ - score_msg
  3100                                      section .text
  3101                                      
  3102                                      ; Imprimir mensajes
  3103                                      print win_msg, win_msg_len
    82 00001705 B801000000          <1>  mov eax, sys_write
    83 0000170A BF01000000          <1>  mov edi, 1
    84 0000170F 48BE-               <1>  mov rsi, %1
    84 00001711 [6F24000000000000]  <1>
    85 00001719 BA1E000000          <1>  mov edx, %2
    86 0000171E 0F05                <1>  syscall
  3104                                      print score_msg, score_msg_len
    82 00001720 B801000000          <1>  mov eax, sys_write
    83 00001725 BF01000000          <1>  mov edi, 1
    84 0000172A 48BE-               <1>  mov rsi, %1
    84 0000172C [8D24000000000000]  <1>
    85 00001734 BA0F000000          <1>  mov edx, %2
    86 00001739 0F05                <1>  syscall
  3105                                      print number_buffer, 20
    82 0000173B B801000000          <1>  mov eax, sys_write
    83 00001740 BF01000000          <1>  mov edi, 1
    84 00001745 48BE-               <1>  mov rsi, %1
    84 00001747 [4720000000000000]  <1>
    85 0000174F BA14000000          <1>  mov edx, %2
    86 00001754 0F05                <1>  syscall
  3106                                      
  3107                                      ; Esperar un momento antes de salir
  3108 00001756 48C7059FE8FFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  3108 0000175F 0000               
  3109 00001761 48C7059CE8FFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  3109 0000176A 0000               
  3110                                      sleeptime
    98 0000176C B823000000          <1>  mov eax, sys_nanosleep
    99 00001771 48BF-               <1>  mov rdi, timespec
    99 00001773 [0000000000000000]  <1>
   100 0000177B 31F6                <1>  xor esi, esi
   101 0000177D 0F05                <1>  syscall
  3111                                      
  3112 0000177F E9520B0000                  jmp exit
  3113                                  
  3114                                  ; Función para imprimir los bloques
  3115                                  ; Función modificada para imprimir bloques
  3116                                  
  3117                                  ; Primero, agreguemos una función para obtener el puntero a los bloques del nivel actual
  3118                                  get_current_level_blocks:
  3119 00001784 803D(79150000)01            cmp byte [current_level], 1
  3120 0000178B 7428                        je .level1
  3121 0000178D 803D(79150000)02            cmp byte [current_level], 2
  3122 00001794 7427                        je .level2
  3123 00001796 803D(79150000)03            cmp byte [current_level], 3
  3124 0000179D 7426                        je .level3
  3125 0000179F 803D(79150000)04            cmp byte [current_level], 4
  3126 000017A6 7425                        je .level4
  3127 000017A8 803D(79150000)05            cmp byte [current_level], 5
  3128 000017AF 7424                        je .level5
  3129                                      ; Si llegamos aquí, hay un error en el nivel
  3130 000017B1 4831C0                      xor rax, rax
  3131 000017B4 C3                          ret
  3132                                  
  3133                                      .level1:
  3134 000017B5 488D05(7B150000)                lea rax, [level1_blocks]
  3135 000017BC C3                              ret
  3136                                      .level2:
  3137 000017BD 488D05(01170000)                lea rax, [level2_blocks]
  3138 000017C4 C3                              ret
  3139                                      .level3:
  3140 000017C5 488D05(C8180000)                lea rax, [level3_blocks]
  3141 000017CC C3                              ret
  3142                                      .level4:
  3143 000017CD 488D05(D01A0000)                lea rax, [level4_blocks]
  3144 000017D4 C3                              ret
  3145                                      .level5:
  3146 000017D5 488D05(8C1D0000)                lea rax, [level5_blocks]
  3147 000017DC C3                              ret
  3148                                  ; Función para obtener la cantidad de bloques del nivel actual
  3149                                  get_current_level_count:
  3150 000017DD 803D(79150000)01            cmp byte [current_level], 1
  3151 000017E4 7428                        je .level1
  3152 000017E6 803D(79150000)02            cmp byte [current_level], 2
  3153 000017ED 7425                        je .level2
  3154 000017EF 803D(79150000)03            cmp byte [current_level], 3
  3155 000017F6 7422                        je .level3
  3156 000017F8 803D(79150000)04            cmp byte [current_level], 4
  3157 000017FF 741F                        je .level4
  3158 00001801 803D(79150000)05            cmp byte [current_level], 5
  3159 00001808 741C                        je .level5
  3160                                      ; Si llegamos aquí, hay un error en el nivel
  3161 0000180A 4831C0                      xor rax, rax
  3162 0000180D C3                          ret
  3163                                  
  3164                                      .level1:
  3165 0000180E B84E000000                      mov rax, level1_blocks_count
  3166 00001813 C3                              ret
  3167                                      .level2:
  3168 00001814 B85B000000                      mov rax, level2_blocks_count
  3169 00001819 C3                              ret
  3170                                      .level3:
  3171 0000181A B868000000                      mov rax, level3_blocks_count
  3172 0000181F C3                              ret
  3173                                      .level4:
  3174 00001820 B88C000000                      mov rax, level4_blocks_count
  3175 00001825 C3                              ret
  3176                                      .level5:
  3177 00001826 B862000000                      mov rax, level5_blocks_count
  3178 0000182B C3                              ret
  3179                                  
  3180                                  
  3181                                  print_blocks:
  3182 0000182C 55                          push rbp
  3183 0000182D 4889E5                      mov rbp, rsp
  3184                                      
  3185                                      ; Obtener puntero a los bloques del nivel actual
  3186 00001830 E84FFFFFFF                  call get_current_level_blocks
  3187 00001835 4989C5                      mov r13, rax                  ; Guardar puntero a los bloques en r13
  3188                                      
  3189                                      ; Obtener cantidad de bloques del nivel actual
  3190 00001838 E8A0FFFFFF                  call get_current_level_count
  3191 0000183D 4989C6                      mov r14, rax                  ; Guardar cantidad de bloques en r14
  3192                                      
  3193 00001840 4D31E4                      xor r12, r12                  ; Índice del bloque actual
  3194                                      
  3195                                      .print_loop:
  3196 00001843 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
  3197 00001846 7D6F                            jge .end
  3198                                          
  3199                                          ; Verificar si el bloque está activo
  3200 00001848 490FB68424-                     movzx rax, byte [block_states + r12]
  3200 0000184D [761F0000]         
  3201 00001851 4885C0                          test rax, rax
  3202 00001854 745C                            jz .next_block
  3203                                          
  3204                                          ; Obtener posición y tipo del bloque usando r13
  3205 00001856 4C89E0                          mov rax, r12
  3206 00001859 486BC005                        imul rax, 5
  3207 0000185D 4C01E8                          add rax, r13
  3208 00001860 448A00                          mov r8b, [rax]        ; X position
  3209 00001863 448A4801                        mov r9b, [rax + 1]    ; Y position
  3210 00001867 448A5002                        mov r10b, [rax + 2]   ; Tipo de bloque
  3211                                  
  3212                                          ; El resto de la lógica de impresión permanece igual
  3213 0000186B 4D0FB6C0                        movzx r8, r8b
  3214 0000186F 4D0FB6C9                        movzx r9, r9b
  3215 00001873 4981C0[400A0000]                add r8, board
  3216 0000187A B852000000                      mov rax, column_cells + 2
  3217 0000187F 49F7E1                          mul r9
  3218 00001882 4901C0                          add r8, rax
  3219                                          
  3220 00001885 B906000000                      mov rcx, block_length
  3221 0000188A 48BE-                           mov rsi, block_type_1
  3221 0000188C [5515000000000000] 
  3222 00001894 490FB6C2                        movzx rax, r10b
  3223 00001898 48FFC8                          dec rax
  3224 0000189B 486BC006                        imul rax, block_length
  3225 0000189F 4801C6                          add rsi, rax
  3226                                          
  3227                                      .print_block_chars:
  3228 000018A2 8A06                            mov al, [rsi]
  3229 000018A4 418800                          mov [r8], al
  3230 000018A7 48FFC6                          inc rsi
  3231 000018AA 49FFC0                          inc r8
  3232 000018AD 48FFC9                          dec rcx
  3233 000018B0 75F0                            jnz .print_block_chars
  3234                                          
  3235                                      .next_block:
  3236 000018B2 49FFC4                          inc r12
  3237 000018B5 EB8C                            jmp .print_loop
  3238                                          
  3239                                      .end:
  3240 000018B7 5D                              pop rbp
  3241 000018B8 C3                              ret
  3242                                  
  3243                                  ; Función para convertir número a string
  3244                                  ; Input: RAX = número a convertir
  3245                                  ; RDI = buffer donde escribir el string
  3246                                  number_to_string:
  3247 000018B9 53                          push rbx
  3248 000018BA 52                          push rdx
  3249 000018BB 56                          push rsi
  3250 000018BC BB0A000000                  mov rbx, 10          ; Divisor
  3251 000018C1 B900000000                  mov rcx, 0          ; Contador de dígitos
  3252                                      
  3253                                      ; Si el número es 0, manejarlo especialmente
  3254 000018C6 4885C0                      test rax, rax
  3255 000018C9 7509                        jnz .convert_loop
  3256 000018CB C60730                      mov byte [rdi], '0'
  3257 000018CE C6470100                    mov byte [rdi + 1], 0
  3258 000018D2 EB20                        jmp .end
  3259                                      
  3260                                      .convert_loop:
  3261 000018D4 4831D2                          xor rdx, rdx    ; Limpiar RDX para la división
  3262 000018D7 48F7F3                          div rbx         ; RAX/10, cociente en RAX, residuo en RDX
  3263 000018DA 80C230                          add dl, '0'     ; Convertir a ASCII
  3264 000018DD 52                              push rdx        ; Guardar el dígito
  3265 000018DE 48FFC1                          inc rcx         ; Incrementar contador
  3266 000018E1 4885C0                          test rax, rax   ; Verificar si quedan más dígitos
  3267 000018E4 75EE                            jnz .convert_loop
  3268                                          
  3269                                      .write_loop:
  3270 000018E6 5A                              pop rdx         ; Obtener dígito
  3271 000018E7 8817                            mov [rdi], dl   ; Escribir al buffer
  3272 000018E9 48FFC7                          inc rdi         ; Siguiente posición
  3273 000018EC 48FFC9                          dec rcx         ; Decrementar contador
  3274 000018EF 75F5                            jnz .write_loop
  3275                                          
  3276 000018F1 C60700                      mov byte [rdi], 0   ; Null terminator
  3277                                      
  3278                                      .end:
  3279 000018F4 5E                          pop rsi
  3280 000018F5 5A                          pop rdx
  3281 000018F6 5B                          pop rbx
  3282 000018F7 C3                          ret
  3283                                  
  3284                                  ; Función para imprimir los labels
  3285                                  print_labels:
  3286 000018F8 55                          push rbp
  3287 000018F9 4889E5                      mov rbp, rsp
  3288                                  
  3289                                      ; Crear buffer temporal
  3290 000018FC 4883EC20                    sub rsp, 32
  3291                                  
  3292                                      ; Copiar labels a buffer temporal
  3293 00001900 4889E7                      mov rdi, rsp
  3294 00001903 488D35(F3200000)            lea rsi, [score_label]
  3295 0000190A B917000000                  mov rcx, score_label_len
  3296 0000190F F3A4                        rep movsb
  3297                                  
  3298                                      ; Convertir score a string
  3299 00001911 488B05(3E200000)            mov rax, [current_score]
  3300 00001918 48BF-                       mov rdi, number_buffer
  3300 0000191A [4720000000000000] 
  3301 00001922 E892FFFFFF                  call number_to_string
  3302                                  
  3303                                      ; Calcular longitud del número
  3304 00001927 B900000000                  mov rcx, 0
  3305 0000192C 48BF-                       mov rdi, number_buffer
  3305 0000192E [4720000000000000] 
  3306                                      .count_loop:
  3307 00001936 803C0F00                        cmp byte [rdi + rcx], 0
  3308 0000193A 7405                            je .count_done
  3309 0000193C 48FFC1                          inc rcx
  3310 0000193F EBF5                            jmp .count_loop
  3311                                      .count_done:
  3312                                  
  3313                                      ; Insertar el número en la posición correcta, alineado a la derecha
  3314 00001941 4889E7                      mov rdi, rsp
  3315 00001944 4883C70A                    add rdi, score_pos           ; Moverse a la posición del número
  3316 00001948 BE0A000000                  mov rsi, 10                  ; Espacio reservado para el número
  3317 0000194D 4829CE                      sub rsi, rcx                 ; Calcular padding necesario
  3318                                      .pad_loop:
  3319 00001950 4885F6                          test rsi, rsi
  3320 00001953 740B                            jz .pad_done
  3321 00001955 C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  3322 00001958 48FFC7                          inc rdi
  3323 0000195B 48FFCE                          dec rsi
  3324 0000195E EBF0                            jmp .pad_loop
  3325                                      .pad_done:
  3326                                  
  3327                                      ; Copiar el número
  3328 00001960 48BE-                       mov rsi, number_buffer
  3328 00001962 [4720000000000000] 
  3329 0000196A F3A4                        rep movsb
  3330                                  
  3331                                      ; Imprimir el buffer completo
  3332                                      print rsp, score_label_len
    82 0000196C B801000000          <1>  mov eax, sys_write
    83 00001971 BF01000000          <1>  mov edi, 1
    84 00001976 4889E6              <1>  mov rsi, %1
    85 00001979 BA17000000          <1>  mov edx, %2
    86 0000197E 0F05                <1>  syscall
  3333                                  
  3334                                      ; Repetir proceso para bloques destruidos
  3335 00001980 4889E7                      mov rdi, rsp
  3336 00001983 488D35(0A210000)            lea rsi, [blocks_label]
  3337 0000198A B91B000000                  mov rcx, blocks_label_len
  3338 0000198F F3A4                        rep movsb
  3339                                  
  3340                                      ; Verificar que el `[` esté en su posición correcta
  3341 00001991 4889E7                      mov rdi, rsp
  3342 00001994 4883C713                    add rdi, blocks_pos - 1  ; Posición exacta donde debe ir el '['
  3343 00001998 C6075B                      mov byte [rdi], '['      ; Garantizar que el `[` esté presente
  3344                                  
  3345                                      ; Convertir bloques destruidos a string
  3346 0000199B 480FB605(46200000)          movzx rax, byte [destroyed_blocks]
  3347 000019A3 48BF-                       mov rdi, number_buffer
  3347 000019A5 [4720000000000000] 
  3348 000019AD E807FFFFFF                  call number_to_string
  3349                                  
  3350                                      ; Calcular longitud del número
  3351 000019B2 B900000000                  mov rcx, 0
  3352 000019B7 48BF-                       mov rdi, number_buffer
  3352 000019B9 [4720000000000000] 
  3353                                      .count_loop2:
  3354 000019C1 803C0F00                        cmp byte [rdi + rcx], 0
  3355 000019C5 7405                            je .count_done2
  3356 000019C7 48FFC1                          inc rcx
  3357 000019CA EBF5                            jmp .count_loop2
  3358                                      .count_done2:
  3359                                  
  3360                                      ; Insertar el número en la posición correcta, alineado a la derecha
  3361 000019CC 4889E7                      mov rdi, rsp
  3362 000019CF 4883C714                    add rdi, blocks_pos         ; Moverse a la posición del número
  3363 000019D3 BE03000000                  mov rsi, 3                  ; Espacio reservado para el número
  3364 000019D8 4829CE                      sub rsi, rcx                ; Calcular padding necesario
  3365                                      .pad_loop2:
  3366 000019DB 4885F6                          test rsi, rsi
  3367 000019DE 740B                            jz .pad_done2
  3368 000019E0 C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  3369 000019E3 48FFC7                          inc rdi
  3370 000019E6 48FFCE                          dec rsi
  3371 000019E9 EBF0                            jmp .pad_loop2
  3372                                      .pad_done2:
  3373                                  
  3374                                      ; Copiar el número
  3375 000019EB 48BE-                       mov rsi, number_buffer
  3375 000019ED [4720000000000000] 
  3376 000019F5 F3A4                        rep movsb
  3377                                  
  3378                                      ; Imprimir el buffer completo
  3379                                      print rsp, blocks_label_len
    82 000019F7 B801000000          <1>  mov eax, sys_write
    83 000019FC BF01000000          <1>  mov edi, 1
    84 00001A01 4889E6              <1>  mov rsi, %1
    85 00001A04 BA1B000000          <1>  mov edx, %2
    86 00001A09 0F05                <1>  syscall
  3380                                  
  3381                                      ; Restaurar stack
  3382 00001A0B 4883C420                    add rsp, 32
  3383 00001A0F 5D                          pop rbp
  3384 00001A10 C3                          ret
  3385                                  
  3386                                  
  3387                                  
  3388                                  check_block_collision:
  3389 00001A11 55                          push rbp
  3390 00001A12 4889E5                      mov rbp, rsp
  3391                                  
  3392                                      ; Almacenar el carácter en la posición r10 (pos. de la bola en board[])
  3393 00001A15 418A02                      mov al, [r10]
  3394                                  
  3395                                      ; Verificar si el carácter es un bloque
  3396 00001A18 3C55                        cmp al, 'U'  
  3397 00001A1A 7419                        je .possible
  3398 00001A1C 3C4F                        cmp al, 'O'  
  3399 00001A1E 7415                        je .possible
  3400 00001A20 3C44                        cmp al, 'D'  
  3401 00001A22 7411                        je .possible
  3402 00001A24 3C4C                        cmp al, 'L'  
  3403 00001A26 740D                        je .possible
  3404 00001A28 3C56                        cmp al, 'V'  
  3405 00001A2A 7409                        je .possible
  3406 00001A2C 3C38                        cmp al, '8'  
  3407 00001A2E 7405                        je .possible
  3408                                  
  3409                                      ; No es bloque, salir
  3410 00001A30 4831C0                      xor rax, rax
  3411 00001A33 5D                          pop rbp
  3412 00001A34 C3                          ret
  3413                                  
  3414                                  .possible:
  3415 00001A35 53                          push rbx
  3416 00001A36 57                          push rdi
  3417 00001A37 56                          push rsi
  3418 00001A38 4154                        push r12
  3419 00001A3A 4155                        push r13
  3420 00001A3C 4156                        push r14
  3421 00001A3E 4157                        push r15
  3422                                  
  3423                                      ; 1) Obtener base de los bloques del nivel actual
  3424 00001A40 E83FFDFFFF                  call get_current_level_blocks
  3425 00001A45 4989C5                      mov r13, rax  ; (r13) = base de levelX_blocks
  3426                                  
  3427                                      ; 2) Obtener la cantidad de bloques
  3428 00001A48 E890FDFFFF                  call get_current_level_count
  3429 00001A4D 4989C6                      mov r14, rax
  3430                                  
  3431 00001A50 4D31E4                      xor r12, r12  ; Índice del bloque actual
  3432                                  
  3433                                  .find_block_loop:
  3434 00001A53 4D39F4                      cmp r12, r14
  3435 00001A56 0F8DCE000000                jge .no_block_found  ; Se acabaron los bloques
  3436                                  
  3437                                      ; Calcular puntero base del bloque actual en levelX_blocks
  3438 00001A5C 4C89E0                      mov rax, r12
  3439 00001A5F 486BC005                    imul rax, 5            ; (x, y, tipo, durabilidad_inicial, letra)
  3440 00001A63 4C01E8                      add rax, r13
  3441 00001A66 4989C7                      mov r15, rax           ; r15 apunta a los datos del bloque actual
  3442                                  
  3443                                      ; --- Aquí la diferencia: la durabilidad no la leemos de [r15+3], sino de block_states[r12]
  3444 00001A69 490FB69C24-                 movzx rbx, byte [block_states + r12]  ; Durabilidad "viva" en block_states
  3444 00001A6E [761F0000]         
  3445 00001A72 4885DB                      test rbx, rbx
  3446 00001A75 0F84A7000000                jz .next_block  ; si durabilidad=0 => bloque destruido => ignorar
  3447                                  
  3448                                      ; Obtener coordenadas
  3449 00001A7B 418A17                      mov dl, [r15]         ; x
  3450 00001A7E 418A4F01                    mov cl, [r15 + 1]     ; y
  3451                                  
  3452                                      ; Calcular posición en el board
  3453 00001A82 488D3D(400A0000)            lea rdi, [board]
  3454 00001A89 4831C0                      xor rax, rax
  3455 00001A8C B850000000                  mov rax, column_cells
  3456 00001A91 4883C002                    add rax, 2
  3457 00001A95 480FB6C9                    movzx rcx, cl         ; y
  3458 00001A99 480FAFC1                    imul rax, rcx
  3459 00001A9D 4801C7                      add rdi, rax
  3460 00001AA0 480FB6C2                    movzx rax, dl         ; x
  3461 00001AA4 4801C7                      add rdi, rax
  3462                                  
  3463                                      ; Guardar la posición base del bloque
  3464 00001AA7 57                          push rdi
  3465                                  
  3466                                      ; Verificar si la bola (r10) está dentro de [rdi .. rdi+block_length)
  3467 00001AA8 4939FA                      cmp r10, rdi
  3468 00001AAB 7274                        jb .skip_collision
  3469 00001AAD 488D5F06                    lea rbx, [rdi + block_length]
  3470 00001AB1 4939DA                      cmp r10, rbx
  3471 00001AB4 736B                        jae .skip_collision
  3472                                  
  3473                                      ; ------- Hay colisión, reducir durabilidad en block_states
  3474 00001AB6 41FE8C24[761F0000]          dec byte [block_states + r12]
  3475                                      ; Volver a cargar durabilidad
  3476 00001ABE 490FB69C24-                 movzx rbx, byte [block_states + r12]
  3476 00001AC3 [761F0000]         
  3477 00001AC7 4885DB                      test rbx, rbx
  3478 00001ACA 754D                        jnz .update_display  ; si no llegó a 0 => solo "golpeado"
  3479                                  
  3480                                      ; >>> Llegó a 0 => Bloque destruido
  3481 00001ACC 5F                          pop rdi  ; recuperar puntero base del bloque en board
  3482 00001ACD B906000000                  mov rcx, block_length
  3483                                  .clear_loop:
  3484 00001AD2 C60720                      mov byte [rdi], ' '
  3485 00001AD5 48FFC7                      inc rdi
  3486 00001AD8 E2F8                        loop .clear_loop
  3487                                  
  3488                                      ; Dibujar letra del bloque destruido
  3489 00001ADA 418A4704                    mov al, [r15 + 4]  ; Obtener la letra asociada
  3490 00001ADE 4883EF06                    sub rdi, block_length
  3491 00001AE2 8807                        mov [rdi], al      ; Escribir la letra en la posición inicial
  3492                                      ; Después de escribir la letra en el tablero
  3493 00001AE4 418A4704                    mov al, [r15 + 4]      ; Obtener la letra
  3494 00001AE8 4D0FB607                    movzx r8, byte [r15]   ; Posición x del bloque
  3495 00001AEC 4D0FB64F01                  movzx r9, byte [r15 + 1] ; Posición y del bloque
  3496 00001AF1 E873E9FFFF                  call register_letter
  3497                                      ; Actualizar contadores globales
  3498 00001AF6 FE0D(7A150000)              dec byte [blocks_remaining]
  3499 00001AFC FE05(46200000)              inc byte [destroyed_blocks]
  3500                                  
  3501                                      ; Sumar puntos según el tipo
  3502 00001B02 490FB64702                  movzx rax, byte [r15 + 2]  ; tipo del bloque original
  3503 00001B07 486BC00A                    imul rax, 10
  3504 00001B0B 480105(3E200000)            add [current_score], rax
  3505                                  
  3506 00001B12 B801000000                  mov rax, 1  ; colisión con destrucción
  3507 00001B17 EB14                        jmp .end_pop
  3508                                  
  3509                                  .update_display:
  3510                                      ; => durabilidad >0, se podría actualizar el "look" del bloque
  3511 00001B19 B801000000                  mov rax, 1  ; colisión con "rebote"  
  3512 00001B1E 5F                          pop rdi     ; pop que quedó pendiente
  3513 00001B1F EB0C                        jmp .end_pop
  3514                                  
  3515                                  .skip_collision:
  3516 00001B21 5F                          pop rdi     ; si no hubo colisión, quita de la pila
  3517                                  .next_block:
  3518 00001B22 49FFC4                      inc r12
  3519 00001B25 E929FFFFFF                  jmp .find_block_loop
  3520                                  
  3521                                  .no_block_found:
  3522 00001B2A 4831C0                      xor rax, rax  ; 0 => no hubo colisión
  3523                                  
  3524                                  .end_pop:
  3525 00001B2D 415F                        pop r15
  3526 00001B2F 415E                        pop r14
  3527 00001B31 415D                        pop r13
  3528 00001B33 415C                        pop r12
  3529 00001B35 5E                          pop rsi
  3530 00001B36 5F                          pop rdi
  3531 00001B37 5B                          pop rbx
  3532 00001B38 5D                          pop rbp
  3533 00001B39 C3                          ret
  3534                                  
  3535                                  
  3536                                  
  3537                                  init_enemies:
  3538 00001B3A 55                          push rbp
  3539 00001B3B 4889E5                      mov rbp, rsp
  3540                                      ; Reiniciar contadores de movimiento
  3541 00001B3E C605(89200000)00            mov byte [enemy_move_total], 0
  3542 00001B45 C605(8A200000)00            mov byte [enemy_target], 0 ; Inicialmente persigue la bola
  3543                                      ; Limpiar estado previo de enemigos
  3544 00001B4C B90A000000                  mov rcx, 10 ; Máximo 10 enemigos
  3545 00001B51 488D3D(60200000)            lea rdi, [enemies]
  3546 00001B58 30C0                        xor al, al
  3547 00001B5A F3AA                        rep stosb ; Limpiar datos de enemigos
  3548                                      
  3549                                      ; Marcar todos los enemigos como inactivos
  3550 00001B5C 488D3D(E9200000)            lea rdi, [enemy_spawns_triggered]
  3551 00001B63 30C0                        xor al, al
  3552 00001B65 B90A000000                  mov rcx, 10
  3553 00001B6A F3AA                        rep stosb ; Todos los enemigos no han sido activados aún
  3554                                  
  3555 00001B6C 5D                          pop rbp
  3556 00001B6D C3                          ret
  3557                                  
  3558                                  
  3559                                  random_move_enemy:
  3560 00001B6E 55                          push rbp
  3561 00001B6F 4889E5                      mov  rbp, rsp
  3562 00001B72 53                          push rbx
  3563 00001B73 52                          push rdx
  3564 00001B74 57                          push rdi
  3565                                  
  3566                                      ; r12 = índice del enemigo
  3567                                      ; 1) obtener puntero al enemigo i
  3568 00001B75 4C89E0                      mov rax, r12
  3569 00001B78 486BC003                    imul rax, 3
  3570 00001B7C 488D98[60200000]            lea rbx, [enemies + rax]     ; rbx => &enemies[r12]
  3571                                  
  3572                                      ; 2) Cargar X, Y actuales (NO SE BORRA AQUÍ TODAVÍA)
  3573 00001B83 4C0FB603                    movzx r8, byte [rbx]         ; r8 = X actual
  3574 00001B87 4C0FB64B01                  movzx r9, byte [rbx + 1]     ; r9 = Y actual
  3575                                  
  3576                                      ; 3) Generar "movimiento aleatorio" => tomamos [enemy_move_counter] & 3
  3577 00001B8C 480FB605(87200000)          movzx rax, byte [enemy_move_counter]
  3578 00001B94 4883E003                    and rax, 3
  3579                                  
  3580 00001B98 4883F800                    cmp rax, 0
  3581 00001B9C 741B                        je .try_left
  3582 00001B9E 4883F801                    cmp rax, 1
  3583 00001BA2 7410                        je .try_right
  3584 00001BA4 4883F802                    cmp rax, 2
  3585 00001BA8 7405                        je .try_up
  3586                                      ; si es 3 => mover abajo
  3587                                  .try_down:
  3588 00001BAA 49FFC1                      inc r9
  3589 00001BAD EB0D                        jmp .check_valid
  3590                                  
  3591                                  .try_up:
  3592 00001BAF 49FFC9                      dec r9
  3593 00001BB2 EB08                        jmp .check_valid
  3594                                  
  3595                                  .try_right:
  3596 00001BB4 49FFC0                      inc r8
  3597 00001BB7 EB03                        jmp .check_valid
  3598                                  
  3599                                  .try_left:
  3600 00001BB9 49FFC8                      dec r8
  3601                                  
  3602                                  .check_valid:
  3603                                      ; 4) Verificar límites
  3604 00001BBC 4983F801                    cmp r8, 1                    
  3605 00001BC0 0F8EA4000000                jle .invalid_move
  3606 00001BC6 4983F850                    cmp r8, column_cells        
  3607 00001BCA 0F8D9A000000                jge .invalid_move
  3608 00001BD0 4983F901                    cmp r9, 1                    
  3609 00001BD4 0F8E90000000                jle .invalid_move
  3610 00001BDA 4983F920                    cmp r9, row_cells          
  3611 00001BDE 0F8D86000000                jge .invalid_move
  3612                                  
  3613                                      ; 5) Verificar colisión con bloques/enemigos
  3614 00001BE4 4150                        push r8
  3615 00001BE6 4151                        push r9
  3616 00001BE8 B850000000                  mov rax, column_cells
  3617 00001BED 4883C002                    add rax, 2
  3618 00001BF1 49F7E1                      mul r9
  3619 00001BF4 4C01C0                      add rax, r8
  3620 00001BF7 488DB8[400A0000]            lea rdi, [board + rax]
  3621 00001BFE 8A07                        mov al, [rdi]
  3622                                  
  3623                                      ; Revisa si es bloque o borde
  3624 00001C00 3C55                        cmp al, 'U'
  3625 00001C02 7462                        je .pop_and_invalid
  3626 00001C04 3C4F                        cmp al, 'O'
  3627 00001C06 745E                        je .pop_and_invalid
  3628 00001C08 3C44                        cmp al, 'D'
  3629 00001C0A 745A                        je .pop_and_invalid
  3630 00001C0C 3C4C                        cmp al, 'L'
  3631 00001C0E 7456                        je .pop_and_invalid
  3632 00001C10 3C56                        cmp al, 'V'
  3633 00001C12 7452                        je .pop_and_invalid
  3634 00001C14 3C38                        cmp al, '8'
  3635 00001C16 744E                        je .pop_and_invalid
  3636 00001C18 3C58                        cmp al, 'X'
  3637 00001C1A 744A                        je .pop_and_invalid
  3638                                  
  3639                                      ; Revisa si hay enemigo
  3640 00001C1C 3C40                        cmp al, '@'
  3641 00001C1E 7446                        je .pop_and_invalid
  3642 00001C20 3C23                        cmp al, '#'
  3643 00001C22 7442                        je .pop_and_invalid
  3644 00001C24 3C24                        cmp al, '$'
  3645 00001C26 743E                        je .pop_and_invalid
  3646 00001C28 3C26                        cmp al, '&'
  3647 00001C2A 743A                        je .pop_and_invalid
  3648                                  
  3649 00001C2C E8A0020000                  call check_enemy_at_position
  3650 00001C31 4883F801                    cmp rax, 1
  3651 00001C35 742F                        je .pop_and_invalid
  3652                                  
  3653                                      ; ------------------------------
  3654                                      ; SI LLEGAMOS AQUI => POSICIÓN NUEVA ES VÁLIDA
  3655                                      ; AHORA SÍ BORRAMOS LA POSICIÓN ANTIGUA:
  3656                                      ; ------------------------------
  3657 00001C37 4159                        pop r9
  3658 00001C39 4158                        pop r8
  3659                                  
  3660                                      ; (A) Borrar la posición antigua en el board
  3661                                      ;    (X,Y) originales estaban en [rbx], [rbx+1].
  3662 00001C3B 4C0FB613                    movzx r10, byte [rbx]   ; oldX
  3663 00001C3F 4C0FB65B01                  movzx r11, byte [rbx+1] ; oldY
  3664 00001C44 B850000000                  mov rax, column_cells
  3665 00001C49 4883C002                    add rax, 2
  3666 00001C4D 49F7E3                      mul r11
  3667 00001C50 4C01D0                      add rax, r10
  3668 00001C53 488DB8[400A0000]            lea rdi, [board + rax]
  3669 00001C5A C60720                      mov byte [rdi], ' '     ; BORRA la posición vieja
  3670                                  
  3671                                      ; (B) Guardar la nueva X,Y en la estructura
  3672 00001C5D 448803                      mov byte [rbx], r8b
  3673 00001C60 44884B01                    mov byte [rbx + 1], r9b
  3674                                  
  3675 00001C64 EB0D                        jmp .done
  3676                                  
  3677                                  .pop_and_invalid:
  3678 00001C66 4159                        pop r9
  3679 00001C68 4158                        pop r8
  3680                                  
  3681                                  .invalid_move:
  3682                                      ; Restablecer la posición X,Y en [rbx], [rbx+1] (no se borró la vieja)
  3683 00001C6A 4C0FB603                    movzx r8, byte [rbx]
  3684 00001C6E 4C0FB64B01                  movzx r9, byte [rbx + 1]
  3685                                      ; Se queda donde estaba
  3686                                  .done:
  3687 00001C73 5F                          pop rdi
  3688 00001C74 5A                          pop rdx
  3689 00001C75 5B                          pop rbx
  3690 00001C76 5D                          pop rbp
  3691 00001C77 C3                          ret
  3692                                  
  3693                                  
  3694                                  ; Función para mover enemigos
  3695                                  move_enemies:
  3696 00001C78 55                          push rbp
  3697 00001C79 4889E5                      mov rbp, rsp
  3698                                      
  3699                                      ; Incrementar contador de movimiento
  3700 00001C7C FE05(87200000)              inc byte [enemy_move_counter]
  3701 00001C82 480FB605(87200000)          movzx rax, byte [enemy_move_counter]
  3702 00001C8A 3A05(88200000)              cmp al, [enemy_move_delay]
  3703 00001C90 0F8539020000                jne .end
  3704                                      
  3705                                      ; Resetear contador
  3706 00001C96 C605(87200000)00            mov byte [enemy_move_counter], 0
  3707                                      
  3708 00001C9D 4D31E4                      xor r12, r12                    ; Índice del enemigo
  3709                                      
  3710                                      .enemy_loop:
  3711 00001CA0 4983FC0A                        cmp r12, 10                     ; Máximo 10 enemigos
  3712 00001CA4 0F8D25020000                    jge .end
  3713                                          
  3714                                          ; Calcular offset del enemigo actual
  3715 00001CAA 4C89E0                          mov rax, r12
  3716 00001CAD 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  3717 00001CB1 488DB0[60200000]                lea rsi, [enemies + rax]
  3718                                          
  3719                                          ; Verificar si el enemigo está activo
  3720 00001CB8 807E0201                        cmp byte [rsi + 2], 1
  3721 00001CBC 0F8505020000                    jne .next_enemy
  3722                                          
  3723                                          ; Obtener posición actual
  3724 00001CC2 4C0FB606                        movzx r8, byte [rsi]            ; X
  3725 00001CC6 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  3726                                          
  3727 00001CCB 488D3D(40240000)                lea rdi, [enemy_last_x]
  3728 00001CD2 4C01E7                          add rdi, r12
  3729 00001CD5 8A07                            mov al, [rdi]             ; al = last_x
  3730                                  
  3731 00001CD7 488D15(4A240000)                lea rdx, [enemy_last_y]
  3732 00001CDE 4C01E2                          add rdx, r12
  3733 00001CE1 8A22                            mov ah, [rdx]             ; ah = last_y
  3734                                  
  3735                                          ; r8 = X actual del enemigo
  3736                                          ; r9 = Y actual del enemigo
  3737                                  
  3738                                          ; *** En lugar de cmp ah, r9b => hacemos lo siguiente:
  3739 00001CE3 88E2                            mov dl, ah      ; dl = old_Y
  3740 00001CE5 4488CB                          mov bl, r9b     ; bl = new_Y
  3741 00001CE8 38DA                            cmp dl, bl
  3742 00001CEA 752C                            jne .not_stuck
  3743                                  
  3744                                          ; => SI son iguales => pasa al siguiente check
  3745 00001CEC 88C2                            mov dl, al      ; dl = old_X
  3746 00001CEE 4488C3                          mov bl, r8b     ; bl = new_X
  3747 00001CF1 38DA                            cmp dl, bl
  3748 00001CF3 7523                            jne .not_stuck
  3749                                  
  3750                                          ; => MISMA POSICIÓN (STUCK)
  3751 00001CF5 488D1D(54240000)                lea rbx, [enemy_stuck_count]
  3752 00001CFC 4C01E3                          add rbx, r12
  3753 00001CFF FE03                            inc byte [rbx]              ; Aumentar contador de “pegarse”
  3754                                  
  3755                                          ; Verificar si supera umbral, digamos 3
  3756 00001D01 480FB60B                        movzx rcx, byte [rbx]
  3757 00001D05 4883F902                        cmp rcx, 2
  3758 00001D09 7C34                            jl .check_normal_move       ; Si aún no llega a 3, seguir normal
  3759                                  
  3760                                          ; SI LLEGA A 3, FORZAR UN MOVIMIENTO ALEATORIO:
  3761                                          ;  1) resetear el stuck_count
  3762 00001D0B C60300                          mov byte [rbx], 0
  3763                                  
  3764                                          ;  2) cambiar random
  3765 00001D0E E85BFEFFFF                      call random_move_enemy        ; (Ver ejemplo de abajo)
  3766 00001D13 E9AF010000                      jmp .next_enemy
  3767                                  
  3768                                      .not_stuck:
  3769                                          ; => Se movió
  3770 00001D18 488D1D(54240000)                lea rbx, [enemy_stuck_count]
  3771 00001D1F 4C01E3                          add rbx, r12
  3772 00001D22 C60300                          mov byte [rbx], 0            ; Resetear
  3773                                  
  3774                                          ; Guardar su nueva posición en “last_x, last_y”
  3775 00001D25 488D3D(40240000)                lea rdi, [enemy_last_x]
  3776 00001D2C 4C01E7                          add rdi, r12
  3777 00001D2F 448807                          mov [rdi], r8b
  3778                                          
  3779 00001D32 488D3D(4A240000)                lea rdi, [enemy_last_y]
  3780 00001D39 4C01E7                          add rdi, r12
  3781 00001D3C 44880F                          mov [rdi], r9b
  3782                                  
  3783                                          ; Limpiar posición actual antes de mover
  3784                                      .check_normal_move:
  3785 00001D3F 4150                            push r8
  3786 00001D41 4151                            push r9
  3787 00001D43 B850000000                      mov rax, column_cells
  3788 00001D48 4883C002                        add rax, 2
  3789 00001D4C 49F7E1                          mul r9
  3790 00001D4F 4C01C0                          add rax, r8
  3791 00001D52 488DB8[400A0000]                lea rdi, [board + rax]
  3792 00001D59 C60720                          mov byte [rdi], ' '         ; Limpiar rastro
  3793 00001D5C 4159                            pop r9
  3794 00001D5E 4158                            pop r8
  3795                                  
  3796                                          ; Determinar comportamiento basado en índice
  3797 00001D60 4C89E0                          mov rax, r12
  3798 00001D63 4883E001                        and rax, 1                      ; 0 para índices pares, 1 para impares
  3799 00001D67 4885C0                          test rax, rax
  3800 00001D6A 7402                            jz .chase_ball
  3801 00001D6C EB31                            jmp .chase_paddle             ; Si es 1, perseguir paleta
  3802                                          
  3803                                          ; Perseguir bola (comportamiento original)
  3804                                      .chase_ball:
  3805 00001D6E 4C8B15(DF140000)                mov r10, [ball_x_pos]
  3806 00001D75 4D39D0                          cmp r8, r10
  3807 00001D78 0F8F96000000                    jg .move_left
  3808 00001D7E 0F8C95000000                    jl .move_right
  3809                                          
  3810 00001D84 4C8B15(E7140000)                mov r10, [ball_y_pos]
  3811 00001D8B 4D39D1                          cmp r9, r10
  3812 00001D8E 0F8F8A000000                    jg .move_up
  3813 00001D94 0F8C89000000                    jl .move_down
  3814 00001D9A E9A5000000                      jmp .check_collision
  3815                                          
  3816                                      .chase_paddle:
  3817                                          ; Obtener la posición X actual de la paleta
  3818 00001D9F 4C8B15(BF140000)                mov r10, [pallet_position]
  3819 00001DA6 4981EA[400A0000]                sub r10, board              ; Convertir a offset relativo
  3820                                          
  3821                                          ; Calcular la posición X real de la paleta
  3822 00001DAD 4C89D0                          mov rax, r10
  3823 00001DB0 BB50000000                      mov rbx, column_cells
  3824 00001DB5 4883C302                        add rbx, 2                  ; Añadir newline chars
  3825 00001DB9 4831D2                          xor rdx, rdx
  3826 00001DBC 48F7F3                          div rbx                     ; rax = y, rdx = x
  3827                                          
  3828                                          ; rdx ahora contiene la posición X de la paleta
  3829                                          ; Añadir la mitad del tamaño de la paleta para apuntar al centro
  3830 00001DBF 488B0D(C7140000)                mov rcx, [pallet_size]
  3831 00001DC6 48D1E9                          shr rcx, 1                  ; Dividir por 2
  3832 00001DC9 4801CA                          add rdx, rcx
  3833                                          
  3834                                          ; Comparar con posición X del enemigo y mover gradualmente
  3835 00001DCC 4939D0                          cmp r8, rdx
  3836 00001DCF 7404                            je .check_y_paddle          ; Si está en la misma X, verificar Y
  3837 00001DD1 7F41                            jg .move_left              ; Si está a la derecha, mover izquierda
  3838 00001DD3 7C44                            jl .move_right             ; Si está a la izquierda, mover derecha
  3839                                  
  3840                                      .check_y_paddle:
  3841                                          ; La Y de la paleta siempre es row_cells - 2
  3842 00001DD5 41BA20000000                    mov r10, row_cells
  3843 00001DDB 4983EA02                        sub r10, 2
  3844                                          
  3845                                          ; Comparar con posición Y del enemigo y mover gradualmente
  3846 00001DDF 4D39D1                          cmp r9, r10
  3847 00001DE2 7404                            je .no_movement            ; Si está en la misma Y, no mover
  3848 00001DE4 7F38                            jg .move_up               ; Si está abajo, mover arriba
  3849 00001DE6 7C3B                            jl .move_down             ; Si está arriba, mover abajo
  3850                                          
  3851                                      .no_movement:
  3852 00001DE8 EB5A                            jmp .check_collision
  3853                                  
  3854                                      ; También agregar una nueva sección para el movimiento suave
  3855                                      .smooth_transition:
  3856                                          ; Si el enemigo está muy lejos de su objetivo, limitar el movimiento
  3857 00001DEA 8A05(8A200000)                  mov al, [enemy_target]
  3858 00001DF0 84C0                            test al, al
  3859 00001DF2 7450                            jz .check_collision        ; Si persigue la bola, movimiento normal
  3860                                          
  3861                                          ; Verificar distancia en X
  3862 00001DF4 4989D2                          mov r10, rdx              ; Posición X objetivo
  3863 00001DF7 4D29C2                          sub r10, r8               ; Calcular diferencia
  3864 00001DFA 4983FA05                        cmp r10, 5               ; Si la diferencia es mayor a 5
  3865 00001DFE 7F08                            jg .limit_right_movement  ; Limitar movimiento a la derecha
  3866 00001E00 4983FAFB                        cmp r10, -5              ; Si la diferencia es menor a -5
  3867 00001E04 7C08                            jl .limit_left_movement   ; Limitar movimiento a la izquierda
  3868 00001E06 EB3C                            jmp .check_collision
  3869                                          
  3870                                      .limit_right_movement:
  3871 00001E08 4983C002                        add r8, 2                ; Mover solo 2 unidades a la derecha
  3872 00001E0C EB36                            jmp .check_collision
  3873                                          
  3874                                      .limit_left_movement:
  3875 00001E0E 4983E802                        sub r8, 2                ; Mover solo 2 unidades a la izquierda
  3876 00001E12 EB30                            jmp .check_collision
  3877                                      .move_left:
  3878 00001E14 49FFC8                          dec r8
  3879 00001E17 EB0F                            jmp .check_vertical
  3880                                          
  3881                                      .move_right:
  3882 00001E19 49FFC0                          inc r8
  3883 00001E1C EB0A                            jmp .check_vertical
  3884                                          
  3885                                      .move_up:
  3886 00001E1E 49FFC9                          dec r9
  3887 00001E21 EB21                            jmp .check_collision
  3888                                          
  3889                                      .move_down:
  3890 00001E23 49FFC1                          inc r9
  3891 00001E26 EB1C                            jmp .check_collision
  3892                                          
  3893                                      .check_vertical:
  3894 00001E28 8A05(8A200000)                  mov al, [enemy_target]
  3895 00001E2E 84C0                            test al, al
  3896 00001E30 0F8569FFFFFF                    jnz .chase_paddle         ; Si persigue paleta, volver a su lógica
  3897 00001E36 4C8B15(E7140000)                mov r10, [ball_y_pos]     ; Si no, seguir persiguiendo la bola
  3898 00001E3D 4D39D1                          cmp r9, r10
  3899 00001E40 7FDC                            jg .move_up
  3900 00001E42 7CDF                            jl .move_down
  3901                                          
  3902                                      .check_collision:
  3903                                          ; Verificar colisión con bordes
  3904 00001E44 4983F801                        cmp r8, 1                       ; Borde izquierdo
  3905 00001E48 7E7D                            jle .next_enemy
  3906 00001E4A 4983F850                        cmp r8, column_cells
  3907 00001E4E 7D77                            jge .next_enemy
  3908 00001E50 4983F901                        cmp r9, 1                       ; Borde superior
  3909 00001E54 7E71                            jle .next_enemy
  3910 00001E56 4983F920                        cmp r9, row_cells
  3911 00001E5A 7D6B                            jge .next_enemy
  3912                                          
  3913                                          ; Verificar colisión con bloques antes de moverse
  3914 00001E5C 4150                            push r8
  3915 00001E5E 4151                            push r9
  3916 00001E60 4152                            push r10
  3917                                          
  3918                                          ; Calcular posición en el tablero para verificar
  3919 00001E62 B850000000                      mov rax, column_cells
  3920 00001E67 4883C002                        add rax, 2
  3921 00001E6B 49F7E1                          mul r9
  3922 00001E6E 4C01C0                          add rax, r8
  3923 00001E71 4C8D90[400A0000]                lea r10, [board + rax]
  3924                                          
  3925                                          ; Verificar si hay un bloque en la nueva posición
  3926 00001E78 418A02                          mov al, [r10]
  3927 00001E7B 3C55                            cmp al, 'U'
  3928 00001E7D 7442                            je .invalid_move
  3929 00001E7F 3C4F                            cmp al, 'O'
  3930 00001E81 743E                            je .invalid_move
  3931 00001E83 3C44                            cmp al, 'D'
  3932 00001E85 743A                            je .invalid_move
  3933 00001E87 3C4C                            cmp al, 'L'
  3934 00001E89 7436                            je .invalid_move
  3935 00001E8B 3C56                            cmp al, 'V'
  3936 00001E8D 7432                            je .invalid_move
  3937 00001E8F 3C38                            cmp al, '8'
  3938 00001E91 742E                            je .invalid_move
  3939 00001E93 3C58                            cmp al, 'X'
  3940 00001E95 742A                            je .invalid_move
  3941 00001E97 3C40                            cmp al, '@'                 ; Enemigo nivel 1 y 5
  3942 00001E99 7426                            je .invalid_move
  3943 00001E9B 3C23                            cmp al, '#'                 ; Enemigo nivel 2
  3944 00001E9D 7422                            je .invalid_move
  3945 00001E9F 3C24                            cmp al, '$'                 ; Enemigo nivel 3
  3946 00001EA1 741E                            je .invalid_move
  3947 00001EA3 3C26                            cmp al, '&'                 ; Enemigo nivel 4
  3948 00001EA5 741A                            je .invalid_move
  3949                                          
  3950 00001EA7 E825000000                      call check_enemy_at_position
  3951 00001EAC 4883F801                        cmp rax, 1
  3952 00001EB0 740F                            je .invalid_move
  3953 00001EB2 415A                            pop r10
  3954 00001EB4 4159                            pop r9
  3955 00001EB6 4158                            pop r8
  3956                                          
  3957                                          ; Guardar nueva posición si es válida
  3958 00001EB8 448806                          mov [rsi], r8b
  3959 00001EBB 44884E01                        mov [rsi + 1], r9b
  3960 00001EBF EB06                            jmp .next_enemy
  3961                                          
  3962                                      .invalid_move:
  3963 00001EC1 415A                            pop r10
  3964 00001EC3 4159                            pop r9
  3965 00001EC5 4158                            pop r8
  3966                                          
  3967                                      .next_enemy:
  3968 00001EC7 49FFC4                          inc r12
  3969 00001ECA E9D1FDFFFF                      jmp .enemy_loop
  3970                                          
  3971                                      .end:
  3972 00001ECF 5D                              pop rbp
  3973 00001ED0 C3                              ret
  3974                                  
  3975                                  check_enemy_at_position:
  3976 00001ED1 55                          push rbp
  3977 00001ED2 4889E5                      mov rbp, rsp
  3978                                      
  3979                                      ; Parámetros esperados en r8 (X) y r9 (Y)
  3980 00001ED5 B850000000                  mov rax, column_cells
  3981 00001EDA 4883C002                    add rax, 2
  3982 00001EDE 49F7E1                      mul r9
  3983 00001EE1 4C01C0                      add rax, r8
  3984 00001EE4 488DB8[400A0000]            lea rdi, [board + rax]
  3985 00001EEB 480FB607                    movzx rax, byte [rdi]
  3986                                      
  3987                                      ; Verificar todos los caracteres de enemigos
  3988 00001EEF 3C40                        cmp al, '@'
  3989 00001EF1 7411                        je .enemy_found
  3990 00001EF3 3C23                        cmp al, '#'
  3991 00001EF5 740D                        je .enemy_found
  3992 00001EF7 3C24                        cmp al, '$'
  3993 00001EF9 7409                        je .enemy_found
  3994 00001EFB 3C26                        cmp al, '&'
  3995 00001EFD 7405                        je .enemy_found
  3996                                      
  3997 00001EFF 4831C0                      xor rax, rax    ; No hay enemigo (retorna 0)
  3998 00001F02 EB05                        jmp .end
  3999                                      
  4000                                  .enemy_found:
  4001 00001F04 B801000000                  mov rax, 1      ; Hay enemigo (retorna 1)
  4002                                      
  4003                                  .end:
  4004 00001F09 5D                          pop rbp
  4005 00001F0A C3                          ret
  4006                                  
  4007                                  get_current_spawn_points:
  4008 00001F0B 55                          push rbp
  4009 00001F0C 4889E5                      mov rbp, rsp
  4010                                      
  4011 00001F0F 480FB605(79150000)          movzx rax, byte [current_level]
  4012 00001F17 48FFC8                      dec rax                         ; Ajustar para índice base 0
  4013 00001F1A 488B04C5[BE200000]          mov rax, [spawn_points_table + rax * 8]
  4014                                      
  4015 00001F22 5D                          pop rbp
  4016 00001F23 C3                          ret
  4017                                  
  4018                                  ; Función para verificar si debe aparecer un nuevo enemigo
  4019                                  check_enemy_spawn:
  4020 00001F24 55                          push rbp
  4021 00001F25 4889E5                      mov rbp, rsp
  4022                                      
  4023                                      ; Obtener spawn points del nivel actual
  4024 00001F28 E8DEFFFFFF                  call get_current_spawn_points
  4025 00001F2D 4989C4                      mov r12, rax                    ; r12 = puntero a spawn points
  4026                                      
  4027                                      ; Obtener cantidad de bloques destruidos
  4028 00001F30 4C0FB62D(46200000)          movzx r13, byte [destroyed_blocks]
  4029                                      
  4030                                      ; Verificar cada punto de spawn
  4031 00001F38 4831C9                      xor rcx, rcx                    ; Índice del enemigo
  4032                                      
  4033                                      .check_loop:
  4034 00001F3B 4883F90A                        cmp rcx, 10                     ; Máximo 10 enemigos
  4035 00001F3F 7D4E                            jge .end
  4036                                          
  4037                                          ; Verificar si este spawn point ya fue usado
  4038 00001F41 80B9[E9200000]01                cmp byte [enemy_spawns_triggered + rcx], 1
  4039 00001F48 7440                            je .next_enemy
  4040                                          
  4041                                          ; Verificar si este enemigo ya está activo
  4042 00001F4A 4889C8                          mov rax, rcx
  4043 00001F4D 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  4044 00001F51 488DB0[60200000]                lea rsi, [enemies + rax]
  4045 00001F58 807E0201                        cmp byte [rsi + 2], 1          ; Verificar si está activo
  4046 00001F5C 742C                            je .next_enemy
  4047                                          
  4048                                          ; Verificar si debemos spawnear este enemigo
  4049 00001F5E 490FB6040C                      movzx rax, byte [r12 + rcx]    ; Obtener punto de spawn
  4050 00001F63 4939C5                          cmp r13, rax                   ; Comparar con bloques destruidos
  4051 00001F66 7522                            jne .next_enemy
  4052                                          
  4053                                          ; Marcar este spawn point como usado
  4054 00001F68 C681[E9200000]01                mov byte [enemy_spawns_triggered + rcx], 1
  4055                                          
  4056                                          ; Spawner nuevo enemigo
  4057 00001F6F B004                            mov al, 4
  4058 00001F71 00C8                            add al, cl       ; con 'rcx' como índice
  4059 00001F73 8806                            mov [rsi], al
  4060 00001F75 C6460102                        mov byte [rsi+1], 2
  4061 00001F79 C6460201                        mov byte [rsi+2], 1
  4062                                  
  4063                                          ; Inicializar comportamiento
  4064 00001F7D 4889C8                          mov rax, rcx
  4065 00001F80 4883E001                        and rax, 1                     ; Alternar comportamiento basado en índice par/impar
  4066 00001F84 8805(E8200000)                  mov [current_behavior], al      ; 0 = persigue bola, 1 = persigue paleta
  4067                                          
  4068                                      .next_enemy:
  4069 00001F8A 48FFC1                          inc rcx
  4070 00001F8D EBAC                            jmp .check_loop
  4071                                          
  4072                                      .end:
  4073 00001F8F 5D                              pop rbp
  4074 00001F90 C3                              ret
  4075                                  
  4076                                  
  4077                                  ; Función para dibujar enemigos
  4078                                  print_enemies:
  4079 00001F91 55                          push rbp
  4080 00001F92 4889E5                      mov rbp, rsp
  4081                                      
  4082 00001F95 4D31E4                      xor r12, r12                    ; Índice del enemigo
  4083                                      
  4084                                      .print_loop:
  4085 00001F98 4983FC0A                        cmp r12, 10                      ; Máximo 5 enemigos
  4086 00001F9C 7D4B                            jge .end
  4087                                          
  4088                                          ; Calcular offset del enemigo actual
  4089 00001F9E 4C89E0                          mov rax, r12
  4090 00001FA1 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  4091 00001FA5 488DB0[60200000]                lea rsi, [enemies + rax]
  4092                                          
  4093                                          ; Verificar si el enemigo está activo
  4094 00001FAC 807E0201                        cmp byte [rsi + 2], 1
  4095 00001FB0 7532                            jne .next_enemy
  4096                                          
  4097                                          ; Calcular posición en el tablero
  4098 00001FB2 4C0FB606                        movzx r8, byte [rsi]            ; X
  4099 00001FB6 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  4100                                          
  4101                                          ; Calcular offset en el tablero
  4102 00001FBB B850000000                      mov rax, column_cells
  4103 00001FC0 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  4104 00001FC4 49F7E1                          mul r9
  4105 00001FC7 4C01C0                          add rax, r8
  4106 00001FCA 488DB8[400A0000]                lea rdi, [board + rax]
  4107                                          
  4108                                          ; Obtener carácter del enemigo según el nivel
  4109 00001FD1 480FB605(79150000)              movzx rax, byte [current_level]
  4110 00001FD9 48FFC8                          dec rax                         ; Ajustar para índice base 0
  4111 00001FDC 8A80[5B200000]                  mov al, [enemy_chars + rax]
  4112                                          
  4113                                          ; Dibujar enemigo
  4114 00001FE2 8807                            mov [rdi], al
  4115                                          
  4116                                      .next_enemy:
  4117 00001FE4 49FFC4                          inc r12
  4118 00001FE7 EBAF                            jmp .print_loop
  4119                                          
  4120                                      .end:
  4121 00001FE9 5D                              pop rbp
  4122 00001FEA C3                              ret
  4123                                  
  4124                                  ; Función para verificar colisión con enemigos
  4125                                  ; Función para verificar colisión con enemigos
  4126                                  check_enemy_collision:
  4127 00001FEB 55                          push rbp
  4128 00001FEC 4889E5                      mov rbp, rsp
  4129                                      
  4130 00001FEF 4D31E4                      xor r12, r12                    ; Índice del enemigo
  4131 00001FF2 4831C0                      xor rax, rax                    ; Valor de retorno (0 = no colisión)
  4132                                      
  4133                                      .check_loop:
  4134 00001FF5 4983FC05                        cmp r12, 5                      ; Máximo 5 enemigos
  4135 00001FF9 0F8DE9000000                    jge .end
  4136                                          
  4137                                          ; Calcular offset del enemigo actual
  4138 00001FFF 4C89E1                          mov rcx, r12
  4139 00002002 486BC903                        imul rcx, 3                     ; Cada enemigo ocupa 3 bytes
  4140 00002006 488DB1[60200000]                lea rsi, [enemies + rcx]
  4141                                          
  4142                                          ; Verificar si el enemigo está activo
  4143 0000200D 807E0201                        cmp byte [rsi + 2], 1
  4144 00002011 0F85C9000000                    jne .next_enemy
  4145                                          
  4146                                          ; Verificar colisión con la bola
  4147 00002017 4C0FB606                        movzx r8, byte [rsi]            ; X enemigo
  4148 0000201B 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y enemigo
  4149                                          
  4150                                          ; Verificar si la bola está en el rango del enemigo (considerando el enemigo como un área)
  4151 00002020 4C8B15(DF140000)                mov r10, [ball_x_pos]
  4152 00002027 4C8B1D(E7140000)                mov r11, [ball_y_pos]
  4153                                          
  4154                                          ; Comprobar colisión vertical (misma columna)
  4155 0000202E 4D39C2                          cmp r10, r8
  4156 00002031 7525                            jne .check_horizontal
  4157 00002033 4D29CB                          sub r11, r9
  4158 00002036 4983FB01                        cmp r11, 1
  4159 0000203A 7F1C                            jg .check_horizontal
  4160 0000203C 4983FBFF                        cmp r11, -1
  4161 00002040 7C16                            jl .check_horizontal
  4162                                          
  4163                                          ; Colisión vertical detectada
  4164 00002042 E8A3000000                      call destroy_enemy
  4165 00002047 48F71D(F7140000)                neg qword [ball_direction_y]    ; Invertir dirección vertical
  4166 0000204E B801000000                      mov rax, 1
  4167 00002053 E990000000                      jmp .end
  4168                                          
  4169                                      .check_horizontal:
  4170                                          ; Comprobar colisión horizontal (misma fila)
  4171 00002058 4C8B15(DF140000)                mov r10, [ball_x_pos]
  4172 0000205F 4C8B1D(E7140000)                mov r11, [ball_y_pos]
  4173 00002066 4D39CB                          cmp r11, r9
  4174 00002069 7522                            jne .check_paddle
  4175 0000206B 4D29C2                          sub r10, r8
  4176 0000206E 4983FA01                        cmp r10, 1
  4177 00002072 7F19                            jg .check_paddle
  4178 00002074 4983FAFF                        cmp r10, -1
  4179 00002078 7C13                            jl .check_paddle
  4180                                          
  4181                                          ; Colisión horizontal detectada
  4182 0000207A E86B000000                      call destroy_enemy
  4183 0000207F 48F71D(EF140000)                neg qword [ball_direction_x]    ; Invertir dirección horizontal
  4184 00002086 B801000000                      mov rax, 1
  4185 0000208B EB5B                            jmp .end
  4186                                          
  4187                                      .check_paddle:
  4188                                          ; Verificar colisión con la paleta
  4189 0000208D 4C8B15(BF140000)                mov r10, [pallet_position]
  4190 00002094 4981EA[400A0000]                sub r10, board
  4191 0000209B 4C89D0                          mov rax, r10
  4192 0000209E 41BB50000000                    mov r11, column_cells
  4193 000020A4 4983C302                        add r11, 2
  4194 000020A8 4831D2                          xor rdx, rdx
  4195 000020AB 49F7F3                          div r11                     ; División para obtener la posición Y
  4196 000020AE 4989D3                          mov r11, rdx               ; X de la paleta en r11
  4197                                          
  4198 000020B1 488B0D(C7140000)                mov rcx, [pallet_size]     ; Obtener el tamaño de la paleta
  4199                                          
  4200                                          ; Verificar si el enemigo está en la misma fila que la paleta
  4201 000020B8 41BD20000000                    mov r13, row_cells
  4202 000020BE 4983ED02                        sub r13, 2                 ; Y de la paleta
  4203 000020C2 4D39E9                          cmp r9, r13               ; Comparar Y del enemigo con Y de la paleta
  4204 000020C5 7519                            jne .next_enemy
  4205                                          
  4206                                          ; Verificar si el enemigo está dentro del rango X de la paleta
  4207 000020C7 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X inicial de la paleta
  4208 000020CA 7C14                            jl .next_enemy
  4209                                          
  4210 000020CC 4901CB                          add r11, rcx              ; Añadir el tamaño de la paleta
  4211 000020CF 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X final de la paleta
  4212 000020D2 7F0C                            jg .next_enemy
  4213                                          
  4214                                          ; Si llegamos aquí, hay colisión con la paleta
  4215 000020D4 E811000000                      call destroy_enemy        ; Destruir el enemigo
  4216 000020D9 B801000000                      mov rax, 1                ; Indicar que hubo colisión
  4217 000020DE EB08                            jmp .end
  4218                                          
  4219                                      .next_enemy:
  4220 000020E0 49FFC4                          inc r12
  4221 000020E3 E90DFFFFFF                      jmp .check_loop
  4222                                          
  4223                                      .end:
  4224 000020E8 5D                              pop rbp
  4225 000020E9 C3                              ret
  4226                                  
  4227                                  ; Función para destruir un enemigo
  4228                                  destroy_enemy:
  4229                                      ; Desactivar enemigo
  4230 000020EA C6460200                    mov byte [rsi + 2], 0   ; Marcar enemigo como inactivo
  4231                                  
  4232                                      ; Sumar puntos por destruir enemigo
  4233 000020EE 488B05(7F200000)            mov rax, [enemy_points]
  4234 000020F5 480105(3E200000)            add [current_score], rax
  4235                                  
  4236                                      ; No tocar bloques destruidos aquí
  4237 000020FC C3                          ret
  4238                                  
  4239                                  
  4240                                  _start:
  4241 000020FD E829E0FFFF              	call canonical_off
  4242 00002102 E85C010000              	call start_screen
  4243 00002107 E877F3FFFF                  call init_level
  4244 0000210C E829FAFFFF                  call init_enemies
  4245 00002111 EB00                    	jmp .main_loop
  4246                                  	
  4247                                  
  4248                                      .main_loop:
  4249 00002113 E8E0F7FFFF                      call print_labels
  4250 00002118 E80FF7FFFF                      call print_blocks
  4251 0000211D E818E4FFFF                      call move_letters
  4252 00002122 E8FEE6FFFF                      call update_lasers
  4253 00002127 E883E3FFFF                      call print_letters
  4254 0000212C E89FEAFFFF                      call print_pallet
  4255                                          
  4256                                          ; Mover bola principal solo si está activa
  4257 00002131 803D(00150000)01                cmp byte [ball_active], 1
  4258 00002138 7505                            jne .skip_ball1
  4259 0000213A E8A8EBFFFF                          call move_ball
  4260                                          .skip_ball1:
  4261                                  
  4262                                          ; Mover bola 2 si está activa
  4263 0000213F 803D(22150000)01                cmp byte [ball2_active], 1
  4264 00002146 7505                            jne .skip_ball2
  4265 00002148 E86DEDFFFF                          call move_ball_2
  4266                                          .skip_ball2:
  4267                                  
  4268                                          ; Mover bola 3 si está activa
  4269 0000214D 803D(44150000)01                cmp byte [ball3_active], 1
  4270 00002154 7505                            jne .skip_ball3
  4271 00002156 E832EFFFFF                          call move_ball_3
  4272                                          .skip_ball3:
  4273                                  
  4274 0000215B E896E1FFFF                      call check_bottom_collision    ; Nueva función que maneja todas las bolas
  4275 00002160 E878E0FFFF                      call print_lives
  4276                                  
  4277                                          ; Imprimir solo las bolas activas
  4278 00002165 803D(00150000)01                cmp byte [ball_active], 1
  4279 0000216C 7505                            jne .no_pb1
  4280 0000216E E8E5E9FFFF                          call print_ball
  4281                                          .no_pb1:
  4282                                  
  4283 00002173 803D(22150000)01                cmp byte [ball2_active], 1
  4284 0000217A 7505                            jne .no_pb2
  4285 0000217C E8FFE9FFFF                          call print_ball_2
  4286                                          .no_pb2:
  4287                                  
  4288 00002181 803D(44150000)01                cmp byte [ball3_active], 1
  4289 00002188 7505                            jne .no_pb3
  4290 0000218A E819EAFFFF                          call print_ball_3
  4291                                          .no_pb3:
  4292                                  
  4293 0000218F E8E5F4FFFF                      call check_level_complete
  4294 00002194 E88BFDFFFF                      call check_enemy_spawn
  4295 00002199 E8DAFAFFFF                      call move_enemies
  4296 0000219E E848FEFFFF                      call check_enemy_collision
  4297 000021A3 E8E9FDFFFF                      call print_enemies
  4298 000021A8 E8ECE5FFFF                      call print_power_label
  4299                                  		print board, board_size				
    82 000021AD B801000000          <1>  mov eax, sys_write
    83 000021B2 BF01000000          <1>  mov edi, 1
    84 000021B7 48BE-               <1>  mov rsi, %1
    84 000021B9 [400A000000000000]  <1>
    85 000021C1 BA400A0000          <1>  mov edx, %2
    86 000021C6 0F05                <1>  syscall
  4300                                  		;setnonblocking	
  4301                                  	.read_more:	
  4302                                  	    getchar	
    90 000021C8 B800000000          <1>  mov rax, sys_read
    91 000021CD BF00000000          <1>  mov rdi, STDIN_FILENO
    92 000021D2 48BE-               <1>  mov rsi, input_char
    92 000021D4 [0000000000000000]  <1>
    93 000021DC BA01000000          <1>  mov rdx, 1
    94 000021E1 0F05                <1>  syscall
  4303 000021E3 4883F801                	    cmp rax, 1
  4304 000021E7 7547                    	    jne .done
  4305                                  	
  4306 000021E9 8A05(00000000)          	    mov al, [input_char]
  4307 000021EF 8805(08230000)          	    mov [last_key], al      ; Registrar la última tecla presionada
  4308                                  	
  4309 000021F5 3C61                    	    cmp al, 'a'
  4310 000021F7 750E                    	    jne .not_left
  4311 000021F9 48C7C7FFFFFFFF          	    mov rdi, left_direction
  4312 00002200 E800EAFFFF              	    call move_pallet
  4313 00002205 EB29                    	    jmp .done
  4314                                  	
  4315                                      .not_left:
  4316 00002207 3C64                    	    cmp al, 'd'
  4317 00002209 750C                    	    jne .not_right
  4318 0000220B BF01000000              	    mov rdi, right_direction
  4319 00002210 E8F0E9FFFF              	    call move_pallet
  4320 00002215 EB19                    	    jmp .done
  4321                                  	
  4322                                      .not_right:
  4323 00002217 3C63                    	    cmp al, 'c'             ; Verificar si se presionó la tecla 'c'
  4324 00002219 740E                    	    je .release_ball        ; Si sí, liberar la bola
  4325                                  	
  4326 0000221B 3C78                            cmp al, 'x'             ; Verificar si se presionó la tecla 'c'
  4327 0000221D 740A                    	    je .release_ball        ; Si sí, liberar la bola
  4328                                  	
  4329                                  
  4330 0000221F 3C71                    	    cmp al, 'q' 
  4331 00002221 0F84AF000000            	    je exit
  4332 00002227 EB9F                    	    jmp .read_more
  4333                                  	
  4334                                      .release_ball:
  4335 00002229 E832F0FFFF              	    call process_catch_release
  4336 0000222E EB00                    	    jmp .done
  4337                                  	
  4338                                      .done:
  4339                                  	    sleeptime
    98 00002230 B823000000          <1>  mov eax, sys_nanosleep
    99 00002235 48BF-               <1>  mov rdi, timespec
    99 00002237 [0000000000000000]  <1>
   100 0000223F 31F6                <1>  xor esi, esi
   101 00002241 0F05                <1>  syscall
  4340                                  	    print clear, clear_length
    82 00002243 B801000000          <1>  mov eax, sys_write
    83 00002248 BF01000000          <1>  mov edi, 1
    84 0000224D 48BE-               <1>  mov rsi, %1
    84 0000224F [1000000000000000]  <1>
    85 00002257 BA07000000          <1>  mov edx, %2
    86 0000225C 0F05                <1>  syscall
  4341 0000225E E9B0FEFFFF              	    jmp .main_loop
  4342                                  
  4343                                  
  4344                                  
  4345                                  
  4346                                  start_screen:
  4347                                      print clear, clear_length    ; Limpiamos la pantalla primero
    82 00002263 B801000000          <1>  mov eax, sys_write
    83 00002268 BF01000000          <1>  mov edi, 1
    84 0000226D 48BE-               <1>  mov rsi, %1
    84 0000226F [1000000000000000]  <1>
    85 00002277 BA07000000          <1>  mov edx, %2
    86 0000227C 0F05                <1>  syscall
  4348                                      print msg1, msg1_length
    82 0000227E B801000000          <1>  mov eax, sys_write
    83 00002283 BF01000000          <1>  mov edi, 1
    84 00002288 48BE-               <1>  mov rsi, %1
    84 0000228A [1700000000000000]  <1>
    85 00002292 BA14010000          <1>  mov edx, %2
    86 00002297 0F05                <1>  syscall
  4349                                      
  4350                                      .wait_for_key:              ; Agregamos una etiqueta para esperar la tecla
  4351                                          getchar                 ; Esperamos una tecla
    90 00002299 B800000000          <1>  mov rax, sys_read
    91 0000229E BF00000000          <1>  mov rdi, STDIN_FILENO
    92 000022A3 48BE-               <1>  mov rsi, input_char
    92 000022A5 [0000000000000000]  <1>
    93 000022AD BA01000000          <1>  mov rdx, 1
    94 000022B2 0F05                <1>  syscall
  4352 000022B4 4883F801                        cmp rax, 1             ; Verificamos si se leyó un carácter
  4353 000022B8 75DF                            jne .wait_for_key      ; Si no se leyó, seguimos esperando
  4354                                          
  4355                                      print clear, clear_length   ; Limpiamos la pantalla antes de salir
    82 000022BA B801000000          <1>  mov eax, sys_write
    83 000022BF BF01000000          <1>  mov edi, 1
    84 000022C4 48BE-               <1>  mov rsi, %1
    84 000022C6 [1000000000000000]  <1>
    85 000022CE BA07000000          <1>  mov edx, %2
    86 000022D3 0F05                <1>  syscall
  4356 000022D5 C3                          ret
  4357                                  
  4358                                  exit: 
  4359 000022D6 E892DEFFFF              	call canonical_on
  4360 000022DB B83C000000              	mov    rax, 60
  4361 000022E0 BF00000000                  mov    rdi, 0
  4362 000022E5 0F05                        syscall
  4363                                  
