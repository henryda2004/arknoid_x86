     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ;RAX: Registro acumulador. Se utiliza generalmente para operaciones aritméticas y como valor de retorno de funciones.
     6                                  ;RBX: Registro base. Generalmente preservado entre llamadas a funciones.
     7                                  ;RCX: Contador. Usado en operaciones de repetición y bucles.
     8                                  ;RDX: Registro de datos. Se usa en operaciones aritméticas complejas y como argumento adicional en llamadas a funciones.
     9                                  ;RDI y RSI: Usados para pasar parámetros en las llamadas a funciones. RDI es el primer argumento, RSI el segundo.
    10                                  ;RBP: Registro base del marco de pila. Usado para rastrear la base del stack frame en funciones.
    11                                  ;RSP: Puntero de pila. Rastrea el tope de la pila.
    12                                  ;R8-R15: Registros adicionales introducidos en x86-64 para proporcionar más flexibilidad.
    13                                  
    14                                  
    15                                  
    16                                  ; Here comes the defines
    17                                  sys_read: equ 0	
    18                                  sys_write:	equ 1
    19                                  sys_nanosleep:	equ 35
    20                                  sys_time:	equ 201
    21                                  sys_fcntl:	equ 72
    22                                  
    23                                  
    24                                  STDIN_FILENO: equ 0
    25                                  
    26                                  F_SETFL:	equ 0x0004
    27                                  O_NONBLOCK: equ 0x0004
    28                                  
    29                                  ;screen clean definition
    30                                  row_cells:	equ 32	; set to any (reasonable) value you wish
    31                                  column_cells: 	equ 80 ; set to any (reasonable) value you wish
    32                                  array_length:	equ row_cells * column_cells + row_cells ; cells are mapped to bytes in the array and a new line char ends each row
    33                                  
    34                                  ;This is regarding the sleep time
    35                                  timespec:
    36 00000000 0000000000000000            tv_sec  dq 0
    37 00000008 002D310100000000            tv_nsec dq 20000000
    38                                  
    39                                  
    40                                  ;This is for cleaning up the screen
    41 00000010 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"
    42                                  clear_length:	equ $-clear
    43                                  	
    44                                  	
    45                                  
    46                                  ; Start Message
    47 00000017 202020202020202054-     msg1: db "        TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    47 00000020 45434E4F4C4F474943-
    47 00000029 4F20444520434F5354-
    47 00000032 412052494341202020-
    47 0000003B 20202020200A0D     
    48 00000042 202020202020202041-     msg2: db "        ARQUITECTURA DE COMPUTADORAS I        ", 0xA, 0xD
    48 0000004B 525155495445435455-
    48 00000054 524120444520434F4D-
    48 0000005D 50555441444F524153-
    48 00000066 204920202020202020-
    48 0000006F 200A0D             
    49 00000072 202020202020202045-     msg3: db "        ESTUDIANTE: HENRY NUNEZ PEREZ        ", 0xA, 0xD
    49 0000007B 5354554449414E5445-
    49 00000084 3A2048454E5259204E-
    49 0000008D 554E455A2050455245-
    49 00000096 5A2020202020202020-
    49 0000009F 0A0D               
    50 000000A1 202020202020202050-     msg4: db "        PROFESOR: ERNESTO RIVERA ALVARADO        ", 0xA, 0xD
    50 000000AA 524F4645534F523A20-
    50 000000B3 45524E4553544F2052-
    50 000000BC 495645524120414C56-
    50 000000C5 415241444F20202020-
    50 000000CE 202020200A0D       
    51 000000D4 202020202020202041-     msg5: db "        ARKANOID RETRO        ", 0xA, 0xD
    51 000000DD 524B414E4F49442052-
    51 000000E6 4554524F2020202020-
    51 000000EF 2020200A0D         
    52 000000F4 202020202020202050-     msg6: db "        PRESIONE CUALQUIER TECLA PARA INICIAR        ", 0xA, 0xD
    52 000000FD 524553494F4E452043-
    52 00000106 55414C515549455220-
    52 0000010F 5445434C4120504152-
    52 00000118 4120494E4943494152-
    52 00000121 20202020202020200A-
    52 0000012A 0D                 
    53                                  msg1_length: equ $-msg1
    54                                  msg2_length: equ $-msg2
    55                                  msg3_length: equ $-msg3
    56                                  msg4_length: equ $-msg4
    57                                  msg5_length: equ $-msg5
    58                                  msg6_length: equ $-msg6
    59                                  
    60                                  ; Usefull macros
    61                                  
    62                                  
    63                                  
    64                                  %macro setnonblocking 0
    65                                  	mov rax, sys_fcntl
    66                                      mov rdi, STDIN_FILENO
    67                                      mov rsi, F_SETFL
    68                                      mov rdx, O_NONBLOCK
    69                                      syscall
    70                                  %endmacro
    71                                  
    72                                  %macro unsetnonblocking 0
    73                                  	mov rax, sys_fcntl
    74                                      mov rdi, STDIN_FILENO
    75                                      mov rsi, F_SETFL
    76                                      mov rdx, 0
    77                                      syscall
    78                                  %endmacro
    79                                  
    80                                  %macro full_line 0
    81                                      times column_cells db "X"
    82                                      db 0x0a, 0xD
    83                                  %endmacro
    84                                  
    85                                  %macro hollow_line 0
    86                                      db "X"
    87                                      times column_cells-2 db " "
    88                                      db "X", 0x0a, 0xD
    89                                  %endmacro
    90                                  
    91                                  
    92                                  %macro print 2
    93                                  	mov eax, sys_write
    94                                  	mov edi, 1 	; stdout
    95                                  	mov rsi, %1
    96                                  	mov edx, %2
    97                                  	syscall
    98                                  %endmacro
    99                                  
   100                                  %macro getchar 0
   101                                  	mov     rax, sys_read
   102                                      mov     rdi, STDIN_FILENO
   103                                      mov     rsi, input_char
   104                                      mov     rdx, 1 ; number of bytes
   105                                      syscall         ;read text input from keyboard
   106                                  %endmacro
   107                                  
   108                                  %macro sleeptime 0
   109                                  	mov eax, sys_nanosleep
   110                                  	mov rdi, timespec
   111                                  	xor esi, esi		; ignore remaining time in case of call interruption
   112                                  	syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   113                                  %endmacro
   114                                  
   115                                  
   116                                  
   117                                  global _start
   118                                  
   119                                  section .bss
   120                                  
   121 00000000 ??                      input_char: resb 1
   122                                  
   123                                  section .data
   124                                  
   125                                  	; Guardamos la plantilla del tablero (32 filas)
   126                                      board_template:
   127                                          full_line
    81 00000000 58<rep 50h>         <1>  times column_cells db "X"
    82 00000050 0A0D                <1>  db 0x0a, 0xD
   128                                          %rep 30
   129                                          hollow_line
   130                                          %endrep
   129                              <1>  hollow_line
    86 00000052 58                  <2>  db "X"
    87 00000053 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 000000A1 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 000000A4 58                  <2>  db "X"
    87 000000A5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 000000F3 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 000000F6 58                  <2>  db "X"
    87 000000F7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 00000145 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 00000148 58                  <2>  db "X"
    87 00000149 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 00000197 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 0000019A 58                  <2>  db "X"
    87 0000019B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 000001E9 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 000001EC 58                  <2>  db "X"
    87 000001ED 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 0000023B 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 0000023E 58                  <2>  db "X"
    87 0000023F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 0000028D 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 00000290 58                  <2>  db "X"
    87 00000291 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 000002DF 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 000002E2 58                  <2>  db "X"
    87 000002E3 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 00000331 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 00000334 58                  <2>  db "X"
    87 00000335 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 00000383 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 00000386 58                  <2>  db "X"
    87 00000387 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 000003D5 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 000003D8 58                  <2>  db "X"
    87 000003D9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 00000427 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 0000042A 58                  <2>  db "X"
    87 0000042B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 00000479 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 0000047C 58                  <2>  db "X"
    87 0000047D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 000004CB 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 000004CE 58                  <2>  db "X"
    87 000004CF 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 0000051D 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 00000520 58                  <2>  db "X"
    87 00000521 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 0000056F 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 00000572 58                  <2>  db "X"
    87 00000573 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 000005C1 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 000005C4 58                  <2>  db "X"
    87 000005C5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 00000613 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 00000616 58                  <2>  db "X"
    87 00000617 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 00000665 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 00000668 58                  <2>  db "X"
    87 00000669 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 000006B7 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 000006BA 58                  <2>  db "X"
    87 000006BB 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 00000709 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 0000070C 58                  <2>  db "X"
    87 0000070D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 0000075B 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 0000075E 58                  <2>  db "X"
    87 0000075F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 000007AD 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 000007B0 58                  <2>  db "X"
    87 000007B1 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 000007FF 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 00000802 58                  <2>  db "X"
    87 00000803 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 00000851 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 00000854 58                  <2>  db "X"
    87 00000855 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 000008A3 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 000008A6 58                  <2>  db "X"
    87 000008A7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 000008F5 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 000008F8 58                  <2>  db "X"
    87 000008F9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 00000947 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 0000094A 58                  <2>  db "X"
    87 0000094B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 00000999 580A0D              <2>  db "X", 0x0a, 0xD
   129                              <1>  hollow_line
    86 0000099C 58                  <2>  db "X"
    87 0000099D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    88 000009EB 580A0D              <2>  db "X", 0x0a, 0xD
   131                                          full_line
    81 000009EE 58<rep 50h>         <1>  times column_cells db "X"
    82 00000A3E 0A0D                <1>  db 0x0a, 0xD
   132                                      board_template_size: equ $ - board_template
   133                                  
   134                                      ; Espacio real que se usará en la ejecución
   135 00000A40 00<rep A40h>                board: times board_template_size db 0
   136                                      board_size: equ board_template_size
   137                                  
   138                                  	; Added for the terminal issue
   139 00001480 00<rep 24h>             	termios:        times 36 db 0
   140                                  	stdin:          equ 0
   141                                  	ICANON:         equ 1<<1
   142                                  	ECHO:           equ 1<<3
   143                                  	VTIME: 			equ 5
   144                                  	VMIN:			equ 6
   145                                  	CC_C:			equ 18
   146                                  
   147                                  section .text
   148                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   149                                  canonical_off:
   150 0000012B E86F000000                      call read_stdin_termios
   151                                  
   152                                          ; clear canonical bit in local mode flags
   153 00000130 50                              push rax
   154 00000131 B802000000                      mov eax, ICANON
   155 00000136 F7D0                            not eax
   156 00000138 2105(8C140000)                  and [termios+12], eax
   157 0000013E C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   158 00000145 C605(98140000)00        		mov byte[termios+CC_C+VMIN], 0
   159 0000014C 58                              pop rax
   160                                  
   161 0000014D E86C000000                      call write_stdin_termios
   162 00000152 C3                              ret
   163                                  
   164                                  echo_off:
   165 00000153 E847000000                      call read_stdin_termios
   166                                  
   167                                          ; clear echo bit in local mode flags
   168 00000158 50                              push rax
   169 00000159 B808000000                      mov eax, ECHO
   170 0000015E F7D0                            not eax
   171 00000160 2105(8C140000)                  and [termios+12], eax
   172 00000166 58                              pop rax
   173                                  
   174 00000167 E852000000                      call write_stdin_termios
   175 0000016C C3                              ret
   176                                  
   177                                  canonical_on:
   178 0000016D E82D000000                      call read_stdin_termios
   179                                  
   180                                          ; set canonical bit in local mode flags
   181 00000172 830D(8C140000)02                or dword [termios+12], ICANON
   182 00000179 C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   183 00000180 C605(98140000)01        		mov byte[termios+CC_C+VMIN], 1
   184 00000187 E832000000                      call write_stdin_termios
   185 0000018C C3                              ret
   186                                  
   187                                  echo_on:
   188 0000018D E80D000000                      call read_stdin_termios
   189                                  
   190                                          ; set echo bit in local mode flags
   191 00000192 830D(8C140000)08                or dword [termios+12], ECHO
   192                                  
   193 00000199 E820000000                      call write_stdin_termios
   194 0000019E C3                              ret
   195                                  
   196                                  read_stdin_termios:
   197 0000019F 50                              push rax
   198 000001A0 53                              push rbx
   199 000001A1 51                              push rcx
   200 000001A2 52                              push rdx
   201                                  
   202 000001A3 B836000000                      mov eax, 36h
   203 000001A8 BB00000000                      mov ebx, stdin
   204 000001AD B901540000                      mov ecx, 5401h
   205 000001B2 BA[80140000]                    mov edx, termios
   206 000001B7 CD80                            int 80h
   207                                  
   208 000001B9 5A                              pop rdx
   209 000001BA 59                              pop rcx
   210 000001BB 5B                              pop rbx
   211 000001BC 58                              pop rax
   212 000001BD C3                              ret
   213                                  
   214                                  write_stdin_termios:
   215 000001BE 50                              push rax
   216 000001BF 53                              push rbx
   217 000001C0 51                              push rcx
   218 000001C1 52                              push rdx
   219                                  
   220 000001C2 B836000000                      mov eax, 36h
   221 000001C7 BB00000000                      mov ebx, stdin
   222 000001CC B902540000                      mov ecx, 5402h
   223 000001D1 BA[80140000]                    mov edx, termios
   224 000001D6 CD80                            int 80h
   225                                  
   226 000001D8 5A                              pop rdx
   227 000001D9 59                              pop rcx
   228 000001DA 5B                              pop rbx
   229 000001DB 58                              pop rax
   230 000001DC C3                              ret
   231                                  
   232                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   233                                  
   234                                  char_equal: equ 61
   235                                  char_space: equ 32
   236                                  char_O: equ 79
   237                                  left_direction: equ -1
   238                                  right_direction: equ 1
   239                                  
   240                                  
   241                                  section .data
   242                                  
   243                                  ; Mensajes para los niveles
   244 000014A4 4E4956454C20                level_msg: db "NIVEL "
   245                                      level_msg_len: equ $ - level_msg
   246 000014AA 31                          level_1_char: db "1"
   247 000014AB 32                          level_2_char: db "2"
   248 000014AC 33                          level_3_char: db "3"
   249 000014AD 34                          level_4_char: db "4"
   250 000014AE 35                          level_5_char: db "5"
   251                                      level_char_len: equ 1
   252                                  
   253                                      ; Timespec para la pausa del mensaje de nivel
   254                                      level_display_time:
   255 000014AF 0100000000000000                lvl_tv_sec dq 1           ; 1 segundo
   256 000014B7 0000000000000000                lvl_tv_nsec dq 0
   257                                          
   258 000014BF [B013000000000000]      	pallet_position dq board + 38 + 29 * (column_cells +2)
   259 000014C7 0500000000000000            pallet_size dq 5
   260 000014CF 0500000000000000            default_pallet_size dq 5    ; Tamaño normal de la paleta
   261 000014D7 0700000000000000            extended_pallet_size dq 7   ; Tamaño extendido de la paleta
   262                                  
   263 000014DF 2800000000000000        	ball_x_pos: dq 40
   264 000014E7 1C00000000000000        	ball_y_pos: dq 28
   265 000014EF 0100000000000000            ball_direction_x dq 1    ; 1 = derecha, -1 = izquierda
   266 000014F7 FFFFFFFFFFFFFFFF            ball_direction_y dq -1   ; -1 = arriba, 1 = abajo
   267 000014FF 00                          ball_moving db 0         ; 0 = estática, 1 = en movimiento
   268 00001500 00                          ball_active db 0
   269                                  
   270 00001501 0000000000000000            ball2_x_pos:        dq 0
   271 00001509 0000000000000000            ball2_y_pos:        dq 0
   272 00001511 0000000000000000            ball2_direction_x:  dq 0
   273 00001519 0000000000000000            ball2_direction_y:  dq 0
   274 00001521 00                          ball2_moving:       db 0    ; 0 = estática, 1 = en movimiento
   275 00001522 00                          ball2_active:       db 0    ; 0 = inactiva, 1 = activa
   276                                  
   277                                      ; -- Pelota 3 --
   278 00001523 0000000000000000            ball3_x_pos:        dq 0
   279 0000152B 0000000000000000            ball3_y_pos:        dq 0
   280 00001533 0000000000000000            ball3_direction_x:  dq 0
   281 0000153B 0000000000000000            ball3_direction_y:  dq 0
   282 00001543 00                          ball3_moving:       db 0
   283 00001544 00                          ball3_active:       db 0
   284                                  
   285                                  
   286                                  ; Definir los límites de la pantalla o área de juego
   287                                      board_top_left_x equ 1
   288                                      board_top_left_y equ 1
   289                                      board_bottom_right_x equ column_cells - 1
   290                                      board_bottom_right_y equ row_cells
   291                                  
   292                                      ; Limites laterales
   293                                      left_edge equ board_top_left_x               ; Límite izquierdo en la primera columna
   294                                      right_edge equ board_bottom_right_x         ; Límite derecho en la última columna
   295                                  
   296                                      ; O también puedes hacerlo así si prefieres usando las coordenadas en memoria para obtener la ubicación exacta:
   297 00001545 [920A000000000000]          left_edge_position dq board + (board_top_left_y * (column_cells + 2)) ; Coordenada de la parte izquierda del marco
   298 0000154D [E00A000000000000]          right_edge_position dq board + (board_top_left_y * (column_cells + 2) + board_bottom_right_x - 1) ; Coordenada de la parte derecha del marco
   299                                  
   300                                      ; Definición de tipos de bloques
   301 00001555 555555555555                block_type_1: db "UUUUUU"    ; Durabilidad 1
   302 0000155B 4F4F4F4F4F4F                block_type_2: db "OOOOOO"    ; Durabilidad 2
   303 00001561 444444444444                block_type_3: db "DDDDDD"    ; Durabilidad 3
   304 00001567 4C4C4C4C4C4C                block_type_4: db "LLLLLL"    ; Durabilidad 4
   305 0000156D 565656565656                block_type_5: db "VVVVVV"    ; Durabilidad 5
   306 00001573 383838383838                block_type_6: db "888888"    ; Durabilidad 6
   307                                      block_length: equ 6        ; Longitud de cada bloque
   308                                  
   309                                      ; Estructura para el nivel actual
   310 00001579 01                          current_level db 1
   311 0000157A 00                          blocks_remaining db 0
   312                                  
   313                                      ; Definición del nivel 1 (ejemplo con múltiples bloques)destroyed_blocks
   314                                      ; Formato: x_pos, y_pos, tipo_bloque, durabilidad_actual
   315                                      level1_blocks:
   316                                          ; Tercera fila (tipo 3)
   317 0000157B 0105050220                      db 1, 5, 5, 2, ' '   
   318 00001580 0705050220                      db 7, 5, 5, 2, ' '    
   319 00001585 0D05050220                      db 13, 5, 5, 2, ' '   
   320 0000158A 1305050220                      db 19, 5, 5, 2, ' '   
   321 0000158F 1905050220                      db 25, 5, 5, 2, ' '   
   322 00001594 1F05050220                      db 31, 5, 5, 2, ' '   
   323 00001599 2505050220                      db 37, 5, 5, 2, ' '   
   324 0000159E 2B05050220                      db 43, 5, 5, 2, ' '   
   325 000015A3 3105050220                      db 49, 5, 5, 2, ' '   
   326 000015A8 3705050220                      db 55, 5, 5, 2, ' '   
   327 000015AD 3D05050220                      db 61, 5, 5, 2, ' '  
   328 000015B2 4305050220                      db 67, 5, 5, 2, ' '   
   329 000015B7 4905050220                      db 73, 5, 5, 2, ' '   
   330                                  
   331 000015BC 0106040145                      db 1, 6, 4, 1, 'E'   
   332 000015C1 0706020153                      db 7, 6, 2, 1, 'S'    
   333 000015C6 0D06040153                      db 13, 6, 4, 1, 'S'   
   334 000015CB 1306020153                      db 19, 6, 2, 1, 'S'   
   335 000015D0 1906040120                      db 25, 6, 4, 1, ' '   
   336 000015D5 1F06020120                      db 31, 6, 2, 1, ' '   
   337 000015DA 2506040120                      db 37, 6, 4, 1, ' '   
   338 000015DF 2B06020143                      db 43, 6, 2, 1, 'C'   
   339 000015E4 3106040120                      db 49, 6, 4, 1, ' '   
   340 000015E9 3706020120                      db 55, 6, 2, 1, ' '   
   341 000015EE 3D06040120                      db 61, 6, 4, 1, ' '  
   342 000015F3 4306020120                      db 67, 6, 2, 1, ' '   
   343 000015F8 4906040120                      db 73, 6, 4, 1, ' ' 
   344                                  
   345 000015FD 0107010120                      db 1, 7, 1, 1, ' '   
   346 00001602 0707030120                      db 7, 7, 3, 1, ' '    
   347 00001607 0D07010120                      db 13, 7, 1, 1, ' '   
   348 0000160C 1307030120                      db 19, 7, 3, 1, ' '   
   349 00001611 1907010120                      db 25, 7, 1, 1, ' '   
   350 00001616 1F07030120                      db 31, 7, 3, 1, ' '   
   351 0000161B 2507010120                      db 37, 7, 1, 1, ' '   
   352 00001620 2B07030120                      db 43, 7, 3, 1, ' '   
   353 00001625 3107010120                      db 49, 7, 1, 1, ' '   
   354 0000162A 3707030120                      db 55, 7, 3, 1, ' '   
   355 0000162F 3D07010120                      db 61, 7, 1, 1, ' '  
   356 00001634 4307030120                      db 67, 7, 3, 1, ' '   
   357 00001639 4907010120                      db 73, 7, 1, 1, ' ' 
   358                                  
   359 0000163E 0108040120                      db 1, 8, 4, 1, ' '   
   360 00001643 0708020120                      db 7, 8, 2, 1, ' '    
   361 00001648 0D08040150                      db 13, 8, 4, 1, 'P'   
   362 0000164D 1308020120                      db 19, 8, 2, 1, ' '   
   363 00001652 1908040120                      db 25, 8, 4, 1, ' '   
   364 00001657 1F08020120                      db 31, 8, 2, 1, ' '   
   365 0000165C 2508040145                      db 37, 8, 4, 1, 'E'   
   366 00001661 2B08020143                      db 43, 8, 2, 1, 'C'   
   367 00001666 3108040120                      db 49, 8, 4, 1, ' '   
   368 0000166B 3708020120                      db 55, 8, 2, 1, ' '   
   369 00001670 3D08040120                      db 61, 8, 4, 1, ' '  
   370 00001675 4308020120                      db 67, 8, 2, 1, ' '   
   371 0000167A 4908040120                      db 73, 8, 4, 1, ' ' 
   372                                  
   373 0000167F 0109010120                      db 1, 9, 1, 1, ' '   
   374 00001684 0709030120                      db 7, 9, 3, 1, ' '    
   375 00001689 0D09010120                      db 13, 9, 1, 1, ' '   
   376 0000168E 1309030120                      db 19, 9, 3, 1, ' '   
   377 00001693 1909010120                      db 25, 9, 1, 1, ' '   
   378 00001698 1F09030120                      db 31, 9, 3, 1, ' '   
   379 0000169D 2509010120                      db 37, 9, 1, 1, ' '   
   380 000016A2 2B09030120                      db 43, 9, 3, 1, ' '     
   381 000016A7 3109010120                      db 49, 9, 1, 1, ' '   
   382 000016AC 3709030120                      db 55, 9, 3, 1, ' '   
   383 000016B1 3D09010120                      db 61, 9, 1, 1, ' '  
   384 000016B6 4309030120                      db 67, 9, 3, 1, ' '   
   385 000016BB 4909010120                      db 73, 9, 1, 1, ' ' 
   386                                  
   387 000016C0 010A040145                      db 1, 10, 4, 1, 'E'   
   388 000016C5 070A020120                      db 7, 10, 2, 1, ' '    
   389 000016CA 0D0A040120                      db 13, 10, 4, 1, ' '   
   390 000016CF 130A020120                      db 19, 10, 2, 1, ' '   
   391 000016D4 190A040120                      db 25, 10, 4, 1, ' '   
   392 000016D9 1F0A020120                      db 31, 10, 2, 1, ' '   
   393 000016DE 250A040143                      db 37, 10, 4, 1, 'C'   
   394 000016E3 2B0A020120                      db 43, 10, 2, 1, ' '   
   395 000016E8 310A040120                      db 49, 10, 4, 1, ' '   
   396 000016ED 370A02014C                      db 55, 10, 2, 1, 'L'   
   397 000016F2 3D0A040120                      db 61, 10, 4, 1, ' '  
   398 000016F7 430A020120                      db 67, 10, 2, 1, ' '   
   399 000016FC 490A040120                      db 73, 10, 4, 1, ' ' 
   400                                  
   401                                      level1_blocks_count equ 78   ; Cantidad total de bloques
   402                                  
   403                                      ; Nivel 2: Bloques de prueba
   404                                      level2_blocks:
   405 00001701 0103040120                      db 1, 3, 4, 1, ' '
   406                                  
   407 00001706 0104030120                      db 1, 4, 3, 1, ' '   
   408 0000170B 0704040120                      db 7, 4, 4, 1, ' '   
   409                                                  
   410 00001710 0105020120                      db 1, 5, 2, 1, ' '   
   411 00001715 0705030120                      db 7, 5, 3, 1, ' '
   412 0000171A 0D05040144                      db 13, 5, 4, 1, 'D'
   413                                  
   414 0000171F 0106010120                      db 1, 6, 1, 1, ' '   
   415 00001724 0706020120                      db 7, 6, 2, 1, ' '
   416 00001729 0D06030120                      db 13, 6, 3, 1, ' '
   417 0000172E 1306040120                      db 19, 6, 4, 1, ' '   
   418                                  
   419 00001733 0107040120                      db 1, 7, 4, 1, ' '   
   420 00001738 0707010120                      db 7, 7, 1, 1, ' '
   421 0000173D 0D07020120                      db 13, 7, 2, 1, ' '
   422 00001742 1307030120                      db 19, 7, 3, 1, ' '  
   423 00001747 1907040120                      db 25, 7, 4, 1, ' '   
   424                                  
   425 0000174C 0108030120                      db 1, 8, 3, 1, ' '   
   426 00001751 0708040120                      db 7, 8, 4, 1, ' '
   427 00001756 0D08010120                      db 13, 8, 1, 1, ' '
   428 0000175B 1308020120                      db 19, 8, 2, 1, ' '  
   429 00001760 1908030120                      db 25, 8, 3, 1, ' ' 
   430 00001765 1F08040120                      db 31, 8, 4, 1, ' '   
   431                                  
   432 0000176A 0109020120                      db 1, 9, 2, 1, ' '   
   433 0000176F 0709030120                      db 7, 9, 3, 1, ' '
   434 00001774 0D09040120                      db 13, 9, 4, 1, ' '
   435 00001779 1309010120                      db 19, 9, 1, 1, ' '  
   436 0000177E 1909020120                      db 25, 9, 2, 1, ' ' 
   437 00001783 1F09030143                      db 31, 9, 3, 1, 'C' 
   438 00001788 2509040120                      db 37, 9, 4, 1, ' '   
   439                                  
   440 0000178D 010A010120                      db 1, 10, 1, 1, ' '   
   441 00001792 070A020120                      db 7, 10, 2, 1, ' '
   442 00001797 0D0A030120                      db 13, 10, 3, 1, ' '
   443 0000179C 130A040120                      db 19, 10, 4, 1, ' '  
   444 000017A1 190A010120                      db 25, 10, 1, 1, ' ' 
   445 000017A6 1F0A020120                      db 31, 10, 2, 1, ' ' 
   446 000017AB 250A03014C                      db 37, 10, 3, 1, 'L'  
   447 000017B0 2B0A040120                      db 43, 10, 4, 1, ' '   
   448                                  
   449 000017B5 010B040120                      db 1, 11, 4, 1, ' '   
   450 000017BA 070B010120                      db 7, 11, 1, 1, ' '
   451 000017BF 0D0B020120                      db 13, 11, 2, 1, ' '
   452 000017C4 130B030144                      db 19, 11, 3, 1, 'D'  
   453 000017C9 190B040120                      db 25, 11, 4, 1, ' ' 
   454 000017CE 1F0B010120                      db 31, 11, 1, 1, ' ' 
   455 000017D3 250B020120                      db 37, 11, 2, 1, ' '  
   456 000017D8 2B0B030120                      db 43, 11, 3, 1, ' ' 
   457 000017DD 310B040120                      db 49, 11, 4, 1, ' '   
   458                                  
   459 000017E2 010C030120                      db 1, 12, 3, 1, ' '   
   460 000017E7 070C040120                      db 7, 12, 4, 1, ' '
   461 000017EC 0D0C010120                      db 13, 12, 1, 1, ' '
   462 000017F1 130C020120                      db 19, 12, 2, 1, ' '  
   463 000017F6 190C030120                      db 25, 12, 3, 1, ' ' 
   464 000017FB 1F0C040120                      db 31, 12, 4, 1, ' ' 
   465 00001800 250C010120                      db 37, 12, 1, 1, ' '  
   466 00001805 2B0C020120                      db 43, 12, 2, 1, ' ' 
   467 0000180A 310C030120                      db 49, 12, 3, 1, ' '
   468 0000180F 370C040120                      db 55, 12, 4, 1, ' '   
   469                                  
   470 00001814 010D020120                      db 1, 13, 2, 1, ' '   
   471 00001819 070D030120                      db 7, 13, 3, 1, ' '
   472 0000181E 0D0D040120                      db 13, 13, 4, 1, ' '
   473 00001823 130D010144                      db 19, 13, 1, 1, 'D'  
   474 00001828 190D020120                      db 25, 13, 2, 1, ' ' 
   475 0000182D 1F0D030120                      db 31, 13, 3, 1, ' ' 
   476 00001832 250D040120                      db 37, 13, 4, 1, ' '  
   477 00001837 2B0D010120                      db 43, 13, 1, 1, ' ' 
   478 0000183C 310D020120                      db 49, 13, 2, 1, ' '
   479 00001841 370D030120                      db 55, 13, 3, 1, ' ' 
   480 00001846 3D0D040120                      db 61, 13, 4, 1, ' '   
   481                                  
   482 0000184B 010E010120                      db 1, 14, 1, 1, ' '   
   483 00001850 070E020120                      db 7, 14, 2, 1, ' '
   484 00001855 0D0E030120                      db 13, 14, 3, 1, ' '
   485 0000185A 130E040120                      db 19, 14, 4, 1, ' '  
   486 0000185F 190E010120                      db 25, 14, 1, 1, ' ' 
   487 00001864 1F0E020120                      db 31, 14, 2, 1, ' ' 
   488 00001869 250E030120                      db 37, 14, 3, 1, ' '  
   489 0000186E 2B0E040120                      db 43, 14, 4, 1, ' ' 
   490 00001873 310E010120                      db 49, 14, 1, 1, ' '
   491 00001878 370E020120                      db 55, 14, 2, 1, ' ' 
   492 0000187D 3D0E030120                      db 61, 14, 3, 1, ' '  
   493 00001882 430E040120                      db 67, 14, 4, 1, ' '   
   494                                  
   495 00001887 010F050220                      db 1, 15, 5, 2, ' '   
   496 0000188C 070F050220                      db 7, 15, 5, 2, ' '
   497 00001891 0D0F050220                      db 13, 15, 5, 2, ' '
   498 00001896 130F050220                      db 19, 15, 5, 2, ' '  
   499 0000189B 190F050220                      db 25, 15, 5, 2, ' ' 
   500 000018A0 1F0F050220                      db 31, 15, 5, 2, ' ' 
   501 000018A5 250F050220                      db 37, 15, 5, 2, ' '  
   502 000018AA 2B0F050220                      db 43, 15, 5, 2, ' ' 
   503 000018AF 310F050220                      db 49, 15, 5, 2, ' '
   504 000018B4 370F050220                      db 55, 15, 5, 2, ' ' 
   505 000018B9 3D0F050220                      db 61, 15, 5, 2, ' '  
   506 000018BE 430F050220                      db 67, 15, 5, 2, ' '
   507 000018C3 490F040120                      db 73, 15, 4, 1, ' '   
   508                                         
   509                                  
   510                                      level2_blocks_count equ 91
   511                                  
   512                                      ; Nivel 3
   513                                      level3_blocks:
   514                                  
   515 000018C8 0102010120                      db 1, 2, 1, 1, ' '   
   516 000018CD 0702020120                      db 7, 2, 2, 1, ' '    
   517 000018D2 0D02010120                      db 13, 2, 1, 1, ' '   
   518 000018D7 1302020120                      db 19, 2, 2, 1, ' '   
   519 000018DC 1902010120                      db 25, 2, 1, 1, ' '   
   520 000018E1 1F02020120                      db 31, 2, 2, 1, ' '   
   521 000018E6 2502010120                      db 37, 2, 1, 1, ' '   
   522 000018EB 2B02020120                      db 43, 2, 2, 1, ' '   
   523 000018F0 3102010120                      db 49, 2, 1, 1, ' '   
   524 000018F5 3702020120                      db 55, 2, 2, 1, ' '   
   525 000018FA 3D02010120                      db 61, 2, 1, 1, ' '  
   526 000018FF 4302020120                      db 67, 2, 2, 1, ' '   
   527 00001904 4902010120                      db 73, 2, 1, 1, ' ' 
   528                                  
   529 00001909 0106040120                      db 1, 6, 4, 1, ' '   
   530 0000190E 0706040120                      db 7, 6, 4, 1, ' '    
   531 00001913 0D06040120                      db 13, 6, 4, 1, ' '   
   532 00001918 1306066320                      db 19, 6, 6, 99, ' '   
   533 0000191D 1906066320                      db 25, 6, 6, 99, ' '   
   534 00001922 1F06066320                      db 31, 6, 6, 99, ' '   
   535 00001927 2506066320                      db 37, 6, 6, 99, ' '   
   536 0000192C 2B06066320                      db 43, 6, 6, 99, ' '   
   537 00001931 3106066320                      db 49, 6, 6, 99, ' '   
   538 00001936 3706066320                      db 55, 6, 6, 99, ' '   
   539 0000193B 3D06066320                      db 61, 6, 6, 99, ' '  
   540 00001940 4306066320                      db 67, 6, 6, 99, ' '   
   541 00001945 4906066320                      db 73, 6, 6, 99, ' ' 
   542                                  
   543 0000194A 0108040120                      db 1, 8, 4, 1, ' '   
   544 0000194F 0708030120                      db 7, 8, 3, 1, ' '    
   545 00001954 0D08040120                      db 13, 8, 4, 1, ' '   
   546 00001959 1308030120                      db 19, 8, 3, 1, ' '   
   547 0000195E 1908040120                      db 25, 8, 4, 1, ' '   
   548 00001963 1F08030120                      db 31, 8, 3, 1, ' '   
   549 00001968 2508040120                      db 37, 8, 4, 1, ' '   
   550 0000196D 2B08030120                      db 43, 8, 3, 1, ' '   
   551 00001972 3108040120                      db 49, 8, 4, 1, ' '   
   552 00001977 3708030120                      db 55, 8, 3, 1, ' '   
   553 0000197C 3D08040120                      db 61, 8, 4, 1, ' '  
   554 00001981 4308030120                      db 67, 8, 3, 1, ' '   
   555 00001986 4908040120                      db 73, 8, 4, 1, ' ' 
   556                                  
   557 0000198B 010B066320                      db 1, 11, 6, 99, ' '   
   558 00001990 070B066320                      db 7, 11, 6, 99, ' '    
   559 00001995 0D0B066320                      db 13, 11, 6, 99, ' '   
   560 0000199A 130B066320                      db 19, 11, 6, 99, ' '   
   561 0000199F 190B066320                      db 25, 11, 6, 99, ' '   
   562 000019A4 1F0B066320                      db 31, 11, 6, 99, ' '   
   563 000019A9 250B066320                      db 37, 11, 6, 99, ' '   
   564 000019AE 2B0B066320                      db 43, 11, 6, 99, ' '   
   565 000019B3 310B066320                      db 49, 11, 6, 99, ' '   
   566 000019B8 370B066320                      db 55, 11, 6, 99, ' '   
   567 000019BD 3D0B030144                      db 61, 11, 3, 1, 'D'  
   568 000019C2 430B030120                      db 67, 11, 3, 1, ' '   
   569 000019C7 490B030120                      db 73, 11, 3, 1, ' ' 
   570                                  
   571 000019CC 010D010144                      db 1, 13, 1, 1, 'D'   
   572 000019D1 070D020150                      db 7, 13, 2, 1, 'P'    
   573 000019D6 0D0D010143                      db 13, 13, 1, 1, 'C'   
   574 000019DB 130D020120                      db 19, 13, 2, 1, ' '   
   575 000019E0 190D010120                      db 25, 13, 1, 1, ' '   
   576 000019E5 1F0D020120                      db 31, 13, 2, 1, ' '   
   577 000019EA 250D010120                      db 37, 13, 1, 1, ' '   
   578 000019EF 2B0D020120                      db 43, 13, 2, 1, ' '   
   579 000019F4 310D010120                      db 49, 13, 1, 1, ' '   
   580 000019F9 370D020120                      db 55, 13, 2, 1, ' '   
   581 000019FE 3D0D010120                      db 61, 13, 1, 1, ' '  
   582 00001A03 430D020120                      db 67, 13, 2, 1, ' '   
   583 00001A08 490D010120                      db 73, 13, 1, 1, ' ' 
   584                                  
   585 00001A0D 010F020120                      db 1, 15, 2, 1, ' '   
   586 00001A12 070F020120                      db 7, 15, 2, 1, ' '    
   587 00001A17 0D0F020120                      db 13, 15, 2, 1, ' '   
   588 00001A1C 130F066320                      db 19, 15, 6, 99, ' '   
   589 00001A21 190F066320                      db 25, 15, 6, 99, ' '   
   590 00001A26 1F0F066320                      db 31, 15, 6, 99, ' '   
   591 00001A2B 250F066320                      db 37, 15, 6, 99, ' '   
   592 00001A30 2B0F066320                      db 43, 15, 6, 99, ' '   
   593 00001A35 310F066320                      db 49, 15, 6, 99, ' '   
   594 00001A3A 370F066320                      db 55, 15, 6, 99, ' '   
   595 00001A3F 3D0F066320                      db 61, 15, 6, 99, ' '  
   596 00001A44 430F066320                      db 67, 15, 6, 99, ' '   
   597 00001A49 490F066320                      db 73, 15, 6, 99, ' ' 
   598                                  
   599 00001A4E 0112020120                      db 1, 18, 2, 1, ' '   
   600 00001A53 0712030120                      db 7, 18, 3, 1, ' '    
   601 00001A58 0D12020144                      db 13, 18, 2, 1, 'D'   
   602 00001A5D 1312030120                      db 19, 18, 3, 1, ' '   
   603 00001A62 1912020120                      db 25, 18, 2, 1, ' '   
   604 00001A67 1F12030120                      db 31, 18, 3, 1, ' '   
   605 00001A6C 2512020120                      db 37, 18, 2, 1, ' '   
   606 00001A71 2B12030120                      db 43, 18, 3, 1, ' '   
   607 00001A76 3112020120                      db 49, 18, 2, 1, ' '   
   608 00001A7B 3712030144                      db 55, 18, 3, 1, 'D'   
   609 00001A80 3D12020120                      db 61, 18, 2, 1, ' '  
   610 00001A85 4312030143                      db 67, 18, 3, 1, 'C'   
   611 00001A8A 4912020120                      db 73, 18, 2, 1, ' ' 
   612                                  
   613                                  
   614 00001A8F 0114066320                      db 1, 20, 6, 99, ' '   
   615 00001A94 0714066320                      db 7, 20, 6, 99, ' '    
   616 00001A99 0D14066320                      db 13, 20, 6, 99, ' '   
   617 00001A9E 1314066320                      db 19, 20, 6, 99, ' '   
   618 00001AA3 1914066320                      db 25, 20, 6, 99, ' '   
   619 00001AA8 1F14066320                      db 31, 20, 6, 99, ' '   
   620 00001AAD 2514066320                      db 37, 20, 6, 99, ' '   
   621 00001AB2 2B14066320                      db 43, 20, 6, 99, ' '   
   622 00001AB7 3114066320                      db 49, 20, 6, 99, ' '   
   623 00001ABC 3714066320                      db 55, 20, 6, 99, ' '   
   624 00001AC1 3D14010120                      db 61, 20, 1, 1, ' '  
   625 00001AC6 4314010153                      db 67, 20, 1, 1, 'S'   
   626 00001ACB 4914010143                      db 73, 20, 1, 1, 'C' 
   627                                  
   628                                      level3_blocks_count equ 104
   629                                  
   630                                      ; Nivel 4
   631                                      level4_blocks:
   632                                  
   633 00001AD0 0704010120                      db 7, 4, 1, 1, ' '    
   634 00001AD5 0D04020120                      db 13, 4, 2, 1, ' '   
   635 00001ADA 1304030120                      db 19, 4, 3, 1, ' '   
   636 00001ADF 1904050220                      db 25, 4, 5, 2, ' '   
   637 00001AE4 1F04020120                      db 31, 4, 2, 1, ' '
   638                                  
   639 00001AE9 2B04010120                      db 43, 4, 1, 1, ' '   
   640 00001AEE 3104020120                      db 49, 4, 2, 1, ' '   
   641 00001AF3 3704030144                      db 55, 4, 3, 1, 'D'   
   642 00001AF8 3D04040120                      db 61, 4, 4, 1, ' '  
   643 00001AFD 4304020120                      db 67, 4, 2, 1, ' ' 
   644                                  
   645 00001B02 0705020120                      db 7, 5, 2, 1, ' '    
   646 00001B07 0D05030120                      db 13, 5, 3, 1, ' '   
   647 00001B0C 1305050220                      db 19, 5, 5, 2, ' '   
   648 00001B11 1905020120                      db 25, 5, 2, 1, ' '   
   649 00001B16 1F05010120                      db 31, 5, 1, 1, ' '
   650                                  
   651 00001B1B 2B05020120                      db 43, 5, 2, 1, ' '   
   652 00001B20 3105030120                      db 49, 5, 3, 1, ' '   
   653 00001B25 3705040120                      db 55, 5, 4, 1, ' '   
   654 00001B2A 3D05020120                      db 61, 5, 2, 1, ' '  
   655 00001B2F 4305050220                      db 67, 5, 5, 2, ' '  
   656                                  
   657 00001B34 0706030120                      db 7, 6, 3, 1, ' '    
   658 00001B39 0D06050220                      db 13, 6, 5, 2, ' '   
   659 00001B3E 1306020120                      db 19, 6, 2, 1, ' '   
   660 00001B43 1906010120                      db 25, 6, 1, 1, ' '   
   661 00001B48 1F06020120                      db 31, 6, 2, 1, ' '
   662                                  
   663 00001B4D 2B06030120                      db 43, 6, 3, 1, ' '   
   664 00001B52 3106040120                      db 49, 6, 4, 1, ' '   
   665 00001B57 3706020120                      db 55, 6, 2, 1, ' '   
   666 00001B5C 3D06050220                      db 61, 6, 5, 2, ' '  
   667 00001B61 4306020120                      db 67, 6, 2, 1, ' '
   668                                  
   669 00001B66 0707050220                      db 7, 7, 5, 2, ' '    
   670 00001B6B 0D07020120                      db 13, 7, 2, 1, ' '   
   671 00001B70 1307010120                      db 19, 7, 1, 1, ' '   
   672 00001B75 1907020120                      db 25, 7, 2, 1, ' '   
   673 00001B7A 1F07030120                      db 31, 7, 3, 1, ' '
   674                                  
   675 00001B7F 2B07040120                      db 43, 7, 4, 1, ' '   
   676 00001B84 3107020120                      db 49, 7, 2, 1, ' '   
   677 00001B89 3707050220                      db 55, 7, 5, 2, ' '   
   678 00001B8E 3D07020120                      db 61, 7, 2, 1, ' '  
   679 00001B93 4307030120                      db 67, 7, 3, 1, ' '
   680                                  
   681 00001B98 0708020120                      db 7, 8, 2, 1, ' '    
   682 00001B9D 0D08010120                      db 13, 8, 1, 1, ' '   
   683 00001BA2 1308020120                      db 19, 8, 2, 1, ' '   
   684 00001BA7 1908030120                      db 25, 8, 3, 1, ' '   
   685 00001BAC 1F08040120                      db 31, 8, 4, 1, ' '
   686                                  
   687 00001BB1 2B08020120                      db 43, 8, 2, 1, ' '   
   688 00001BB6 3108050220                      db 49, 8, 5, 2, ' '   
   689 00001BBB 3708020120                      db 55, 8, 2, 1, ' '   
   690 00001BC0 3D08030120                      db 61, 8, 3, 1, ' '  
   691 00001BC5 4308040120                      db 67, 8, 4, 1, ' '
   692                                  
   693 00001BCA 0709010120                      db 7, 9, 1, 1, ' '    
   694 00001BCF 0D09020120                      db 13, 9, 2, 1, ' '   
   695 00001BD4 1309030120                      db 19, 9, 3, 1, ' '   
   696 00001BD9 1909040120                      db 25, 9, 4, 1, ' '   
   697 00001BDE 1F09020120                      db 31, 9, 2, 1, ' '
   698                                  
   699 00001BE3 2B09050220                      db 43, 9, 5, 2, ' '   
   700 00001BE8 3109020120                      db 49, 9, 2, 1, ' '   
   701 00001BED 3709030120                      db 55, 9, 3, 1, ' '   
   702 00001BF2 3D09040120                      db 61, 9, 4, 1, ' '  
   703 00001BF7 4309020120                      db 67, 9, 2, 1, ' '
   704                                  
   705 00001BFC 070A020120                      db 7, 10, 2, 1, ' '    
   706 00001C01 0D0A030120                      db 13, 10, 3, 1, ' '   
   707 00001C06 130A040120                      db 19, 10, 4, 1, ' '   
   708 00001C0B 190A020120                      db 25, 10, 2, 1, ' '   
   709 00001C10 1F0A010120                      db 31, 10, 1, 1, ' '
   710                                  
   711 00001C15 2B0A020120                      db 43, 10, 2, 1, ' '   
   712 00001C1A 310A030120                      db 49, 10, 3, 1, ' '   
   713 00001C1F 370A040120                      db 55, 10, 4, 1, ' '   
   714 00001C24 3D0A020120                      db 61, 10, 2, 1, ' '  
   715 00001C29 430A010120                      db 67, 10, 1, 1, ' '
   716                                  
   717 00001C2E 070B030120                      db 7, 11, 3, 1, ' '   
   718 00001C33 0D0B040120                      db 13, 11, 4, 1, ' '   
   719 00001C38 130B020120                      db 19, 11, 2, 1, ' '   
   720 00001C3D 190B010120                      db 25, 11, 1, 1, ' '  
   721 00001C42 1F0B050220                      db 31, 11, 5, 2, ' '
   722                                  
   723 00001C47 2B0B030120                      db 43, 11, 3, 1, ' '   
   724 00001C4C 310B040120                      db 49, 11, 4, 1, ' '   
   725 00001C51 370B020120                      db 55, 11, 2, 1, ' '   
   726 00001C56 3D0B010120                      db 61, 11, 1, 1, ' '  
   727 00001C5B 430B020120                      db 67, 11, 2, 1, ' '
   728                                  
   729 00001C60 070C040120                      db 7, 12, 4, 1, ' '   
   730 00001C65 0D0C020120                      db 13, 12, 2, 1, ' '   
   731 00001C6A 130C010120                      db 19, 12, 1, 1, ' '   
   732 00001C6F 190C050220                      db 25, 12, 5, 2, ' '  
   733 00001C74 1F0C030120                      db 31, 12, 3, 1, ' '
   734                                  
   735 00001C79 2B0C040120                      db 43, 12, 4, 1, ' '    
   736 00001C7E 310C020120                      db 49, 12, 2, 1, ' '   
   737 00001C83 370C010120                      db 55, 12, 1, 1, ' '   
   738 00001C88 3D0C020120                      db 61, 12, 2, 1, ' '   
   739 00001C8D 430C030120                      db 67, 12, 3, 1, ' '
   740                                  
   741 00001C92 070D020120                      db 7, 13, 2, 1, ' '   
   742 00001C97 0D0D010120                      db 13, 13, 1, 1, ' '   
   743 00001C9C 130D050220                      db 19, 13, 5, 2, ' '   
   744 00001CA1 190D030143                      db 25, 13, 3, 1, 'C'  
   745 00001CA6 1F0D040120                      db 31, 13, 4, 1, ' '
   746                                  
   747 00001CAB 2B0D020120                      db 43, 13, 2, 1, ' '    
   748 00001CB0 310D010120                      db 49, 13, 1, 1, ' '   
   749 00001CB5 370D020120                      db 55, 13, 2, 1, ' '   
   750 00001CBA 3D0D030120                      db 61, 13, 3, 1, ' '   
   751 00001CBF 430D050220                      db 67, 13, 5, 2, ' '
   752                                  
   753 00001CC4 070E010120                      db 7, 14, 1, 1, ' '   
   754 00001CC9 0D0E050220                      db 13, 14, 5, 2, ' '   
   755 00001CCE 130E030120                      db 19, 14, 3, 1, ' '   
   756 00001CD3 190E040120                      db 25, 14, 4, 1, ' '  
   757 00001CD8 1F0E020120                      db 31, 14, 2, 1, ' '
   758                                  
   759 00001CDD 2B0E010120                      db 43, 14, 1, 1, ' '    
   760 00001CE2 310E020120                      db 49, 14, 2, 1, ' '   
   761 00001CE7 370E030120                      db 55, 14, 3, 1, ' '   
   762 00001CEC 3D0E050220                      db 61, 14, 5, 2, ' '   
   763 00001CF1 430E020120                      db 67, 14, 2, 1, ' '
   764                                  
   765 00001CF6 070F050220                      db 7, 15, 5, 2, ' '   
   766 00001CFB 0D0F030120                      db 13, 15, 3, 1, ' '   
   767 00001D00 130F040120                      db 19, 15, 4, 1, ' '   
   768 00001D05 190F020120                      db 25, 15, 2, 1, ' '  
   769 00001D0A 1F0F010120                      db 31, 15, 1, 1, ' '
   770                                  
   771 00001D0F 2B0F020145                      db 43, 15, 2, 1, 'E'    
   772 00001D14 310F03014C                      db 49, 15, 3, 1, 'L'   
   773 00001D19 370F050220                      db 55, 15, 5, 2, ' '   
   774 00001D1E 3D0F020120                      db 61, 15, 2, 1, ' '   
   775 00001D23 430F010120                      db 67, 15, 1, 1, ' '
   776                                  
   777 00001D28 0710030120                      db 7, 16, 3, 1, ' '   
   778 00001D2D 0D10040120                      db 13, 16, 4, 1, ' '   
   779 00001D32 1310020120                      db 19, 16, 2, 1, ' '   
   780 00001D37 1910010120                      db 25, 16, 1, 1, ' '  
   781 00001D3C 1F10020120                      db 31, 16, 2, 1, ' '
   782                                  
   783 00001D41 2B10030120                      db 43, 16, 3, 1, ' '    
   784 00001D46 3110050220                      db 49, 16, 5, 2, ' '   
   785 00001D4B 3710020120                      db 55, 16, 2, 1, ' '   
   786 00001D50 3D10010120                      db 61, 16, 1, 1, ' '   
   787 00001D55 4310020120                      db 67, 16, 2, 1, ' '
   788                                  
   789 00001D5A 0711040120                      db 7, 17, 4, 1, ' '   
   790 00001D5F 0D11020120                      db 13, 17, 2, 1, ' '   
   791 00001D64 1311010120                      db 19, 17, 1, 1, ' '   
   792 00001D69 1911020120                      db 25, 17, 2, 1, ' '  
   793 00001D6E 1F11030120                      db 31, 17, 3, 1, ' '
   794                                  
   795 00001D73 2B11050220                      db 43, 17, 5, 2, ' '    
   796 00001D78 3111020120                      db 49, 17, 2, 1, ' '    
   797 00001D7D 3711010120                      db 55, 17, 1, 1, ' '   
   798 00001D82 3D11020120                      db 61, 17, 2, 1, ' '   
   799 00001D87 4311030120                      db 67, 17, 3, 1, ' '
   800                                  
   801                                      level4_blocks_count equ 140
   802                                  
   803                                      ; Nivel 5
   804                                      level5_blocks:
   805                                  
   806 00001D8C 1303020145                      db 19, 3, 2, 1, 'E'   
   807 00001D91 3703020120                      db 55, 3, 2, 1, ' '   
   808                                  
   809 00001D96 1304020120                      db 19, 4, 2, 1, ' '   
   810 00001D9B 370402014C                      db 55, 4, 2, 1, 'L' 
   811                                  
   812 00001DA0 1905020120                      db 25, 5, 2, 1, ' '   
   813 00001DA5 3105020153                      db 49, 5, 2, 1, 'S'   
   814                                  
   815 00001DAA 1906020120                      db 25, 6, 2, 1, ' '   
   816 00001DAF 3106020120                      db 49, 6, 2, 1, ' '   
   817                                  
   818 00001DB4 1307050220                      db 19, 7, 5, 2, ' '   
   819 00001DB9 1907050220                      db 25, 7, 5, 2, ' '  
   820 00001DBE 1F07050220                      db 31, 7, 5, 2, ' '
   821 00001DC3 2507050220                      db 37, 7, 5, 2, ' '
   822 00001DC8 2B07050220                      db 43, 7, 5, 2, ' '    
   823 00001DCD 3107050220                      db 49, 7, 5, 2, ' '    
   824 00001DD2 3707050220                      db 55, 7, 5, 2, ' '   
   825                                  
   826 00001DD7 1308050220                      db 19, 8, 5, 2, ' '   
   827 00001DDC 1908050220                      db 25, 8, 5, 2, ' '  
   828 00001DE1 1F08050220                      db 31, 8, 5, 2, ' '
   829 00001DE6 2508050220                      db 37, 8, 5, 2, ' '
   830 00001DEB 2B08050220                      db 43, 8, 5, 2, ' '    
   831 00001DF0 3108050220                      db 49, 8, 5, 2, ' '    
   832 00001DF5 3708050220                      db 55, 8, 5, 2, ' '   
   833                                  
   834 00001DFA 0D09050220                      db 13, 9, 5, 2, ' '   
   835 00001DFF 1309050220                      db 19, 9, 5, 2, ' '   
   836 00001E04 1909040143                      db 25, 9, 4, 1, 'C'  
   837 00001E09 1F09050220                      db 31, 9, 5, 2, ' '
   838 00001E0E 2509050220                      db 37, 9, 5, 2, ' '
   839 00001E13 2B09050220                      db 43, 9, 5, 2, ' '    
   840 00001E18 3109040144                      db 49, 9, 4, 1, 'D'    
   841 00001E1D 3709050220                      db 55, 9, 5, 2, ' '   
   842 00001E22 3D09050220                      db 61, 9, 5, 2, ' '  
   843                                  
   844 00001E27 0D0A050220                      db 13, 10, 5, 2, ' '   
   845 00001E2C 130A050220                      db 19, 10, 5, 2, ' '   
   846 00001E31 190A040120                      db 25, 10, 4, 1, ' '  
   847 00001E36 1F0A050220                      db 31, 10, 5, 2, ' '
   848 00001E3B 250A050220                      db 37, 10, 5, 2, ' '
   849 00001E40 2B0A050220                      db 43, 10, 5, 2, ' '    
   850 00001E45 310A040120                      db 49, 10, 4, 1, ' '    
   851 00001E4A 370A050220                      db 55, 10, 5, 2, ' '   
   852 00001E4F 3D0A050220                      db 61, 10, 5, 2, ' '   
   853                                          
   854 00001E54 070B050220                      db 7, 11, 5, 2, ' '   
   855 00001E59 0D0B050220                      db 13, 11, 5, 2, ' '   
   856 00001E5E 130B050220                      db 19, 11, 5, 2, ' '   
   857 00001E63 190B050220                      db 25, 11, 5, 2, ' '  
   858 00001E68 1F0B050220                      db 31, 11, 5, 2, ' '
   859 00001E6D 250B050220                      db 37, 11, 5, 2, ' '
   860 00001E72 2B0B050220                      db 43, 11, 5, 2, ' '    
   861 00001E77 310B050220                      db 49, 11, 5, 2, ' '    
   862 00001E7C 370B050220                      db 55, 11, 5, 2, ' '   
   863 00001E81 3D0B050220                      db 61, 11, 5, 2, ' '   
   864 00001E86 430B050220                      db 67, 11, 5, 2, ' '
   865                                  
   866 00001E8B 070C050220                      db 7, 12, 5, 2, ' '   
   867 00001E90 0D0C050220                      db 13, 12, 5, 2, ' '   
   868 00001E95 130C050220                      db 19, 12, 5, 2, ' '   
   869 00001E9A 190C050220                      db 25, 12, 5, 2, ' '  
   870 00001E9F 1F0C050220                      db 31, 12, 5, 2, ' '
   871 00001EA4 250C050220                      db 37, 12, 5, 2, ' '
   872 00001EA9 2B0C050220                      db 43, 12, 5, 2, ' '    
   873 00001EAE 310C050220                      db 49, 12, 5, 2, ' '    
   874 00001EB3 370C050220                      db 55, 12, 5, 2, ' '   
   875 00001EB8 3D0C050220                      db 61, 12, 5, 2, ' '   
   876 00001EBD 430C050220                      db 67, 12, 5, 2, ' '
   877                                  
   878 00001EC2 070D050220                      db 7, 13, 5, 2, ' '   
   879 00001EC7 0D0D050220                      db 13, 13, 5, 2, ' '   
   880 00001ECC 130D050220                      db 19, 13, 5, 2, ' '   
   881 00001ED1 190D050220                      db 25, 13, 5, 2, ' '  
   882 00001ED6 1F0D050220                      db 31, 13, 5, 2, ' '
   883 00001EDB 250D050220                      db 37, 13, 5, 2, ' '
   884 00001EE0 2B0D050220                      db 43, 13, 5, 2, ' '    
   885 00001EE5 310D050220                      db 49, 13, 5, 2, ' '    
   886 00001EEA 370D050220                      db 55, 13, 5, 2, ' '   
   887 00001EEF 3D0D050220                      db 61, 13, 5, 2, ' '   
   888 00001EF4 430D050220                      db 67, 13, 5, 2, ' '
   889                                  
   890                                          
   891 00001EF9 070E050220                      db 7, 14, 5, 2, ' '   
   892 00001EFE 130E050220                      db 19, 14, 5, 2, ' '   
   893 00001F03 190E050220                      db 25, 14, 5, 2, ' '  
   894 00001F08 1F0E050220                      db 31, 14, 5, 2, ' '
   895 00001F0D 250E050220                      db 37, 14, 5, 2, ' '
   896 00001F12 2B0E050220                      db 43, 14, 5, 2, ' '    
   897 00001F17 310E050220                      db 49, 14, 5, 2, ' '    
   898 00001F1C 370E050220                      db 55, 14, 5, 2, ' '   
   899 00001F21 430E050220                      db 67, 14, 5, 2, ' '
   900                                  
   901 00001F26 070F050220                      db 7, 15, 5, 2, ' '   
   902 00001F2B 130F050220                      db 19, 15, 5, 2, ' '      
   903 00001F30 370F050220                      db 55, 15, 5, 2, ' '   
   904 00001F35 430F050220                      db 67, 15, 5, 2, ' '
   905                                   
   906 00001F3A 0710050220                      db 7, 16, 5, 2, ' '   
   907 00001F3F 1310050220                      db 19, 16, 5, 2, ' '      
   908 00001F44 3710050220                      db 55, 16, 5, 2, ' '   
   909 00001F49 4310050220                      db 67, 16, 5, 2, ' '
   910                                  
   911                                  
   912 00001F4E 1911050220                      db 25, 17, 5, 2, ' '  
   913 00001F53 1F11050220                      db 31, 17, 5, 2, ' '
   914 00001F58 2B11050220                      db 43, 17, 5, 2, ' '    
   915 00001F5D 3111050220                      db 49, 17, 5, 2, ' ' 
   916                                  
   917 00001F62 1912050220                      db 25, 18, 5, 2, ' '  
   918 00001F67 1F12050220                      db 31, 18, 5, 2, ' '
   919 00001F6C 2B12050220                      db 43, 18, 5, 2, ' '    
   920 00001F71 3112050220                      db 49, 18, 5, 2, ' ' 
   921                                  
   922                                      level5_blocks_count equ 98
   923                                  
   924                                      ; Array para mantener el estado de los bloques
   925 00001F76 00<rep C8h>                 block_states: times 200 db 0  ; Durabilidad actual de cada bloque
   926                                  
   927                                      
   928                                      ; Variables para almacenar los valores
   929 0000203E 0000000000000000            current_score dq 0          ; Score actual
   930 00002046 00                          destroyed_blocks db 0       ; Bloques destruidos en el nivel actual
   931                                      
   932                                      ; Buffer para convertir números a string
   933 00002047 00<rep 14h>                 number_buffer: times 20 db 0
   934                                  
   935 0000205B 4023242640                  enemy_chars db "@", "#", "$", "&", "@"    ; El nivel 1 y 5 comparten el mismo caracter (@)
   936                                      
   937                                      ; Estructura para los enemigos (x, y, activo)
   938 00002060 00<rep 1Eh>                 enemies: times 10 * 3 db 0     ; Máximo 5 enemigos, cada uno con 3 bytes (x, y, activo)
   939 0000207E 0A                          enemies_count db 10            ; Cantidad de enemigos activos
   940                                      
   941 0000207F 3200000000000000            enemy_points dq 50              ; Puntos por destruir un enemigo
   942 00002087 00                          enemy_move_counter db 0         ; Contador para controlar velocidad de movimiento
   943 00002088 09                          enemy_move_delay db 9           ; Mover enemigos cada N ciclos
   944 00002089 00                          enemy_move_total db 0      ; Contador total de movimientos
   945 0000208A 00                          enemy_target db 0          ; 0 = persigue bola, 1 = persigue paleta
   946 0000208B 14                          MOVEMENT_THRESHOLD db 20   ; Número de movimientos antes de cambiar objetivo
   947                                   ;Formato: número de bloques destruidos necesario para que aparezca cada enemigo
   948                                      ; Añade esto en la sección .dataa
   949 0000208C 464748494A4C788CA0-         level1_spawn_points: db 70, 71, 72, 73, 74, 76, 120, 140, 160, 180    ; 10 enemigos, cada 2 bloques
   949 00002095 B4                 
   950 00002096 001E3246556E8296AA-         level2_spawn_points: db 0, 30, 50, 70, 85, 110, 130, 150, 170, 190    ; 10 enemigos, cada 2 bloques
   950 0000209F BE                 
   951 000020A0 00000032373C646464-         level3_spawn_points: db 0, 0, 0, 50, 55, 60, 100, 100, 100, 100   ; 10 enemigos, cada 3 bloques
   951 000020A9 64                 
   952 000020AA 00040F1E2832465A64-         level4_spawn_points: db 0, 4, 15, 30, 40, 50, 70, 90, 100, 120  ; 10 enemigos, cada 3 bloques
   952 000020B3 78                 
   953 000020B4 00000A141E2328323C-         level5_spawn_points: db 0, 0, 10, 20, 30, 35, 40, 50, 60, 80 ; 10 enemigos, cada 5 bloques
   953 000020BD 50                 
   954                                          ; Arreglo de punteros a los spawn points de cada nivel
   955                                      spawn_points_table:
   956 000020BE [8C20000000000000]              dq level1_spawn_points
   957 000020C6 [9620000000000000]              dq level2_spawn_points
   958 000020CE [A020000000000000]              dq level3_spawn_points
   959 000020D6 [AA20000000000000]              dq level4_spawn_points
   960 000020DE [B420000000000000]              dq level5_spawn_points
   961                                  
   962                                      ; Variables para el comportamiento de enemigos
   963 000020E6 1E                          BEHAVIOR_CHANGE_TIME db 30    ; Ciclos antes de cambiar comportamiento
   964 000020E7 00                          behavior_counter db 0          ; Contador para cambio de comportamiento
   965 000020E8 00                          current_behavior db 0          ; 0 = persigue bola, 1 = persigue paleta
   966 000020E9 00<rep Ah>                  enemy_spawns_triggered: times 10 db 0  ; 0 = no spawned, 1 = spawned
   967                                  
   968 000020F3 50756E74616A653A20-         score_label: db "Puntaje: [          ]", 0xA, 0xD  ; 10 espacios para el número
   968 000020FC 5B2020202020202020-
   968 00002105 20205D0A0D         
   969                                      score_label_len: equ $ - score_label
   970 0000210A 426C6F717565732064-         blocks_label: db "Bloques destruidos: [   ]", 0xA, 0xD  ; 3 espacios para el número
   970 00002113 657374727569646F73-
   970 0000211C 3A205B2020205D0A0D 
   971                                      blocks_label_len: equ $ - blocks_label
   972                                      
   973                                      ; Posición donde insertar los números en los labels
   974                                      score_pos equ 10    ; Posición después de "Puntaje: ["
   975                                      blocks_pos equ 20   ; Posición después de "Bloques destruidos: ["
   976                                      
   977                                      ; Definición de las vidas (x, y, estado)
   978                                      ; Formato: posición_x, posición_y, estado (1 = activa, 0 = inactiva)
   979                                      lives_data: 
   980 00002125 021E01                          db 2, 30, 1     ; Vida 1 (activa)
   981 00002128 041E01                          db 4, 30, 1     ; Vida 2 (activa)
   982 0000212B 061E01                          db 6, 30, 1     ; Vida 3 (inactiva)
   983 0000212E 081E00                          db 8, 30, 0     ; Vida 4 (inactiva)
   984 00002131 0A1E00                          db 10, 30, 0    ; Vida 5 (inactiva)
   985 00002134 0C1E00                          db 12, 30, 0    ; Vida 6 (inactiva)
   986 00002137 0E1E00                          db 14, 30, 0    ; Vida 7 (inactiva)
   987                                      lives_count equ 7    ; Total de vidas
   988 0000213A 5E                          life_char db "^"    
   989 0000213B 03                          current_lives db 3   ; Contador de vidas activas actual
   990                                  
   991                                  ; Estructura para almacenar las letras y sus posiciones
   992                                      ; Formato: x, y, letra, activo (1 = activo, 0 = inactivo)
   993 0000213C 00<rep 190h>                letters_map: times 100 * 4 db 0  ; Espacio para 100 letras
   994 000022CC 00                          letters_count db 0   
   995 000022CD 20                          last_letter db ' '    ; Variable para almacenar la última letra
   996 000022CE 506F64657220616374-         last_letter_msg db "Poder actual: [ ]", 0xA, 0xD  ; Mensaje para mostrar la última letra
   996 000022D7 75616C3A205B205D0A-
   996 000022E0 0D                 
   997                                      last_letter_msg_len equ $ - last_letter_msg
   998 000022E1 00                          current_power_processed db 0 ; 0 = no procesado, 1 = ya procesado
   999 000022E2 07                          max_lives db 7              ; Máximo número de vidas permitidas
  1000 000022E3 0700000000000000            ball_speed dq 7             ; Velocidad normal de la bola
  1001 000022EB 0200000000000000            slow_ball_speed dq 2        ; Velocidad lenta (se usará como divisor)
  1002 000022F3 0000000000000000            speed_counter dq 0          ; Contador para ralentizar el movimiento
  1003                                     
  1004 000022FB 00                          initial_catch_active db 0   ; 0 = inactivo, 1 = activo
  1005                                  
  1006 000022FC 00                          catch_power_active db 0     ; 0 = inactivo, 1 = activo
  1007 000022FD 00                          ball_caught db 0           ; 0 = no atrapada, 1 = atrapada
  1008 000022FE 00                          ball_caught_2 db 0           ; 0 = no atrapada, 1 = atrapada
  1009 000022FF 00                          ball_caught_3 db 0           ; 0 = no atrapada, 1 = atrapada
  1010                                  
  1011 00002300 0000000000000000            ball_catch_offset dq 0     ; Offset respecto a la paleta cuando está atrapada
  1012 00002308 00                          last_key db 0    ; Variable para almacenar la última tecla presionada
  1013                                  
  1014 00002309 00                          laser_power_active: db 0         ; Flag para indicar si el poder láser está activo
  1015 0000230A 7C                          laser_symbol: db '|'             ; Símbolo para representar el láser
  1016 0000230B 00                          laser_count: db 0                ; Contador de láseres activos
  1017 0000230C 00<rep C8h>                 lasers: times 200 db 0           ; Array para almacenar posiciones de láseres (x,y)
  1018 000023D4 0100000000000000            laser_speed: dq 1                ; Velocidad del láser
  1019                                  
  1020                                      balls_data:     ; Array para almacenar hasta 3 bolas
  1021                                          ; Bola 1 (principal)
  1022 000023DC 0000000000000000                dq 0        ; x_pos
  1023 000023E4 0000000000000000                dq 0        ; y_pos
  1024 000023EC 0100000000000000                dq 1        ; direction_x
  1025 000023F4 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1026 000023FC 01                              db 1        ; active
  1027                                          ; Bola 2
  1028 000023FD 0000000000000000                dq 0        ; x_pos
  1029 00002405 0000000000000000                dq 0        ; y_pos
  1030 0000240D FFFFFFFFFFFFFFFF                dq -1       ; direction_x
  1031 00002415 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1032 0000241D 00                              db 0        ; active
  1033                                          ; Bola 3
  1034 0000241E 0000000000000000                dq 0        ; x_pos
  1035 00002426 0000000000000000                dq 0        ; y_pos
  1036 0000242E 0000000000000000                dq 0        ; direction_x
  1037 00002436 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1038 0000243E 00                              db 0        ; active
  1039                                      
  1040 0000243F 01                          balls_count db 1     ; Contador de bolas activas
  1041                                      BALL_STRUCT_SIZE equ 33  ; Tamaño de cada estructura de bola (8*4 + 1)
  1042 00002440 00<rep Ah>                  enemy_last_x:       times 10 db 0
  1043 0000244A 00<rep Ah>                  enemy_last_y:       times 10 db 0
  1044 00002454 00<rep Ah>                  enemy_stuck_count:  times 10 db 0
  1045 0000245E 00                          letter_move_counter db 0
  1046                                      initial_ball_offset_x equ 2    ; Offset desde el centro de la paleta
  1047                                      initial_ball_offset_y equ -1   ; Offset vertical desde la paleta
  1048                                  
  1049                                  section .text
  1050                                  
  1051                                  
  1052                                  print_lives:
  1053 000001DD 55                          push rbp
  1054 000001DE 4889E5                      mov rbp, rsp
  1055                                      
  1056 000001E1 4D31E4                      xor r12, r12                    ; Índice de la vida actual
  1057                                      
  1058                                      .print_loop:
  1059 000001E4 4983FC07                        cmp r12, lives_count
  1060 000001E8 7D45                            jge .end
  1061                                          
  1062                                          ; Calcular offset de la vida actual
  1063 000001EA 4C89E0                          mov rax, r12
  1064 000001ED 486BC003                        imul rax, 3                     ; Cada vida ocupa 3 bytes (x, y, estado)
  1065 000001F1 488DB0[25210000]                lea rsi, [lives_data + rax]
  1066                                          
  1067                                          ; Calcular posición en el tablero
  1068 000001F8 4C0FB606                        movzx r8, byte [rsi]            ; X
  1069 000001FC 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  1070                                          
  1071                                          ; Calcular offset en el tablero
  1072 00000201 B850000000                      mov rax, column_cells
  1073 00000206 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  1074 0000020A 49F7E1                          mul r9
  1075 0000020D 4C01C0                          add rax, r8
  1076 00000210 488DB8[400A0000]                lea rdi, [board + rax]
  1077                                          
  1078                                          ; Verificar estado de la vida y dibujar el carácter correspondiente
  1079 00000217 807E0201                        cmp byte [rsi + 2], 1
  1080 0000021B 7405                            je .draw_active
  1081                                          
  1082                                          ; Si está inactiva, dibujar espacio
  1083 0000021D C60720                          mov byte [rdi], ' '
  1084 00000220 EB08                            jmp .next_life
  1085                                          
  1086                                      .draw_active:
  1087                                          ; Si está activa, dibujar el símbolo de vida
  1088 00000222 8A05(3A210000)                  mov al, [life_char]
  1089 00000228 8807                            mov [rdi], al
  1090                                          
  1091                                      .next_life:
  1092 0000022A 49FFC4                          inc r12
  1093 0000022D EBB5                            jmp .print_loop
  1094                                          
  1095                                      .end:
  1096 0000022F 5D                              pop rbp
  1097 00000230 C3                              ret
  1098                                  
  1099                                  ; Función para desactivar una vida
  1100                                  ; Función modificada para perder una vida
  1101                                  ; Modificar lose_life para reiniciar solo la bola principal
  1102                                  lose_life:
  1103 00000231 55                          push rbp
  1104 00000232 4889E5                      mov rbp, rsp
  1105                                      
  1106                                      ; Verificar si aún quedan vidas
  1107 00000235 803D(3B210000)00            cmp byte [current_lives], 0
  1108 0000023C 0F84AB000000                je .game_lost
  1109                                      
  1110                                      ; Encontrar la última vida activa
  1111 00000242 B907000000                  mov rcx, lives_count
  1112 00000247 48FFC9                      dec rcx
  1113                                      
  1114                                      .find_active_life:
  1115 0000024A 4889C8                          mov rax, rcx
  1116 0000024D 486BC003                        imul rax, 3
  1117 00000251 488DB0[25210000]                lea rsi, [lives_data + rax]
  1118 00000258 807E0201                        cmp byte [rsi + 2], 1
  1119 0000025C 740A                            je .deactivate_life
  1120 0000025E 48FFC9                          dec rcx
  1121 00000261 79E7                            jns .find_active_life
  1122 00000263 E985000000                      jmp .game_lost
  1123                                          
  1124                                      .deactivate_life:
  1125                                          ; Borrar vida visualmente y en datos
  1126 00000268 4C0FB606                        movzx r8, byte [rsi]
  1127 0000026C 4C0FB64E01                      movzx r9, byte [rsi + 1]
  1128 00000271 B850000000                      mov rax, column_cells
  1129 00000276 4883C002                        add rax, 2
  1130 0000027A 49F7E1                          mul r9
  1131 0000027D 4C01C0                          add rax, r8
  1132 00000280 488DB8[400A0000]                lea rdi, [board + rax]
  1133 00000287 C60720                          mov byte [rdi], ' '
  1134 0000028A C6460200                        mov byte [rsi + 2], 0
  1135 0000028E FE0D(3B210000)                  dec byte [current_lives]
  1136                                          
  1137                                          ; Borrar paleta anterior
  1138 00000294 4C8B05(BF140000)                mov r8, [pallet_position]
  1139 0000029B 488B0D(C7140000)                mov rcx, [pallet_size]
  1140                                          .erase_pallet_loop:
  1141 000002A2 41C60020                            mov byte [r8], ' '
  1142 000002A6 49FFC0                              inc r8
  1143 000002A9 48FFC9                              dec rcx
  1144 000002AC 75F4                                jnz .erase_pallet_loop
  1145                                          
  1146                                          ; Reiniciar solo la bola principal
  1147 000002AE 48C705(DF140000)28-             mov qword [ball_x_pos], 40
  1147 000002B6 000000             
  1148 000002B9 48C705(E7140000)1C-             mov qword [ball_y_pos], 28
  1148 000002C1 000000             
  1149 000002C4 C605(FF140000)00                mov byte [ball_moving], 0
  1150 000002CB C605(00150000)01                mov byte [ball_active], 1       ; Activar bola principal
  1151 000002D2 48C705(BF140000)-               mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  1151 000002D9 [B0130000]         
  1152                                          
  1153                                          ; Asegurarse que las otras bolas están desactivadas
  1154 000002DD C605(22150000)00                mov byte [ball2_active], 0
  1155 000002E4 C605(44150000)00                mov byte [ball3_active], 0
  1156                                          
  1157 000002EB EB07                            jmp .end
  1158                                          
  1159                                      .game_lost:
  1160 000002ED E8E2000000                      call game_lost
  1161 000002F2 EB00                            jmp .end
  1162                                          
  1163                                      .end:
  1164 000002F4 5D                              pop rbp
  1165 000002F5 C3                              ret
  1166                                  ; Función modificada para verificar colisión con el borde inferior
  1167                                  check_bottom_collision:
  1168 000002F6 55                          push rbp
  1169 000002F7 4889E5                      mov rbp, rsp
  1170                                      
  1171                                      ; Verificar si el nivel está completo (no quedan bloques)
  1172 000002FA 803D(7A150000)00            cmp byte [blocks_remaining], 0
  1173 00000301 0F84CB000000                je .balls_remain            ; Si no quedan bloques, no perder vidas
  1174                                      
  1175                                      ; Verificar bola principal
  1176 00000307 803D(00150000)01            cmp byte [ball_active], 1
  1177 0000030E 7542                        jne .check_ball2
  1178 00000310 488B05(E7140000)            mov rax, [ball_y_pos]
  1179 00000317 4883F81E                    cmp rax, row_cells - 2
  1180 0000031B 7535                        jne .check_ball2
  1181                                      
  1182                                      ; Borrar visualmente la bola principal
  1183 0000031D 4C8B05(DF140000)            mov r8, [ball_x_pos]
  1184 00000324 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  1185 0000032B 4981C0[400A0000]            add r8, board
  1186 00000332 4C89C9                      mov rcx, r9
  1187 00000335 B852000000                  mov rax, column_cells + 2
  1188 0000033A 48F7E9                      imul rcx
  1189 0000033D 4901C0                      add r8, rax
  1190 00000340 41C60020                    mov byte [r8], char_space    ; Borrar la bola del tablero
  1191                                      
  1192 00000344 C605(00150000)00            mov byte [ball_active], 0
  1193 0000034B C605(FF140000)00            mov byte [ball_moving], 0
  1194                                  
  1195                                  .check_ball2:
  1196 00000352 803D(22150000)01            cmp byte [ball2_active], 1
  1197 00000359 751B                        jne .check_ball3
  1198 0000035B 488B05(09150000)            mov rax, [ball2_y_pos]
  1199 00000362 4883F81E                    cmp rax, row_cells - 2
  1200 00000366 750E                        jne .check_ball3
  1201 00000368 C605(22150000)00            mov byte [ball2_active], 0
  1202 0000036F C605(21150000)00            mov byte [ball2_moving], 0
  1203                                  
  1204                                  .check_ball3:
  1205 00000376 803D(44150000)01            cmp byte [ball3_active], 1
  1206 0000037D 751B                        jne .check_active_balls
  1207 0000037F 488B05(2B150000)            mov rax, [ball3_y_pos]
  1208 00000386 4883F81E                    cmp rax, row_cells - 2
  1209 0000038A 750E                        jne .check_active_balls
  1210 0000038C C605(44150000)00            mov byte [ball3_active], 0
  1211 00000393 C605(43150000)00            mov byte [ball3_moving], 0
  1212                                  
  1213                                  .check_active_balls:
  1214                                      ; Verificar si quedan bolas activas
  1215 0000039A 4831C9                      xor rcx, rcx
  1216                                      
  1217                                      ; Contar bolas activas
  1218 0000039D 8A05(00150000)              mov al, byte [ball_active]
  1219 000003A3 4801C1                      add rcx, rax
  1220 000003A6 8A05(22150000)              mov al, byte [ball2_active]
  1221 000003AC 4801C1                      add rcx, rax
  1222 000003AF 8A05(44150000)              mov al, byte [ball3_active]
  1223 000003B5 4801C1                      add rcx, rax
  1224                                      
  1225                                      ; Si no hay bolas activas y quedan bloques, perder vida
  1226 000003B8 4885C9                      test rcx, rcx
  1227 000003BB 7515                        jnz .balls_remain
  1228                                      
  1229 000003BD 803D(7A150000)00            cmp byte [blocks_remaining], 0  ; Verificar si quedan bloques
  1230 000003C4 740C                        je .balls_remain               ; Si no quedan bloques, no perder vida
  1231                                      
  1232 000003C6 E866FEFFFF                  call lose_life
  1233 000003CB C605(00150000)01            mov byte [ball_active], 1      ; Reactivar bola principal
  1234                                      
  1235                                  .balls_remain:
  1236 000003D2 5D                          pop rbp
  1237 000003D3 C3                          ret
  1238                                  
  1239                                  ; Nueva función para game over
  1240                                  game_lost:
  1241                                      ; Limpiar la pantalla
  1242                                      print clear, clear_length
    93 000003D4 B801000000          <1>  mov eax, sys_write
    94 000003D9 BF01000000          <1>  mov edi, 1
    95 000003DE 48BE-               <1>  mov rsi, %1
    95 000003E0 [1000000000000000]  <1>
    96 000003E8 BA07000000          <1>  mov edx, %2
    97 000003ED 0F05                <1>  syscall
  1243                                      
  1244                                      ; Mostrar mensaje de derrota
  1245                                      section .data
  1246 0000245F C2A148617320706572-             lost_msg: db "¡Has perdido!", 0xA, 0xD
  1246 00002468 6469646F210A0D     
  1247                                          lost_msg_len: equ $ - lost_msg
  1248                                      section .text
  1249                                      
  1250                                      ; Imprimir mensaje de derrota
  1251                                      print lost_msg, lost_msg_len
    93 000003EF B801000000          <1>  mov eax, sys_write
    94 000003F4 BF01000000          <1>  mov edi, 1
    95 000003F9 48BE-               <1>  mov rsi, %1
    95 000003FB [5F24000000000000]  <1>
    96 00000403 BA10000000          <1>  mov edx, %2
    97 00000408 0F05                <1>  syscall
  1252                                      print score_msg, score_msg_len
    93 0000040A B801000000          <1>  mov eax, sys_write
    94 0000040F BF01000000          <1>  mov edi, 1
    95 00000414 48BE-               <1>  mov rsi, %1
    95 00000416 [8D24000000000000]  <1>
    96 0000041E BA0F000000          <1>  mov edx, %2
    97 00000423 0F05                <1>  syscall
  1253                                      
  1254                                      ; Mostrar puntaje final
  1255 00000425 488B05(3E200000)            mov rax, [current_score]
  1256 0000042C 48BF-                       mov rdi, number_buffer
  1256 0000042E [4720000000000000] 
  1257 00000436 E838150000                  call number_to_string
  1258                                      print number_buffer, 20
    93 0000043B B801000000          <1>  mov eax, sys_write
    94 00000440 BF01000000          <1>  mov edi, 1
    95 00000445 48BE-               <1>  mov rsi, %1
    95 00000447 [4720000000000000]  <1>
    96 0000044F BA14000000          <1>  mov edx, %2
    97 00000454 0F05                <1>  syscall
  1259                                      
  1260                                      ; Esperar un momento antes de salir
  1261 00000456 48C7059FFBFFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  1261 0000045F 0000               
  1262 00000461 48C7059CFBFFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  1262 0000046A 0000               
  1263                                      sleeptime
   109 0000046C B823000000          <1>  mov eax, sys_nanosleep
   110 00000471 48BF-               <1>  mov rdi, timespec
   110 00000473 [0000000000000000]  <1>
   111 0000047B 31F6                <1>  xor esi, esi
   112 0000047D 0F05                <1>  syscall
  1264                                      
  1265 0000047F E96D1F0000                  jmp exit
  1266                                  
  1267                                  
  1268                                  ; Función para registrar una nueva letra en el mapa
  1269                                  ; Entrada:
  1270                                  ;   al - letra a registrar
  1271                                  ;   r8b - posición x
  1272                                  ;   r9b - posición y
  1273                                  register_letter:
  1274 00000484 55                          push rbp
  1275 00000485 4889E5                      mov rbp, rsp
  1276 00000488 53                          push rbx
  1277 00000489 51                          push rcx
  1278                                      
  1279 0000048A 3C20                        cmp al, ' '
  1280 0000048C 7438                        je .end
  1281                                  
  1282                                      ; Encontrar un espacio libre en el mapa
  1283 0000048E 4831C9                      xor rcx, rcx
  1284 00000491 480FB615(CC220000)          movzx rdx, byte [letters_count]
  1285                                      
  1286                                      .find_slot:
  1287 00000499 4883F964                        cmp rcx, 100              ; Máximo de letras
  1288 0000049D 7D27                            jge .end                  ; Si no hay espacio, salir
  1289                                          
  1290 0000049F 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1291 000004A7 807B0300                        cmp byte [rbx + 3], 0    ; Verificar si el slot está inactivo
  1292 000004AB 7405                            je .found_slot
  1293                                          
  1294 000004AD 48FFC1                          inc rcx
  1295 000004B0 EBE7                            jmp .find_slot
  1296                                          
  1297                                      .found_slot:
  1298                                          ; Guardar la información de la letra
  1299 000004B2 448803                          mov [rbx], r8b           ; x
  1300 000004B5 44884B01                        mov [rbx + 1], r9b       ; y
  1301 000004B9 884302                          mov [rbx + 2], al        ; letra
  1302 000004BC C6430301                        mov byte [rbx + 3], 1    ; marcar como activo
  1303                                          
  1304 000004C0 FE05(CC220000)                  inc byte [letters_count]
  1305                                          
  1306                                      .end:
  1307 000004C6 59                              pop rcx
  1308 000004C7 5B                              pop rbx
  1309 000004C8 5D                              pop rbp
  1310 000004C9 C3                              ret
  1311                                  
  1312                                  ; Función para imprimir todas las letras registradas
  1313                                  print_letters:
  1314 000004CA 55                          push rbp
  1315 000004CB 4889E5                      mov rbp, rsp
  1316 000004CE 53                          push rbx
  1317 000004CF 51                          push rcx
  1318                                      
  1319 000004D0 4831C9                      xor rcx, rcx
  1320                                      
  1321                                      .print_loop:
  1322 000004D3 4883F964                        cmp rcx, 100              ; Máximo de letras
  1323 000004D7 7D37                            jge .end
  1324                                          
  1325                                          ; Obtener puntero a la letra actual
  1326 000004D9 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1327                                          
  1328                                          ; Verificar si está activa
  1329 000004E1 807B0300                        cmp byte [rbx + 3], 0
  1330 000004E5 7424                            je .next_letter
  1331                                          
  1332                                          ; Calcular posición en el tablero
  1333 000004E7 4C0FB603                        movzx r8, byte [rbx]      ; x
  1334 000004EB 4C0FB64B01                      movzx r9, byte [rbx + 1]  ; y
  1335                                          
  1336                                          ; Calcular offset en el tablero
  1337 000004F0 B850000000                      mov rax, column_cells
  1338 000004F5 4883C002                        add rax, 2                ; Incluir caracteres de nueva línea
  1339 000004F9 49F7E1                          mul r9
  1340 000004FC 4C01C0                          add rax, r8
  1341 000004FF 488DB8[400A0000]                lea rdi, [board + rax]
  1342                                          
  1343                                          ; Imprimir la letra
  1344 00000506 8A4302                          mov al, [rbx + 2]
  1345 00000509 8807                            mov [rdi], al
  1346                                          
  1347                                      .next_letter:
  1348 0000050B 48FFC1                          inc rcx
  1349 0000050E EBC3                            jmp .print_loop
  1350                                          
  1351                                      .end:
  1352 00000510 59                              pop rcx
  1353 00000511 5B                              pop rbx
  1354 00000512 5D                              pop rbp
  1355 00000513 C3                              ret
  1356                                  
  1357                                  ; Función para borrar una letra específica
  1358                                  ; Entrada:
  1359                                  ;   r8b - posición x
  1360                                  ;   r9b - posición y
  1361                                  remove_letter:
  1362 00000514 55                          push rbp
  1363 00000515 4889E5                      mov rbp, rsp
  1364 00000518 53                          push rbx
  1365 00000519 51                          push rcx
  1366                                      
  1367 0000051A 4831C9                      xor rcx, rcx
  1368                                      
  1369                                      .find_loop:
  1370 0000051D 4883F964                        cmp rcx, 100              ; Máximo de letras
  1371 00000521 7D2E                            jge .end
  1372                                          
  1373 00000523 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1374                                          
  1375                                          ; Verificar si está activa y coincide la posición
  1376 0000052B 807B0300                        cmp byte [rbx + 3], 0
  1377 0000052F 741B                            je .next_letter
  1378                                          
  1379 00000531 8A03                            mov al, [rbx]
  1380 00000533 4438C0                          cmp al, r8b
  1381 00000536 7514                            jne .next_letter
  1382                                          
  1383 00000538 8A4301                          mov al, [rbx + 1]
  1384 0000053B 4438C8                          cmp al, r9b
  1385 0000053E 750C                            jne .next_letter
  1386                                          
  1387                                          ; Encontrada la letra, desactivarla
  1388 00000540 C6430300                        mov byte [rbx + 3], 0
  1389 00000544 FE0D(CC220000)                  dec byte [letters_count]
  1390 0000054A EB05                            jmp .end
  1391                                          
  1392                                      .next_letter:
  1393 0000054C 48FFC1                          inc rcx
  1394 0000054F EBCC                            jmp .find_loop
  1395                                          
  1396                                      .end:
  1397 00000551 59                              pop rcx
  1398 00000552 5B                              pop rbx
  1399 00000553 5D                              pop rbp
  1400 00000554 C3                              ret
  1401                                  ; Función para mover las letras hacia abajo
  1402                                  move_letters:
  1403 00000555 55                          push rbp
  1404 00000556 4889E5                      mov rbp, rsp
  1405 00000559 53                          push rbx
  1406 0000055A 57                          push rdi
  1407 0000055B 56                          push rsi
  1408 0000055C 4150                        push r8
  1409 0000055E 4151                        push r9
  1410 00000560 4152                        push r10
  1411 00000562 4153                        push r11
  1412                                  
  1413 00000564 4831C9                      xor rcx, rcx
  1414                                  
  1415                                      ; Verificar si debemos mover la letra en este frame
  1416 00000567 FE05(5E240000)              inc byte [letter_move_counter]    ; Incrementar contador
  1417 0000056D 803D(5E240000)0B            cmp byte [letter_move_counter], 11 ; Ajusta este número para cambiar velocidad
  1418 00000574 0F8C20020000                jl .skip_all                         ; Si no es momento de mover, terminar
  1419 0000057A C605(5E240000)00            mov byte [letter_move_counter], 0 ; Resetear contador
  1420                                  
  1421                                      .move_loop:
  1422 00000581 4883F964                        cmp rcx, 100
  1423 00000585 0F8D0D020000                    jge .print_last_letter
  1424                                          
  1425 0000058B 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1426 00000593 807B0300                        cmp byte [rbx + 3], 0
  1427 00000597 0F84F3010000                    je .next_letter
  1428                                  
  1429 0000059D 4C0FB603                        movzx r8, byte [rbx]
  1430 000005A1 4C0FB64B01                      movzx r9, byte [rbx + 1]
  1431                                  
  1432 000005A6 B850000000                      mov rax, column_cells
  1433 000005AB 4883C002                        add rax, 2
  1434 000005AF 49F7E1                          mul r9
  1435 000005B2 4C01C0                          add rax, r8
  1436 000005B5 488DB8[400A0000]                lea rdi, [board + rax]
  1437 000005BC C60720                          mov byte [rdi], ' '
  1438                                  
  1439 000005BF FE4301                          inc byte [rbx + 1]
  1440 000005C2 4C0FB64B01                      movzx r9, byte [rbx + 1]
  1441                                  
  1442 000005C7 4983F91F                        cmp r9, row_cells - 1
  1443 000005CB 7C09                            jl .check_pallet_collision
  1444                                  
  1445 000005CD C6430300                        mov byte [rbx + 3], 0
  1446 000005D1 E9BA010000                      jmp .next_letter
  1447                                  
  1448                                          .check_pallet_collision:
  1449 000005D6 B850000000                          mov rax, column_cells
  1450 000005DB 4883C002                            add rax, 2
  1451 000005DF 49F7E1                              mul r9
  1452 000005E2 4C01C0                              add rax, r8
  1453 000005E5 488DB8[400A0000]                    lea rdi, [board + rax]
  1454                                  
  1455 000005EC 8A07                                mov al, [rdi]
  1456 000005EE 3C20                                cmp al, ' '
  1457 000005F0 0F849A010000                        je .next_letter
  1458 000005F6 3C3D                                cmp al, char_equal
  1459 000005F8 740A                                je .capture_letter
  1460                                  
  1461 000005FA 8A4302                              mov al, [rbx + 2]
  1462 000005FD 8807                                mov [rdi], al
  1463 000005FF E98C010000                          jmp .next_letter
  1464                                  
  1465                                          .capture_letter:
  1466                                              ; Obtener la nueva letra
  1467 00000604 8A4302                              mov al, [rbx + 2]
  1468                                              
  1469                                              ; Comparar con la última letra
  1470 00000607 3A05(CD220000)                      cmp al, [last_letter]
  1471 0000060D 7407                                je .same_letter
  1472                                              
  1473                                              ; Es una letra diferente, resetear el procesamiento
  1474 0000060F C605(E1220000)00                    mov byte [current_power_processed], 0
  1475                                              
  1476                                              .same_letter:
  1477                                              ; Guardar la nueva letra
  1478 00000616 8805(CD220000)                      mov [last_letter], al
  1479                                              
  1480                                              ; Verificar si es 'E' para extender la paleta
  1481 0000061C 3C45                                cmp al, 'E'
  1482 0000061E 7450                                je .extend_pallet
  1483                                              
  1484                                              ; Verificar si es 'P' para añadir vida
  1485 00000620 3C50                                cmp al, 'P'
  1486 00000622 7478                                je .check_add_life
  1487                                  
  1488 00000624 3C53                                cmp al, 'S'
  1489 00000626 0F84B4000000                        je .slow_ball
  1490                                  
  1491 0000062C 3C43                                cmp al, 'C'
  1492 0000062E 0F84D8000000                        je .activate_catch
  1493                                              
  1494 00000634 3C4C                                cmp al, 'L'
  1495 00000636 0F84F9000000                        je .activate_laser
  1496                                  
  1497 0000063C 3C44                                cmp al, 'D'
  1498 0000063E 0F841A010000                        je .activate_split
  1499                                  
  1500                                              ; Si no es ningún power-up, restaurar tamaño normal
  1501 00000644 488B05(CF140000)                    mov rax, [default_pallet_size]
  1502 0000064B 488905(C7140000)                    mov [pallet_size], rax
  1503 00000652 48C705(E3220000)07-                 mov qword [ball_speed], 7    ; Restaurar velocidad normal
  1503 0000065A 000000             
  1504 0000065D C605(FC220000)00                    mov byte [catch_power_active], 0
  1505 00000664 C605(09230000)00                    mov byte [laser_power_active], 0
  1506 0000066B E91C010000                          jmp .finish_capture
  1507                                  
  1508                                              .extend_pallet:
  1509 00000670 C605(09230000)00                        mov byte [laser_power_active], 0
  1510 00000677 C605(FC220000)00                        mov byte [catch_power_active], 0
  1511 0000067E 48C705(E3220000)07-                     mov qword [ball_speed], 7    ; Restaurar velocidad normal
  1511 00000686 000000             
  1512 00000689 488B05(D7140000)                        mov rax, [extended_pallet_size]
  1513 00000690 488905(C7140000)                        mov [pallet_size], rax
  1514 00000697 E9F0000000                              jmp .finish_capture
  1515                                  
  1516                                              .check_add_life:
  1517 0000069C C605(09230000)00                        mov byte [laser_power_active], 0
  1518 000006A3 C605(FC220000)00                        mov byte [catch_power_active], 0
  1519 000006AA 488B05(CF140000)                        mov rax, [default_pallet_size]
  1520 000006B1 488905(C7140000)                        mov [pallet_size], rax
  1521 000006B8 48C705(E3220000)07-                     mov qword [ball_speed], 7 
  1521 000006C0 000000             
  1522                                                  ; Verificar si ya procesamos este power-up
  1523 000006C3 803D(E1220000)00                        cmp byte [current_power_processed], 0
  1524 000006CA 0F85BC000000                            jne .finish_capture
  1525                                                  
  1526                                                  ; Preservar registros importantes
  1527 000006D0 51                                      push rcx
  1528 000006D1 53                                      push rbx
  1529                                                  
  1530                                                  ; Marcar como procesado
  1531 000006D2 C605(E1220000)01                        mov byte [current_power_processed], 1
  1532                                                  
  1533                                                  ; Añadir una vida
  1534 000006D9 E8A8040000                              call add_life
  1535                                                  
  1536                                                  ; Restaurar registros
  1537 000006DE 5B                                      pop rbx
  1538 000006DF 59                                      pop rcx
  1539                                                  
  1540                                              .slow_ball:
  1541 000006E0 C605(09230000)00                        mov byte [laser_power_active], 0
  1542 000006E7 C605(FC220000)00                        mov byte [catch_power_active], 0                
  1543 000006EE 488B05(CF140000)                        mov rax, [default_pallet_size]
  1544 000006F5 488905(C7140000)                        mov [pallet_size], rax
  1545 000006FC 48C705(E3220000)0A-                     mov qword [ball_speed], 10    ; Activar velocidad lenta
  1545 00000704 000000             
  1546 00000707 E980000000                              jmp .finish_capture
  1547                                  
  1548                                              .activate_catch:
  1549 0000070C C605(09230000)00                        mov byte [laser_power_active], 0
  1550 00000713 488B05(CF140000)                        mov rax, [default_pallet_size]
  1551 0000071A 488905(C7140000)                        mov [pallet_size], rax
  1552 00000721 48C705(E3220000)07-                     mov qword [ball_speed], 7
  1552 00000729 000000             
  1553 0000072C C605(FC220000)01                        mov byte [catch_power_active], 1
  1554 00000733 EB57                                    jmp .finish_capture
  1555                                  
  1556                                              .activate_laser:
  1557 00000735 C605(FC220000)00                        mov byte [catch_power_active], 0
  1558 0000073C 488B05(CF140000)                        mov rax, [default_pallet_size]
  1559 00000743 488905(C7140000)                        mov [pallet_size], rax
  1560 0000074A 48C705(E3220000)07-                     mov qword [ball_speed], 7
  1560 00000752 000000             
  1561 00000755 C605(09230000)01                        mov byte [laser_power_active], 1    ; Activar el poder láser
  1562 0000075C EB2E                                    jmp .finish_capture
  1563                                  
  1564                                              .activate_split:
  1565 0000075E C605(09230000)00                        mov byte [laser_power_active], 0
  1566 00000765 C605(FC220000)00                        mov byte [catch_power_active], 0
  1567 0000076C 488B05(CF140000)                        mov rax, [default_pallet_size]
  1568 00000773 488905(C7140000)                        mov [pallet_size], rax
  1569 0000077A 48C705(E3220000)07-                     mov qword [ball_speed], 7 
  1569 00000782 000000             
  1570 00000785 E8DF000000                              call activate_split_power
  1571 0000078A EB00                                    jmp .finish_capture
  1572                                  
  1573                                              .finish_capture:
  1574 0000078C C6430300                                mov byte [rbx + 3], 0
  1575                                  
  1576                                          .next_letter:
  1577 00000790 48FFC1                              inc rcx
  1578 00000793 E9E9FDFFFF                          jmp .move_loop
  1579                                  
  1580                                      .print_last_letter:
  1581                                          ; ;; en vez de imprimir, saltamos
  1582 00000798 EB0D                            jmp .end
  1583                                  
  1584                                  
  1585                                      .skip_all:                        ; Nueva etiqueta para saltar todo cuando no movemos
  1586 0000079A 415B                            pop r11
  1587 0000079C 415A                            pop r10
  1588 0000079E 4159                            pop r9
  1589 000007A0 4158                            pop r8
  1590 000007A2 5E                              pop rsi
  1591 000007A3 5F                              pop rdi
  1592 000007A4 5B                              pop rbx
  1593 000007A5 5D                              pop rbp
  1594 000007A6 C3                              ret
  1595                                  
  1596                                      .end:
  1597 000007A7 415B                            pop r11
  1598 000007A9 415A                            pop r10
  1599 000007AB 4159                            pop r9
  1600 000007AD 4158                            pop r8
  1601 000007AF 5E                              pop rsi
  1602 000007B0 5F                              pop rdi
  1603 000007B1 5B                              pop rbx
  1604 000007B2 5D                              pop rbp
  1605 000007B3 C3                              ret
  1606                                  
  1607                                  print_power_label:
  1608 000007B4 55                          push rbp
  1609 000007B5 4889E5                      mov  rbp, rsp
  1610                                      
  1611                                      ; Crear buffer temporal
  1612 000007B8 4883EC20                    sub rsp, 32
  1613                                      
  1614                                      ; Copiar el mensaje base al buffer
  1615 000007BC 4889E7                      mov rdi, rsp
  1616 000007BF 48BE-                       mov rsi, last_letter_msg
  1616 000007C1 [CE22000000000000] 
  1617 000007C9 B913000000                  mov rcx, last_letter_msg_len
  1618 000007CE F3A4                        rep movsb
  1619                                      
  1620                                      ; Insertar la última letra capturada
  1621 000007D0 8A05(CD220000)              mov al, [last_letter]
  1622 000007D6 8844240F                    mov byte [rsp + 15], al    ; Asumiendo que 15 es la posición correcta
  1623                                      
  1624                                      ; Imprimir el buffer completo
  1625                                      print rsp, last_letter_msg_len
    93 000007DA B801000000          <1>  mov eax, sys_write
    94 000007DF BF01000000          <1>  mov edi, 1
    95 000007E4 4889E6              <1>  mov rsi, %1
    96 000007E7 BA13000000          <1>  mov edx, %2
    97 000007EC 0F05                <1>  syscall
  1626                                      
  1627                                      ; Restaurar stack
  1628 000007EE 4883C420                    add rsp, 32
  1629 000007F2 5D                          pop rbp
  1630 000007F3 C3                          ret
  1631                                  
  1632                                  
  1633                                  
  1634                                  clear_lasers:
  1635 000007F4 55                          push rbp
  1636 000007F5 4889E5                      mov  rbp, rsp
  1637                                  
  1638                                      ; Recorrer el array de láseres
  1639 000007F8 4831C9                      xor rcx, rcx                ; Índice del láser
  1640 000007FB 480FB61D(0B230000)          movzx rbx, byte [laser_count]  ; Cantidad de láseres activos
  1641                                  
  1642                                      .clear_loop:
  1643 00000803 4839D9                          cmp rcx, rbx
  1644 00000806 7D2F                            jge .done                ; Salir si no quedan láseres
  1645                                  
  1646                                          ; Obtener posición del láser actual
  1647 00000808 488DB409[0C230000]              lea rsi, [lasers + rcx * 2]
  1648 00000810 4C0FB606                        movzx r8, byte [rsi]     ; X
  1649 00000814 4C0FB64E01                      movzx r9, byte [rsi + 1] ; Y
  1650                                  
  1651                                          ; Calcular posición en el tablero
  1652 00000819 B850000000                      mov rax, column_cells
  1653 0000081E 4883C002                        add rax, 2
  1654 00000822 49F7E1                          mul r9
  1655 00000825 4C01C0                          add rax, r8
  1656 00000828 488DB8[400A0000]                lea rdi, [board + rax]
  1657                                  
  1658                                          ; Borrar el láser visualmente
  1659 0000082F C60720                          mov byte [rdi], ' '
  1660                                  
  1661                                          ; Pasar al siguiente láser
  1662 00000832 48FFC1                          inc rcx
  1663 00000835 EBCC                            jmp .clear_loop
  1664                                  
  1665                                      .done:
  1666                                          ; Resetear contador de láseres
  1667 00000837 C605(0B230000)00                mov byte [laser_count], 0
  1668                                  
  1669 0000083E 5D                              pop rbp
  1670 0000083F C3                              ret
  1671                                  
  1672                                  
  1673                                  ; Nueva función para actualizar los láseres
  1674                                  update_lasers:
  1675 00000840 55                          push rbp
  1676 00000841 4889E5                      mov rbp, rsp
  1677                                      
  1678                                      ; Verificar si el poder láser está activo
  1679 00000844 803D(09230000)00            cmp byte [laser_power_active], 0
  1680 0000084B 741A                        je .end
  1681                                      
  1682                                      ; Verificar si se presionó la tecla de espacio
  1683 0000084D 803D(08230000)20            cmp byte [last_key], ' '
  1684 00000854 750C                        jne .skip_shooting
  1685                                      
  1686                                      ; Disparar nuevos láseres
  1687 00000856 E8FD000000                  call shoot_lasers
  1688 0000085B C605(08230000)00            mov byte [last_key], 0    ; Limpiar la tecla procesada
  1689                                      
  1690                                      .skip_shooting:
  1691                                      ; Mover los láseres existentes
  1692 00000862 E88B010000                  call move_lasers
  1693                                      
  1694                                      .end:
  1695 00000867 5D                              pop rbp
  1696 00000868 C3                              ret
  1697                                  
  1698                                  activate_split_power:
  1699 00000869 55                          push rbp
  1700 0000086A 4889E5                      mov rbp, rsp
  1701 0000086D 50                          push rax
  1702 0000086E 53                          push rbx
  1703 0000086F 51                          push rcx
  1704 00000870 52                          push rdx
  1705                                      
  1706                                      ; Si ambas bolas extra ya están activas, salimos
  1707 00000871 8A0D(22150000)              mov cl, byte [ball2_active]
  1708 00000877 220D(44150000)              and cl, byte [ball3_active]
  1709 0000087D 80F901                      cmp cl, 1
  1710 00000880 0F84CC000000                je .end
  1711                                      
  1712                                  .find_active_ball:
  1713                                      ; Guardar posición de la bola activa
  1714 00000886 4831C0                      xor rax, rax    ; Limpiar rax
  1715 00000889 4831DB                      xor rbx, rbx    ; Limpiar rbx
  1716                                      
  1717                                      ; Revisar ball1
  1718 0000088C 803D(00150000)01            cmp byte [ball_active], 1
  1719 00000893 7417                        je .use_ball1
  1720                                      
  1721                                      ; Revisar ball2
  1722 00000895 803D(22150000)01            cmp byte [ball2_active], 1
  1723 0000089C 741E                        je .use_ball2
  1724                                      
  1725                                      ; Revisar ball3
  1726 0000089E 803D(44150000)01            cmp byte [ball3_active], 1
  1727 000008A5 7425                        je .use_ball3
  1728                                      
  1729 000008A7 E9A6000000                  jmp .end        ; Si no hay bolas activas, salimos
  1730                                  
  1731                                  .use_ball1:
  1732 000008AC 488B05(DF140000)            mov rax, qword [ball_x_pos]
  1733 000008B3 488B1D(E7140000)            mov rbx, qword [ball_y_pos]
  1734 000008BA EB20                        jmp .create_missing_balls
  1735                                  
  1736                                  .use_ball2:
  1737 000008BC 488B05(01150000)            mov rax, qword [ball2_x_pos]
  1738 000008C3 488B1D(09150000)            mov rbx, qword [ball2_y_pos]
  1739 000008CA EB10                        jmp .create_missing_balls
  1740                                  
  1741                                  .use_ball3:
  1742 000008CC 488B05(23150000)            mov rax, qword [ball3_x_pos]
  1743 000008D3 488B1D(2B150000)            mov rbx, qword [ball3_y_pos]
  1744 000008DA EB00                        jmp .create_missing_balls
  1745                                  
  1746                                  .create_missing_balls:
  1747                                      ; Intentar crear ball2 si no está activa
  1748 000008DC 803D(22150000)01            cmp byte [ball2_active], 1
  1749 000008E3 7432                        je .create_ball3    ; Si ball2 ya está activa, intentar crear ball3
  1750                                      
  1751                                      ; Crear ball2
  1752 000008E5 488905(01150000)            mov qword [ball2_x_pos], rax
  1753 000008EC 48891D(09150000)            mov qword [ball2_y_pos], rbx
  1754 000008F3 48C705(11150000)FF-         mov qword [ball2_direction_x], -1
  1754 000008FB FFFFFF             
  1755 000008FE 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  1755 00000906 FFFFFF             
  1756 00000909 C605(21150000)01            mov byte [ball2_moving], 1
  1757 00000910 C605(22150000)01            mov byte [ball2_active], 1
  1758                                      
  1759                                  .create_ball3:
  1760                                      ; Intentar crear ball3 si no está activa
  1761 00000917 803D(44150000)01            cmp byte [ball3_active], 1
  1762 0000091E 7432                        je .end
  1763                                      
  1764                                      ; Crear ball3
  1765 00000920 488905(23150000)            mov qword [ball3_x_pos], rax
  1766 00000927 48891D(2B150000)            mov qword [ball3_y_pos], rbx
  1767 0000092E 48C705(33150000)01-         mov qword [ball3_direction_x], 1
  1767 00000936 000000             
  1768 00000939 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  1768 00000941 FFFFFF             
  1769 00000944 C605(43150000)01            mov byte [ball3_moving], 1
  1770 0000094B C605(44150000)01            mov byte [ball3_active], 1
  1771                                  
  1772                                  .end:
  1773 00000952 5A                          pop rdx
  1774 00000953 59                          pop rcx
  1775 00000954 5B                          pop rbx
  1776 00000955 58                          pop rax
  1777 00000956 5D                          pop rbp
  1778 00000957 C3                          ret
  1779                                  
  1780                                  
  1781                                  shoot_lasers:
  1782 00000958 55                          push rbp
  1783 00000959 4889E5                      mov rbp, rsp
  1784 0000095C 53                          push rbx
  1785                                      
  1786                                      ; Verificar si hay espacio para más láseres
  1787 0000095D 480FB605(0B230000)          movzx rax, byte [laser_count]
  1788 00000965 4883F862                    cmp rax, 98  ; Asegurar que hay espacio para 2 láseres
  1789 00000969 0F8D80000000                jge .end
  1790                                      
  1791                                      ; Obtener posición de la paleta
  1792 0000096F 4C8B05(BF140000)            mov r8, [pallet_position]
  1793 00000976 4981E8[400A0000]            sub r8, board                  ; Offset relativo de la paleta
  1794                                      
  1795                                      ; Calcular coordenadas x,y
  1796 0000097D 4C89C0                      mov rax, r8
  1797 00000980 41B950000000                mov r9, column_cells
  1798 00000986 4983C102                    add r9, 2                     ; Ancho total de línea
  1799 0000098A 4831D2                      xor rdx, rdx
  1800 0000098D 49F7F1                      div r9                        ; rax = y, rdx = x
  1801                                      
  1802                                      ; Guardar coordenadas
  1803 00000990 4989C2                      mov r10, rax                  ; Y en r10
  1804 00000993 4989D3                      mov r11, rdx                  ; X en r11
  1805                                      
  1806                                      ; Validar coordenadas
  1807 00000996 4983FA00                    cmp r10, 0
  1808 0000099A 7C53                        jl .end
  1809 0000099C 4983FA20                    cmp r10, row_cells
  1810 000009A0 7D4D                        jge .end
  1811 000009A2 4983FB00                    cmp r11, 0
  1812 000009A6 7C47                        jl .end
  1813 000009A8 4983FB50                    cmp r11, column_cells
  1814 000009AC 7D41                        jge .end
  1815                                      
  1816                                      ; Calcular índice para el primer láser
  1817 000009AE 480FB61D(0B230000)          movzx rbx, byte [laser_count]
  1818 000009B6 486BDB02                    imul rbx, 2                   ; Cada láser usa 2 bytes
  1819                                      
  1820                                      ; Primer láser (izquierda)
  1821 000009BA 488DBB[0C230000]            lea rdi, [lasers + rbx]
  1822 000009C1 44881F                      mov [rdi], r11b              ; X
  1823 000009C4 4488D0                      mov al, r10b
  1824 000009C7 FEC8                        dec al                       ; Y - 1
  1825 000009C9 884701                      mov [rdi + 1], al           ; Y
  1826                                      
  1827                                      ; Segundo láser (derecha)
  1828 000009CC 4488D8                      mov al, r11b
  1829 000009CF 0205(C7140000)              add al, byte [pallet_size]
  1830 000009D5 FEC8                        dec al                       ; Ajustar para el último carácter
  1831 000009D7 488DBB[0E230000]            lea rdi, [lasers + rbx + 2]
  1832 000009DE 8807                        mov [rdi], al               ; X
  1833 000009E0 4488D0                      mov al, r10b
  1834 000009E3 FEC8                        dec al                      ; Y - 1
  1835 000009E5 884701                      mov [rdi + 1], al          ; Y
  1836                                      
  1837                                      ; Incrementar contador de láseres
  1838 000009E8 8005(0B230000)02            add byte [laser_count], 2
  1839                                      
  1840                                      
  1841                                      .end:
  1842 000009EF 5B                              pop rbx
  1843 000009F0 5D                              pop rbp
  1844 000009F1 C3                              ret
  1845                                  
  1846                                  ; Función corregida para mover láseres
  1847                                  ; Función corregida para mover láseres
  1848                                  ; Esta es la parte clave para recorrer los láseres de atrás hacia adelante.
  1849                                  
  1850                                  ; Actualizar la función move_lasers para incluir verificación de colisiones
  1851                                  ; ============================================================
  1852                                  ; NUEVA FUNCIÓN move_lasers (todo-en-uno)
  1853                                  ; ============================================================
  1854                                  ; Mueve cada láser hacia arriba, verifica colisiones (bloques/enemigos)
  1855                                  ; y lo elimina inmediatamente si choca, de lo contrario lo dibuja.
  1856                                  ; ============================================================
  1857                                  move_lasers:
  1858 000009F2 55                          push rbp
  1859 000009F3 4889E5                      mov  rbp, rsp
  1860 000009F6 53                          push rbx
  1861 000009F7 57                          push rdi
  1862 000009F8 56                          push rsi
  1863 000009F9 4154                        push r12
  1864 000009FB 4155                        push r13
  1865 000009FD 4156                        push r14
  1866 000009FF 4157                        push r15
  1867                                  
  1868                                      ; 1) Tomamos la cantidad de láseres
  1869 00000A01 480FB60D(0B230000)          movzx rcx, byte [laser_count]
  1870 00000A09 4885C9                      test rcx, rcx
  1871 00000A0C 0F84BB000000                jz .fin              ; Si es cero, no hay láseres => salir
  1872                                  
  1873                                      ; Ajustamos RCX para que sea el último índice (laser_count - 1)
  1874 00000A12 48FFC9                      dec rcx              ; Empezamos desde el último láser
  1875                                  
  1876                                  .loop_lasers:
  1877                                      ; RSI apunta a lasers + (rcx * 2) => (x, y) del láser
  1878 00000A15 488DB409[0C230000]          lea rsi, [lasers + rcx*2]
  1879                                  
  1880                                      ; 2) Cargar x,y actuales del láser
  1881 00000A1D 4C0FB606                    movzx r8,  byte [rsi]      ; X
  1882 00000A21 4C0FB64E01                  movzx r9,  byte [rsi + 1]  ; Y
  1883                                  
  1884                                      ; 3) Borrar el láser de su posición actual en pantalla
  1885                                      ;    (por si en el ciclo anterior se había dibujado)
  1886 00000A26 B850000000                  mov rax, column_cells
  1887 00000A2B 4883C002                    add rax, 2
  1888 00000A2F 49F7E1                      mul r9
  1889 00000A32 4C01C0                      add rax, r8
  1890 00000A35 488DB8[400A0000]            lea rdi, [board + rax]
  1891 00000A3C C60720                      mov byte [rdi], ' '        ; Borramos el símbolo anterior (láser)
  1892                                  
  1893                                      ; 4) Mover el láser hacia arriba (y - 1)
  1894 00000A3F 49FFC9                      dec r9
  1895                                  
  1896                                      ; Si y < 1, está fuera de pantalla => eliminarlo
  1897 00000A42 4983F901                    cmp r9, 1
  1898 00000A46 7C57                        jl .delete_laser
  1899                                  
  1900                                      ; Guardamos la posición nueva en el array (aún no lo dibujamos)
  1901 00000A48 44884E01                    mov byte [rsi + 1], r9b
  1902                                  
  1903                                      ; 5) Verificamos colisión inmediata con bloques o enemigos
  1904                                      ;    - Primero colisión con bloques
  1905                                      ; ---------------------------------------------------------
  1906                                      ; Calculamos la nueva dirección de memoria para esa posición (r9,r8)
  1907 00000A4C B850000000                  mov rax, column_cells
  1908 00000A51 4883C002                    add rax, 2
  1909 00000A55 49F7E1                      mul r9
  1910 00000A58 4C01C0                      add rax, r8
  1911 00000A5B 488DB8[400A0000]            lea rdi, [board + rax]   ; rdi apunta a la celda donde estaría el láser
  1912                                  
  1913                                      ; Revisar si hay bloque
  1914 00000A62 51                          push rcx
  1915 00000A63 56                          push rsi
  1916 00000A64 57                          push rdi
  1917 00000A65 4989FA                      mov r10, rdi    ; En check_block_collision, r10 = posición en board
  1918 00000A68 E85E100000                  call check_block_collision
  1919 00000A6D 5F                          pop rdi
  1920 00000A6E 5E                          pop rsi
  1921 00000A6F 59                          pop rcx
  1922                                  
  1923 00000A70 4885C0                      test rax, rax          ; rax=1 => hubo colisión con bloque
  1924 00000A73 752A                        jnz .delete_laser      ; si chocó, eliminar ya el láser
  1925                                  
  1926                                      ;    - Luego colisión con enemigos
  1927                                      ; ---------------------------------------------------------
  1928 00000A75 51                          push rcx
  1929 00000A76 56                          push rsi
  1930 00000A77 57                          push rdi
  1931                                      ; Pasamos (r8=X, r9=Y, r10=punteroEnBoard) a la función
  1932                                      ; o podemos crear una versión inlined. A modo de ejemplo:
  1933                                      ; Llamamos a check_laser_enemy_collision, que retorna
  1934                                      ; rax=1 si hubo colisión con enemigo, 0 si no.
  1935                                      ;
  1936                                      ; Hacemos algo como:
  1937 00000A78 4989FA                      mov r10, rdi
  1938 00000A7B E85A000000                  call check_laser_enemy_collision
  1939 00000A80 5F                          pop rdi
  1940 00000A81 5E                          pop rsi
  1941 00000A82 59                          pop rcx
  1942                                  
  1943 00000A83 4885C0                      test rax, rax          ; rax=1 => colisión con un enemigo
  1944 00000A86 7517                        jnz .delete_laser
  1945                                  
  1946                                      ; 6) Si NO hubo colisión, dibujamos el láser en la nueva posición
  1947 00000A88 8A05(0A230000)              mov al, [laser_symbol]
  1948 00000A8E 8807                        mov [rdi], al
  1949                                  
  1950                                  .next_laser:
  1951                                      ; Pasamos al láser anterior en el array
  1952 00000A90 48FFC9                      dec rcx
  1953 00000A93 4883F9FF                    cmp rcx, -1
  1954 00000A97 0F8F78FFFFFF                jg .loop_lasers   ; Mientras rcx >= 0, seguir iterando
  1955 00000A9D EB2E                        jmp .fin
  1956                                  
  1957                                  ; -----------------------------------------------------------------
  1958                                  ; Subrutina interna: .delete_laser
  1959                                  ; -----------------------------------------------------------------
  1960                                  ; Elimina el láser actual del array 'lasers' moviendo el último
  1961                                  ; láser a su posición (si no es el último). Decrementa laser_count.
  1962                                  .delete_laser:
  1963 00000A9F 4C0FB625(0B230000)          movzx r12, byte [laser_count]
  1964 00000AA7 49FFCC                      dec r12                    ; r12 = índice del último láser
  1965 00000AAA 4939CC                      cmp r12, rcx
  1966 00000AAD 7616                        jbe .just_decrement        ; Si rcx ya apunta al último, no copiamos
  1967                                  
  1968                                      ; Copiamos el último láser a la posición actual
  1969 00000AAF 488DBC09[0C230000]          lea rdi, [lasers + rcx*2]
  1970 00000AB7 4B8DB424[0C230000]          lea rsi, [lasers + r12*2]
  1971 00000ABF 668B06                      mov ax, [rsi]             ; lee 2 bytes (X,Y) del último láser
  1972 00000AC2 668907                      mov [rdi], ax             ; copiamos X,Y
  1973                                  
  1974                                  .just_decrement:
  1975 00000AC5 FE0D(0B230000)              dec byte [laser_count]    ; Decrementar contador de láseres
  1976 00000ACB EBC3                        jmp .next_laser
  1977                                  
  1978                                  .fin:
  1979 00000ACD 415F                        pop r15
  1980 00000ACF 415E                        pop r14
  1981 00000AD1 415D                        pop r13
  1982 00000AD3 415C                        pop r12
  1983 00000AD5 5E                          pop rsi
  1984 00000AD6 5F                          pop rdi
  1985 00000AD7 5B                          pop rbx
  1986 00000AD8 5D                          pop rbp
  1987 00000AD9 C3                          ret
  1988                                  
  1989                                  
  1990                                  ; Nueva función para verificar colisión entre láser y enemigos
  1991                                  ; ==========================================================
  1992                                  ; NUEVA check_laser_enemy_collision - inlined destroy
  1993                                  ; ==========================================================
  1994                                  check_laser_enemy_collision:
  1995 00000ADA 55                          push rbp
  1996 00000ADB 4889E5                      mov  rbp, rsp
  1997                                      
  1998 00000ADE 4D31ED                      xor r13, r13            ; Índice del enemigo
  1999 00000AE1 4831C0                      xor rax, rax            ; 0 = no colisión
  2000                                  
  2001                                  .loop_enemies:
  2002 00000AE4 4983FD05                    cmp r13, 5              ; Máximo 5 enemigos
  2003 00000AE8 7D64                        jge .end
  2004                                  
  2005                                      ; r13 * 3 => offset del enemigo i
  2006 00000AEA 4C89E9                      mov rcx, r13
  2007 00000AED 486BC903                    imul rcx, 3
  2008 00000AF1 488DB1[60200000]            lea rsi, [enemies + rcx]   ; rsi => &enemies[i]
  2009                                  
  2010                                      ; Verificar si está activo
  2011 00000AF8 807E0201                    cmp byte [rsi+2], 1
  2012 00000AFC 754B                        jne .next_enemy
  2013                                  
  2014                                      ; Cargar posición X/Y del enemigo
  2015 00000AFE 4C0FB636                    movzx r14, byte [rsi]      ; X
  2016 00000B02 4C0FB67E01                  movzx r15, byte [rsi+1]    ; Y
  2017                                  
  2018                                      ; Comparar con posición del láser (r8=X, r9=Y)
  2019 00000B07 4D39F0                      cmp r8, r14
  2020 00000B0A 753D                        jne .next_enemy
  2021 00000B0C 4D39F9                      cmp r9, r15
  2022 00000B0F 7538                        jne .next_enemy
  2023                                  
  2024                                      ; ==== Colisión detectada con láser ====
  2025                                  
  2026                                      ; 1) Desactivar enemigo
  2027 00000B11 C6460200                    mov byte [rsi+2], 0     ; (activo=0)
  2028                                  
  2029                                      ; 2) Sumar puntos
  2030 00000B15 488B05(7F200000)            mov rax, [enemy_points]
  2031 00000B1C 480105(3E200000)            add [current_score], rax
  2032                                  
  2033                                      ; 3) (Opcional) Borrar del board, SOLO si no coincide con la paleta
  2034                                      ;    Evita crasheos en la fila de la paleta (row_cells - 2).
  2035 00000B23 4983FF1E                    cmp r15, row_cells - 2
  2036 00000B27 7419                        je .skip_erase
  2037                                  
  2038                                      ; Borrar visualmente del board
  2039 00000B29 B850000000                  mov rax, column_cells
  2040 00000B2E 4883C002                    add rax, 2
  2041 00000B32 49F7E7                      mul r15
  2042 00000B35 4C01F0                      add rax, r14
  2043 00000B38 488DB8[400A0000]            lea rdi, [board + rax]
  2044 00000B3F C60720                      mov byte [rdi], ' '
  2045                                  
  2046                                  .skip_erase:
  2047                                  
  2048                                      ; 4) Devolver rax=1 => colisión con enemigo
  2049 00000B42 B801000000                  mov rax, 1
  2050 00000B47 EB05                        jmp .end
  2051                                  
  2052                                  .next_enemy:
  2053 00000B49 49FFC5                      inc r13
  2054 00000B4C EB96                        jmp .loop_enemies
  2055                                  
  2056                                  .end:
  2057 00000B4E 5D                          pop rbp
  2058 00000B4F C3                          ret
  2059                                  
  2060                                  
  2061                                  ; Función auxiliar para eliminar un láser específico
  2062                                  remove_laser:
  2063 00000B50 55                          push rbp
  2064 00000B51 4889E5                      mov rbp, rsp
  2065                                  
  2066                                      ; Borrar el láser del tablero
  2067 00000B54 41C60220                    mov byte [r10], ' '
  2068                                  
  2069                                      ; Mover el último láser a esta posición si no es el último
  2070 00000B58 480FB605(0B230000)          movzx rax, byte [laser_count]
  2071 00000B60 48FFC8                      dec rax                    ; Índice del último láser
  2072 00000B63 4939C4                      cmp r12, rax              ; Comparar con láser actual
  2073 00000B66 7416                        je .just_decrease         ; Si es el último, solo decrementar contador
  2074                                  
  2075                                      ; Copiar último láser a la posición actual
  2076 00000B68 4B8DBC24[0C230000]          lea rdi, [lasers + r12*2]
  2077 00000B70 488DB400[0C230000]          lea rsi, [lasers + rax*2]
  2078 00000B78 668B16                      mov dx, [rsi]             ; Copiar X,Y del último láser
  2079 00000B7B 668917                      mov [rdi], dx
  2080                                  
  2081                                  .just_decrease:
  2082 00000B7E FE0D(0B230000)              dec byte [laser_count]    ; Decrementar contador de láseres
  2083                                  
  2084 00000B84 5D                          pop rbp
  2085 00000B85 C3                          ret
  2086                                  
  2087                                  add_life:
  2088 00000B86 55                          push rbp
  2089 00000B87 4889E5                      mov rbp, rsp
  2090 00000B8A 53                          push rbx
  2091 00000B8B 51                          push rcx
  2092 00000B8C 57                          push rdi
  2093 00000B8D 56                          push rsi
  2094 00000B8E 4150                        push r8
  2095 00000B90 4151                        push r9
  2096                                      
  2097                                      ; Verificar si ya tenemos el máximo de vidas
  2098 00000B92 480FB605(3B210000)          movzx rax, byte [current_lives]
  2099 00000B9A 4883F807                    cmp rax, 7          ; Comparar con el máximo de vidas
  2100 00000B9E 7D2C                        jge .end
  2101                                      
  2102                                      ; Incrementar el contador de vidas
  2103 00000BA0 FE05(3B210000)              inc byte [current_lives]
  2104                                      
  2105                                      ; Encontrar la siguiente vida inactiva
  2106 00000BA6 4831C9                      xor rcx, rcx
  2107                                      
  2108                                      .find_inactive:
  2109 00000BA9 4883F907                        cmp rcx, lives_count
  2110 00000BAD 7D1D                            jge .end
  2111                                          
  2112                                          ; Calcular offset de la vida actual
  2113 00000BAF 4889C8                          mov rax, rcx
  2114 00000BB2 486BC003                        imul rax, 3
  2115 00000BB6 488DB0[25210000]                lea rsi, [lives_data + rax]
  2116                                          
  2117                                          ; Verificar si está inactiva
  2118 00000BBD 807E0200                        cmp byte [rsi + 2], 0
  2119 00000BC1 7405                            je .activate_life
  2120                                          
  2121 00000BC3 48FFC1                          inc rcx
  2122 00000BC6 EBE1                            jmp .find_inactive
  2123                                          
  2124                                      .activate_life:
  2125                                          ; Activar la vida
  2126 00000BC8 C6460201                        mov byte [rsi + 2], 1
  2127                                          
  2128                                      .end:
  2129 00000BCC 4159                            pop r9
  2130 00000BCE 4158                            pop r8
  2131 00000BD0 5E                              pop rsi
  2132 00000BD1 5F                              pop rdi
  2133 00000BD2 59                              pop rcx
  2134 00000BD3 5B                              pop rbx
  2135 00000BD4 5D                              pop rbp
  2136 00000BD5 C3                              ret
  2137                                  
  2138                                  
  2139                                  print_ball:
  2140 00000BD6 4C8B05(DF140000)        	mov r8, [ball_x_pos]
  2141 00000BDD 4C8B0D(E7140000)        	mov r9, [ball_y_pos]
  2142 00000BE4 4981C0[400A0000]        	add r8, board
  2143                                  
  2144 00000BEB 4C89C9                  	mov rcx, r9
  2145 00000BEE B852000000              	mov rax, column_cells + 2
  2146 00000BF3 48F7E9                  	imul rcx
  2147                                  	
  2148 00000BF6 4901C0                  	add r8, rax
  2149 00000BF9 41C6004F                	mov byte [r8], char_O
  2150 00000BFD C3                      	ret
  2151                                  
  2152                                  print_ball_2:
  2153 00000BFE 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2154 00000C05 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2155 00000C0C 4981C0[400A0000]            add r8, board
  2156 00000C13 4C89C9                      mov rcx, r9
  2157 00000C16 B852000000                  mov rax, column_cells + 2
  2158 00000C1B 48F7E9                      imul rcx
  2159 00000C1E 4901C0                      add r8, rax
  2160 00000C21 41C6004F                    mov byte [r8], char_O
  2161 00000C25 C3                          ret
  2162                                  
  2163                                  print_ball_3:
  2164 00000C26 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2165 00000C2D 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2166 00000C34 4981C0[400A0000]            add r8, board
  2167 00000C3B 4C89C9                      mov rcx, r9
  2168 00000C3E B852000000                  mov rax, column_cells + 2
  2169 00000C43 48F7E9                      imul rcx
  2170 00000C46 4901C0                      add r8, rax
  2171 00000C49 41C6004F                    mov byte [r8], char_O
  2172 00000C4D C3                          ret
  2173                                  
  2174                                  	;mov rax, board + r8 + r9 * (column_cells + 2)
  2175                                  	
  2176                                  print_pallet:
  2177                                      ; Primero borrar la paleta anterior completa (usando el tamaño máximo posible)
  2178 00000C4E 4C8B05(BF140000)            mov r8, [pallet_position]
  2179 00000C55 488B0D(C7140000)            mov rcx, [pallet_size]
  2180                                      .clear_pallet:
  2181 00000C5C 41C60020                        mov byte [r8], char_space
  2182 00000C60 49FFC0                          inc r8
  2183 00000C63 48FFC9                          dec rcx
  2184 00000C66 75F4                            jnz .clear_pallet
  2185                                  
  2186                                      ; Luego dibujar la nueva paleta con el tamaño actual
  2187 00000C68 4C8B05(BF140000)            mov r8, [pallet_position]
  2188 00000C6F 488B0D(C7140000)            mov rcx, [pallet_size]
  2189                                      .write_pallet:
  2190 00000C76 41C6003D                        mov byte [r8], char_equal
  2191 00000C7A 49FFC0                          inc r8
  2192 00000C7D 48FFC9                          dec rcx
  2193 00000C80 75F4                            jnz .write_pallet
  2194                                  
  2195 00000C82 C3                          ret
  2196                                  
  2197                                  move_pallet:
  2198                                      
  2199 00000C83 803D(FF140000)00            cmp byte [ball_moving], 0
  2200 00000C8A 7507                        jne .continue_movement
  2201 00000C8C C605(FF140000)01            mov byte [ball_moving], 1
  2202                                  
  2203                                      .continue_movement:
  2204 00000C93 4883FFFF                        cmp rdi, left_direction
  2205 00000C97 7531                            jne .move_right
  2206                                  
  2207                                          .move_left:
  2208                                              ; Verificar si la siguiente posición sería una X (borde izquierdo)
  2209 00000C99 4C8B05(BF140000)                    mov r8, [pallet_position]
  2210 00000CA0 49FFC8                              dec r8              ; Verificar la posición a la izquierda
  2211 00000CA3 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
  2212 00000CA6 3C58                                cmp al, 'X'        ; Comparar si es una X
  2213 00000CA8 744D                                je .end            ; Si es X, no mover
  2214                                              
  2215 00000CAA 4C8B05(BF140000)                    mov r8, [pallet_position]
  2216 00000CB1 4C8B0D(C7140000)                    mov r9, [pallet_size]
  2217 00000CB8 43C64408FF20                        mov byte [r8 + r9 - 1], char_space  ; Borrar último carácter de la paleta
  2218 00000CBE 49FFC8                              dec r8
  2219 00000CC1 4C8905(BF140000)                    mov [pallet_position], r8
  2220 00000CC8 EB2D                                jmp .end
  2221                                              
  2222                                          .move_right:
  2223                                              ; Verificar si la siguiente posición después de la paleta sería una X
  2224 00000CCA 4C8B05(BF140000)                    mov r8, [pallet_position]
  2225 00000CD1 4C8B0D(C7140000)                    mov r9, [pallet_size]
  2226 00000CD8 4D01C8                              add r8, r9         ; Moverse al final de la paleta
  2227 00000CDB 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
  2228 00000CDE 3C58                                cmp al, 'X'        ; Comparar si es una X
  2229 00000CE0 7415                                je .end            ; Si es X, no mover
  2230                                              
  2231 00000CE2 4C8B05(BF140000)                    mov r8, [pallet_position]
  2232 00000CE9 41C60020                            mov byte [r8], char_space
  2233 00000CED 49FFC0                              inc r8
  2234 00000CF0 4C8905(BF140000)                    mov [pallet_position], r8
  2235                                          .end:
  2236 00000CF7 C3                                  ret
  2237                                  
  2238                                  
  2239                                  
  2240                                              
  2241                                  ; Nueva función auxiliar para actualizar la posición de la bola atrapada
  2242                                  update_caught_ball_position:
  2243 00000CF8 55                          push rbp
  2244 00000CF9 4889E5                      mov rbp, rsp
  2245                                      
  2246                                      ; Calcular la nueva posición de la bola basada en la paleta
  2247 00000CFC 4C8B05(BF140000)            mov r8, [pallet_position]
  2248 00000D03 4981E8[400A0000]            sub r8, board          ; Obtener posición relativa
  2249 00000D0A B852000000                  mov rax, column_cells + 2
  2250 00000D0F 4831D2                      xor rdx, rdx
  2251 00000D12 48F7F0                      div rax                ; División para obtener X,Y
  2252                                      
  2253                                      ; rdx contiene X (resto), rax contiene Y (cociente)
  2254 00000D15 4989C1                      mov r9, rax            ; Y de la paleta
  2255 00000D18 49FFC9                      dec r9                 ; Una posición arriba de la paleta
  2256                                      
  2257                                      ; Añadir el offset guardado a la posición X
  2258 00000D1B 4889D0                      mov rax, rdx
  2259 00000D1E 480305(00230000)            add rax, [ball_catch_offset]
  2260 00000D25 488905(DF140000)            mov [ball_x_pos], rax
  2261 00000D2C 4C890D(E7140000)            mov [ball_y_pos], r9
  2262                                      
  2263 00000D33 5D                          pop rbp
  2264 00000D34 C3                          ret
  2265                                  
  2266                                  
  2267                                  move_all_balls:
  2268 00000D35 55                          push rbp
  2269 00000D36 4889E5                      mov rbp, rsp
  2270 00000D39 53                          push rbx
  2271                                      
  2272                                      ; Inicializar contador de bolas
  2273 00000D3A 4831DB                      xor rbx, rbx
  2274                                      
  2275                                  .loop_balls:
  2276                                      ; Verificar si hemos procesado todas las bolas
  2277 00000D3D 3A1D(3F240000)              cmp bl, byte [balls_count]
  2278 00000D43 7D1D                        jge .end
  2279                                      
  2280                                      ; Calcular offset de la bola actual
  2281 00000D45 B821000000                  mov rax, BALL_STRUCT_SIZE
  2282 00000D4A 48F7E3                      mul rbx
  2283                                      
  2284                                      ; Verificar si la bola está activa
  2285 00000D4D 80B8[FC230000]01            cmp byte [balls_data + rax + 32], 1
  2286 00000D54 7507                        jne .next_ball
  2287                                      
  2288                                      ; Guardar offset en la pila
  2289 00000D56 50                          push rax
  2290                                      
  2291                                      ; Llamar a move_ball con los parámetros de esta bola
  2292 00000D57 E809000000                  call move_ball
  2293                                      
  2294                                      ; Restaurar offset
  2295 00000D5C 58                          pop rax
  2296                                      
  2297                                  .next_ball:
  2298 00000D5D 48FFC3                      inc rbx
  2299 00000D60 EBDB                        jmp .loop_balls
  2300                                      
  2301                                  .end:
  2302 00000D62 5B                          pop rbx
  2303 00000D63 5D                          pop rbp
  2304 00000D64 C3                          ret
  2305                                  
  2306                                  move_ball:
  2307                                  
  2308 00000D65 803D(FD220000)01            cmp byte [ball_caught], 1
  2309 00000D6C 0F849D000000                je .move_with_pallet
  2310                                  
  2311 00000D72 803D(FF140000)00            cmp byte [ball_moving], 0
  2312 00000D79 0F84B8010000                je .end
  2313                                  
  2314                                      ; Incrementar contador de velocidad
  2315 00000D7F 48FF05(F3220000)            inc qword [speed_counter]
  2316                                      
  2317                                      ; Verificar si debemos mover la bola en este ciclo
  2318 00000D86 488B05(F3220000)            mov rax, [speed_counter]
  2319 00000D8D 483B05(E3220000)            cmp rax, [ball_speed]
  2320 00000D94 0F8C9D010000                jl .end
  2321                                      
  2322                                      ; Resetear contador de velocidad
  2323 00000D9A 48C705(F3220000)00-         mov qword [speed_counter], 0
  2323 00000DA2 000000             
  2324                                  
  2325                                      ; Borrar la posición actual de la bola
  2326 00000DA5 4C8B05(DF140000)            mov r8, [ball_x_pos]
  2327 00000DAC 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  2328 00000DB3 4981C0[400A0000]            add r8, board
  2329 00000DBA 4C89C9                      mov rcx, r9
  2330 00000DBD B852000000                  mov rax, column_cells + 2
  2331 00000DC2 48F7E9                      imul rcx
  2332 00000DC5 4901C0                      add r8, rax
  2333 00000DC8 41C60020                    mov byte [r8], char_space
  2334                                  
  2335                                      ; Calcular siguiente posición X
  2336 00000DCC 4C8B05(DF140000)            mov r8, [ball_x_pos]
  2337 00000DD3 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  2338 00000DDA 488B05(EF140000)            mov rax, [ball_direction_x]
  2339 00000DE1 4901C0                      add r8, rax               ; Nueva posición X
  2340                                  
  2341                                      ; Calcular la dirección de memoria para la siguiente posición
  2342 00000DE4 4D89C2                      mov r10, r8
  2343 00000DE7 4981C2[400A0000]            add r10, board
  2344 00000DEE 4C89C9                      mov rcx, r9
  2345 00000DF1 B852000000                  mov rax, column_cells + 2
  2346 00000DF6 48F7E9                      imul rcx
  2347 00000DF9 4901C2                      add r10, rax
  2348                                  
  2349                                      ; Verificar si hay una X en la siguiente posición X
  2350 00000DFC 418A02                      mov al, [r10]
  2351 00000DFF 3C58                        cmp al, 'X'
  2352 00000E01 7565                        jne .check_block_x
  2353 00000E03 48F71D(EF140000)            neg qword [ball_direction_x]  ; Cambiar dirección X si hay una X
  2354 00000E0A E928010000                  jmp .end
  2355                                  
  2356                                      .move_with_pallet:
  2357                                          ; Borrar la posición actual de la bola
  2358 00000E0F 4C8B05(DF140000)                mov r8, [ball_x_pos]
  2359 00000E16 4C8B0D(E7140000)                mov r9, [ball_y_pos]
  2360 00000E1D 4D89C2                          mov r10, r8
  2361 00000E20 4981C2[400A0000]                add r10, board
  2362 00000E27 4C89C9                          mov rcx, r9
  2363 00000E2A B852000000                      mov rax, column_cells + 2
  2364 00000E2F 48F7E9                          imul rcx
  2365 00000E32 4901C2                          add r10, rax
  2366 00000E35 41C60220                        mov byte [r10], char_space
  2367                                  
  2368                                          ; Actualizar posición X basada en la paleta
  2369 00000E39 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2370 00000E40 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2371 00000E47 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2372 00000E4E 4C8905(DF140000)                mov [ball_x_pos], r8          ; Guardar nueva posición X
  2373                                  
  2374                                          ; Mantener la bola una posición arriba de la paleta
  2375 00000E55 4C8B0D(E7140000)                mov r9, [ball_y_pos]          ; Mantener la misma altura
  2376 00000E5C 4C890D(E7140000)                mov [ball_y_pos], r9          ; Actualizar posición Y
  2377                                  
  2378 00000E63 E9CF000000                      jmp .end
  2379                                  
  2380                                  
  2381                                      .check_block_x:
  2382                                          ; Verificar colisión con bloques en X
  2383 00000E68 4150                            push r8     ; Guardar registros que usa check_block_collision
  2384 00000E6A 4151                            push r9
  2385 00000E6C 4152                            push r10
  2386 00000E6E E8580C0000                      call check_block_collision
  2387 00000E73 415A                            pop r10
  2388 00000E75 4159                            pop r9
  2389 00000E77 4158                            pop r8
  2390 00000E79 4885C0                          test rax, rax
  2391 00000E7C 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2392 00000E7E 48F71D(EF140000)                neg qword [ball_direction_x]  ; Si hay colisión, rebotar
  2393 00000E85 E9AD000000                      jmp .end
  2394                                  
  2395                                      .check_paddle_x:
  2396                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2397 00000E8A 41803A3D                        cmp byte [r10], char_equal
  2398 00000E8E 750C                            jne .check_y_movement
  2399 00000E90 48F71D(EF140000)                neg qword [ball_direction_x]  ; Cambiar dirección X si hay una paleta
  2400 00000E97 E99B000000                      jmp .end
  2401                                  
  2402                                      .check_y_movement:
  2403                                          ; Calcular siguiente posición Y
  2404 00000E9C 488B05(F7140000)                mov rax, [ball_direction_y]
  2405 00000EA3 4901C1                          add r9, rax                  ; Nueva posición Y
  2406                                  
  2407                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2408 00000EA6 4D89C2                          mov r10, r8
  2409 00000EA9 4981C2[400A0000]                add r10, board
  2410 00000EB0 4C89C9                          mov rcx, r9
  2411 00000EB3 B852000000                      mov rax, column_cells + 2
  2412 00000EB8 48F7E9                          imul rcx
  2413 00000EBB 4901C2                          add r10, rax
  2414                                  
  2415                                          ; Verificar si hay una X en la siguiente posición Y
  2416 00000EBE 418A02                          mov al, [r10]
  2417 00000EC1 3C58                            cmp al, 'X'
  2418 00000EC3 7509                            jne .check_block_y
  2419 00000EC5 48F71D(F7140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una X
  2420 00000ECC EB69                            jmp .end
  2421                                  
  2422                                      .check_block_y:
  2423                                          ; Verificar colisión con bloques en Y
  2424 00000ECE 4150                            push r8     ; Guardar registros que usa check_block_collision
  2425 00000ED0 4151                            push r9
  2426 00000ED2 4152                            push r10
  2427 00000ED4 E8F20B0000                      call check_block_collision
  2428 00000ED9 415A                            pop r10
  2429 00000EDB 4159                            pop r9
  2430 00000EDD 4158                            pop r8
  2431 00000EDF 4885C0                          test rax, rax
  2432 00000EE2 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2433 00000EE4 48F71D(F7140000)                neg qword [ball_direction_y]  ; Si hay colisión, rebotar
  2434 00000EEB EB4A                            jmp .end
  2435                                  
  2436                                      .check_paddle_y:
  2437                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2438 00000EED 41803A3D                        cmp byte [r10], char_equal
  2439 00000EF1 7536                            jne .update_position
  2440                                  
  2441                                          ; Verificar si el poder catch está activo
  2442 00000EF3 803D(FC220000)01                cmp byte [catch_power_active], 1
  2443 00000EFA 7524                            jne .normal_bounce
  2444                                  
  2445                                          ; Activar el modo "atrapado"
  2446 00000EFC C605(FD220000)01                mov byte [ball_caught], 1
  2447                                          
  2448                                          ; Guardar la posición X actual de la bola como offset
  2449 00000F03 488B05(DF140000)                mov rax, [ball_x_pos]           ; Posición X actual de la bola
  2450 00000F0A 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2451 00000F11 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2452 00000F17 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2453                                          
  2454 00000F1E EB17                            jmp .end
  2455                                  
  2456                                      .normal_bounce:
  2457 00000F20 48F71D(F7140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una paleta
  2458 00000F27 EB0E                            jmp .end
  2459                                  
  2460                                  
  2461                                      .update_position:
  2462 00000F29 4C8905(DF140000)                mov [ball_x_pos], r8
  2463 00000F30 4C890D(E7140000)                mov [ball_y_pos], r9
  2464                                  
  2465                                      .end:
  2466 00000F37 C3                              ret
  2467                                  
  2468                                  
  2469                                  move_ball_2:
  2470                                  
  2471 00000F38 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2472 00000F3F 0F849D000000                je .move_with_pallet
  2473                                  
  2474 00000F45 803D(21150000)00            cmp byte [ball2_moving], 0
  2475 00000F4C 0F84B8010000                je .end
  2476                                  
  2477                                      ; Incrementar contador de velocidad
  2478 00000F52 48FF05(F3220000)            inc qword [speed_counter]
  2479                                      
  2480                                      ; Verificar si debemos mover la bola en este ciclo
  2481 00000F59 488B05(F3220000)            mov rax, [speed_counter]
  2482 00000F60 483B05(E3220000)            cmp rax, [ball_speed]
  2483 00000F67 0F8C9D010000                jl .end
  2484                                      
  2485                                      ; Resetear contador de velocidad
  2486 00000F6D 48C705(F3220000)00-         mov qword [speed_counter], 0
  2486 00000F75 000000             
  2487                                  
  2488                                      ; Borrar la posición actual de la bola
  2489 00000F78 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2490 00000F7F 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2491 00000F86 4981C0[400A0000]            add r8, board
  2492 00000F8D 4C89C9                      mov rcx, r9
  2493 00000F90 B852000000                  mov rax, column_cells + 2
  2494 00000F95 48F7E9                      imul rcx
  2495 00000F98 4901C0                      add r8, rax
  2496 00000F9B 41C60020                    mov byte [r8], char_space
  2497                                  
  2498                                      ; Calcular siguiente posición X
  2499 00000F9F 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2500 00000FA6 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2501 00000FAD 488B05(11150000)            mov rax, [ball2_direction_x]
  2502 00000FB4 4901C0                      add r8, rax               ; Nueva posición X
  2503                                  
  2504                                      ; Calcular la dirección de memoria para la siguiente posición
  2505 00000FB7 4D89C2                      mov r10, r8
  2506 00000FBA 4981C2[400A0000]            add r10, board
  2507 00000FC1 4C89C9                      mov rcx, r9
  2508 00000FC4 B852000000                  mov rax, column_cells + 2
  2509 00000FC9 48F7E9                      imul rcx
  2510 00000FCC 4901C2                      add r10, rax
  2511                                  
  2512                                      ; Verificar si hay una X en la siguiente posición X
  2513 00000FCF 418A02                      mov al, [r10]
  2514 00000FD2 3C58                        cmp al, 'X'
  2515 00000FD4 7565                        jne .check_block_x
  2516 00000FD6 48F71D(11150000)            neg qword [ball2_direction_x]  ; Cambiar dirección X si hay una X
  2517 00000FDD E928010000                  jmp .end
  2518                                  
  2519                                      .move_with_pallet:
  2520                                          ; Borrar la posición actual de la bola
  2521 00000FE2 4C8B05(01150000)                mov r8, [ball2_x_pos]
  2522 00000FE9 4C8B0D(09150000)                mov r9, [ball2_y_pos]
  2523 00000FF0 4D89C2                          mov r10, r8
  2524 00000FF3 4981C2[400A0000]                add r10, board
  2525 00000FFA 4C89C9                          mov rcx, r9
  2526 00000FFD B852000000                      mov rax, column_cells + 2
  2527 00001002 48F7E9                          imul rcx
  2528 00001005 4901C2                          add r10, rax
  2529 00001008 41C60220                        mov byte [r10], char_space
  2530                                  
  2531                                          ; Actualizar posición X basada en la paleta
  2532 0000100C 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2533 00001013 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2534 0000101A 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2535 00001021 4C8905(01150000)                mov [ball2_x_pos], r8          ; Guardar nueva posición X
  2536                                  
  2537                                          ; Mantener la bola una posición arriba de la paleta
  2538 00001028 4C8B0D(09150000)                mov r9, [ball2_y_pos]          ; Mantener la misma altura
  2539 0000102F 4C890D(09150000)                mov [ball2_y_pos], r9          ; Actualizar posición Y
  2540                                  
  2541 00001036 E9CF000000                      jmp .end
  2542                                  
  2543                                  
  2544                                      .check_block_x:
  2545                                          ; Verificar colisión con bloques en X
  2546 0000103B 4150                            push r8     ; Guardar registros que usa check_block_collision
  2547 0000103D 4151                            push r9
  2548 0000103F 4152                            push r10
  2549 00001041 E8850A0000                      call check_block_collision
  2550 00001046 415A                            pop r10
  2551 00001048 4159                            pop r9
  2552 0000104A 4158                            pop r8
  2553 0000104C 4885C0                          test rax, rax
  2554 0000104F 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2555 00001051 48F71D(11150000)                neg qword [ball2_direction_x]  ; Si hay colisión, rebotar
  2556 00001058 E9AD000000                      jmp .end
  2557                                  
  2558                                      .check_paddle_x:
  2559                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2560 0000105D 41803A3D                        cmp byte [r10], char_equal
  2561 00001061 750C                            jne .check_y_movement
  2562 00001063 48F71D(11150000)                neg qword [ball2_direction_x]  ; Cambiar dirección X si hay una paleta
  2563 0000106A E99B000000                      jmp .end
  2564                                  
  2565                                      .check_y_movement:
  2566                                          ; Calcular siguiente posición Y
  2567 0000106F 488B05(19150000)                mov rax, [ball2_direction_y]
  2568 00001076 4901C1                          add r9, rax                  ; Nueva posición Y
  2569                                  
  2570                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2571 00001079 4D89C2                          mov r10, r8
  2572 0000107C 4981C2[400A0000]                add r10, board
  2573 00001083 4C89C9                          mov rcx, r9
  2574 00001086 B852000000                      mov rax, column_cells + 2
  2575 0000108B 48F7E9                          imul rcx
  2576 0000108E 4901C2                          add r10, rax
  2577                                  
  2578                                          ; Verificar si hay una X en la siguiente posición Y
  2579 00001091 418A02                          mov al, [r10]
  2580 00001094 3C58                            cmp al, 'X'
  2581 00001096 7509                            jne .check_block_y
  2582 00001098 48F71D(19150000)                neg qword [ball2_direction_y]  ; Cambiar dirección Y si hay una X
  2583 0000109F EB69                            jmp .end
  2584                                  
  2585                                      .check_block_y:
  2586                                          ; Verificar colisión con bloques en Y
  2587 000010A1 4150                            push r8     ; Guardar registros que usa check_block_collision
  2588 000010A3 4151                            push r9
  2589 000010A5 4152                            push r10
  2590 000010A7 E81F0A0000                      call check_block_collision
  2591 000010AC 415A                            pop r10
  2592 000010AE 4159                            pop r9
  2593 000010B0 4158                            pop r8
  2594 000010B2 4885C0                          test rax, rax
  2595 000010B5 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2596 000010B7 48F71D(19150000)                neg qword [ball2_direction_y]  ; Si hay colisión, rebotar
  2597 000010BE EB4A                            jmp .end
  2598                                  
  2599                                      .check_paddle_y:
  2600                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2601 000010C0 41803A3D                        cmp byte [r10], char_equal
  2602 000010C4 7536                            jne .update_position
  2603                                  
  2604                                          ; Verificar si el poder catch está activo
  2605 000010C6 803D(FC220000)01                cmp byte [catch_power_active], 1
  2606 000010CD 7524                            jne .normal_bounce
  2607                                  
  2608                                          ; Activar el modo "atrapado"
  2609 000010CF C605(FE220000)01                mov byte [ball_caught_2], 1
  2610                                          
  2611                                          ; Guardar la posición X actual de la bola como offset
  2612 000010D6 488B05(01150000)                mov rax, [ball2_x_pos]           ; Posición X actual de la bola
  2613 000010DD 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2614 000010E4 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2615 000010EA 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2616                                          
  2617 000010F1 EB17                            jmp .end
  2618                                  
  2619                                      .normal_bounce:
  2620 000010F3 48F71D(19150000)                neg qword [ball2_direction_y]  ; Cambiar dirección Y si hay una paleta
  2621 000010FA EB0E                            jmp .end
  2622                                  
  2623                                  
  2624                                      .update_position:
  2625 000010FC 4C8905(01150000)                mov [ball2_x_pos], r8
  2626 00001103 4C890D(09150000)                mov [ball2_y_pos], r9
  2627                                  
  2628                                      .end:
  2629 0000110A C3                              ret
  2630                                  
  2631                                  move_ball_3:
  2632                                  
  2633 0000110B 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2634 00001112 0F849D000000                je .move_with_pallet
  2635                                  
  2636 00001118 803D(43150000)00            cmp byte [ball3_moving], 0
  2637 0000111F 0F84B8010000                je .end
  2638                                  
  2639                                      ; Incrementar contador de velocidad
  2640 00001125 48FF05(F3220000)            inc qword [speed_counter]
  2641                                      
  2642                                      ; Verificar si debemos mover la bola en este ciclo
  2643 0000112C 488B05(F3220000)            mov rax, [speed_counter]
  2644 00001133 483B05(E3220000)            cmp rax, [ball_speed]
  2645 0000113A 0F8C9D010000                jl .end
  2646                                      
  2647                                      ; Resetear contador de velocidad
  2648 00001140 48C705(F3220000)00-         mov qword [speed_counter], 0
  2648 00001148 000000             
  2649                                  
  2650                                      ; Borrar la posición actual de la bola
  2651 0000114B 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2652 00001152 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2653 00001159 4981C0[400A0000]            add r8, board
  2654 00001160 4C89C9                      mov rcx, r9
  2655 00001163 B852000000                  mov rax, column_cells + 2
  2656 00001168 48F7E9                      imul rcx
  2657 0000116B 4901C0                      add r8, rax
  2658 0000116E 41C60020                    mov byte [r8], char_space
  2659                                  
  2660                                      ; Calcular siguiente posición X
  2661 00001172 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2662 00001179 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2663 00001180 488B05(33150000)            mov rax, [ball3_direction_x]
  2664 00001187 4901C0                      add r8, rax               ; Nueva posición X
  2665                                  
  2666                                      ; Calcular la dirección de memoria para la siguiente posición
  2667 0000118A 4D89C2                      mov r10, r8
  2668 0000118D 4981C2[400A0000]            add r10, board
  2669 00001194 4C89C9                      mov rcx, r9
  2670 00001197 B852000000                  mov rax, column_cells + 2
  2671 0000119C 48F7E9                      imul rcx
  2672 0000119F 4901C2                      add r10, rax
  2673                                  
  2674                                      ; Verificar si hay una X en la siguiente posición X
  2675 000011A2 418A02                      mov al, [r10]
  2676 000011A5 3C58                        cmp al, 'X'
  2677 000011A7 7565                        jne .check_block_x
  2678 000011A9 48F71D(33150000)            neg qword [ball3_direction_x]  ; Cambiar dirección X si hay una X
  2679 000011B0 E928010000                  jmp .end
  2680                                  
  2681                                      .move_with_pallet:
  2682                                          ; Borrar la posición actual de la bola
  2683 000011B5 4C8B05(23150000)                mov r8, [ball3_x_pos]
  2684 000011BC 4C8B0D(2B150000)                mov r9, [ball3_y_pos]
  2685 000011C3 4D89C2                          mov r10, r8
  2686 000011C6 4981C2[400A0000]                add r10, board
  2687 000011CD 4C89C9                          mov rcx, r9
  2688 000011D0 B852000000                      mov rax, column_cells + 2
  2689 000011D5 48F7E9                          imul rcx
  2690 000011D8 4901C2                          add r10, rax
  2691 000011DB 41C60220                        mov byte [r10], char_space
  2692                                  
  2693                                          ; Actualizar posición X basada en la paleta
  2694 000011DF 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2695 000011E6 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2696 000011ED 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2697 000011F4 4C8905(23150000)                mov [ball3_x_pos], r8          ; Guardar nueva posición X
  2698                                  
  2699                                          ; Mantener la bola una posición arriba de la paleta
  2700 000011FB 4C8B0D(2B150000)                mov r9, [ball3_y_pos]          ; Mantener la misma altura
  2701 00001202 4C890D(2B150000)                mov [ball3_y_pos], r9          ; Actualizar posición Y
  2702                                  
  2703 00001209 E9CF000000                      jmp .end
  2704                                  
  2705                                  
  2706                                      .check_block_x:
  2707                                          ; Verificar colisión con bloques en X
  2708 0000120E 4150                            push r8     ; Guardar registros que usa check_block_collision
  2709 00001210 4151                            push r9
  2710 00001212 4152                            push r10
  2711 00001214 E8B2080000                      call check_block_collision
  2712 00001219 415A                            pop r10
  2713 0000121B 4159                            pop r9
  2714 0000121D 4158                            pop r8
  2715 0000121F 4885C0                          test rax, rax
  2716 00001222 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2717 00001224 48F71D(33150000)                neg qword [ball3_direction_x]  ; Si hay colisión, rebotar
  2718 0000122B E9AD000000                      jmp .end
  2719                                  
  2720                                      .check_paddle_x:
  2721                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2722 00001230 41803A3D                        cmp byte [r10], char_equal
  2723 00001234 750C                            jne .check_y_movement
  2724 00001236 48F71D(33150000)                neg qword [ball3_direction_x]  ; Cambiar dirección X si hay una paleta
  2725 0000123D E99B000000                      jmp .end
  2726                                  
  2727                                      .check_y_movement:
  2728                                          ; Calcular siguiente posición Y
  2729 00001242 488B05(3B150000)                mov rax, [ball3_direction_y]
  2730 00001249 4901C1                          add r9, rax                  ; Nueva posición Y
  2731                                  
  2732                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2733 0000124C 4D89C2                          mov r10, r8
  2734 0000124F 4981C2[400A0000]                add r10, board
  2735 00001256 4C89C9                          mov rcx, r9
  2736 00001259 B852000000                      mov rax, column_cells + 2
  2737 0000125E 48F7E9                          imul rcx
  2738 00001261 4901C2                          add r10, rax
  2739                                  
  2740                                          ; Verificar si hay una X en la siguiente posición Y
  2741 00001264 418A02                          mov al, [r10]
  2742 00001267 3C58                            cmp al, 'X'
  2743 00001269 7509                            jne .check_block_y
  2744 0000126B 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Cambiar dirección Y si hay una X
  2745 00001272 EB69                            jmp .end
  2746                                  
  2747                                      .check_block_y:
  2748                                          ; Verificar colisión con bloques en Y
  2749 00001274 4150                            push r8     ; Guardar registros que usa check_block_collision
  2750 00001276 4151                            push r9
  2751 00001278 4152                            push r10
  2752 0000127A E84C080000                      call check_block_collision
  2753 0000127F 415A                            pop r10
  2754 00001281 4159                            pop r9
  2755 00001283 4158                            pop r8
  2756 00001285 4885C0                          test rax, rax
  2757 00001288 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2758 0000128A 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Si hay colisión, rebotar
  2759 00001291 EB4A                            jmp .end
  2760                                  
  2761                                      .check_paddle_y:
  2762                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2763 00001293 41803A3D                        cmp byte [r10], char_equal
  2764 00001297 7536                            jne .update_position
  2765                                  
  2766                                          ; Verificar si el poder catch está activo
  2767 00001299 803D(FC220000)01                cmp byte [catch_power_active], 1
  2768 000012A0 7524                            jne .normal_bounce
  2769                                  
  2770                                          ; Activar el modo "atrapado"
  2771 000012A2 C605(FF220000)01                mov byte [ball_caught_3], 1
  2772                                          
  2773                                          ; Guardar la posición X actual de la bola como offset
  2774 000012A9 488B05(23150000)                mov rax, [ball3_x_pos]           ; Posición X actual de la bola
  2775 000012B0 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2776 000012B7 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2777 000012BD 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2778                                          
  2779 000012C4 EB17                            jmp .end
  2780                                  
  2781                                      .normal_bounce:
  2782 000012C6 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Cambiar dirección Y si hay una paleta
  2783 000012CD EB0E                            jmp .end
  2784                                  
  2785                                  
  2786                                      .update_position:
  2787 000012CF 4C8905(23150000)                mov [ball3_x_pos], r8
  2788 000012D6 4C890D(2B150000)                mov [ball3_y_pos], r9
  2789                                  
  2790                                      .end:
  2791 000012DD C3                              ret
  2792                                  
  2793                                  ; Nueva función para procesar la tecla C cuando la bola está atrapada
  2794                                  ; Procesar la tecla 'c' cuando el poder de atrapar está activo
  2795                                  process_catch_release:
  2796 000012DE 55                          push rbp
  2797 000012DF 4889E5                      mov  rbp, rsp
  2798                                  
  2799                                      ; Verificar si el poder de catch está activo
  2800 000012E2 803D(FC220000)01            cmp byte [catch_power_active], 1
  2801 000012E9 0F8531010000                jne .no_catch_power
  2802                                  
  2803                                      ; Verificar si se presionó 'c' (derecha y arriba)
  2804 000012EF 803D(08230000)63            cmp byte [last_key], 'c'
  2805 000012F6 7412                        je .release_right
  2806                                      
  2807                                      ; Verificar si se presionó 'x' (izquierda y arriba)
  2808 000012F8 803D(08230000)78            cmp byte [last_key], 'x'
  2809 000012FF 0F8487000000                je .release_left
  2810                                      
  2811 00001305 E916010000                  jmp .no_catch_power
  2812                                  
  2813                                  .release_right:
  2814                                      ; Liberar la bola hacia la derecha
  2815 0000130A 803D(FD220000)01            cmp byte [ball_caught], 1
  2816 00001311 7522                        jne .check_ball2_right
  2817 00001313 C605(FD220000)00            mov byte [ball_caught], 0
  2818 0000131A 48C705(EF140000)01-         mov qword [ball_direction_x], 1    ; Derecha
  2818 00001322 000000             
  2819 00001325 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Arriba
  2819 0000132D FFFFFF             
  2820 00001330 E9CD000000                  jmp .release_complete
  2821                                  
  2822                                  .check_ball2_right:
  2823 00001335 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2824 0000133C 7522                        jne .check_ball3_right
  2825 0000133E C605(FE220000)00            mov byte [ball_caught_2], 0
  2826 00001345 48C705(11150000)01-         mov qword [ball2_direction_x], 1
  2826 0000134D 000000             
  2827 00001350 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  2827 00001358 FFFFFF             
  2828 0000135B E9A2000000                  jmp .release_complete
  2829                                  
  2830                                  .check_ball3_right:
  2831 00001360 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2832 00001367 0F8595000000                jne .release_complete
  2833 0000136D C605(FF220000)00            mov byte [ball_caught_3], 0
  2834 00001374 48C705(33150000)01-         mov qword [ball3_direction_x], 1
  2834 0000137C 000000             
  2835 0000137F 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  2835 00001387 FFFFFF             
  2836 0000138A EB76                        jmp .release_complete
  2837                                  
  2838                                  .release_left:
  2839                                      ; Liberar la bola hacia la izquierda
  2840 0000138C 803D(FD220000)01            cmp byte [ball_caught], 1
  2841 00001393 751F                        jne .check_ball2_left
  2842 00001395 C605(FD220000)00            mov byte [ball_caught], 0
  2843 0000139C 48C705(EF140000)FF-         mov qword [ball_direction_x], -1   ; Izquierda
  2843 000013A4 FFFFFF             
  2844 000013A7 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Arriba
  2844 000013AF FFFFFF             
  2845 000013B2 EB4E                        jmp .release_complete
  2846                                  
  2847                                  .check_ball2_left:
  2848 000013B4 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2849 000013BB 751F                        jne .check_ball3_left
  2850 000013BD C605(FE220000)00            mov byte [ball_caught_2], 0
  2851 000013C4 48C705(11150000)FF-         mov qword [ball2_direction_x], -1
  2851 000013CC FFFFFF             
  2852 000013CF 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  2852 000013D7 FFFFFF             
  2853 000013DA EB26                        jmp .release_complete
  2854                                  
  2855                                  .check_ball3_left:
  2856 000013DC 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2857 000013E3 751D                        jne .release_complete
  2858 000013E5 C605(FF220000)00            mov byte [ball_caught_3], 0
  2859 000013EC 48C705(33150000)FF-         mov qword [ball3_direction_x], -1
  2859 000013F4 FFFFFF             
  2860 000013F7 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  2860 000013FF FFFFFF             
  2861                                  
  2862                                  .release_complete:
  2863                                      ; Si era el catch inicial, desactivarlo
  2864 00001402 803D(FB220000)01            cmp byte [initial_catch_active], 1
  2865 00001409 750E                        jne .finish
  2866 0000140B C605(FB220000)00            mov byte [initial_catch_active], 0
  2867 00001412 C605(FC220000)00            mov byte [catch_power_active], 0  ; Desactivar poder de catch después de la 1ra vez
  2868                                  
  2869                                  .finish:
  2870 00001419 C605(08230000)00            mov byte [last_key], 0  ; Limpiar la tecla
  2871                                  .no_catch_power:
  2872 00001420 5D                          pop rbp
  2873 00001421 C3                          ret
  2874                                  
  2875                                  
  2876                                  
  2877                                  display_level_number:
  2878 00001422 55                          push rbp
  2879 00001423 4889E5                      mov rbp, rsp
  2880                                      
  2881                                      ; Limpiar la pantalla primero
  2882                                      print clear, clear_length
    93 00001426 B801000000          <1>  mov eax, sys_write
    94 0000142B BF01000000          <1>  mov edi, 1
    95 00001430 48BE-               <1>  mov rsi, %1
    95 00001432 [1000000000000000]  <1>
    96 0000143A BA07000000          <1>  mov edx, %2
    97 0000143F 0F05                <1>  syscall
  2883                                      
  2884                                      ; Calcular la posición central para el mensaje
  2885                                      ; Para el mensaje "NIVEL X", necesitamos centrar 7 caracteres
  2886 00001441 B850000000                  mov rax, column_cells
  2887 00001446 4883E807                    sub rax, 7                  ; longitud de "NIVEL X"
  2888 0000144A 48D1E8                      shr rax, 1                  ; dividir por 2 para centrar
  2889                                      
  2890                                      ; Calcular la fila central
  2891 0000144D BB20000000                  mov rbx, row_cells
  2892 00001452 48D1EB                      shr rbx, 1                  ; dividir por 2 para obtener la fila central
  2893                                      
  2894                                      ; Calcular el offset en el buffer
  2895 00001455 B952000000                  mov rcx, column_cells + 2   ; ancho total de una línea incluyendo newline
  2896 0000145A 48F7E3                      mul rbx                     ; multiplicar por la fila central
  2897 0000145D 4801D8                      add rax, rbx                ; añadir el offset horizontal
  2898                                      
  2899                                      ; Escribir "NIVEL " en la posición calculada
  2900 00001460 488DB8[400A0000]            lea rdi, [board + rax]
  2901 00001467 48BE-                       mov rsi, level_msg
  2901 00001469 [A414000000000000] 
  2902 00001471 B906000000                  mov rcx, level_msg_len
  2903 00001476 F3A4                        rep movsb
  2904                                      
  2905                                      ; Escribir el número del nivel
  2906 00001478 8A05(79150000)              mov al, [current_level]
  2907 0000147E 0430                        add al, '0'                 ; convertir a ASCII
  2908 00001480 8807                        mov [rdi], al
  2909                                      
  2910                                      ; Mostrar el board con el mensaje
  2911                                      print board, board_size
    93 00001482 B801000000          <1>  mov eax, sys_write
    94 00001487 BF01000000          <1>  mov edi, 1
    95 0000148C 48BE-               <1>  mov rsi, %1
    95 0000148E [400A000000000000]  <1>
    96 00001496 BA400A0000          <1>  mov edx, %2
    97 0000149B 0F05                <1>  syscall
  2912                                      
  2913                                      ; Esperar un segundo
  2914 0000149D B823000000                  mov rax, sys_nanosleep
  2915 000014A2 48BF-                       mov rdi, level_display_time
  2915 000014A4 [AF14000000000000] 
  2916 000014AC 4831F6                      xor rsi, rsi
  2917 000014AF 0F05                        syscall
  2918                                      
  2919 000014B1 5D                          pop rbp
  2920 000014B2 C3                          ret
  2921                                  
  2922                                  ; Función para inicializar un tablero vacío
  2923                                  init_empty_board:
  2924 000014B3 56                          push rsi
  2925 000014B4 57                          push rdi
  2926 000014B5 51                          push rcx
  2927 000014B6 50                          push rax
  2928                                  
  2929 000014B7 488D35(00000000)            lea rsi, [board_template]   ; Copiar la plantilla del tablero
  2930 000014BE 488D3D(400A0000)            lea rdi, [board]            ; Destino: el tablero actual
  2931 000014C5 B9400A0000                  mov rcx, board_template_size
  2932 000014CA F3A4                        rep movsb                   ; Copiar el tablero
  2933                                  
  2934 000014CC 58                          pop rax
  2935 000014CD 59                          pop rcx
  2936 000014CE 5F                          pop rdi
  2937 000014CF 5E                          pop rsi
  2938 000014D0 C3                          ret
  2939                                  
  2940                                  clear_enemies_from_board:
  2941 000014D1 55                          push rbp
  2942 000014D2 4889E5                      mov rbp, rsp
  2943 000014D5 56                          push rsi
  2944 000014D6 57                          push rdi
  2945                                  
  2946                                      ; Primero limpiar board
  2947 000014D7 B9400A0000                  mov rcx, board_size      
  2948 000014DC 488D35(400A0000)            lea rsi, [board]         
  2949                                  
  2950                                  .clear_loop:
  2951 000014E3 4883F900                    cmp rcx, 0              
  2952 000014E7 741F                        je .clear_template      ; En vez de terminar, vamos a limpiar template
  2953                                      
  2954 000014E9 8A06                        mov al, [rsi]           
  2955 000014EB 3C40                        cmp al, '@'             
  2956 000014ED 740E                        je .make_space
  2957 000014EF 3C23                        cmp al, '#'             
  2958 000014F1 740A                        je .make_space
  2959 000014F3 3C24                        cmp al, '$'             
  2960 000014F5 7406                        je .make_space
  2961 000014F7 3C26                        cmp al, '&'             
  2962 000014F9 7402                        je .make_space
  2963                                      
  2964 000014FB EB03                        jmp .next               
  2965                                  
  2966                                  .make_space:
  2967 000014FD C60620                      mov byte [rsi], ' '     
  2968                                  
  2969                                  .next:
  2970 00001500 48FFC6                      inc rsi                 
  2971 00001503 48FFC9                      dec rcx                
  2972 00001506 EBDB                        jmp .clear_loop        
  2973                                  
  2974                                  .clear_template:
  2975                                      ; Ahora limpiar board_template
  2976 00001508 B9400A0000                  mov rcx, board_template_size
  2977 0000150D 488D35(00000000)            lea rsi, [board_template]
  2978                                  
  2979                                  .template_loop:
  2980 00001514 4883F900                    cmp rcx, 0
  2981 00001518 741F                        je .end
  2982                                      
  2983 0000151A 8A06                        mov al, [rsi]
  2984 0000151C 3C40                        cmp al, '@'
  2985 0000151E 740E                        je .make_space_template
  2986 00001520 3C23                        cmp al, '#'
  2987 00001522 740A                        je .make_space_template
  2988 00001524 3C24                        cmp al, '$'
  2989 00001526 7406                        je .make_space_template
  2990 00001528 3C26                        cmp al, '&'
  2991 0000152A 7402                        je .make_space_template
  2992                                      
  2993 0000152C EB03                        jmp .next_template
  2994                                  
  2995                                  .make_space_template:
  2996 0000152E C60620                      mov byte [rsi], ' '
  2997                                  
  2998                                  .next_template:
  2999 00001531 48FFC6                      inc rsi
  3000 00001534 48FFC9                      dec rcx
  3001 00001537 EBDB                        jmp .template_loop
  3002                                  
  3003                                  .end:
  3004 00001539 5F                          pop rdi
  3005 0000153A 5E                          pop rsi
  3006 0000153B 5D                          pop rbp
  3007 0000153C C3                          ret
  3008                                  
  3009                                  
  3010                                  
  3011                                  
  3012                                  init_level:
  3013 0000153D E88FFFFFFF                  call clear_enemies_from_board
  3014 00001542 C605(22150000)00            mov byte [ball2_active], 0
  3015 00001549 C605(44150000)00            mov byte [ball3_active], 0
  3016 00001550 C605(09230000)00            mov byte [laser_power_active], 0
  3017 00001557 E898F2FFFF                  call clear_lasers
  3018 0000155C 488B05(CF140000)            mov rax, [default_pallet_size]
  3019 00001563 488905(C7140000)            mov [pallet_size], rax
  3020 0000156A 48C705(E3220000)07-         mov qword [ball_speed], 7    ; Restaurar velocidad normal
  3020 00001572 000000             
  3021                                  
  3022                                      ; 1) Copiamos board_template en board para que quede "virgen"
  3023                                          ; Reiniciar letras activas
  3024 00001575 488D3D(3C210000)            lea rdi, [letters_map]
  3025 0000157C B990010000                  mov rcx, 100 * 4             ; Cada letra ocupa 4 bytes, limpiar 100 letras
  3026 00001581 4831C0                      xor rax, rax
  3027 00001584 F3AA                        rep stosb                    ; Llenar con ceros
  3028                                      
  3029                                      ; Inicializar dirección de la bola (derecha y arriba)
  3030 00001586 48C705(EF140000)01-         mov qword [ball_direction_x], 1    ; Dirección hacia la derecha (1 = derecha, -1 = izquierda)
  3030 0000158E 000000             
  3031 00001591 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Dirección hacia arriba (-1 = arriba, 1 = abajo)
  3031 00001599 FFFFFF             
  3032                                  
  3033                                      ; En init_level, después de inicializar las direcciones
  3034 0000159C C605(FC220000)01            mov byte [catch_power_active], 1    ; Activar el poder catch
  3035 000015A3 C605(FD220000)01            mov byte [ball_caught], 1           ; Marcar la bola como atrapada
  3036 000015AA C605(FB220000)01            mov byte [initial_catch_active], 1  ; Marcar que es el catch inicial
  3037                                  
  3038                                      ; Calcular y guardar el offset inicial de la bola respecto a la paleta
  3039 000015B1 488B05(DF140000)            mov rax, [ball_x_pos]              ; Posición X actual de la bola
  3040 000015B8 482B05(BF140000)            sub rax, [pallet_position]         ; Restar la posición de la paleta
  3041 000015BF 4805[400A0000]              add rax, board                     ; Ajustar por el offset del tablero
  3042 000015C5 488905(00230000)            mov [ball_catch_offset], rax       ; Guardar el offset
  3043                                  
  3044                                  
  3045                                  
  3046                                      ; Reiniciar contador de letras activas
  3047 000015CC 4831C0                      xor rax, rax
  3048 000015CF 8805(CC220000)              mov [letters_count], al
  3049                                  
  3050                                      ; Reiniciar última letra capturada
  3051 000015D5 C605(CD220000)20            mov byte [last_letter], ' '
  3052 000015DC C605(46200000)00            mov byte [destroyed_blocks], 0 
  3053 000015E3 E8CBFEFFFF                  call init_empty_board
  3054 000015E8 E835FEFFFF                  call display_level_number
  3055                                  
  3056 000015ED 56                          push rsi
  3057 000015EE 57                          push rdi
  3058 000015EF 51                          push rcx
  3059 000015F0 50                          push rax
  3060                                  
  3061 000015F1 488D35(00000000)            lea rsi, [board_template]
  3062 000015F8 488D3D(400A0000)            lea rdi, [board]
  3063 000015FF B9400A0000                  mov rcx, board_template_size
  3064 00001604 F3A4                        rep movsb                 ; Copiamos la plantilla a board
  3065                                  
  3066 00001606 58                          pop rax
  3067 00001607 59                          pop rcx
  3068 00001608 5F                          pop rdi
  3069 00001609 5E                          pop rsi
  3070                                  
  3071 0000160A B90A000000                  mov rcx, 10
  3072 0000160F 4831C0                      xor rax, rax
  3073 00001612 488D3D(E9200000)            lea rdi, [enemy_spawns_triggered]
  3074 00001619 F3AA                        rep stosb   
  3075 0000161B E8D4050000                  call init_enemies   
  3076                                  
  3077                                      ; Verificar el nivel actual y cargar los bloques correspondientes
  3078 00001620 803D(79150000)01            cmp byte [current_level], 1
  3079 00001627 7431                        je .level1
  3080 00001629 803D(79150000)02            cmp byte [current_level], 2
  3081 00001630 7454                        je .level2
  3082 00001632 803D(79150000)03            cmp byte [current_level], 3
  3083 00001639 7477                        je .level3
  3084 0000163B 803D(79150000)04            cmp byte [current_level], 4
  3085 00001642 0F8492000000                je .level4
  3086 00001648 803D(79150000)05            cmp byte [current_level], 5
  3087 0000164F 0F84B0000000                je .level5
  3088 00001655 E9D3000000                  jmp .done
  3089                                  
  3090                                  
  3091                                  
  3092                                      .level1:
  3093 0000165A C605(7A150000)4E                mov byte [blocks_remaining], level1_blocks_count
  3094 00001661 4831C9                          xor rcx, rcx             
  3095                                          .init_loop1:
  3096 00001664 4883F94E                            cmp rcx, level1_blocks_count
  3097 00001668 0F8DBF000000                        jge .done
  3098 0000166E 4889C8                              mov rax, rcx         
  3099 00001671 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3100 00001675 8A90[7E150000]                      mov dl, byte [level1_blocks + rax + 3]  
  3101 0000167B 8891[761F0000]                      mov byte [block_states + rcx], dl
  3102 00001681 48FFC1                              inc rcx
  3103 00001684 EBDE                                jmp .init_loop1
  3104                                  
  3105                                      .level2:
  3106 00001686 C605(7A150000)5B                mov byte [blocks_remaining], level2_blocks_count
  3107 0000168D 4831C9                          xor rcx, rcx             
  3108                                          .init_loop2:
  3109 00001690 4883F95B                            cmp rcx, level2_blocks_count
  3110 00001694 0F8D93000000                        jge .done
  3111 0000169A 4889C8                              mov rax, rcx         
  3112 0000169D 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3113 000016A1 8A90[04170000]                      mov dl, byte [level2_blocks + rax + 3]  
  3114 000016A7 8891[761F0000]                      mov byte [block_states + rcx], dl
  3115 000016AD 48FFC1                              inc rcx
  3116 000016B0 EBDE                                jmp .init_loop2
  3117                                      .level3:
  3118 000016B2 C605(7A150000)40                mov byte [blocks_remaining], 64
  3119 000016B9 4831C9                          xor rcx, rcx             
  3120                                          .init_loop3:
  3121 000016BC 4883F968                            cmp rcx, level3_blocks_count
  3122 000016C0 7D6B                                jge .done
  3123 000016C2 4889C8                              mov rax, rcx         
  3124 000016C5 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3125 000016C9 8A90[CB180000]                      mov dl, byte [level3_blocks + rax + 3]  
  3126 000016CF 8891[761F0000]                      mov byte [block_states + rcx], dl
  3127 000016D5 48FFC1                              inc rcx
  3128 000016D8 EBE2                                jmp .init_loop3
  3129                                  
  3130                                      .level4:
  3131 000016DA C605(7A150000)8C                mov byte [blocks_remaining], level4_blocks_count
  3132 000016E1 4831C9                          xor rcx, rcx             
  3133                                          .init_loop4:
  3134 000016E4 4881F98C000000                      cmp rcx, level4_blocks_count
  3135 000016EB 7D40                                jge .done
  3136 000016ED 4889C8                              mov rax, rcx         
  3137 000016F0 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3138 000016F4 8A90[D31A0000]                      mov dl, byte [level4_blocks + rax + 3]  
  3139 000016FA 8891[761F0000]                      mov byte [block_states + rcx], dl
  3140 00001700 48FFC1                              inc rcx
  3141 00001703 EBDF                                jmp .init_loop4
  3142                                  
  3143                                      .level5:
  3144 00001705 C605(7A150000)62                mov byte [blocks_remaining], level5_blocks_count
  3145 0000170C 4831C9                          xor rcx, rcx             
  3146                                          .init_loop5:
  3147 0000170F 4883F962                            cmp rcx, level5_blocks_count
  3148 00001713 7D18                                jge .done
  3149 00001715 4889C8                              mov rax, rcx         
  3150 00001718 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3151 0000171C 8A90[8F1D0000]                      mov dl, byte [level5_blocks + rax + 3]  
  3152 00001722 8891[761F0000]                      mov byte [block_states + rcx], dl
  3153 00001728 48FFC1                              inc rcx
  3154 0000172B EBE2                                jmp .init_loop5
  3155                                      .done:
  3156 0000172D C3                              ret
  3157                                  
  3158                                  
  3159                                  ; Función para verificar y manejar la transición de nivel
  3160                                  check_level_complete:
  3161                                      ; Verificar si quedan bloques
  3162 0000172E 803D(7A150000)00            cmp byte [blocks_remaining], 0
  3163 00001735 7556                        jne .not_complete
  3164                                      
  3165                                      ; Incrementar el nivel
  3166 00001737 FE05(79150000)              inc byte [current_level]
  3167                                      
  3168                                      ; Verificar si hemos completado todos los niveles
  3169 0000173D 803D(79150000)06            cmp byte [current_level], 6
  3170 00001744 7448                        je game_win
  3171                                      
  3172                                  
  3173 00001746 E886FDFFFF                  call clear_enemies_from_board
  3174                                      ; Primero establecer las posiciones seguras
  3175 0000174B 48C705(BF140000)-           mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  3175 00001752 [B0130000]         
  3176 00001756 48C705(DF140000)28-         mov qword [ball_x_pos], 40
  3176 0000175E 000000             
  3177 00001761 48C705(E7140000)1C-         mov qword [ball_y_pos], 28
  3177 00001769 000000             
  3178 0000176C C605(FF140000)00            mov byte [ball_moving], 0
  3179                                      
  3180                                      ; Asegurar que la bola esté en un estado seguro
  3181 00001773 C605(FC220000)01            mov byte [catch_power_active], 1
  3182 0000177A C605(FD220000)01            mov byte [ball_caught], 1
  3183 00001781 C605(FB220000)01            mov byte [initial_catch_active], 1
  3184                                      
  3185                                      ; Reinicializar el juego para el siguiente nivel
  3186 00001788 E8B0FDFFFF                  call init_level
  3187                                      
  3188                                  .not_complete:
  3189 0000178D C3                          ret
  3190                                  
  3191                                      ; Nueva función para manejar la victoria del juego
  3192                                  game_win:
  3193                                      ; Limpiar la pantalla primero
  3194                                      print clear, clear_length
    93 0000178E B801000000          <1>  mov eax, sys_write
    94 00001793 BF01000000          <1>  mov edi, 1
    95 00001798 48BE-               <1>  mov rsi, %1
    95 0000179A [1000000000000000]  <1>
    96 000017A2 BA07000000          <1>  mov edx, %2
    97 000017A7 0F05                <1>  syscall
  3195                                      
  3196                                      ; Mensaje de victoria
  3197 000017A9 488B05(3E200000)            mov rax, [current_score]    ; Obtener el puntaje final
  3198 000017B0 48BF-                       mov rdi, number_buffer      ; Convertir a string
  3198 000017B2 [4720000000000000] 
  3199 000017BA E8B4010000                  call number_to_string
  3200                                      
  3201                                      ; Definir mensaje de victoria
  3202                                      section .data
  3203 0000246F C2A146656C69636964-             win_msg: db "¡Felicidades! ¡Has ganado!", 0xA, 0xD
  3203 00002478 616465732120C2A148-
  3203 00002481 61732067616E61646F-
  3203 0000248A 210A0D             
  3204                                          win_msg_len: equ $ - win_msg
  3205 0000248D 50756E74616A652066-             score_msg: db "Puntaje final: "
  3205 00002496 696E616C3A20       
  3206                                          score_msg_len: equ $ - score_msg
  3207                                      section .text
  3208                                      
  3209                                      ; Imprimir mensajes
  3210                                      print win_msg, win_msg_len
    93 000017BF B801000000          <1>  mov eax, sys_write
    94 000017C4 BF01000000          <1>  mov edi, 1
    95 000017C9 48BE-               <1>  mov rsi, %1
    95 000017CB [6F24000000000000]  <1>
    96 000017D3 BA1E000000          <1>  mov edx, %2
    97 000017D8 0F05                <1>  syscall
  3211                                      print score_msg, score_msg_len
    93 000017DA B801000000          <1>  mov eax, sys_write
    94 000017DF BF01000000          <1>  mov edi, 1
    95 000017E4 48BE-               <1>  mov rsi, %1
    95 000017E6 [8D24000000000000]  <1>
    96 000017EE BA0F000000          <1>  mov edx, %2
    97 000017F3 0F05                <1>  syscall
  3212                                      print number_buffer, 20
    93 000017F5 B801000000          <1>  mov eax, sys_write
    94 000017FA BF01000000          <1>  mov edi, 1
    95 000017FF 48BE-               <1>  mov rsi, %1
    95 00001801 [4720000000000000]  <1>
    96 00001809 BA14000000          <1>  mov edx, %2
    97 0000180E 0F05                <1>  syscall
  3213                                      
  3214                                      ; Esperar un momento antes de salir
  3215 00001810 48C705E5E7FFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  3215 00001819 0000               
  3216 0000181B 48C705E2E7FFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  3216 00001824 0000               
  3217                                      sleeptime
   109 00001826 B823000000          <1>  mov eax, sys_nanosleep
   110 0000182B 48BF-               <1>  mov rdi, timespec
   110 0000182D [0000000000000000]  <1>
   111 00001835 31F6                <1>  xor esi, esi
   112 00001837 0F05                <1>  syscall
  3218                                      
  3219 00001839 E9B30B0000                  jmp exit
  3220                                  
  3221                                  ; Función para imprimir los bloques
  3222                                  ; Función modificada para imprimir bloques
  3223                                  
  3224                                  ; Primero, agreguemos una función para obtener el puntero a los bloques del nivel actual
  3225                                  get_current_level_blocks:
  3226 0000183E 803D(79150000)01            cmp byte [current_level], 1
  3227 00001845 7428                        je .level1
  3228 00001847 803D(79150000)02            cmp byte [current_level], 2
  3229 0000184E 7427                        je .level2
  3230 00001850 803D(79150000)03            cmp byte [current_level], 3
  3231 00001857 7426                        je .level3
  3232 00001859 803D(79150000)04            cmp byte [current_level], 4
  3233 00001860 7425                        je .level4
  3234 00001862 803D(79150000)05            cmp byte [current_level], 5
  3235 00001869 7424                        je .level5
  3236                                      ; Si llegamos aquí, hay un error en el nivel
  3237 0000186B 4831C0                      xor rax, rax
  3238 0000186E C3                          ret
  3239                                  
  3240                                      .level1:
  3241 0000186F 488D05(7B150000)                lea rax, [level1_blocks]
  3242 00001876 C3                              ret
  3243                                      .level2:
  3244 00001877 488D05(01170000)                lea rax, [level2_blocks]
  3245 0000187E C3                              ret
  3246                                      .level3:
  3247 0000187F 488D05(C8180000)                lea rax, [level3_blocks]
  3248 00001886 C3                              ret
  3249                                      .level4:
  3250 00001887 488D05(D01A0000)                lea rax, [level4_blocks]
  3251 0000188E C3                              ret
  3252                                      .level5:
  3253 0000188F 488D05(8C1D0000)                lea rax, [level5_blocks]
  3254 00001896 C3                              ret
  3255                                  ; Función para obtener la cantidad de bloques del nivel actual
  3256                                  get_current_level_count:
  3257 00001897 803D(79150000)01            cmp byte [current_level], 1
  3258 0000189E 7428                        je .level1
  3259 000018A0 803D(79150000)02            cmp byte [current_level], 2
  3260 000018A7 7425                        je .level2
  3261 000018A9 803D(79150000)03            cmp byte [current_level], 3
  3262 000018B0 7422                        je .level3
  3263 000018B2 803D(79150000)04            cmp byte [current_level], 4
  3264 000018B9 741F                        je .level4
  3265 000018BB 803D(79150000)05            cmp byte [current_level], 5
  3266 000018C2 741C                        je .level5
  3267                                      ; Si llegamos aquí, hay un error en el nivel
  3268 000018C4 4831C0                      xor rax, rax
  3269 000018C7 C3                          ret
  3270                                  
  3271                                      .level1:
  3272 000018C8 B84E000000                      mov rax, level1_blocks_count
  3273 000018CD C3                              ret
  3274                                      .level2:
  3275 000018CE B85B000000                      mov rax, level2_blocks_count
  3276 000018D3 C3                              ret
  3277                                      .level3:
  3278 000018D4 B868000000                      mov rax, level3_blocks_count
  3279 000018D9 C3                              ret
  3280                                      .level4:
  3281 000018DA B88C000000                      mov rax, level4_blocks_count
  3282 000018DF C3                              ret
  3283                                      .level5:
  3284 000018E0 B862000000                      mov rax, level5_blocks_count
  3285 000018E5 C3                              ret
  3286                                  
  3287                                  
  3288                                  print_blocks:
  3289 000018E6 55                          push rbp
  3290 000018E7 4889E5                      mov rbp, rsp
  3291                                      
  3292                                      ; Obtener puntero a los bloques del nivel actual
  3293 000018EA E84FFFFFFF                  call get_current_level_blocks
  3294 000018EF 4989C5                      mov r13, rax                  ; Guardar puntero a los bloques en r13
  3295                                      
  3296                                      ; Obtener cantidad de bloques del nivel actual
  3297 000018F2 E8A0FFFFFF                  call get_current_level_count
  3298 000018F7 4989C6                      mov r14, rax                  ; Guardar cantidad de bloques en r14
  3299                                      
  3300 000018FA 4D31E4                      xor r12, r12                  ; Índice del bloque actual
  3301                                      
  3302                                      .print_loop:
  3303 000018FD 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
  3304 00001900 7D6F                            jge .end
  3305                                          
  3306                                          ; Verificar si el bloque está activo
  3307 00001902 490FB68424-                     movzx rax, byte [block_states + r12]
  3307 00001907 [761F0000]         
  3308 0000190B 4885C0                          test rax, rax
  3309 0000190E 745C                            jz .next_block
  3310                                          
  3311                                          ; Obtener posición y tipo del bloque usando r13
  3312 00001910 4C89E0                          mov rax, r12
  3313 00001913 486BC005                        imul rax, 5
  3314 00001917 4C01E8                          add rax, r13
  3315 0000191A 448A00                          mov r8b, [rax]        ; X position
  3316 0000191D 448A4801                        mov r9b, [rax + 1]    ; Y position
  3317 00001921 448A5002                        mov r10b, [rax + 2]   ; Tipo de bloque
  3318                                  
  3319                                          ; El resto de la lógica de impresión permanece igual
  3320 00001925 4D0FB6C0                        movzx r8, r8b
  3321 00001929 4D0FB6C9                        movzx r9, r9b
  3322 0000192D 4981C0[400A0000]                add r8, board
  3323 00001934 B852000000                      mov rax, column_cells + 2
  3324 00001939 49F7E1                          mul r9
  3325 0000193C 4901C0                          add r8, rax
  3326                                          
  3327 0000193F B906000000                      mov rcx, block_length
  3328 00001944 48BE-                           mov rsi, block_type_1
  3328 00001946 [5515000000000000] 
  3329 0000194E 490FB6C2                        movzx rax, r10b
  3330 00001952 48FFC8                          dec rax
  3331 00001955 486BC006                        imul rax, block_length
  3332 00001959 4801C6                          add rsi, rax
  3333                                          
  3334                                      .print_block_chars:
  3335 0000195C 8A06                            mov al, [rsi]
  3336 0000195E 418800                          mov [r8], al
  3337 00001961 48FFC6                          inc rsi
  3338 00001964 49FFC0                          inc r8
  3339 00001967 48FFC9                          dec rcx
  3340 0000196A 75F0                            jnz .print_block_chars
  3341                                          
  3342                                      .next_block:
  3343 0000196C 49FFC4                          inc r12
  3344 0000196F EB8C                            jmp .print_loop
  3345                                          
  3346                                      .end:
  3347 00001971 5D                              pop rbp
  3348 00001972 C3                              ret
  3349                                  
  3350                                  ; Función para convertir número a string
  3351                                  ; Input: RAX = número a convertir
  3352                                  ; RDI = buffer donde escribir el string
  3353                                  number_to_string:
  3354 00001973 53                          push rbx
  3355 00001974 52                          push rdx
  3356 00001975 56                          push rsi
  3357 00001976 BB0A000000                  mov rbx, 10          ; Divisor
  3358 0000197B B900000000                  mov rcx, 0          ; Contador de dígitos
  3359                                      
  3360                                      ; Si el número es 0, manejarlo especialmente
  3361 00001980 4885C0                      test rax, rax
  3362 00001983 7509                        jnz .convert_loop
  3363 00001985 C60730                      mov byte [rdi], '0'
  3364 00001988 C6470100                    mov byte [rdi + 1], 0
  3365 0000198C EB20                        jmp .end
  3366                                      
  3367                                      .convert_loop:
  3368 0000198E 4831D2                          xor rdx, rdx    ; Limpiar RDX para la división
  3369 00001991 48F7F3                          div rbx         ; RAX/10, cociente en RAX, residuo en RDX
  3370 00001994 80C230                          add dl, '0'     ; Convertir a ASCII
  3371 00001997 52                              push rdx        ; Guardar el dígito
  3372 00001998 48FFC1                          inc rcx         ; Incrementar contador
  3373 0000199B 4885C0                          test rax, rax   ; Verificar si quedan más dígitos
  3374 0000199E 75EE                            jnz .convert_loop
  3375                                          
  3376                                      .write_loop:
  3377 000019A0 5A                              pop rdx         ; Obtener dígito
  3378 000019A1 8817                            mov [rdi], dl   ; Escribir al buffer
  3379 000019A3 48FFC7                          inc rdi         ; Siguiente posición
  3380 000019A6 48FFC9                          dec rcx         ; Decrementar contador
  3381 000019A9 75F5                            jnz .write_loop
  3382                                          
  3383 000019AB C60700                      mov byte [rdi], 0   ; Null terminator
  3384                                      
  3385                                      .end:
  3386 000019AE 5E                          pop rsi
  3387 000019AF 5A                          pop rdx
  3388 000019B0 5B                          pop rbx
  3389 000019B1 C3                          ret
  3390                                  
  3391                                  ; Función para imprimir los labels
  3392                                  print_labels:
  3393 000019B2 55                          push rbp
  3394 000019B3 4889E5                      mov rbp, rsp
  3395                                  
  3396                                      ; Crear buffer temporal
  3397 000019B6 4883EC20                    sub rsp, 32
  3398                                  
  3399                                      ; Copiar labels a buffer temporal
  3400 000019BA 4889E7                      mov rdi, rsp
  3401 000019BD 488D35(F3200000)            lea rsi, [score_label]
  3402 000019C4 B917000000                  mov rcx, score_label_len
  3403 000019C9 F3A4                        rep movsb
  3404                                  
  3405                                      ; Convertir score a string
  3406 000019CB 488B05(3E200000)            mov rax, [current_score]
  3407 000019D2 48BF-                       mov rdi, number_buffer
  3407 000019D4 [4720000000000000] 
  3408 000019DC E892FFFFFF                  call number_to_string
  3409                                  
  3410                                      ; Calcular longitud del número
  3411 000019E1 B900000000                  mov rcx, 0
  3412 000019E6 48BF-                       mov rdi, number_buffer
  3412 000019E8 [4720000000000000] 
  3413                                      .count_loop:
  3414 000019F0 803C0F00                        cmp byte [rdi + rcx], 0
  3415 000019F4 7405                            je .count_done
  3416 000019F6 48FFC1                          inc rcx
  3417 000019F9 EBF5                            jmp .count_loop
  3418                                      .count_done:
  3419                                  
  3420                                      ; Insertar el número en la posición correcta, alineado a la derecha
  3421 000019FB 4889E7                      mov rdi, rsp
  3422 000019FE 4883C70A                    add rdi, score_pos           ; Moverse a la posición del número
  3423 00001A02 BE0A000000                  mov rsi, 10                  ; Espacio reservado para el número
  3424 00001A07 4829CE                      sub rsi, rcx                 ; Calcular padding necesario
  3425                                      .pad_loop:
  3426 00001A0A 4885F6                          test rsi, rsi
  3427 00001A0D 740B                            jz .pad_done
  3428 00001A0F C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  3429 00001A12 48FFC7                          inc rdi
  3430 00001A15 48FFCE                          dec rsi
  3431 00001A18 EBF0                            jmp .pad_loop
  3432                                      .pad_done:
  3433                                  
  3434                                      ; Copiar el número
  3435 00001A1A 48BE-                       mov rsi, number_buffer
  3435 00001A1C [4720000000000000] 
  3436 00001A24 F3A4                        rep movsb
  3437                                  
  3438                                      ; Imprimir el buffer completo
  3439                                      print rsp, score_label_len
    93 00001A26 B801000000          <1>  mov eax, sys_write
    94 00001A2B BF01000000          <1>  mov edi, 1
    95 00001A30 4889E6              <1>  mov rsi, %1
    96 00001A33 BA17000000          <1>  mov edx, %2
    97 00001A38 0F05                <1>  syscall
  3440                                  
  3441                                      ; Repetir proceso para bloques destruidos
  3442 00001A3A 4889E7                      mov rdi, rsp
  3443 00001A3D 488D35(0A210000)            lea rsi, [blocks_label]
  3444 00001A44 B91B000000                  mov rcx, blocks_label_len
  3445 00001A49 F3A4                        rep movsb
  3446                                  
  3447                                      ; Verificar que el `[` esté en su posición correcta
  3448 00001A4B 4889E7                      mov rdi, rsp
  3449 00001A4E 4883C713                    add rdi, blocks_pos - 1  ; Posición exacta donde debe ir el '['
  3450 00001A52 C6075B                      mov byte [rdi], '['      ; Garantizar que el `[` esté presente
  3451                                  
  3452                                      ; Convertir bloques destruidos a string
  3453 00001A55 480FB605(46200000)          movzx rax, byte [destroyed_blocks]
  3454 00001A5D 48BF-                       mov rdi, number_buffer
  3454 00001A5F [4720000000000000] 
  3455 00001A67 E807FFFFFF                  call number_to_string
  3456                                  
  3457                                      ; Calcular longitud del número
  3458 00001A6C B900000000                  mov rcx, 0
  3459 00001A71 48BF-                       mov rdi, number_buffer
  3459 00001A73 [4720000000000000] 
  3460                                      .count_loop2:
  3461 00001A7B 803C0F00                        cmp byte [rdi + rcx], 0
  3462 00001A7F 7405                            je .count_done2
  3463 00001A81 48FFC1                          inc rcx
  3464 00001A84 EBF5                            jmp .count_loop2
  3465                                      .count_done2:
  3466                                  
  3467                                      ; Insertar el número en la posición correcta, alineado a la derecha
  3468 00001A86 4889E7                      mov rdi, rsp
  3469 00001A89 4883C714                    add rdi, blocks_pos         ; Moverse a la posición del número
  3470 00001A8D BE03000000                  mov rsi, 3                  ; Espacio reservado para el número
  3471 00001A92 4829CE                      sub rsi, rcx                ; Calcular padding necesario
  3472                                      .pad_loop2:
  3473 00001A95 4885F6                          test rsi, rsi
  3474 00001A98 740B                            jz .pad_done2
  3475 00001A9A C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  3476 00001A9D 48FFC7                          inc rdi
  3477 00001AA0 48FFCE                          dec rsi
  3478 00001AA3 EBF0                            jmp .pad_loop2
  3479                                      .pad_done2:
  3480                                  
  3481                                      ; Copiar el número
  3482 00001AA5 48BE-                       mov rsi, number_buffer
  3482 00001AA7 [4720000000000000] 
  3483 00001AAF F3A4                        rep movsb
  3484                                  
  3485                                      ; Imprimir el buffer completo
  3486                                      print rsp, blocks_label_len
    93 00001AB1 B801000000          <1>  mov eax, sys_write
    94 00001AB6 BF01000000          <1>  mov edi, 1
    95 00001ABB 4889E6              <1>  mov rsi, %1
    96 00001ABE BA1B000000          <1>  mov edx, %2
    97 00001AC3 0F05                <1>  syscall
  3487                                  
  3488                                      ; Restaurar stack
  3489 00001AC5 4883C420                    add rsp, 32
  3490 00001AC9 5D                          pop rbp
  3491 00001ACA C3                          ret
  3492                                  
  3493                                  
  3494                                  
  3495                                  check_block_collision:
  3496 00001ACB 55                          push rbp
  3497 00001ACC 4889E5                      mov rbp, rsp
  3498                                  
  3499                                      ; Almacenar el carácter en la posición r10 (pos. de la bola en board[])
  3500 00001ACF 418A02                      mov al, [r10]
  3501                                  
  3502                                      ; Verificar si el carácter es un bloque
  3503 00001AD2 3C55                        cmp al, 'U'  
  3504 00001AD4 7419                        je .possible
  3505 00001AD6 3C4F                        cmp al, 'O'  
  3506 00001AD8 7415                        je .possible
  3507 00001ADA 3C44                        cmp al, 'D'  
  3508 00001ADC 7411                        je .possible
  3509 00001ADE 3C4C                        cmp al, 'L'  
  3510 00001AE0 740D                        je .possible
  3511 00001AE2 3C56                        cmp al, 'V'  
  3512 00001AE4 7409                        je .possible
  3513 00001AE6 3C38                        cmp al, '8'  
  3514 00001AE8 7405                        je .possible
  3515                                  
  3516                                      ; No es bloque, salir
  3517 00001AEA 4831C0                      xor rax, rax
  3518 00001AED 5D                          pop rbp
  3519 00001AEE C3                          ret
  3520                                  
  3521                                  .possible:
  3522 00001AEF 53                          push rbx
  3523 00001AF0 57                          push rdi
  3524 00001AF1 56                          push rsi
  3525 00001AF2 4154                        push r12
  3526 00001AF4 4155                        push r13
  3527 00001AF6 4156                        push r14
  3528 00001AF8 4157                        push r15
  3529                                  
  3530                                      ; 1) Obtener base de los bloques del nivel actual
  3531 00001AFA E83FFDFFFF                  call get_current_level_blocks
  3532 00001AFF 4989C5                      mov r13, rax  ; (r13) = base de levelX_blocks
  3533                                  
  3534                                      ; 2) Obtener la cantidad de bloques
  3535 00001B02 E890FDFFFF                  call get_current_level_count
  3536 00001B07 4989C6                      mov r14, rax
  3537                                  
  3538 00001B0A 4D31E4                      xor r12, r12  ; Índice del bloque actual
  3539                                  
  3540                                  .find_block_loop:
  3541 00001B0D 4D39F4                      cmp r12, r14
  3542 00001B10 0F8DCE000000                jge .no_block_found  ; Se acabaron los bloques
  3543                                  
  3544                                      ; Calcular puntero base del bloque actual en levelX_blocks
  3545 00001B16 4C89E0                      mov rax, r12
  3546 00001B19 486BC005                    imul rax, 5            ; (x, y, tipo, durabilidad_inicial, letra)
  3547 00001B1D 4C01E8                      add rax, r13
  3548 00001B20 4989C7                      mov r15, rax           ; r15 apunta a los datos del bloque actual
  3549                                  
  3550                                      ; --- Aquí la diferencia: la durabilidad no la leemos de [r15+3], sino de block_states[r12]
  3551 00001B23 490FB69C24-                 movzx rbx, byte [block_states + r12]  ; Durabilidad "viva" en block_states
  3551 00001B28 [761F0000]         
  3552 00001B2C 4885DB                      test rbx, rbx
  3553 00001B2F 0F84A7000000                jz .next_block  ; si durabilidad=0 => bloque destruido => ignorar
  3554                                  
  3555                                      ; Obtener coordenadas
  3556 00001B35 418A17                      mov dl, [r15]         ; x
  3557 00001B38 418A4F01                    mov cl, [r15 + 1]     ; y
  3558                                  
  3559                                      ; Calcular posición en el board
  3560 00001B3C 488D3D(400A0000)            lea rdi, [board]
  3561 00001B43 4831C0                      xor rax, rax
  3562 00001B46 B850000000                  mov rax, column_cells
  3563 00001B4B 4883C002                    add rax, 2
  3564 00001B4F 480FB6C9                    movzx rcx, cl         ; y
  3565 00001B53 480FAFC1                    imul rax, rcx
  3566 00001B57 4801C7                      add rdi, rax
  3567 00001B5A 480FB6C2                    movzx rax, dl         ; x
  3568 00001B5E 4801C7                      add rdi, rax
  3569                                  
  3570                                      ; Guardar la posición base del bloque
  3571 00001B61 57                          push rdi
  3572                                  
  3573                                      ; Verificar si la bola (r10) está dentro de [rdi .. rdi+block_length)
  3574 00001B62 4939FA                      cmp r10, rdi
  3575 00001B65 7274                        jb .skip_collision
  3576 00001B67 488D5F06                    lea rbx, [rdi + block_length]
  3577 00001B6B 4939DA                      cmp r10, rbx
  3578 00001B6E 736B                        jae .skip_collision
  3579                                  
  3580                                      ; ------- Hay colisión, reducir durabilidad en block_states
  3581 00001B70 41FE8C24[761F0000]          dec byte [block_states + r12]
  3582                                      ; Volver a cargar durabilidad
  3583 00001B78 490FB69C24-                 movzx rbx, byte [block_states + r12]
  3583 00001B7D [761F0000]         
  3584 00001B81 4885DB                      test rbx, rbx
  3585 00001B84 754D                        jnz .update_display  ; si no llegó a 0 => solo "golpeado"
  3586                                  
  3587                                      ; >>> Llegó a 0 => Bloque destruido
  3588 00001B86 5F                          pop rdi  ; recuperar puntero base del bloque en board
  3589 00001B87 B906000000                  mov rcx, block_length
  3590                                  .clear_loop:
  3591 00001B8C C60720                      mov byte [rdi], ' '
  3592 00001B8F 48FFC7                      inc rdi
  3593 00001B92 E2F8                        loop .clear_loop
  3594                                  
  3595                                      ; Dibujar letra del bloque destruido
  3596 00001B94 418A4704                    mov al, [r15 + 4]  ; Obtener la letra asociada
  3597 00001B98 4883EF06                    sub rdi, block_length
  3598 00001B9C 8807                        mov [rdi], al      ; Escribir la letra en la posición inicial
  3599                                      ; Después de escribir la letra en el tablero
  3600 00001B9E 418A4704                    mov al, [r15 + 4]      ; Obtener la letra
  3601 00001BA2 4D0FB607                    movzx r8, byte [r15]   ; Posición x del bloque
  3602 00001BA6 4D0FB64F01                  movzx r9, byte [r15 + 1] ; Posición y del bloque
  3603 00001BAB E8D4E8FFFF                  call register_letter
  3604                                      ; Actualizar contadores globales
  3605 00001BB0 FE0D(7A150000)              dec byte [blocks_remaining]
  3606 00001BB6 FE05(46200000)              inc byte [destroyed_blocks]
  3607                                  
  3608                                      ; Sumar puntos según el tipo
  3609 00001BBC 490FB64702                  movzx rax, byte [r15 + 2]  ; tipo del bloque original
  3610 00001BC1 486BC00A                    imul rax, 10
  3611 00001BC5 480105(3E200000)            add [current_score], rax
  3612                                  
  3613 00001BCC B801000000                  mov rax, 1  ; colisión con destrucción
  3614 00001BD1 EB14                        jmp .end_pop
  3615                                  
  3616                                  .update_display:
  3617                                      ; => durabilidad >0, se podría actualizar el "look" del bloque
  3618 00001BD3 B801000000                  mov rax, 1  ; colisión con "rebote"  
  3619 00001BD8 5F                          pop rdi     ; pop que quedó pendiente
  3620 00001BD9 EB0C                        jmp .end_pop
  3621                                  
  3622                                  .skip_collision:
  3623 00001BDB 5F                          pop rdi     ; si no hubo colisión, quita de la pila
  3624                                  .next_block:
  3625 00001BDC 49FFC4                      inc r12
  3626 00001BDF E929FFFFFF                  jmp .find_block_loop
  3627                                  
  3628                                  .no_block_found:
  3629 00001BE4 4831C0                      xor rax, rax  ; 0 => no hubo colisión
  3630                                  
  3631                                  .end_pop:
  3632 00001BE7 415F                        pop r15
  3633 00001BE9 415E                        pop r14
  3634 00001BEB 415D                        pop r13
  3635 00001BED 415C                        pop r12
  3636 00001BEF 5E                          pop rsi
  3637 00001BF0 5F                          pop rdi
  3638 00001BF1 5B                          pop rbx
  3639 00001BF2 5D                          pop rbp
  3640 00001BF3 C3                          ret
  3641                                  
  3642                                  
  3643                                  
  3644                                  init_enemies:
  3645 00001BF4 55                          push rbp
  3646 00001BF5 4889E5                      mov rbp, rsp
  3647                                      
  3648                                      ; Reiniciar contadores de movimiento
  3649 00001BF8 C605(89200000)00            mov byte [enemy_move_total], 0
  3650 00001BFF C605(8A200000)00            mov byte [enemy_target], 0
  3651                                      
  3652                                      ; Limpiar completamente el array de enemigos
  3653 00001C06 B91E000000                  mov rcx, 30  ; 10 enemigos * 3 bytes cada uno
  3654 00001C0B 488D3D(60200000)            lea rdi, [enemies]
  3655 00001C12 30C0                        xor al, al
  3656 00001C14 F3AA                        rep stosb    ; Llenar todo con ceros
  3657                                      
  3658                                      ; Marcar todos los spawns como no activados
  3659 00001C16 488D3D(E9200000)            lea rdi, [enemy_spawns_triggered]
  3660 00001C1D B90A000000                  mov rcx, 10
  3661 00001C22 F3AA                        rep stosb
  3662                                      
  3663 00001C24 5D                          pop rbp
  3664 00001C25 C3                          ret
  3665                                  
  3666                                  
  3667                                  random_move_enemy:
  3668 00001C26 55                          push rbp
  3669 00001C27 4889E5                      mov  rbp, rsp
  3670 00001C2A 53                          push rbx
  3671 00001C2B 52                          push rdx
  3672 00001C2C 57                          push rdi
  3673                                  
  3674                                      ; r12 = índice del enemigo
  3675                                      ; 1) obtener puntero al enemigo i
  3676 00001C2D 4C89E0                      mov rax, r12
  3677 00001C30 486BC003                    imul rax, 3
  3678 00001C34 488D98[60200000]            lea rbx, [enemies + rax]     ; rbx => &enemies[r12]
  3679                                  
  3680                                      ; 2) Cargar X, Y actuales (NO SE BORRA AQUÍ TODAVÍA)
  3681 00001C3B 4C0FB603                    movzx r8, byte [rbx]         ; r8 = X actual
  3682 00001C3F 4C0FB64B01                  movzx r9, byte [rbx + 1]     ; r9 = Y actual
  3683                                  
  3684                                      ; 3) Generar "movimiento aleatorio" => tomamos [enemy_move_counter] & 3
  3685 00001C44 480FB605(87200000)          movzx rax, byte [enemy_move_counter]
  3686 00001C4C 4883E003                    and rax, 3
  3687                                  
  3688 00001C50 4883F800                    cmp rax, 0
  3689 00001C54 741B                        je .try_left
  3690 00001C56 4883F801                    cmp rax, 1
  3691 00001C5A 7410                        je .try_right
  3692 00001C5C 4883F802                    cmp rax, 2
  3693 00001C60 7405                        je .try_up
  3694                                      ; si es 3 => mover abajo
  3695                                  .try_down:
  3696 00001C62 49FFC1                      inc r9
  3697 00001C65 EB0D                        jmp .check_valid
  3698                                  
  3699                                  .try_up:
  3700 00001C67 49FFC9                      dec r9
  3701 00001C6A EB08                        jmp .check_valid
  3702                                  
  3703                                  .try_right:
  3704 00001C6C 49FFC0                      inc r8
  3705 00001C6F EB03                        jmp .check_valid
  3706                                  
  3707                                  .try_left:
  3708 00001C71 49FFC8                      dec r8
  3709                                  
  3710                                  .check_valid:
  3711                                      ; 4) Verificar límites
  3712 00001C74 4983F801                    cmp r8, 1                    
  3713 00001C78 0F8EA4000000                jle .invalid_move
  3714 00001C7E 4983F850                    cmp r8, column_cells        
  3715 00001C82 0F8D9A000000                jge .invalid_move
  3716 00001C88 4983F901                    cmp r9, 1                    
  3717 00001C8C 0F8E90000000                jle .invalid_move
  3718 00001C92 4983F920                    cmp r9, row_cells          
  3719 00001C96 0F8D86000000                jge .invalid_move
  3720                                  
  3721                                      ; 5) Verificar colisión con bloques/enemigos
  3722 00001C9C 4150                        push r8
  3723 00001C9E 4151                        push r9
  3724 00001CA0 B850000000                  mov rax, column_cells
  3725 00001CA5 4883C002                    add rax, 2
  3726 00001CA9 49F7E1                      mul r9
  3727 00001CAC 4C01C0                      add rax, r8
  3728 00001CAF 488DB8[400A0000]            lea rdi, [board + rax]
  3729 00001CB6 8A07                        mov al, [rdi]
  3730                                  
  3731                                      ; Revisa si es bloque o borde
  3732 00001CB8 3C55                        cmp al, 'U'
  3733 00001CBA 7462                        je .pop_and_invalid
  3734 00001CBC 3C4F                        cmp al, 'O'
  3735 00001CBE 745E                        je .pop_and_invalid
  3736 00001CC0 3C44                        cmp al, 'D'
  3737 00001CC2 745A                        je .pop_and_invalid
  3738 00001CC4 3C4C                        cmp al, 'L'
  3739 00001CC6 7456                        je .pop_and_invalid
  3740 00001CC8 3C56                        cmp al, 'V'
  3741 00001CCA 7452                        je .pop_and_invalid
  3742 00001CCC 3C38                        cmp al, '8'
  3743 00001CCE 744E                        je .pop_and_invalid
  3744 00001CD0 3C58                        cmp al, 'X'
  3745 00001CD2 744A                        je .pop_and_invalid
  3746                                  
  3747                                      ; Revisa si hay enemigo
  3748 00001CD4 3C40                        cmp al, '@'
  3749 00001CD6 7446                        je .pop_and_invalid
  3750 00001CD8 3C23                        cmp al, '#'
  3751 00001CDA 7442                        je .pop_and_invalid
  3752 00001CDC 3C24                        cmp al, '$'
  3753 00001CDE 743E                        je .pop_and_invalid
  3754 00001CE0 3C26                        cmp al, '&'
  3755 00001CE2 743A                        je .pop_and_invalid
  3756                                  
  3757 00001CE4 E808030000                  call check_enemy_at_position
  3758 00001CE9 4883F801                    cmp rax, 1
  3759 00001CED 742F                        je .pop_and_invalid
  3760                                  
  3761                                      ; ------------------------------
  3762                                      ; SI LLEGAMOS AQUI => POSICIÓN NUEVA ES VÁLIDA
  3763                                      ; AHORA SÍ BORRAMOS LA POSICIÓN ANTIGUA:
  3764                                      ; ------------------------------
  3765 00001CEF 4159                        pop r9
  3766 00001CF1 4158                        pop r8
  3767                                  
  3768                                      ; (A) Borrar la posición antigua en el board
  3769                                      ;    (X,Y) originales estaban en [rbx], [rbx+1].
  3770 00001CF3 4C0FB613                    movzx r10, byte [rbx]   ; oldX
  3771 00001CF7 4C0FB65B01                  movzx r11, byte [rbx+1] ; oldY
  3772 00001CFC B850000000                  mov rax, column_cells
  3773 00001D01 4883C002                    add rax, 2
  3774 00001D05 49F7E3                      mul r11
  3775 00001D08 4C01D0                      add rax, r10
  3776 00001D0B 488DB8[400A0000]            lea rdi, [board + rax]
  3777 00001D12 C60720                      mov byte [rdi], ' '     ; BORRA la posición vieja
  3778                                  
  3779                                      ; (B) Guardar la nueva X,Y en la estructura
  3780 00001D15 448803                      mov byte [rbx], r8b
  3781 00001D18 44884B01                    mov byte [rbx + 1], r9b
  3782                                  
  3783 00001D1C EB0D                        jmp .done
  3784                                  
  3785                                  .pop_and_invalid:
  3786 00001D1E 4159                        pop r9
  3787 00001D20 4158                        pop r8
  3788                                  
  3789                                  .invalid_move:
  3790                                      ; Restablecer la posición X,Y en [rbx], [rbx+1] (no se borró la vieja)
  3791 00001D22 4C0FB603                    movzx r8, byte [rbx]
  3792 00001D26 4C0FB64B01                  movzx r9, byte [rbx + 1]
  3793                                      ; Se queda donde estaba
  3794                                  .done:
  3795 00001D2B 5F                          pop rdi
  3796 00001D2C 5A                          pop rdx
  3797 00001D2D 5B                          pop rbx
  3798 00001D2E 5D                          pop rbp
  3799 00001D2F C3                          ret
  3800                                  
  3801                                  
  3802                                  ; Función para mover enemigos
  3803                                  move_enemies:
  3804 00001D30 55                          push rbp
  3805 00001D31 4889E5                      mov rbp, rsp
  3806                                      
  3807                                      ; Incrementar contador de movimiento
  3808 00001D34 FE05(87200000)              inc byte [enemy_move_counter]
  3809 00001D3A 480FB605(87200000)          movzx rax, byte [enemy_move_counter]
  3810 00001D42 3A05(88200000)              cmp al, [enemy_move_delay]
  3811 00001D48 0F85A1020000                jne .end
  3812                                      
  3813                                      ; Resetear contador
  3814 00001D4E C605(87200000)00            mov byte [enemy_move_counter], 0
  3815                                      
  3816 00001D55 4D31E4                      xor r12, r12                    ; Índice del enemigo
  3817                                      
  3818                                      .enemy_loop:
  3819 00001D58 4983FC0A                        cmp r12, 10                     ; Máximo 10 enemigos
  3820 00001D5C 0F8D8D020000                    jge .end
  3821                                          
  3822                                          ; Calcular offset del enemigo actual
  3823 00001D62 4C89E0                          mov rax, r12
  3824 00001D65 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  3825 00001D69 488DB0[60200000]                lea rsi, [enemies + rax]
  3826                                          
  3827                                          ; Verificar si el enemigo está activo
  3828 00001D70 807E0201                        cmp byte [rsi + 2], 1
  3829 00001D74 0F856D020000                    jne .next_enemy
  3830                                          
  3831                                          ; Obtener posición actual
  3832 00001D7A 4C0FB606                        movzx r8, byte [rsi]            ; X
  3833 00001D7E 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  3834                                          
  3835 00001D83 488D3D(40240000)                lea rdi, [enemy_last_x]
  3836 00001D8A 4C01E7                          add rdi, r12
  3837 00001D8D 8A07                            mov al, [rdi]             ; al = last_x
  3838                                  
  3839 00001D8F 488D15(4A240000)                lea rdx, [enemy_last_y]
  3840 00001D96 4C01E2                          add rdx, r12
  3841 00001D99 8A22                            mov ah, [rdx]             ; ah = last_y
  3842                                  
  3843                                          ; r8 = X actual del enemigo
  3844                                          ; r9 = Y actual del enemigo
  3845                                  
  3846                                          ; *** En lugar de cmp ah, r9b => hacemos lo siguiente:
  3847 00001D9B 88E2                            mov dl, ah      ; dl = old_Y
  3848 00001D9D 4488CB                          mov bl, r9b     ; bl = new_Y
  3849 00001DA0 38DA                            cmp dl, bl
  3850 00001DA2 752C                            jne .not_stuck
  3851                                  
  3852                                          ; => SI son iguales => pasa al siguiente check
  3853 00001DA4 88C2                            mov dl, al      ; dl = old_X
  3854 00001DA6 4488C3                          mov bl, r8b     ; bl = new_X
  3855 00001DA9 38DA                            cmp dl, bl
  3856 00001DAB 7523                            jne .not_stuck
  3857                                  
  3858                                          ; => MISMA POSICIÓN (STUCK)
  3859 00001DAD 488D1D(54240000)                lea rbx, [enemy_stuck_count]
  3860 00001DB4 4C01E3                          add rbx, r12
  3861 00001DB7 FE03                            inc byte [rbx]              ; Aumentar contador de “pegarse”
  3862                                  
  3863                                          ; Verificar si supera umbral, digamos 3
  3864 00001DB9 480FB60B                        movzx rcx, byte [rbx]
  3865 00001DBD 4883F902                        cmp rcx, 2
  3866 00001DC1 7C34                            jl .check_normal_move       ; Si aún no llega a 3, seguir normal
  3867                                  
  3868                                          ; SI LLEGA A 3, FORZAR UN MOVIMIENTO ALEATORIO:
  3869                                          ;  1) resetear el stuck_count
  3870 00001DC3 C60300                          mov byte [rbx], 0
  3871                                  
  3872                                          ;  2) cambiar random
  3873 00001DC6 E85BFEFFFF                      call random_move_enemy        ; (Ver ejemplo de abajo)
  3874 00001DCB E917020000                      jmp .next_enemy
  3875                                  
  3876                                      .not_stuck:
  3877                                          ; => Se movió
  3878 00001DD0 488D1D(54240000)                lea rbx, [enemy_stuck_count]
  3879 00001DD7 4C01E3                          add rbx, r12
  3880 00001DDA C60300                          mov byte [rbx], 0            ; Resetear
  3881                                  
  3882                                          ; Guardar su nueva posición en “last_x, last_y”
  3883 00001DDD 488D3D(40240000)                lea rdi, [enemy_last_x]
  3884 00001DE4 4C01E7                          add rdi, r12
  3885 00001DE7 448807                          mov [rdi], r8b
  3886                                          
  3887 00001DEA 488D3D(4A240000)                lea rdi, [enemy_last_y]
  3888 00001DF1 4C01E7                          add rdi, r12
  3889 00001DF4 44880F                          mov [rdi], r9b
  3890                                  
  3891                                          ; Limpiar posición actual antes de mover
  3892                                      .check_normal_move:
  3893 00001DF7 4150                            push r8
  3894 00001DF9 4151                            push r9
  3895 00001DFB B850000000                      mov rax, column_cells
  3896 00001E00 4883C002                        add rax, 2
  3897 00001E04 49F7E1                          mul r9
  3898 00001E07 4C01C0                          add rax, r8
  3899 00001E0A 488DB8[400A0000]                lea rdi, [board + rax]
  3900 00001E11 C60720                          mov byte [rdi], ' '         ; Limpiar rastro
  3901 00001E14 4159                            pop r9
  3902 00001E16 4158                            pop r8
  3903                                  
  3904                                          ; Determinar comportamiento basado en índice
  3905 00001E18 4C89E0                          mov rax, r12
  3906 00001E1B 4883E001                        and rax, 1                      ; 0 para índices pares, 1 para impares
  3907 00001E1F 4885C0                          test rax, rax
  3908 00001E22 7405                            jz .chase_ball
  3909 00001E24 E996000000                      jmp .chase_paddle             ; Si es 1, perseguir paleta
  3910                                          
  3911                                          ; Perseguir bola (comportamiento original)
  3912                                      .chase_ball:
  3913                                          ; Primero intentar con la bola principal
  3914 00001E29 803D(00150000)01                cmp byte [ball_active], 1
  3915 00001E30 7414                            je .use_ball1
  3916                                          
  3917                                          ; Si no está activa, probar con ball2
  3918 00001E32 803D(22150000)01                cmp byte [ball2_active], 1
  3919 00001E39 7414                            je .use_ball2
  3920                                          
  3921                                          ; Si no está activa, probar con ball3
  3922 00001E3B 803D(44150000)01                cmp byte [ball3_active], 1
  3923 00001E42 7414                            je .use_ball3
  3924                                          
  3925                                          ; Si no hay bolas activas, perseguir la paleta
  3926 00001E44 EB79                            jmp .chase_paddle
  3927                                  
  3928                                      .use_ball1:
  3929 00001E46 4C8B15(DF140000)                mov r10, [ball_x_pos]
  3930 00001E4D EB12                            jmp .compare_positions
  3931                                  
  3932                                      .use_ball2:
  3933 00001E4F 4C8B15(01150000)                mov r10, [ball2_x_pos]
  3934 00001E56 EB09                            jmp .compare_positions
  3935                                  
  3936                                      .use_ball3:
  3937 00001E58 4C8B15(23150000)                mov r10, [ball3_x_pos]
  3938 00001E5F EB00                            jmp .compare_positions
  3939                                  
  3940                                      .compare_positions:
  3941                                          ; Comparar X
  3942 00001E61 4D39D0                          cmp r8, r10
  3943 00001E64 0F8FCA000000                    jg .move_left
  3944 00001E6A 0F8CC9000000                    jl .move_right
  3945                                          
  3946                                          ; Si llegamos aquí, las X son iguales
  3947                                          ; Ahora comparar Y según qué bola estemos siguiendo
  3948 00001E70 803D(00150000)01                cmp byte [ball_active], 1
  3949 00001E77 7417                            je .check_ball1_y
  3950 00001E79 803D(22150000)01                cmp byte [ball2_active], 1
  3951 00001E80 7417                            je .check_ball2_y
  3952 00001E82 803D(44150000)01                cmp byte [ball3_active], 1
  3953 00001E89 7417                            je .check_ball3_y
  3954 00001E8B E9D4000000                      jmp .check_collision
  3955                                  
  3956                                      .check_ball1_y:
  3957 00001E90 4C8B15(E7140000)                mov r10, [ball_y_pos]
  3958 00001E97 EB12                            jmp .compare_y
  3959                                  
  3960                                      .check_ball2_y:
  3961 00001E99 4C8B15(09150000)                mov r10, [ball2_y_pos]
  3962 00001EA0 EB09                            jmp .compare_y
  3963                                  
  3964                                      .check_ball3_y:
  3965 00001EA2 4C8B15(2B150000)                mov r10, [ball3_y_pos]
  3966 00001EA9 EB00                            jmp .compare_y
  3967                                  
  3968                                      .compare_y:
  3969 00001EAB 4D39D1                          cmp r9, r10
  3970 00001EAE 0F8F8A000000                    jg .move_up
  3971 00001EB4 0F8C89000000                    jl .move_down
  3972 00001EBA E9A5000000                      jmp .check_collision
  3973                                          
  3974                                      .chase_paddle:
  3975                                          ; Obtener la posición X actual de la paleta
  3976 00001EBF 4C8B15(BF140000)                mov r10, [pallet_position]
  3977 00001EC6 4981EA[400A0000]                sub r10, board              ; Convertir a offset relativo
  3978                                          
  3979                                          ; Calcular la posición X real de la paleta
  3980 00001ECD 4C89D0                          mov rax, r10
  3981 00001ED0 BB50000000                      mov rbx, column_cells
  3982 00001ED5 4883C302                        add rbx, 2                  ; Añadir newline chars
  3983 00001ED9 4831D2                          xor rdx, rdx
  3984 00001EDC 48F7F3                          div rbx                     ; rax = y, rdx = x
  3985                                          
  3986                                          ; rdx ahora contiene la posición X de la paleta
  3987                                          ; Añadir la mitad del tamaño de la paleta para apuntar al centro
  3988 00001EDF 488B0D(C7140000)                mov rcx, [pallet_size]
  3989 00001EE6 48D1E9                          shr rcx, 1                  ; Dividir por 2
  3990 00001EE9 4801CA                          add rdx, rcx
  3991                                          
  3992                                          ; Comparar con posición X del enemigo y mover gradualmente
  3993 00001EEC 4939D0                          cmp r8, rdx
  3994 00001EEF 7404                            je .check_y_paddle          ; Si está en la misma X, verificar Y
  3995 00001EF1 7F41                            jg .move_left              ; Si está a la derecha, mover izquierda
  3996 00001EF3 7C44                            jl .move_right             ; Si está a la izquierda, mover derecha
  3997                                  
  3998                                      .check_y_paddle:
  3999                                          ; La Y de la paleta siempre es row_cells - 2
  4000 00001EF5 41BA20000000                    mov r10, row_cells
  4001 00001EFB 4983EA02                        sub r10, 2
  4002                                          
  4003                                          ; Comparar con posición Y del enemigo y mover gradualmente
  4004 00001EFF 4D39D1                          cmp r9, r10
  4005 00001F02 7404                            je .no_movement            ; Si está en la misma Y, no mover
  4006 00001F04 7F38                            jg .move_up               ; Si está abajo, mover arriba
  4007 00001F06 7C3B                            jl .move_down             ; Si está arriba, mover abajo
  4008                                          
  4009                                      .no_movement:
  4010 00001F08 EB5A                            jmp .check_collision
  4011                                  
  4012                                      ; También agregar una nueva sección para el movimiento suave
  4013                                      .smooth_transition:
  4014                                          ; Si el enemigo está muy lejos de su objetivo, limitar el movimiento
  4015 00001F0A 8A05(8A200000)                  mov al, [enemy_target]
  4016 00001F10 84C0                            test al, al
  4017 00001F12 7450                            jz .check_collision        ; Si persigue la bola, movimiento normal
  4018                                          
  4019                                          ; Verificar distancia en X
  4020 00001F14 4989D2                          mov r10, rdx              ; Posición X objetivo
  4021 00001F17 4D29C2                          sub r10, r8               ; Calcular diferencia
  4022 00001F1A 4983FA05                        cmp r10, 5               ; Si la diferencia es mayor a 5
  4023 00001F1E 7F08                            jg .limit_right_movement  ; Limitar movimiento a la derecha
  4024 00001F20 4983FAFB                        cmp r10, -5              ; Si la diferencia es menor a -5
  4025 00001F24 7C08                            jl .limit_left_movement   ; Limitar movimiento a la izquierda
  4026 00001F26 EB3C                            jmp .check_collision
  4027                                          
  4028                                      .limit_right_movement:
  4029 00001F28 4983C002                        add r8, 2                ; Mover solo 2 unidades a la derecha
  4030 00001F2C EB36                            jmp .check_collision
  4031                                          
  4032                                      .limit_left_movement:
  4033 00001F2E 4983E802                        sub r8, 2                ; Mover solo 2 unidades a la izquierda
  4034 00001F32 EB30                            jmp .check_collision
  4035                                      .move_left:
  4036 00001F34 49FFC8                          dec r8
  4037 00001F37 EB0F                            jmp .check_vertical
  4038                                          
  4039                                      .move_right:
  4040 00001F39 49FFC0                          inc r8
  4041 00001F3C EB0A                            jmp .check_vertical
  4042                                          
  4043                                      .move_up:
  4044 00001F3E 49FFC9                          dec r9
  4045 00001F41 EB21                            jmp .check_collision
  4046                                          
  4047                                      .move_down:
  4048 00001F43 49FFC1                          inc r9
  4049 00001F46 EB1C                            jmp .check_collision
  4050                                          
  4051                                      .check_vertical:
  4052 00001F48 8A05(8A200000)                  mov al, [enemy_target]
  4053 00001F4E 84C0                            test al, al
  4054 00001F50 0F8569FFFFFF                    jnz .chase_paddle         ; Si persigue paleta, volver a su lógica
  4055 00001F56 4C8B15(E7140000)                mov r10, [ball_y_pos]     ; Si no, seguir persiguiendo la bola
  4056 00001F5D 4D39D1                          cmp r9, r10
  4057 00001F60 7FDC                            jg .move_up
  4058 00001F62 7CDF                            jl .move_down
  4059                                          
  4060                                      .check_collision:
  4061                                          ; Verificar colisión con bordes
  4062 00001F64 4983F801                        cmp r8, 1                       ; Borde izquierdo
  4063 00001F68 7E7D                            jle .next_enemy
  4064 00001F6A 4983F850                        cmp r8, column_cells
  4065 00001F6E 7D77                            jge .next_enemy
  4066 00001F70 4983F901                        cmp r9, 1                       ; Borde superior
  4067 00001F74 7E71                            jle .next_enemy
  4068 00001F76 4983F920                        cmp r9, row_cells
  4069 00001F7A 7D6B                            jge .next_enemy
  4070                                          
  4071                                          ; Verificar colisión con bloques antes de moverse
  4072 00001F7C 4150                            push r8
  4073 00001F7E 4151                            push r9
  4074 00001F80 4152                            push r10
  4075                                          
  4076                                          ; Calcular posición en el tablero para verificar
  4077 00001F82 B850000000                      mov rax, column_cells
  4078 00001F87 4883C002                        add rax, 2
  4079 00001F8B 49F7E1                          mul r9
  4080 00001F8E 4C01C0                          add rax, r8
  4081 00001F91 4C8D90[400A0000]                lea r10, [board + rax]
  4082                                          
  4083                                          ; Verificar si hay un bloque en la nueva posición
  4084 00001F98 418A02                          mov al, [r10]
  4085 00001F9B 3C55                            cmp al, 'U'
  4086 00001F9D 7442                            je .invalid_move
  4087 00001F9F 3C4F                            cmp al, 'O'
  4088 00001FA1 743E                            je .invalid_move
  4089 00001FA3 3C44                            cmp al, 'D'
  4090 00001FA5 743A                            je .invalid_move
  4091 00001FA7 3C4C                            cmp al, 'L'
  4092 00001FA9 7436                            je .invalid_move
  4093 00001FAB 3C56                            cmp al, 'V'
  4094 00001FAD 7432                            je .invalid_move
  4095 00001FAF 3C38                            cmp al, '8'
  4096 00001FB1 742E                            je .invalid_move
  4097 00001FB3 3C58                            cmp al, 'X'
  4098 00001FB5 742A                            je .invalid_move
  4099 00001FB7 3C40                            cmp al, '@'                 ; Enemigo nivel 1 y 5
  4100 00001FB9 7426                            je .invalid_move
  4101 00001FBB 3C23                            cmp al, '#'                 ; Enemigo nivel 2
  4102 00001FBD 7422                            je .invalid_move
  4103 00001FBF 3C24                            cmp al, '$'                 ; Enemigo nivel 3
  4104 00001FC1 741E                            je .invalid_move
  4105 00001FC3 3C26                            cmp al, '&'                 ; Enemigo nivel 4
  4106 00001FC5 741A                            je .invalid_move
  4107                                          
  4108 00001FC7 E825000000                      call check_enemy_at_position
  4109 00001FCC 4883F801                        cmp rax, 1
  4110 00001FD0 740F                            je .invalid_move
  4111 00001FD2 415A                            pop r10
  4112 00001FD4 4159                            pop r9
  4113 00001FD6 4158                            pop r8
  4114                                          
  4115                                          ; Guardar nueva posición si es válida
  4116 00001FD8 448806                          mov [rsi], r8b
  4117 00001FDB 44884E01                        mov [rsi + 1], r9b
  4118 00001FDF EB06                            jmp .next_enemy
  4119                                          
  4120                                      .invalid_move:
  4121 00001FE1 415A                            pop r10
  4122 00001FE3 4159                            pop r9
  4123 00001FE5 4158                            pop r8
  4124                                          
  4125                                      .next_enemy:
  4126 00001FE7 49FFC4                          inc r12
  4127 00001FEA E969FDFFFF                      jmp .enemy_loop
  4128                                          
  4129                                      .end:
  4130 00001FEF 5D                              pop rbp
  4131 00001FF0 C3                              ret
  4132                                  
  4133                                  check_enemy_at_position:
  4134 00001FF1 55                          push rbp
  4135 00001FF2 4889E5                      mov rbp, rsp
  4136                                      
  4137                                      ; Parámetros esperados en r8 (X) y r9 (Y)
  4138 00001FF5 B850000000                  mov rax, column_cells
  4139 00001FFA 4883C002                    add rax, 2
  4140 00001FFE 49F7E1                      mul r9
  4141 00002001 4C01C0                      add rax, r8
  4142 00002004 488DB8[400A0000]            lea rdi, [board + rax]
  4143 0000200B 480FB607                    movzx rax, byte [rdi]
  4144                                      
  4145                                      ; Verificar todos los caracteres de enemigos
  4146 0000200F 3C40                        cmp al, '@'
  4147 00002011 7411                        je .enemy_found
  4148 00002013 3C23                        cmp al, '#'
  4149 00002015 740D                        je .enemy_found
  4150 00002017 3C24                        cmp al, '$'
  4151 00002019 7409                        je .enemy_found
  4152 0000201B 3C26                        cmp al, '&'
  4153 0000201D 7405                        je .enemy_found
  4154                                      
  4155 0000201F 4831C0                      xor rax, rax    ; No hay enemigo (retorna 0)
  4156 00002022 EB05                        jmp .end
  4157                                      
  4158                                  .enemy_found:
  4159 00002024 B801000000                  mov rax, 1      ; Hay enemigo (retorna 1)
  4160                                      
  4161                                  .end:
  4162 00002029 5D                          pop rbp
  4163 0000202A C3                          ret
  4164                                  
  4165                                  get_current_spawn_points:
  4166 0000202B 55                          push rbp
  4167 0000202C 4889E5                      mov rbp, rsp
  4168                                      
  4169 0000202F 480FB605(79150000)          movzx rax, byte [current_level]
  4170 00002037 48FFC8                      dec rax                         ; Ajustar para índice base 0
  4171 0000203A 488B04C5[BE200000]          mov rax, [spawn_points_table + rax * 8]
  4172                                      
  4173 00002042 5D                          pop rbp
  4174 00002043 C3                          ret
  4175                                  
  4176                                  ; Función para verificar si debe aparecer un nuevo enemigo
  4177                                  check_enemy_spawn:
  4178 00002044 55                          push rbp
  4179 00002045 4889E5                      mov rbp, rsp
  4180                                      
  4181                                      ; Obtener spawn points del nivel actual
  4182 00002048 E8DEFFFFFF                  call get_current_spawn_points
  4183 0000204D 4989C4                      mov r12, rax                    ; r12 = puntero a spawn points
  4184                                      
  4185                                      ; Obtener cantidad de bloques destruidos
  4186 00002050 4C0FB62D(46200000)          movzx r13, byte [destroyed_blocks]
  4187                                      
  4188                                      ; Verificar cada punto de spawn
  4189 00002058 4831C9                      xor rcx, rcx                    ; Índice del enemigo
  4190                                      
  4191                                      .check_loop:
  4192 0000205B 4883F90A                        cmp rcx, 10                     ; Máximo 10 enemigos
  4193 0000205F 7D4E                            jge .end
  4194                                          
  4195                                          ; Verificar si este spawn point ya fue usado
  4196 00002061 80B9[E9200000]01                cmp byte [enemy_spawns_triggered + rcx], 1
  4197 00002068 7440                            je .next_enemy
  4198                                          
  4199                                          ; Verificar si este enemigo ya está activo
  4200 0000206A 4889C8                          mov rax, rcx
  4201 0000206D 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  4202 00002071 488DB0[60200000]                lea rsi, [enemies + rax]
  4203 00002078 807E0201                        cmp byte [rsi + 2], 1          ; Verificar si está activo
  4204 0000207C 742C                            je .next_enemy
  4205                                          
  4206                                          ; Verificar si debemos spawnear este enemigo
  4207 0000207E 490FB6040C                      movzx rax, byte [r12 + rcx]    ; Obtener punto de spawn
  4208 00002083 4939C5                          cmp r13, rax                   ; Comparar con bloques destruidos
  4209 00002086 7522                            jne .next_enemy
  4210                                          
  4211                                          ; Marcar este spawn point como usado
  4212 00002088 C681[E9200000]01                mov byte [enemy_spawns_triggered + rcx], 1
  4213                                          
  4214                                          ; Spawner nuevo enemigo
  4215 0000208F B004                            mov al, 4
  4216 00002091 00C8                            add al, cl       ; con 'rcx' como índice
  4217 00002093 8806                            mov [rsi], al
  4218 00002095 C6460101                        mov byte [rsi+1], 1
  4219 00002099 C6460201                        mov byte [rsi+2], 1
  4220                                  
  4221                                          ; Inicializar comportamiento
  4222 0000209D 4889C8                          mov rax, rcx
  4223 000020A0 4883E001                        and rax, 1                     ; Alternar comportamiento basado en índice par/impar
  4224 000020A4 8805(E8200000)                  mov [current_behavior], al      ; 0 = persigue bola, 1 = persigue paleta
  4225                                          
  4226                                      .next_enemy:
  4227 000020AA 48FFC1                          inc rcx
  4228 000020AD EBAC                            jmp .check_loop
  4229                                          
  4230                                      .end:
  4231 000020AF 5D                              pop rbp
  4232 000020B0 C3                              ret
  4233                                  
  4234                                  
  4235                                  ; Función para dibujar enemigos
  4236                                  print_enemies:
  4237 000020B1 55                          push rbp
  4238 000020B2 4889E5                      mov rbp, rsp
  4239                                      
  4240 000020B5 4D31E4                      xor r12, r12                    ; Índice del enemigo
  4241                                      
  4242                                      .print_loop:
  4243 000020B8 4983FC0A                        cmp r12, 10                      ; Máximo 5 enemigos
  4244 000020BC 7D4B                            jge .end
  4245                                          
  4246                                          ; Calcular offset del enemigo actual
  4247 000020BE 4C89E0                          mov rax, r12
  4248 000020C1 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  4249 000020C5 488DB0[60200000]                lea rsi, [enemies + rax]
  4250                                          
  4251                                          ; Verificar si el enemigo está activo
  4252 000020CC 807E0201                        cmp byte [rsi + 2], 1
  4253 000020D0 7532                            jne .next_enemy
  4254                                          
  4255                                          ; Calcular posición en el tablero
  4256 000020D2 4C0FB606                        movzx r8, byte [rsi]            ; X
  4257 000020D6 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  4258                                          
  4259                                          ; Calcular offset en el tablero
  4260 000020DB B850000000                      mov rax, column_cells
  4261 000020E0 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  4262 000020E4 49F7E1                          mul r9
  4263 000020E7 4C01C0                          add rax, r8
  4264 000020EA 488DB8[400A0000]                lea rdi, [board + rax]
  4265                                          
  4266                                          ; Obtener carácter del enemigo según el nivel
  4267 000020F1 480FB605(79150000)              movzx rax, byte [current_level]
  4268 000020F9 48FFC8                          dec rax                         ; Ajustar para índice base 0
  4269 000020FC 8A80[5B200000]                  mov al, [enemy_chars + rax]
  4270                                          
  4271                                          ; Dibujar enemigo
  4272 00002102 8807                            mov [rdi], al
  4273                                          
  4274                                      .next_enemy:
  4275 00002104 49FFC4                          inc r12
  4276 00002107 EBAF                            jmp .print_loop
  4277                                          
  4278                                      .end:
  4279 00002109 5D                              pop rbp
  4280 0000210A C3                              ret
  4281                                  
  4282                                  ; Función para verificar colisión con enemigos
  4283                                  ; Función para verificar colisión con enemigos
  4284                                  check_enemy_collision:
  4285 0000210B 55                          push rbp
  4286 0000210C 4889E5                      mov rbp, rsp
  4287                                      
  4288 0000210F 4D31E4                      xor r12, r12                    ; Índice del enemigo
  4289 00002112 4831C0                      xor rax, rax                    ; Valor de retorno (0 = no colisión)
  4290                                      
  4291                                      .check_loop:
  4292 00002115 4983FC05                        cmp r12, 5                      ; Máximo 5 enemigos
  4293 00002119 0F8DE9000000                    jge .end
  4294                                          
  4295                                          ; Calcular offset del enemigo actual
  4296 0000211F 4C89E1                          mov rcx, r12
  4297 00002122 486BC903                        imul rcx, 3                     ; Cada enemigo ocupa 3 bytes
  4298 00002126 488DB1[60200000]                lea rsi, [enemies + rcx]
  4299                                          
  4300                                          ; Verificar si el enemigo está activo
  4301 0000212D 807E0201                        cmp byte [rsi + 2], 1
  4302 00002131 0F85C9000000                    jne .next_enemy
  4303                                          
  4304                                          ; Verificar colisión con la bola
  4305 00002137 4C0FB606                        movzx r8, byte [rsi]            ; X enemigo
  4306 0000213B 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y enemigo
  4307                                          
  4308                                          ; Verificar si la bola está en el rango del enemigo (considerando el enemigo como un área)
  4309 00002140 4C8B15(DF140000)                mov r10, [ball_x_pos]
  4310 00002147 4C8B1D(E7140000)                mov r11, [ball_y_pos]
  4311                                          
  4312                                          ; Comprobar colisión vertical (misma columna)
  4313 0000214E 4D39C2                          cmp r10, r8
  4314 00002151 7525                            jne .check_horizontal
  4315 00002153 4D29CB                          sub r11, r9
  4316 00002156 4983FB01                        cmp r11, 1
  4317 0000215A 7F1C                            jg .check_horizontal
  4318 0000215C 4983FBFF                        cmp r11, -1
  4319 00002160 7C16                            jl .check_horizontal
  4320                                          
  4321                                          ; Colisión vertical detectada
  4322 00002162 E8A3000000                      call destroy_enemy
  4323 00002167 48F71D(F7140000)                neg qword [ball_direction_y]    ; Invertir dirección vertical
  4324 0000216E B801000000                      mov rax, 1
  4325 00002173 E990000000                      jmp .end
  4326                                          
  4327                                      .check_horizontal:
  4328                                          ; Comprobar colisión horizontal (misma fila)
  4329 00002178 4C8B15(DF140000)                mov r10, [ball_x_pos]
  4330 0000217F 4C8B1D(E7140000)                mov r11, [ball_y_pos]
  4331 00002186 4D39CB                          cmp r11, r9
  4332 00002189 7522                            jne .check_paddle
  4333 0000218B 4D29C2                          sub r10, r8
  4334 0000218E 4983FA01                        cmp r10, 1
  4335 00002192 7F19                            jg .check_paddle
  4336 00002194 4983FAFF                        cmp r10, -1
  4337 00002198 7C13                            jl .check_paddle
  4338                                          
  4339                                          ; Colisión horizontal detectada
  4340 0000219A E86B000000                      call destroy_enemy
  4341 0000219F 48F71D(EF140000)                neg qword [ball_direction_x]    ; Invertir dirección horizontal
  4342 000021A6 B801000000                      mov rax, 1
  4343 000021AB EB5B                            jmp .end
  4344                                          
  4345                                      .check_paddle:
  4346                                          ; Verificar colisión con la paleta
  4347 000021AD 4C8B15(BF140000)                mov r10, [pallet_position]
  4348 000021B4 4981EA[400A0000]                sub r10, board
  4349 000021BB 4C89D0                          mov rax, r10
  4350 000021BE 41BB50000000                    mov r11, column_cells
  4351 000021C4 4983C302                        add r11, 2
  4352 000021C8 4831D2                          xor rdx, rdx
  4353 000021CB 49F7F3                          div r11                     ; División para obtener la posición Y
  4354 000021CE 4989D3                          mov r11, rdx               ; X de la paleta en r11
  4355                                          
  4356 000021D1 488B0D(C7140000)                mov rcx, [pallet_size]     ; Obtener el tamaño de la paleta
  4357                                          
  4358                                          ; Verificar si el enemigo está en la misma fila que la paleta
  4359 000021D8 41BD20000000                    mov r13, row_cells
  4360 000021DE 4983ED02                        sub r13, 2                 ; Y de la paleta
  4361 000021E2 4D39E9                          cmp r9, r13               ; Comparar Y del enemigo con Y de la paleta
  4362 000021E5 7519                            jne .next_enemy
  4363                                          
  4364                                          ; Verificar si el enemigo está dentro del rango X de la paleta
  4365 000021E7 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X inicial de la paleta
  4366 000021EA 7C14                            jl .next_enemy
  4367                                          
  4368 000021EC 4901CB                          add r11, rcx              ; Añadir el tamaño de la paleta
  4369 000021EF 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X final de la paleta
  4370 000021F2 7F0C                            jg .next_enemy
  4371                                          
  4372                                          ; Si llegamos aquí, hay colisión con la paleta
  4373 000021F4 E811000000                      call destroy_enemy        ; Destruir el enemigo
  4374 000021F9 B801000000                      mov rax, 1                ; Indicar que hubo colisión
  4375 000021FE EB08                            jmp .end
  4376                                          
  4377                                      .next_enemy:
  4378 00002200 49FFC4                          inc r12
  4379 00002203 E90DFFFFFF                      jmp .check_loop
  4380                                          
  4381                                      .end:
  4382 00002208 5D                              pop rbp
  4383 00002209 C3                              ret
  4384                                  
  4385                                  ; Función para destruir un enemigo
  4386                                  destroy_enemy:
  4387                                      ; Desactivar enemigo
  4388 0000220A C6460200                    mov byte [rsi + 2], 0   ; Marcar enemigo como inactivo
  4389                                  
  4390                                      ; Sumar puntos por destruir enemigo
  4391 0000220E 488B05(7F200000)            mov rax, [enemy_points]
  4392 00002215 480105(3E200000)            add [current_score], rax
  4393                                  
  4394                                      ; No tocar bloques destruidos aquí
  4395 0000221C C3                          ret
  4396                                  
  4397                                  
  4398                                  _start:
  4399 0000221D E809DFFFFF              	call canonical_off
  4400 00002222 E857010000              	call start_screen
  4401 00002227 E811F3FFFF                  call init_level
  4402 0000222C EB00                    	jmp .main_loop
  4403                                  	
  4404                                  
  4405                                      .main_loop:
  4406 0000222E E87FF7FFFF                      call print_labels
  4407 00002233 E8AEF6FFFF                      call print_blocks
  4408 00002238 E818E3FFFF                      call move_letters
  4409 0000223D E8FEE5FFFF                      call update_lasers
  4410 00002242 E883E2FFFF                      call print_letters
  4411 00002247 E802EAFFFF                      call print_pallet
  4412                                          
  4413                                          ; Mover bola principal solo si está activa
  4414 0000224C 803D(00150000)01                cmp byte [ball_active], 1
  4415 00002253 7505                            jne .skip_ball1
  4416 00002255 E80BEBFFFF                          call move_ball
  4417                                          .skip_ball1:
  4418                                  
  4419                                          ; Mover bola 2 si está activa
  4420 0000225A 803D(22150000)01                cmp byte [ball2_active], 1
  4421 00002261 7505                            jne .skip_ball2
  4422 00002263 E8D0ECFFFF                          call move_ball_2
  4423                                          .skip_ball2:
  4424                                  
  4425                                          ; Mover bola 3 si está activa
  4426 00002268 803D(44150000)01                cmp byte [ball3_active], 1
  4427 0000226F 7505                            jne .skip_ball3
  4428 00002271 E895EEFFFF                          call move_ball_3
  4429                                          .skip_ball3:
  4430                                  
  4431 00002276 E87BE0FFFF                      call check_bottom_collision    ; Nueva función que maneja todas las bolas
  4432 0000227B E85DDFFFFF                      call print_lives
  4433                                  
  4434                                          ; Imprimir solo las bolas activas
  4435 00002280 803D(00150000)01                cmp byte [ball_active], 1
  4436 00002287 7505                            jne .no_pb1
  4437 00002289 E848E9FFFF                          call print_ball
  4438                                          .no_pb1:
  4439                                  
  4440 0000228E 803D(22150000)01                cmp byte [ball2_active], 1
  4441 00002295 7505                            jne .no_pb2
  4442 00002297 E862E9FFFF                          call print_ball_2
  4443                                          .no_pb2:
  4444                                  
  4445 0000229C 803D(44150000)01                cmp byte [ball3_active], 1
  4446 000022A3 7505                            jne .no_pb3
  4447 000022A5 E87CE9FFFF                          call print_ball_3
  4448                                          .no_pb3:
  4449                                  
  4450 000022AA E87FF4FFFF                      call check_level_complete
  4451 000022AF E890FDFFFF                      call check_enemy_spawn
  4452 000022B4 E877FAFFFF                      call move_enemies
  4453 000022B9 E84DFEFFFF                      call check_enemy_collision
  4454 000022BE E8EEFDFFFF                      call print_enemies
  4455 000022C3 E8ECE4FFFF                      call print_power_label
  4456                                  		print board, board_size				
    93 000022C8 B801000000          <1>  mov eax, sys_write
    94 000022CD BF01000000          <1>  mov edi, 1
    95 000022D2 48BE-               <1>  mov rsi, %1
    95 000022D4 [400A000000000000]  <1>
    96 000022DC BA400A0000          <1>  mov edx, %2
    97 000022E1 0F05                <1>  syscall
  4457                                  		;setnonblocking	
  4458                                  	.read_more:	
  4459                                  	    getchar	
   101 000022E3 B800000000          <1>  mov rax, sys_read
   102 000022E8 BF00000000          <1>  mov rdi, STDIN_FILENO
   103 000022ED 48BE-               <1>  mov rsi, input_char
   103 000022EF [0000000000000000]  <1>
   104 000022F7 BA01000000          <1>  mov rdx, 1
   105 000022FC 0F05                <1>  syscall
  4460 000022FE 4883F801                	    cmp rax, 1
  4461 00002302 7547                    	    jne .done
  4462                                  	
  4463 00002304 8A05(00000000)          	    mov al, [input_char]
  4464 0000230A 8805(08230000)          	    mov [last_key], al      ; Registrar la última tecla presionada
  4465                                  	
  4466 00002310 3C61                    	    cmp al, 'a'
  4467 00002312 750E                    	    jne .not_left
  4468 00002314 48C7C7FFFFFFFF          	    mov rdi, left_direction
  4469 0000231B E863E9FFFF              	    call move_pallet
  4470 00002320 EB29                    	    jmp .done
  4471                                  	
  4472                                      .not_left:
  4473 00002322 3C64                    	    cmp al, 'd'
  4474 00002324 750C                    	    jne .not_right
  4475 00002326 BF01000000              	    mov rdi, right_direction
  4476 0000232B E853E9FFFF              	    call move_pallet
  4477 00002330 EB19                    	    jmp .done
  4478                                  	
  4479                                      .not_right:
  4480 00002332 3C63                    	    cmp al, 'c'             ; Verificar si se presionó la tecla 'c'
  4481 00002334 740E                    	    je .release_ball        ; Si sí, liberar la bola
  4482                                  	
  4483 00002336 3C78                            cmp al, 'x'             ; Verificar si se presionó la tecla 'c'
  4484 00002338 740A                    	    je .release_ball        ; Si sí, liberar la bola
  4485                                  	
  4486                                  
  4487 0000233A 3C71                    	    cmp al, 'q' 
  4488 0000233C 0F84AF000000            	    je exit
  4489 00002342 EB9F                    	    jmp .read_more
  4490                                  	
  4491                                      .release_ball:
  4492 00002344 E895EFFFFF              	    call process_catch_release
  4493 00002349 EB00                    	    jmp .done
  4494                                  	
  4495                                      .done:
  4496                                  	    sleeptime
   109 0000234B B823000000          <1>  mov eax, sys_nanosleep
   110 00002350 48BF-               <1>  mov rdi, timespec
   110 00002352 [0000000000000000]  <1>
   111 0000235A 31F6                <1>  xor esi, esi
   112 0000235C 0F05                <1>  syscall
  4497                                  	    print clear, clear_length
    93 0000235E B801000000          <1>  mov eax, sys_write
    94 00002363 BF01000000          <1>  mov edi, 1
    95 00002368 48BE-               <1>  mov rsi, %1
    95 0000236A [1000000000000000]  <1>
    96 00002372 BA07000000          <1>  mov edx, %2
    97 00002377 0F05                <1>  syscall
  4498 00002379 E9B0FEFFFF              	    jmp .main_loop
  4499                                  
  4500                                  
  4501                                  
  4502                                  
  4503                                  start_screen:
  4504                                      print clear, clear_length    ; Limpiamos la pantalla primero
    93 0000237E B801000000          <1>  mov eax, sys_write
    94 00002383 BF01000000          <1>  mov edi, 1
    95 00002388 48BE-               <1>  mov rsi, %1
    95 0000238A [1000000000000000]  <1>
    96 00002392 BA07000000          <1>  mov edx, %2
    97 00002397 0F05                <1>  syscall
  4505                                      print msg1, msg1_length
    93 00002399 B801000000          <1>  mov eax, sys_write
    94 0000239E BF01000000          <1>  mov edi, 1
    95 000023A3 48BE-               <1>  mov rsi, %1
    95 000023A5 [1700000000000000]  <1>
    96 000023AD BA14010000          <1>  mov edx, %2
    97 000023B2 0F05                <1>  syscall
  4506                                      
  4507                                      .wait_for_key:              ; Agregamos una etiqueta para esperar la tecla
  4508                                          getchar                 ; Esperamos una tecla
   101 000023B4 B800000000          <1>  mov rax, sys_read
   102 000023B9 BF00000000          <1>  mov rdi, STDIN_FILENO
   103 000023BE 48BE-               <1>  mov rsi, input_char
   103 000023C0 [0000000000000000]  <1>
   104 000023C8 BA01000000          <1>  mov rdx, 1
   105 000023CD 0F05                <1>  syscall
  4509 000023CF 4883F801                        cmp rax, 1             ; Verificamos si se leyó un carácter
  4510 000023D3 75DF                            jne .wait_for_key      ; Si no se leyó, seguimos esperando
  4511                                          
  4512                                      print clear, clear_length   ; Limpiamos la pantalla antes de salir
    93 000023D5 B801000000          <1>  mov eax, sys_write
    94 000023DA BF01000000          <1>  mov edi, 1
    95 000023DF 48BE-               <1>  mov rsi, %1
    95 000023E1 [1000000000000000]  <1>
    96 000023E9 BA07000000          <1>  mov edx, %2
    97 000023EE 0F05                <1>  syscall
  4513 000023F0 C3                          ret
  4514                                  
  4515                                  exit: 
  4516 000023F1 E877DDFFFF              	call canonical_on
  4517 000023F6 B83C000000              	mov    rax, 60
  4518 000023FB BF00000000                  mov    rdi, 0
  4519 00002400 0F05                        syscall
  4520                                  
