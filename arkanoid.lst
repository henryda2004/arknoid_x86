     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  sys_read: equ 0	
     7                                  sys_write:	equ 1
     8                                  sys_nanosleep:	equ 35
     9                                  sys_time:	equ 201
    10                                  sys_fcntl:	equ 72
    11                                  
    12                                  
    13                                  STDIN_FILENO: equ 0
    14                                  
    15                                  F_SETFL:	equ 0x0004
    16                                  O_NONBLOCK: equ 0x0004
    17                                  
    18                                  ;screen clean definition
    19                                  row_cells:	equ 32	; set to any (reasonable) value you wish
    20                                  column_cells: 	equ 80 ; set to any (reasonable) value you wish
    21                                  array_length:	equ row_cells * column_cells + row_cells ; cells are mapped to bytes in the array and a new line char ends each row
    22                                  
    23                                  ;This is regarding the sleep time
    24                                  timespec:
    25 00000000 0000000000000000            tv_sec  dq 0
    26 00000008 002D310100000000            tv_nsec dq 20000000
    27                                  
    28                                  
    29                                  ;This is for cleaning up the screen
    30 00000010 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"
    31                                  clear_length:	equ $-clear
    32                                  	
    33                                  	
    34                                  
    35                                  ; Start Message
    36 00000017 202020202020202054-     msg1: db "        TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    36 00000020 45434E4F4C4F474943-
    36 00000029 4F20444520434F5354-
    36 00000032 412052494341202020-
    36 0000003B 20202020200A0D     
    37 00000042 202020202020202041-     msg2: db "        ARQUITECTURA DE COMPUTADORAS I        ", 0xA, 0xD
    37 0000004B 525155495445435455-
    37 00000054 524120444520434F4D-
    37 0000005D 50555441444F524153-
    37 00000066 204920202020202020-
    37 0000006F 200A0D             
    38 00000072 202020202020202045-     msg3: db "        ESTUDIANTE: HENRY NUNEZ PEREZ        ", 0xA, 0xD
    38 0000007B 5354554449414E5445-
    38 00000084 3A2048454E5259204E-
    38 0000008D 554E455A2050455245-
    38 00000096 5A2020202020202020-
    38 0000009F 0A0D               
    39 000000A1 202020202020202050-     msg4: db "        PROFESOR: ERNESTO RIVERA ALVARADO        ", 0xA, 0xD
    39 000000AA 524F4645534F523A20-
    39 000000B3 45524E4553544F2052-
    39 000000BC 495645524120414C56-
    39 000000C5 415241444F20202020-
    39 000000CE 202020200A0D       
    40 000000D4 202020202020202041-     msg5: db "        ARKANOID RETRO        ", 0xA, 0xD
    40 000000DD 524B414E4F49442052-
    40 000000E6 4554524F2020202020-
    40 000000EF 2020200A0D         
    41 000000F4 202020202020202050-     msg6: db "        PRESIONE CUALQUIER TECLA PARA INICIAR        ", 0xA, 0xD
    41 000000FD 524553494F4E452043-
    41 00000106 55414C515549455220-
    41 0000010F 5445434C4120504152-
    41 00000118 4120494E4943494152-
    41 00000121 20202020202020200A-
    41 0000012A 0D                 
    42                                  msg1_length: equ $-msg1
    43                                  msg2_length: equ $-msg2
    44                                  msg3_length: equ $-msg3
    45                                  msg4_length: equ $-msg4
    46                                  msg5_length: equ $-msg5
    47                                  msg6_length: equ $-msg6
    48                                  
    49                                  ; Usefull macros
    50                                  
    51                                  
    52                                  
    53                                  %macro setnonblocking 0
    54                                  	mov rax, sys_fcntl
    55                                      mov rdi, STDIN_FILENO
    56                                      mov rsi, F_SETFL
    57                                      mov rdx, O_NONBLOCK
    58                                      syscall
    59                                  %endmacro
    60                                  
    61                                  %macro unsetnonblocking 0
    62                                  	mov rax, sys_fcntl
    63                                      mov rdi, STDIN_FILENO
    64                                      mov rsi, F_SETFL
    65                                      mov rdx, 0
    66                                      syscall
    67                                  %endmacro
    68                                  
    69                                  %macro full_line 0
    70                                      times column_cells db "X"
    71                                      db 0x0a, 0xD
    72                                  %endmacro
    73                                  
    74                                  %macro hollow_line 0
    75                                      db "X"
    76                                      times column_cells-2 db " "
    77                                      db "X", 0x0a, 0xD
    78                                  %endmacro
    79                                  
    80                                  
    81                                  %macro print 2
    82                                  	mov eax, sys_write
    83                                  	mov edi, 1 	; stdout
    84                                  	mov rsi, %1
    85                                  	mov edx, %2
    86                                  	syscall
    87                                  %endmacro
    88                                  
    89                                  %macro getchar 0
    90                                  	mov     rax, sys_read
    91                                      mov     rdi, STDIN_FILENO
    92                                      mov     rsi, input_char
    93                                      mov     rdx, 1 ; number of bytes
    94                                      syscall         ;read text input from keyboard
    95                                  %endmacro
    96                                  
    97                                  %macro sleeptime 0
    98                                  	mov eax, sys_nanosleep
    99                                  	mov rdi, timespec
   100                                  	xor esi, esi		; ignore remaining time in case of call interruption
   101                                  	syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   102                                  %endmacro
   103                                  
   104                                  
   105                                  
   106                                  global _start
   107                                  
   108                                  section .bss
   109                                  
   110 00000000 ??                      input_char: resb 1
   111                                  
   112                                  section .data
   113                                  
   114                                  	; Guardamos la plantilla del tablero (32 filas)
   115                                      board_template:
   116                                          full_line
    70 00000000 58<rep 50h>         <1>  times column_cells db "X"
    71 00000050 0A0D                <1>  db 0x0a, 0xD
   117                                          %rep 30
   118                                          hollow_line
   119                                          %endrep
   118                              <1>  hollow_line
    75 00000052 58                  <2>  db "X"
    76 00000053 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000A1 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000A4 58                  <2>  db "X"
    76 000000A5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000F3 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000F6 58                  <2>  db "X"
    76 000000F7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000145 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000148 58                  <2>  db "X"
    76 00000149 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000197 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000019A 58                  <2>  db "X"
    76 0000019B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000001E9 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000001EC 58                  <2>  db "X"
    76 000001ED 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000023B 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000023E 58                  <2>  db "X"
    76 0000023F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000028D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000290 58                  <2>  db "X"
    76 00000291 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000002DF 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000002E2 58                  <2>  db "X"
    76 000002E3 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000331 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000334 58                  <2>  db "X"
    76 00000335 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000383 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000386 58                  <2>  db "X"
    76 00000387 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000003D5 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000003D8 58                  <2>  db "X"
    76 000003D9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000427 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000042A 58                  <2>  db "X"
    76 0000042B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000479 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000047C 58                  <2>  db "X"
    76 0000047D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000004CB 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000004CE 58                  <2>  db "X"
    76 000004CF 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000051D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000520 58                  <2>  db "X"
    76 00000521 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000056F 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000572 58                  <2>  db "X"
    76 00000573 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000005C1 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005C4 58                  <2>  db "X"
    76 000005C5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000613 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000616 58                  <2>  db "X"
    76 00000617 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000665 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000668 58                  <2>  db "X"
    76 00000669 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000006B7 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000006BA 58                  <2>  db "X"
    76 000006BB 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000709 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000070C 58                  <2>  db "X"
    76 0000070D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000075B 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000075E 58                  <2>  db "X"
    76 0000075F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007AD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000007B0 58                  <2>  db "X"
    76 000007B1 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007FF 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000802 58                  <2>  db "X"
    76 00000803 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000851 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000854 58                  <2>  db "X"
    76 00000855 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008A3 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008A6 58                  <2>  db "X"
    76 000008A7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008F5 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008F8 58                  <2>  db "X"
    76 000008F9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000947 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000094A 58                  <2>  db "X"
    76 0000094B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000999 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000099C 58                  <2>  db "X"
    76 0000099D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000009EB 580A0D              <2>  db "X", 0x0a, 0xD
   120                                          full_line
    70 000009EE 58<rep 50h>         <1>  times column_cells db "X"
    71 00000A3E 0A0D                <1>  db 0x0a, 0xD
   121                                      board_template_size: equ $ - board_template
   122                                  
   123                                      ; Espacio real que se usará en la ejecución
   124 00000A40 00<rep A40h>                board: times board_template_size db 0
   125                                      board_size: equ board_template_size
   126                                  
   127                                  	; Added for the terminal issue
   128 00001480 00<rep 24h>             	termios:        times 36 db 0
   129                                  	stdin:          equ 0
   130                                  	ICANON:         equ 1<<1
   131                                  	ECHO:           equ 1<<3
   132                                  	VTIME: 			equ 5
   133                                  	VMIN:			equ 6
   134                                  	CC_C:			equ 18
   135                                  
   136                                  section .text
   137                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   138                                  canonical_off:
   139 0000012B E86F000000                      call read_stdin_termios
   140                                  
   141                                          ; clear canonical bit in local mode flags
   142 00000130 50                              push rax
   143 00000131 B802000000                      mov eax, ICANON
   144 00000136 F7D0                            not eax
   145 00000138 2105(8C140000)                  and [termios+12], eax
   146 0000013E C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   147 00000145 C605(98140000)00        		mov byte[termios+CC_C+VMIN], 0
   148 0000014C 58                              pop rax
   149                                  
   150 0000014D E86C000000                      call write_stdin_termios
   151 00000152 C3                              ret
   152                                  
   153                                  echo_off:
   154 00000153 E847000000                      call read_stdin_termios
   155                                  
   156                                          ; clear echo bit in local mode flags
   157 00000158 50                              push rax
   158 00000159 B808000000                      mov eax, ECHO
   159 0000015E F7D0                            not eax
   160 00000160 2105(8C140000)                  and [termios+12], eax
   161 00000166 58                              pop rax
   162                                  
   163 00000167 E852000000                      call write_stdin_termios
   164 0000016C C3                              ret
   165                                  
   166                                  canonical_on:
   167 0000016D E82D000000                      call read_stdin_termios
   168                                  
   169                                          ; set canonical bit in local mode flags
   170 00000172 830D(8C140000)02                or dword [termios+12], ICANON
   171 00000179 C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   172 00000180 C605(98140000)01        		mov byte[termios+CC_C+VMIN], 1
   173 00000187 E832000000                      call write_stdin_termios
   174 0000018C C3                              ret
   175                                  
   176                                  echo_on:
   177 0000018D E80D000000                      call read_stdin_termios
   178                                  
   179                                          ; set echo bit in local mode flags
   180 00000192 830D(8C140000)08                or dword [termios+12], ECHO
   181                                  
   182 00000199 E820000000                      call write_stdin_termios
   183 0000019E C3                              ret
   184                                  
   185                                  read_stdin_termios:
   186 0000019F 50                              push rax
   187 000001A0 53                              push rbx
   188 000001A1 51                              push rcx
   189 000001A2 52                              push rdx
   190                                  
   191 000001A3 B836000000                      mov eax, 36h
   192 000001A8 BB00000000                      mov ebx, stdin
   193 000001AD B901540000                      mov ecx, 5401h
   194 000001B2 BA[80140000]                    mov edx, termios
   195 000001B7 CD80                            int 80h
   196                                  
   197 000001B9 5A                              pop rdx
   198 000001BA 59                              pop rcx
   199 000001BB 5B                              pop rbx
   200 000001BC 58                              pop rax
   201 000001BD C3                              ret
   202                                  
   203                                  write_stdin_termios:
   204 000001BE 50                              push rax
   205 000001BF 53                              push rbx
   206 000001C0 51                              push rcx
   207 000001C1 52                              push rdx
   208                                  
   209 000001C2 B836000000                      mov eax, 36h
   210 000001C7 BB00000000                      mov ebx, stdin
   211 000001CC B902540000                      mov ecx, 5402h
   212 000001D1 BA[80140000]                    mov edx, termios
   213 000001D6 CD80                            int 80h
   214                                  
   215 000001D8 5A                              pop rdx
   216 000001D9 59                              pop rcx
   217 000001DA 5B                              pop rbx
   218 000001DB 58                              pop rax
   219 000001DC C3                              ret
   220                                  
   221                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   222                                  
   223                                  char_equal: equ 61
   224                                  char_space: equ 32
   225                                  char_O: equ 79
   226                                  left_direction: equ -1
   227                                  right_direction: equ 1
   228                                  
   229                                  
   230                                  section .data
   231                                  
   232                                  ; Mensajes para los niveles
   233 000014A4 4E4956454C20                level_msg: db "NIVEL "
   234                                      level_msg_len: equ $ - level_msg
   235 000014AA 31                          level_1_char: db "1"
   236 000014AB 32                          level_2_char: db "2"
   237 000014AC 33                          level_3_char: db "3"
   238 000014AD 34                          level_4_char: db "4"
   239 000014AE 35                          level_5_char: db "5"
   240                                      level_char_len: equ 1
   241                                  
   242                                      ; Timespec para la pausa del mensaje de nivel
   243                                      level_display_time:
   244 000014AF 0100000000000000                lvl_tv_sec dq 1           ; 1 segundo
   245 000014B7 0000000000000000                lvl_tv_nsec dq 0
   246                                          
   247 000014BF [B013000000000000]      	pallet_position dq board + 38 + 29 * (column_cells +2)
   248 000014C7 0500000000000000            pallet_size dq 5
   249 000014CF 0500000000000000            default_pallet_size dq 5    ; Tamaño normal de la paleta
   250 000014D7 0700000000000000            extended_pallet_size dq 7   ; Tamaño extendido de la paleta
   251                                  
   252 000014DF 2800000000000000        	ball_x_pos: dq 40
   253 000014E7 1C00000000000000        	ball_y_pos: dq 28
   254 000014EF 0100000000000000            ball_direction_x dq 1    ; 1 = derecha, -1 = izquierda
   255 000014F7 FFFFFFFFFFFFFFFF            ball_direction_y dq -1   ; -1 = arriba, 1 = abajo
   256 000014FF 00                          ball_moving db 0         ; 0 = estática, 1 = en movimiento
   257 00001500 00                          ball_active db 0
   258                                  
   259 00001501 0000000000000000            ball2_x_pos:        dq 0
   260 00001509 0000000000000000            ball2_y_pos:        dq 0
   261 00001511 0000000000000000            ball2_direction_x:  dq 0
   262 00001519 0000000000000000            ball2_direction_y:  dq 0
   263 00001521 00                          ball2_moving:       db 0    ; 0 = estática, 1 = en movimiento
   264 00001522 00                          ball2_active:       db 0    ; 0 = inactiva, 1 = activa
   265                                  
   266                                      ; -- Pelota 3 --
   267 00001523 0000000000000000            ball3_x_pos:        dq 0
   268 0000152B 0000000000000000            ball3_y_pos:        dq 0
   269 00001533 0000000000000000            ball3_direction_x:  dq 0
   270 0000153B 0000000000000000            ball3_direction_y:  dq 0
   271 00001543 00                          ball3_moving:       db 0
   272 00001544 00                          ball3_active:       db 0
   273                                  
   274                                  
   275                                  ; Definir los límites de la pantalla o área de juego
   276                                      board_top_left_x equ 1
   277                                      board_top_left_y equ 1
   278                                      board_bottom_right_x equ column_cells - 1
   279                                      board_bottom_right_y equ row_cells
   280                                  
   281                                      ; Limites laterales
   282                                      left_edge equ board_top_left_x               ; Límite izquierdo en la primera columna
   283                                      right_edge equ board_bottom_right_x         ; Límite derecho en la última columna
   284                                  
   285                                      ; O también puedes hacerlo así si prefieres usando las coordenadas en memoria para obtener la ubicación exacta:
   286 00001545 [920A000000000000]          left_edge_position dq board + (board_top_left_y * (column_cells + 2)) ; Coordenada de la parte izquierda del marco
   287 0000154D [E00A000000000000]          right_edge_position dq board + (board_top_left_y * (column_cells + 2) + board_bottom_right_x - 1) ; Coordenada de la parte derecha del marco
   288                                  
   289                                      ; Definición de tipos de bloques
   290 00001555 555555555555                block_type_1: db "UUUUUU"    ; Durabilidad 1
   291 0000155B 4F4F4F4F4F4F                block_type_2: db "OOOOOO"    ; Durabilidad 2
   292 00001561 444444444444                block_type_3: db "DDDDDD"    ; Durabilidad 3
   293 00001567 4C4C4C4C4C4C                block_type_4: db "LLLLLL"    ; Durabilidad 4
   294 0000156D 565656565656                block_type_5: db "VVVVVV"    ; Durabilidad 5
   295 00001573 383838383838                block_type_6: db "888888"    ; Durabilidad 6
   296                                      block_length: equ 6        ; Longitud de cada bloque
   297                                  
   298                                      ; Estructura para el nivel actual
   299 00001579 03                          current_level db 3
   300 0000157A 00                          blocks_remaining db 0
   301                                  
   302                                      ; Definición del nivel 1 (ejemplo con múltiples bloques)destroyed_blocks
   303                                      ; Formato: x_pos, y_pos, tipo_bloque, durabilidad_actual
   304                                      level1_blocks:
   305                                          ; Tercera fila (tipo 3)
   306 0000157B 0105050220                      db 1, 5, 5, 2, ' '   
   307 00001580 0705050220                      db 7, 5, 5, 2, ' '    
   308 00001585 0D05050220                      db 13, 5, 5, 2, ' '   
   309 0000158A 1305050220                      db 19, 5, 5, 2, ' '   
   310 0000158F 1905050220                      db 25, 5, 5, 2, ' '   
   311 00001594 1F05050220                      db 31, 5, 5, 2, ' '   
   312 00001599 2505050220                      db 37, 5, 5, 2, ' '   
   313 0000159E 2B05050220                      db 43, 5, 5, 2, ' '   
   314 000015A3 3105050220                      db 49, 5, 5, 2, ' '   
   315 000015A8 3705050220                      db 55, 5, 5, 2, ' '   
   316 000015AD 3D05050220                      db 61, 5, 5, 2, ' '  
   317 000015B2 4305050220                      db 67, 5, 5, 2, ' '   
   318 000015B7 4905050220                      db 73, 5, 5, 2, ' '   
   319                                  
   320 000015BC 0106040145                      db 1, 6, 4, 1, 'E'   
   321 000015C1 0706020153                      db 7, 6, 2, 1, 'S'    
   322 000015C6 0D06040153                      db 13, 6, 4, 1, 'S'   
   323 000015CB 1306020153                      db 19, 6, 2, 1, 'S'   
   324 000015D0 1906040120                      db 25, 6, 4, 1, ' '   
   325 000015D5 1F06020120                      db 31, 6, 2, 1, ' '   
   326 000015DA 2506040120                      db 37, 6, 4, 1, ' '   
   327 000015DF 2B06020143                      db 43, 6, 2, 1, 'C'   
   328 000015E4 3106040120                      db 49, 6, 4, 1, ' '   
   329 000015E9 3706020120                      db 55, 6, 2, 1, ' '   
   330 000015EE 3D06040120                      db 61, 6, 4, 1, ' '  
   331 000015F3 4306020120                      db 67, 6, 2, 1, ' '   
   332 000015F8 4906040120                      db 73, 6, 4, 1, ' ' 
   333                                  
   334 000015FD 0107010120                      db 1, 7, 1, 1, ' '   
   335 00001602 0707030120                      db 7, 7, 3, 1, ' '    
   336 00001607 0D07010120                      db 13, 7, 1, 1, ' '   
   337 0000160C 1307030120                      db 19, 7, 3, 1, ' '   
   338 00001611 1907010120                      db 25, 7, 1, 1, ' '   
   339 00001616 1F07030120                      db 31, 7, 3, 1, ' '   
   340 0000161B 2507010120                      db 37, 7, 1, 1, ' '   
   341 00001620 2B07030120                      db 43, 7, 3, 1, ' '   
   342 00001625 3107010120                      db 49, 7, 1, 1, ' '   
   343 0000162A 3707030120                      db 55, 7, 3, 1, ' '   
   344 0000162F 3D07010120                      db 61, 7, 1, 1, ' '  
   345 00001634 4307030120                      db 67, 7, 3, 1, ' '   
   346 00001639 4907010120                      db 73, 7, 1, 1, ' ' 
   347                                  
   348 0000163E 0108040120                      db 1, 8, 4, 1, ' '   
   349 00001643 0708020120                      db 7, 8, 2, 1, ' '    
   350 00001648 0D08040150                      db 13, 8, 4, 1, 'P'   
   351 0000164D 1308020120                      db 19, 8, 2, 1, ' '   
   352 00001652 1908040120                      db 25, 8, 4, 1, ' '   
   353 00001657 1F08020120                      db 31, 8, 2, 1, ' '   
   354 0000165C 2508040145                      db 37, 8, 4, 1, 'E'   
   355 00001661 2B08020143                      db 43, 8, 2, 1, 'C'   
   356 00001666 3108040120                      db 49, 8, 4, 1, ' '   
   357 0000166B 3708020120                      db 55, 8, 2, 1, ' '   
   358 00001670 3D08040120                      db 61, 8, 4, 1, ' '  
   359 00001675 4308020120                      db 67, 8, 2, 1, ' '   
   360 0000167A 4908040120                      db 73, 8, 4, 1, ' ' 
   361                                  
   362 0000167F 0109010120                      db 1, 9, 1, 1, ' '   
   363 00001684 0709030120                      db 7, 9, 3, 1, ' '    
   364 00001689 0D09010120                      db 13, 9, 1, 1, ' '   
   365 0000168E 1309030120                      db 19, 9, 3, 1, ' '   
   366 00001693 1909010120                      db 25, 9, 1, 1, ' '   
   367 00001698 1F09030120                      db 31, 9, 3, 1, ' '   
   368 0000169D 2509010120                      db 37, 9, 1, 1, ' '   
   369 000016A2 2B09030120                      db 43, 9, 3, 1, ' '     
   370 000016A7 3109010120                      db 49, 9, 1, 1, ' '   
   371 000016AC 3709030120                      db 55, 9, 3, 1, ' '   
   372 000016B1 3D09010120                      db 61, 9, 1, 1, ' '  
   373 000016B6 4309030120                      db 67, 9, 3, 1, ' '   
   374 000016BB 4909010120                      db 73, 9, 1, 1, ' ' 
   375                                  
   376 000016C0 010A040145                      db 1, 10, 4, 1, 'E'   
   377 000016C5 070A020120                      db 7, 10, 2, 1, ' '    
   378 000016CA 0D0A040120                      db 13, 10, 4, 1, ' '   
   379 000016CF 130A020120                      db 19, 10, 2, 1, ' '   
   380 000016D4 190A040120                      db 25, 10, 4, 1, ' '   
   381 000016D9 1F0A020120                      db 31, 10, 2, 1, ' '   
   382 000016DE 250A040143                      db 37, 10, 4, 1, 'C'   
   383 000016E3 2B0A020120                      db 43, 10, 2, 1, ' '   
   384 000016E8 310A040120                      db 49, 10, 4, 1, ' '   
   385 000016ED 370A02014C                      db 55, 10, 2, 1, 'L'   
   386 000016F2 3D0A040120                      db 61, 10, 4, 1, ' '  
   387 000016F7 430A020120                      db 67, 10, 2, 1, ' '   
   388 000016FC 490A040120                      db 73, 10, 4, 1, ' ' 
   389                                  
   390                                      level1_blocks_count equ 78   ; Cantidad total de bloques
   391                                  
   392                                      ; Nivel 2: Bloques de prueba
   393                                      level2_blocks:
   394 00001701 0103040120                      db 1, 3, 4, 1, ' '
   395                                  
   396 00001706 0104030120                      db 1, 4, 3, 1, ' '   
   397 0000170B 0704040120                      db 7, 4, 4, 1, ' '   
   398                                                  
   399 00001710 0105020120                      db 1, 5, 2, 1, ' '   
   400 00001715 0705030120                      db 7, 5, 3, 1, ' '
   401 0000171A 0D05040144                      db 13, 5, 4, 1, 'D'
   402                                  
   403 0000171F 0106010120                      db 1, 6, 1, 1, ' '   
   404 00001724 0706020120                      db 7, 6, 2, 1, ' '
   405 00001729 0D06030120                      db 13, 6, 3, 1, ' '
   406 0000172E 1306040120                      db 19, 6, 4, 1, ' '   
   407                                  
   408 00001733 0107040120                      db 1, 7, 4, 1, ' '   
   409 00001738 0707010120                      db 7, 7, 1, 1, ' '
   410 0000173D 0D07020120                      db 13, 7, 2, 1, ' '
   411 00001742 1307030120                      db 19, 7, 3, 1, ' '  
   412 00001747 1907040120                      db 25, 7, 4, 1, ' '   
   413                                  
   414 0000174C 0108030120                      db 1, 8, 3, 1, ' '   
   415 00001751 0708040120                      db 7, 8, 4, 1, ' '
   416 00001756 0D08010120                      db 13, 8, 1, 1, ' '
   417 0000175B 1308020120                      db 19, 8, 2, 1, ' '  
   418 00001760 1908030120                      db 25, 8, 3, 1, ' ' 
   419 00001765 1F08040120                      db 31, 8, 4, 1, ' '   
   420                                  
   421 0000176A 0109020120                      db 1, 9, 2, 1, ' '   
   422 0000176F 0709030120                      db 7, 9, 3, 1, ' '
   423 00001774 0D09040120                      db 13, 9, 4, 1, ' '
   424 00001779 1309010120                      db 19, 9, 1, 1, ' '  
   425 0000177E 1909020120                      db 25, 9, 2, 1, ' ' 
   426 00001783 1F09030143                      db 31, 9, 3, 1, 'C' 
   427 00001788 2509040120                      db 37, 9, 4, 1, ' '   
   428                                  
   429 0000178D 010A010120                      db 1, 10, 1, 1, ' '   
   430 00001792 070A020120                      db 7, 10, 2, 1, ' '
   431 00001797 0D0A030120                      db 13, 10, 3, 1, ' '
   432 0000179C 130A040120                      db 19, 10, 4, 1, ' '  
   433 000017A1 190A010120                      db 25, 10, 1, 1, ' ' 
   434 000017A6 1F0A020120                      db 31, 10, 2, 1, ' ' 
   435 000017AB 250A03014C                      db 37, 10, 3, 1, 'L'  
   436 000017B0 2B0A040120                      db 43, 10, 4, 1, ' '   
   437                                  
   438 000017B5 010B040120                      db 1, 11, 4, 1, ' '   
   439 000017BA 070B010120                      db 7, 11, 1, 1, ' '
   440 000017BF 0D0B020120                      db 13, 11, 2, 1, ' '
   441 000017C4 130B030144                      db 19, 11, 3, 1, 'D'  
   442 000017C9 190B040120                      db 25, 11, 4, 1, ' ' 
   443 000017CE 1F0B010120                      db 31, 11, 1, 1, ' ' 
   444 000017D3 250B020120                      db 37, 11, 2, 1, ' '  
   445 000017D8 2B0B030120                      db 43, 11, 3, 1, ' ' 
   446 000017DD 310B040120                      db 49, 11, 4, 1, ' '   
   447                                  
   448 000017E2 010C030120                      db 1, 12, 3, 1, ' '   
   449 000017E7 070C040120                      db 7, 12, 4, 1, ' '
   450 000017EC 0D0C010120                      db 13, 12, 1, 1, ' '
   451 000017F1 130C020120                      db 19, 12, 2, 1, ' '  
   452 000017F6 190C030120                      db 25, 12, 3, 1, ' ' 
   453 000017FB 1F0C040120                      db 31, 12, 4, 1, ' ' 
   454 00001800 250C010120                      db 37, 12, 1, 1, ' '  
   455 00001805 2B0C020120                      db 43, 12, 2, 1, ' ' 
   456 0000180A 310C030120                      db 49, 12, 3, 1, ' '
   457 0000180F 370C040120                      db 55, 12, 4, 1, ' '   
   458                                  
   459 00001814 010D020120                      db 1, 13, 2, 1, ' '   
   460 00001819 070D030120                      db 7, 13, 3, 1, ' '
   461 0000181E 0D0D040120                      db 13, 13, 4, 1, ' '
   462 00001823 130D010144                      db 19, 13, 1, 1, 'D'  
   463 00001828 190D020120                      db 25, 13, 2, 1, ' ' 
   464 0000182D 1F0D030120                      db 31, 13, 3, 1, ' ' 
   465 00001832 250D040120                      db 37, 13, 4, 1, ' '  
   466 00001837 2B0D010120                      db 43, 13, 1, 1, ' ' 
   467 0000183C 310D020120                      db 49, 13, 2, 1, ' '
   468 00001841 370D030120                      db 55, 13, 3, 1, ' ' 
   469 00001846 3D0D040120                      db 61, 13, 4, 1, ' '   
   470                                  
   471 0000184B 010E010120                      db 1, 14, 1, 1, ' '   
   472 00001850 070E020120                      db 7, 14, 2, 1, ' '
   473 00001855 0D0E030120                      db 13, 14, 3, 1, ' '
   474 0000185A 130E040120                      db 19, 14, 4, 1, ' '  
   475 0000185F 190E010120                      db 25, 14, 1, 1, ' ' 
   476 00001864 1F0E020120                      db 31, 14, 2, 1, ' ' 
   477 00001869 250E030120                      db 37, 14, 3, 1, ' '  
   478 0000186E 2B0E040120                      db 43, 14, 4, 1, ' ' 
   479 00001873 310E010120                      db 49, 14, 1, 1, ' '
   480 00001878 370E020120                      db 55, 14, 2, 1, ' ' 
   481 0000187D 3D0E030120                      db 61, 14, 3, 1, ' '  
   482 00001882 430E040120                      db 67, 14, 4, 1, ' '   
   483                                  
   484 00001887 010F050220                      db 1, 15, 5, 2, ' '   
   485 0000188C 070F050220                      db 7, 15, 5, 2, ' '
   486 00001891 0D0F050220                      db 13, 15, 5, 2, ' '
   487 00001896 130F050220                      db 19, 15, 5, 2, ' '  
   488 0000189B 190F050220                      db 25, 15, 5, 2, ' ' 
   489 000018A0 1F0F050220                      db 31, 15, 5, 2, ' ' 
   490 000018A5 250F050220                      db 37, 15, 5, 2, ' '  
   491 000018AA 2B0F050220                      db 43, 15, 5, 2, ' ' 
   492 000018AF 310F050220                      db 49, 15, 5, 2, ' '
   493 000018B4 370F050220                      db 55, 15, 5, 2, ' ' 
   494 000018B9 3D0F050220                      db 61, 15, 5, 2, ' '  
   495 000018BE 430F050220                      db 67, 15, 5, 2, ' '
   496 000018C3 490F040120                      db 73, 15, 4, 1, ' '   
   497                                         
   498                                  
   499                                      level2_blocks_count equ 91
   500                                  
   501                                      ; Nivel 3
   502                                      level3_blocks:
   503                                  
   504 000018C8 0102010120                      db 1, 2, 1, 1, ' '   
   505 000018CD 0702020120                      db 7, 2, 2, 1, ' '    
   506 000018D2 0D02010120                      db 13, 2, 1, 1, ' '   
   507 000018D7 1302020120                      db 19, 2, 2, 1, ' '   
   508 000018DC 1902010120                      db 25, 2, 1, 1, ' '   
   509 000018E1 1F02020120                      db 31, 2, 2, 1, ' '   
   510 000018E6 2502010120                      db 37, 2, 1, 1, ' '   
   511 000018EB 2B02020120                      db 43, 2, 2, 1, ' '   
   512 000018F0 3102010120                      db 49, 2, 1, 1, ' '   
   513 000018F5 3702020120                      db 55, 2, 2, 1, ' '   
   514 000018FA 3D02010120                      db 61, 2, 1, 1, ' '  
   515 000018FF 4302020120                      db 67, 2, 2, 1, ' '   
   516 00001904 4902010120                      db 73, 2, 1, 1, ' ' 
   517                                  
   518 00001909 0106040120                      db 1, 6, 4, 1, ' '   
   519 0000190E 0706040120                      db 7, 6, 4, 1, ' '    
   520 00001913 0D06040120                      db 13, 6, 4, 1, ' '   
   521 00001918 1306066320                      db 19, 6, 6, 99, ' '   
   522 0000191D 1906066320                      db 25, 6, 6, 99, ' '   
   523 00001922 1F06066320                      db 31, 6, 6, 99, ' '   
   524 00001927 2506066320                      db 37, 6, 6, 99, ' '   
   525 0000192C 2B06066320                      db 43, 6, 6, 99, ' '   
   526 00001931 3106066320                      db 49, 6, 6, 99, ' '   
   527 00001936 3706066320                      db 55, 6, 6, 99, ' '   
   528 0000193B 3D06066320                      db 61, 6, 6, 99, ' '  
   529 00001940 4306066320                      db 67, 6, 6, 99, ' '   
   530 00001945 4906066320                      db 73, 6, 6, 99, ' ' 
   531                                  
   532 0000194A 0108040120                      db 1, 8, 4, 1, ' '   
   533 0000194F 0708030120                      db 7, 8, 3, 1, ' '    
   534 00001954 0D08040120                      db 13, 8, 4, 1, ' '   
   535 00001959 1308030120                      db 19, 8, 3, 1, ' '   
   536 0000195E 1908040120                      db 25, 8, 4, 1, ' '   
   537 00001963 1F08030120                      db 31, 8, 3, 1, ' '   
   538 00001968 2508040120                      db 37, 8, 4, 1, ' '   
   539 0000196D 2B08030120                      db 43, 8, 3, 1, ' '   
   540 00001972 3108040120                      db 49, 8, 4, 1, ' '   
   541 00001977 3708030120                      db 55, 8, 3, 1, ' '   
   542 0000197C 3D08040120                      db 61, 8, 4, 1, ' '  
   543 00001981 4308030120                      db 67, 8, 3, 1, ' '   
   544 00001986 4908040120                      db 73, 8, 4, 1, ' ' 
   545                                  
   546 0000198B 010B066320                      db 1, 11, 6, 99, ' '   
   547 00001990 070B066320                      db 7, 11, 6, 99, ' '    
   548 00001995 0D0B066320                      db 13, 11, 6, 99, ' '   
   549 0000199A 130B066320                      db 19, 11, 6, 99, ' '   
   550 0000199F 190B066320                      db 25, 11, 6, 99, ' '   
   551 000019A4 1F0B066320                      db 31, 11, 6, 99, ' '   
   552 000019A9 250B066320                      db 37, 11, 6, 99, ' '   
   553 000019AE 2B0B066320                      db 43, 11, 6, 99, ' '   
   554 000019B3 310B066320                      db 49, 11, 6, 99, ' '   
   555 000019B8 370B066320                      db 55, 11, 6, 99, ' '   
   556 000019BD 3D0B030144                      db 61, 11, 3, 1, 'D'  
   557 000019C2 430B030120                      db 67, 11, 3, 1, ' '   
   558 000019C7 490B030120                      db 73, 11, 3, 1, ' ' 
   559                                  
   560 000019CC 010D010144                      db 1, 13, 1, 1, 'D'   
   561 000019D1 070D020150                      db 7, 13, 2, 1, 'P'    
   562 000019D6 0D0D010143                      db 13, 13, 1, 1, 'C'   
   563 000019DB 130D020120                      db 19, 13, 2, 1, ' '   
   564 000019E0 190D010120                      db 25, 13, 1, 1, ' '   
   565 000019E5 1F0D020120                      db 31, 13, 2, 1, ' '   
   566 000019EA 250D010120                      db 37, 13, 1, 1, ' '   
   567 000019EF 2B0D020120                      db 43, 13, 2, 1, ' '   
   568 000019F4 310D010120                      db 49, 13, 1, 1, ' '   
   569 000019F9 370D020120                      db 55, 13, 2, 1, ' '   
   570 000019FE 3D0D010120                      db 61, 13, 1, 1, ' '  
   571 00001A03 430D020120                      db 67, 13, 2, 1, ' '   
   572 00001A08 490D010120                      db 73, 13, 1, 1, ' ' 
   573                                  
   574 00001A0D 010F020120                      db 1, 15, 2, 1, ' '   
   575 00001A12 070F020120                      db 7, 15, 2, 1, ' '    
   576 00001A17 0D0F020120                      db 13, 15, 2, 1, ' '   
   577 00001A1C 130F066320                      db 19, 15, 6, 99, ' '   
   578 00001A21 190F066320                      db 25, 15, 6, 99, ' '   
   579 00001A26 1F0F066320                      db 31, 15, 6, 99, ' '   
   580 00001A2B 250F066320                      db 37, 15, 6, 99, ' '   
   581 00001A30 2B0F066320                      db 43, 15, 6, 99, ' '   
   582 00001A35 310F066320                      db 49, 15, 6, 99, ' '   
   583 00001A3A 370F066320                      db 55, 15, 6, 99, ' '   
   584 00001A3F 3D0F066320                      db 61, 15, 6, 99, ' '  
   585 00001A44 430F066320                      db 67, 15, 6, 99, ' '   
   586 00001A49 490F066320                      db 73, 15, 6, 99, ' ' 
   587                                  
   588 00001A4E 0112020120                      db 1, 18, 2, 1, ' '   
   589 00001A53 0712030120                      db 7, 18, 3, 1, ' '    
   590 00001A58 0D12020144                      db 13, 18, 2, 1, 'D'   
   591 00001A5D 1312030120                      db 19, 18, 3, 1, ' '   
   592 00001A62 1912020120                      db 25, 18, 2, 1, ' '   
   593 00001A67 1F12030120                      db 31, 18, 3, 1, ' '   
   594 00001A6C 2512020120                      db 37, 18, 2, 1, ' '   
   595 00001A71 2B12030120                      db 43, 18, 3, 1, ' '   
   596 00001A76 3112020120                      db 49, 18, 2, 1, ' '   
   597 00001A7B 3712030144                      db 55, 18, 3, 1, 'D'   
   598 00001A80 3D12020120                      db 61, 18, 2, 1, ' '  
   599 00001A85 4312030143                      db 67, 18, 3, 1, 'C'   
   600 00001A8A 4912020120                      db 73, 18, 2, 1, ' ' 
   601                                  
   602                                  
   603 00001A8F 0114066320                      db 1, 20, 6, 99, ' '   
   604 00001A94 0714066320                      db 7, 20, 6, 99, ' '    
   605 00001A99 0D14066320                      db 13, 20, 6, 99, ' '   
   606 00001A9E 1314066320                      db 19, 20, 6, 99, ' '   
   607 00001AA3 1914066320                      db 25, 20, 6, 99, ' '   
   608 00001AA8 1F14066320                      db 31, 20, 6, 99, ' '   
   609 00001AAD 2514066320                      db 37, 20, 6, 99, ' '   
   610 00001AB2 2B14066320                      db 43, 20, 6, 99, ' '   
   611 00001AB7 3114066320                      db 49, 20, 6, 99, ' '   
   612 00001ABC 3714066320                      db 55, 20, 6, 99, ' '   
   613 00001AC1 3D14010120                      db 61, 20, 1, 1, ' '  
   614 00001AC6 4314010153                      db 67, 20, 1, 1, 'S'   
   615 00001ACB 4914010143                      db 73, 20, 1, 1, 'C' 
   616                                  
   617                                      level3_blocks_count equ 104
   618                                  
   619                                      ; Nivel 4
   620                                      level4_blocks:
   621                                  
   622 00001AD0 0704010120                      db 7, 4, 1, 1, ' '    
   623 00001AD5 0D04020120                      db 13, 4, 2, 1, ' '   
   624 00001ADA 1304030120                      db 19, 4, 3, 1, ' '   
   625 00001ADF 1904050220                      db 25, 4, 5, 2, ' '   
   626 00001AE4 1F04020120                      db 31, 4, 2, 1, ' '
   627                                  
   628 00001AE9 2B04010120                      db 43, 4, 1, 1, ' '   
   629 00001AEE 3104020120                      db 49, 4, 2, 1, ' '   
   630 00001AF3 3704030144                      db 55, 4, 3, 1, 'D'   
   631 00001AF8 3D04040120                      db 61, 4, 4, 1, ' '  
   632 00001AFD 4304020120                      db 67, 4, 2, 1, ' ' 
   633                                  
   634 00001B02 0705020120                      db 7, 5, 2, 1, ' '    
   635 00001B07 0D05030120                      db 13, 5, 3, 1, ' '   
   636 00001B0C 1305050220                      db 19, 5, 5, 2, ' '   
   637 00001B11 1905020120                      db 25, 5, 2, 1, ' '   
   638 00001B16 1F05010120                      db 31, 5, 1, 1, ' '
   639                                  
   640 00001B1B 2B05020120                      db 43, 5, 2, 1, ' '   
   641 00001B20 3105030120                      db 49, 5, 3, 1, ' '   
   642 00001B25 3705040120                      db 55, 5, 4, 1, ' '   
   643 00001B2A 3D05020120                      db 61, 5, 2, 1, ' '  
   644 00001B2F 4305050220                      db 67, 5, 5, 2, ' '  
   645                                  
   646 00001B34 0706030120                      db 7, 6, 3, 1, ' '    
   647 00001B39 0D06050220                      db 13, 6, 5, 2, ' '   
   648 00001B3E 1306020120                      db 19, 6, 2, 1, ' '   
   649 00001B43 1906010120                      db 25, 6, 1, 1, ' '   
   650 00001B48 1F06020120                      db 31, 6, 2, 1, ' '
   651                                  
   652 00001B4D 2B06030120                      db 43, 6, 3, 1, ' '   
   653 00001B52 3106040120                      db 49, 6, 4, 1, ' '   
   654 00001B57 3706020120                      db 55, 6, 2, 1, ' '   
   655 00001B5C 3D06050220                      db 61, 6, 5, 2, ' '  
   656 00001B61 4306020120                      db 67, 6, 2, 1, ' '
   657                                  
   658 00001B66 0707050220                      db 7, 7, 5, 2, ' '    
   659 00001B6B 0D07020120                      db 13, 7, 2, 1, ' '   
   660 00001B70 1307010120                      db 19, 7, 1, 1, ' '   
   661 00001B75 1907020120                      db 25, 7, 2, 1, ' '   
   662 00001B7A 1F07030120                      db 31, 7, 3, 1, ' '
   663                                  
   664 00001B7F 2B07040120                      db 43, 7, 4, 1, ' '   
   665 00001B84 3107020120                      db 49, 7, 2, 1, ' '   
   666 00001B89 3707050220                      db 55, 7, 5, 2, ' '   
   667 00001B8E 3D07020120                      db 61, 7, 2, 1, ' '  
   668 00001B93 4307030120                      db 67, 7, 3, 1, ' '
   669                                  
   670 00001B98 0708020120                      db 7, 8, 2, 1, ' '    
   671 00001B9D 0D08010120                      db 13, 8, 1, 1, ' '   
   672 00001BA2 1308020120                      db 19, 8, 2, 1, ' '   
   673 00001BA7 1908030120                      db 25, 8, 3, 1, ' '   
   674 00001BAC 1F08040120                      db 31, 8, 4, 1, ' '
   675                                  
   676 00001BB1 2B08020120                      db 43, 8, 2, 1, ' '   
   677 00001BB6 3108050220                      db 49, 8, 5, 2, ' '   
   678 00001BBB 3708020120                      db 55, 8, 2, 1, ' '   
   679 00001BC0 3D08030120                      db 61, 8, 3, 1, ' '  
   680 00001BC5 4308040120                      db 67, 8, 4, 1, ' '
   681                                  
   682 00001BCA 0709010120                      db 7, 9, 1, 1, ' '    
   683 00001BCF 0D09020120                      db 13, 9, 2, 1, ' '   
   684 00001BD4 1309030120                      db 19, 9, 3, 1, ' '   
   685 00001BD9 1909040120                      db 25, 9, 4, 1, ' '   
   686 00001BDE 1F09020120                      db 31, 9, 2, 1, ' '
   687                                  
   688 00001BE3 2B09050220                      db 43, 9, 5, 2, ' '   
   689 00001BE8 3109020120                      db 49, 9, 2, 1, ' '   
   690 00001BED 3709030120                      db 55, 9, 3, 1, ' '   
   691 00001BF2 3D09040120                      db 61, 9, 4, 1, ' '  
   692 00001BF7 4309020120                      db 67, 9, 2, 1, ' '
   693                                  
   694 00001BFC 070A020120                      db 7, 10, 2, 1, ' '    
   695 00001C01 0D0A030120                      db 13, 10, 3, 1, ' '   
   696 00001C06 130A040120                      db 19, 10, 4, 1, ' '   
   697 00001C0B 190A020120                      db 25, 10, 2, 1, ' '   
   698 00001C10 1F0A010120                      db 31, 10, 1, 1, ' '
   699                                  
   700 00001C15 2B0A020120                      db 43, 10, 2, 1, ' '   
   701 00001C1A 310A030120                      db 49, 10, 3, 1, ' '   
   702 00001C1F 370A040120                      db 55, 10, 4, 1, ' '   
   703 00001C24 3D0A020120                      db 61, 10, 2, 1, ' '  
   704 00001C29 430A010120                      db 67, 10, 1, 1, ' '
   705                                  
   706 00001C2E 070B030120                      db 7, 11, 3, 1, ' '   
   707 00001C33 0D0B040120                      db 13, 11, 4, 1, ' '   
   708 00001C38 130B020120                      db 19, 11, 2, 1, ' '   
   709 00001C3D 190B010120                      db 25, 11, 1, 1, ' '  
   710 00001C42 1F0B050220                      db 31, 11, 5, 2, ' '
   711                                  
   712 00001C47 2B0B030120                      db 43, 11, 3, 1, ' '   
   713 00001C4C 310B040120                      db 49, 11, 4, 1, ' '   
   714 00001C51 370B020120                      db 55, 11, 2, 1, ' '   
   715 00001C56 3D0B010120                      db 61, 11, 1, 1, ' '  
   716 00001C5B 430B020120                      db 67, 11, 2, 1, ' '
   717                                  
   718 00001C60 070C040120                      db 7, 12, 4, 1, ' '   
   719 00001C65 0D0C020120                      db 13, 12, 2, 1, ' '   
   720 00001C6A 130C010120                      db 19, 12, 1, 1, ' '   
   721 00001C6F 190C050220                      db 25, 12, 5, 2, ' '  
   722 00001C74 1F0C030120                      db 31, 12, 3, 1, ' '
   723                                  
   724 00001C79 2B0C040120                      db 43, 12, 4, 1, ' '    
   725 00001C7E 310C020120                      db 49, 12, 2, 1, ' '   
   726 00001C83 370C010120                      db 55, 12, 1, 1, ' '   
   727 00001C88 3D0C020120                      db 61, 12, 2, 1, ' '   
   728 00001C8D 430C030120                      db 67, 12, 3, 1, ' '
   729                                  
   730 00001C92 070D020120                      db 7, 13, 2, 1, ' '   
   731 00001C97 0D0D010120                      db 13, 13, 1, 1, ' '   
   732 00001C9C 130D050220                      db 19, 13, 5, 2, ' '   
   733 00001CA1 190D030143                      db 25, 13, 3, 1, 'C'  
   734 00001CA6 1F0D040120                      db 31, 13, 4, 1, ' '
   735                                  
   736 00001CAB 2B0D020120                      db 43, 13, 2, 1, ' '    
   737 00001CB0 310D010120                      db 49, 13, 1, 1, ' '   
   738 00001CB5 370D020120                      db 55, 13, 2, 1, ' '   
   739 00001CBA 3D0D030120                      db 61, 13, 3, 1, ' '   
   740 00001CBF 430D050220                      db 67, 13, 5, 2, ' '
   741                                  
   742 00001CC4 070E010120                      db 7, 14, 1, 1, ' '   
   743 00001CC9 0D0E050220                      db 13, 14, 5, 2, ' '   
   744 00001CCE 130E030120                      db 19, 14, 3, 1, ' '   
   745 00001CD3 190E040120                      db 25, 14, 4, 1, ' '  
   746 00001CD8 1F0E020120                      db 31, 14, 2, 1, ' '
   747                                  
   748 00001CDD 2B0E010120                      db 43, 14, 1, 1, ' '    
   749 00001CE2 310E020120                      db 49, 14, 2, 1, ' '   
   750 00001CE7 370E030120                      db 55, 14, 3, 1, ' '   
   751 00001CEC 3D0E050220                      db 61, 14, 5, 2, ' '   
   752 00001CF1 430E020120                      db 67, 14, 2, 1, ' '
   753                                  
   754 00001CF6 070F050220                      db 7, 15, 5, 2, ' '   
   755 00001CFB 0D0F030120                      db 13, 15, 3, 1, ' '   
   756 00001D00 130F040120                      db 19, 15, 4, 1, ' '   
   757 00001D05 190F020120                      db 25, 15, 2, 1, ' '  
   758 00001D0A 1F0F010120                      db 31, 15, 1, 1, ' '
   759                                  
   760 00001D0F 2B0F020145                      db 43, 15, 2, 1, 'E'    
   761 00001D14 310F03014C                      db 49, 15, 3, 1, 'L'   
   762 00001D19 370F050220                      db 55, 15, 5, 2, ' '   
   763 00001D1E 3D0F020120                      db 61, 15, 2, 1, ' '   
   764 00001D23 430F010120                      db 67, 15, 1, 1, ' '
   765                                  
   766 00001D28 0710030120                      db 7, 16, 3, 1, ' '   
   767 00001D2D 0D10040120                      db 13, 16, 4, 1, ' '   
   768 00001D32 1310020120                      db 19, 16, 2, 1, ' '   
   769 00001D37 1910010120                      db 25, 16, 1, 1, ' '  
   770 00001D3C 1F10020120                      db 31, 16, 2, 1, ' '
   771                                  
   772 00001D41 2B10030120                      db 43, 16, 3, 1, ' '    
   773 00001D46 3110050220                      db 49, 16, 5, 2, ' '   
   774 00001D4B 3710020120                      db 55, 16, 2, 1, ' '   
   775 00001D50 3D10010120                      db 61, 16, 1, 1, ' '   
   776 00001D55 4310020120                      db 67, 16, 2, 1, ' '
   777                                  
   778 00001D5A 0711040120                      db 7, 17, 4, 1, ' '   
   779 00001D5F 0D11020120                      db 13, 17, 2, 1, ' '   
   780 00001D64 1311010120                      db 19, 17, 1, 1, ' '   
   781 00001D69 1911020120                      db 25, 17, 2, 1, ' '  
   782 00001D6E 1F11030120                      db 31, 17, 3, 1, ' '
   783                                  
   784 00001D73 2B11050220                      db 43, 17, 5, 2, ' '    
   785 00001D78 3111020120                      db 49, 17, 2, 1, ' '    
   786 00001D7D 3711010120                      db 55, 17, 1, 1, ' '   
   787 00001D82 3D11020120                      db 61, 17, 2, 1, ' '   
   788 00001D87 4311030120                      db 67, 17, 3, 1, ' '
   789                                  
   790                                      level4_blocks_count equ 140
   791                                  
   792                                      ; Nivel 5
   793                                      level5_blocks:
   794                                  
   795 00001D8C 1303020145                      db 19, 3, 2, 1, 'E'   
   796 00001D91 3703020120                      db 55, 3, 2, 1, ' '   
   797                                  
   798 00001D96 1304020120                      db 19, 4, 2, 1, ' '   
   799 00001D9B 370402014C                      db 55, 4, 2, 1, 'L' 
   800                                  
   801 00001DA0 1905020120                      db 25, 5, 2, 1, ' '   
   802 00001DA5 3105020153                      db 49, 5, 2, 1, 'S'   
   803                                  
   804 00001DAA 1906020120                      db 25, 6, 2, 1, ' '   
   805 00001DAF 3106020120                      db 49, 6, 2, 1, ' '   
   806                                  
   807 00001DB4 1307050220                      db 19, 7, 5, 2, ' '   
   808 00001DB9 1907050220                      db 25, 7, 5, 2, ' '  
   809 00001DBE 1F07050220                      db 31, 7, 5, 2, ' '
   810 00001DC3 2507050220                      db 37, 7, 5, 2, ' '
   811 00001DC8 2B07050220                      db 43, 7, 5, 2, ' '    
   812 00001DCD 3107050220                      db 49, 7, 5, 2, ' '    
   813 00001DD2 3707050220                      db 55, 7, 5, 2, ' '   
   814                                  
   815 00001DD7 1308050220                      db 19, 8, 5, 2, ' '   
   816 00001DDC 1908050220                      db 25, 8, 5, 2, ' '  
   817 00001DE1 1F08050220                      db 31, 8, 5, 2, ' '
   818 00001DE6 2508050220                      db 37, 8, 5, 2, ' '
   819 00001DEB 2B08050220                      db 43, 8, 5, 2, ' '    
   820 00001DF0 3108050220                      db 49, 8, 5, 2, ' '    
   821 00001DF5 3708050220                      db 55, 8, 5, 2, ' '   
   822                                  
   823 00001DFA 0D09050220                      db 13, 9, 5, 2, ' '   
   824 00001DFF 1309050220                      db 19, 9, 5, 2, ' '   
   825 00001E04 1909040143                      db 25, 9, 4, 1, 'C'  
   826 00001E09 1F09050220                      db 31, 9, 5, 2, ' '
   827 00001E0E 2509050220                      db 37, 9, 5, 2, ' '
   828 00001E13 2B09050220                      db 43, 9, 5, 2, ' '    
   829 00001E18 3109040144                      db 49, 9, 4, 1, 'D'    
   830 00001E1D 3709050220                      db 55, 9, 5, 2, ' '   
   831 00001E22 3D09050220                      db 61, 9, 5, 2, ' '  
   832                                  
   833 00001E27 0D0A050220                      db 13, 10, 5, 2, ' '   
   834 00001E2C 130A050220                      db 19, 10, 5, 2, ' '   
   835 00001E31 190A040120                      db 25, 10, 4, 1, ' '  
   836 00001E36 1F0A050220                      db 31, 10, 5, 2, ' '
   837 00001E3B 250A050220                      db 37, 10, 5, 2, ' '
   838 00001E40 2B0A050220                      db 43, 10, 5, 2, ' '    
   839 00001E45 310A040120                      db 49, 10, 4, 1, ' '    
   840 00001E4A 370A050220                      db 55, 10, 5, 2, ' '   
   841 00001E4F 3D0A050220                      db 61, 10, 5, 2, ' '   
   842                                          
   843 00001E54 070B050220                      db 7, 11, 5, 2, ' '   
   844 00001E59 0D0B050220                      db 13, 11, 5, 2, ' '   
   845 00001E5E 130B050220                      db 19, 11, 5, 2, ' '   
   846 00001E63 190B050220                      db 25, 11, 5, 2, ' '  
   847 00001E68 1F0B050220                      db 31, 11, 5, 2, ' '
   848 00001E6D 250B050220                      db 37, 11, 5, 2, ' '
   849 00001E72 2B0B050220                      db 43, 11, 5, 2, ' '    
   850 00001E77 310B050220                      db 49, 11, 5, 2, ' '    
   851 00001E7C 370B050220                      db 55, 11, 5, 2, ' '   
   852 00001E81 3D0B050220                      db 61, 11, 5, 2, ' '   
   853 00001E86 430B050220                      db 67, 11, 5, 2, ' '
   854                                  
   855 00001E8B 070C050220                      db 7, 12, 5, 2, ' '   
   856 00001E90 0D0C050220                      db 13, 12, 5, 2, ' '   
   857 00001E95 130C050220                      db 19, 12, 5, 2, ' '   
   858 00001E9A 190C050220                      db 25, 12, 5, 2, ' '  
   859 00001E9F 1F0C050220                      db 31, 12, 5, 2, ' '
   860 00001EA4 250C050220                      db 37, 12, 5, 2, ' '
   861 00001EA9 2B0C050220                      db 43, 12, 5, 2, ' '    
   862 00001EAE 310C050220                      db 49, 12, 5, 2, ' '    
   863 00001EB3 370C050220                      db 55, 12, 5, 2, ' '   
   864 00001EB8 3D0C050220                      db 61, 12, 5, 2, ' '   
   865 00001EBD 430C050220                      db 67, 12, 5, 2, ' '
   866                                  
   867 00001EC2 070D050220                      db 7, 13, 5, 2, ' '   
   868 00001EC7 0D0D050220                      db 13, 13, 5, 2, ' '   
   869 00001ECC 130D050220                      db 19, 13, 5, 2, ' '   
   870 00001ED1 190D050220                      db 25, 13, 5, 2, ' '  
   871 00001ED6 1F0D050220                      db 31, 13, 5, 2, ' '
   872 00001EDB 250D050220                      db 37, 13, 5, 2, ' '
   873 00001EE0 2B0D050220                      db 43, 13, 5, 2, ' '    
   874 00001EE5 310D050220                      db 49, 13, 5, 2, ' '    
   875 00001EEA 370D050220                      db 55, 13, 5, 2, ' '   
   876 00001EEF 3D0D050220                      db 61, 13, 5, 2, ' '   
   877 00001EF4 430D050220                      db 67, 13, 5, 2, ' '
   878                                  
   879                                          
   880 00001EF9 070E050220                      db 7, 14, 5, 2, ' '   
   881 00001EFE 130E050220                      db 19, 14, 5, 2, ' '   
   882 00001F03 190E050220                      db 25, 14, 5, 2, ' '  
   883 00001F08 1F0E050220                      db 31, 14, 5, 2, ' '
   884 00001F0D 250E050220                      db 37, 14, 5, 2, ' '
   885 00001F12 2B0E050220                      db 43, 14, 5, 2, ' '    
   886 00001F17 310E050220                      db 49, 14, 5, 2, ' '    
   887 00001F1C 370E050220                      db 55, 14, 5, 2, ' '   
   888 00001F21 430E050220                      db 67, 14, 5, 2, ' '
   889                                  
   890 00001F26 070F050220                      db 7, 15, 5, 2, ' '   
   891 00001F2B 130F050220                      db 19, 15, 5, 2, ' '      
   892 00001F30 370F050220                      db 55, 15, 5, 2, ' '   
   893 00001F35 430F050220                      db 67, 15, 5, 2, ' '
   894                                   
   895 00001F3A 0710050220                      db 7, 16, 5, 2, ' '   
   896 00001F3F 1310050220                      db 19, 16, 5, 2, ' '      
   897 00001F44 3710050220                      db 55, 16, 5, 2, ' '   
   898 00001F49 4310050220                      db 67, 16, 5, 2, ' '
   899                                  
   900                                  
   901 00001F4E 1911050220                      db 25, 17, 5, 2, ' '  
   902 00001F53 1F11050220                      db 31, 17, 5, 2, ' '
   903 00001F58 2B11050220                      db 43, 17, 5, 2, ' '    
   904 00001F5D 3111050220                      db 49, 17, 5, 2, ' ' 
   905                                  
   906 00001F62 1912050220                      db 25, 18, 5, 2, ' '  
   907 00001F67 1F12050220                      db 31, 18, 5, 2, ' '
   908 00001F6C 2B12050220                      db 43, 18, 5, 2, ' '    
   909 00001F71 3112050220                      db 49, 18, 5, 2, ' ' 
   910                                  
   911                                      level5_blocks_count equ 98
   912                                  
   913                                      ; Array para mantener el estado de los bloques
   914 00001F76 00<rep C8h>                 block_states: times 200 db 0  ; Durabilidad actual de cada bloque
   915                                  
   916                                      
   917                                      ; Variables para almacenar los valores
   918 0000203E 0000000000000000            current_score dq 0          ; Score actual
   919 00002046 00                          destroyed_blocks db 0       ; Bloques destruidos en el nivel actual
   920                                      
   921                                      ; Buffer para convertir números a string
   922 00002047 00<rep 14h>                 number_buffer: times 20 db 0
   923                                  
   924 0000205B 4023242640                  enemy_chars db "@", "#", "$", "&", "@"    ; El nivel 1 y 5 comparten el mismo caracter (@)
   925                                      
   926                                      ; Estructura para los enemigos (x, y, activo)
   927 00002060 00<rep 1Eh>                 enemies: times 10 * 3 db 0     ; Máximo 5 enemigos, cada uno con 3 bytes (x, y, activo)
   928 0000207E 0A                          enemies_count db 10            ; Cantidad de enemigos activos
   929                                      
   930 0000207F 3200000000000000            enemy_points dq 50              ; Puntos por destruir un enemigo
   931 00002087 00                          enemy_move_counter db 0         ; Contador para controlar velocidad de movimiento
   932 00002088 09                          enemy_move_delay db 9           ; Mover enemigos cada N ciclos
   933 00002089 00                          enemy_move_total db 0      ; Contador total de movimientos
   934 0000208A 00                          enemy_target db 0          ; 0 = persigue bola, 1 = persigue paleta
   935 0000208B 14                          MOVEMENT_THRESHOLD db 20   ; Número de movimientos antes de cambiar objetivo
   936                                   ;Formato: número de bloques destruidos necesario para que aparezca cada enemigo
   937                                      ; Añade esto en la sección .dataa
   938 0000208C 464748494A4C788CA0-         level1_spawn_points: db 70, 71, 72, 73, 74, 76, 120, 140, 160, 180    ; 10 enemigos, cada 2 bloques
   938 00002095 B4                 
   939 00002096 001E3246556E8296AA-         level2_spawn_points: db 0, 30, 50, 70, 85, 110, 130, 150, 170, 190    ; 10 enemigos, cada 2 bloques
   939 0000209F BE                 
   940 000020A0 00000032373C646464-         level3_spawn_points: db 0, 0, 0, 50, 55, 60, 100, 100, 100, 100   ; 10 enemigos, cada 3 bloques
   940 000020A9 64                 
   941 000020AA 00040F1E2832465A64-         level4_spawn_points: db 0, 4, 15, 30, 40, 50, 70, 90, 100, 120  ; 10 enemigos, cada 3 bloques
   941 000020B3 78                 
   942 000020B4 00000A141E2328323C-         level5_spawn_points: db 0, 0, 10, 20, 30, 35, 40, 50, 60, 80 ; 10 enemigos, cada 5 bloques
   942 000020BD 50                 
   943                                          ; Arreglo de punteros a los spawn points de cada nivel
   944                                      spawn_points_table:
   945 000020BE [8C20000000000000]              dq level1_spawn_points
   946 000020C6 [9620000000000000]              dq level2_spawn_points
   947 000020CE [A020000000000000]              dq level3_spawn_points
   948 000020D6 [AA20000000000000]              dq level4_spawn_points
   949 000020DE [B420000000000000]              dq level5_spawn_points
   950                                  
   951                                      ; Variables para el comportamiento de enemigos
   952 000020E6 1E                          BEHAVIOR_CHANGE_TIME db 30    ; Ciclos antes de cambiar comportamiento
   953 000020E7 00                          behavior_counter db 0          ; Contador para cambio de comportamiento
   954 000020E8 00                          current_behavior db 0          ; 0 = persigue bola, 1 = persigue paleta
   955 000020E9 00<rep Ah>                  enemy_spawns_triggered: times 10 db 0  ; 0 = no spawned, 1 = spawned
   956                                  
   957 000020F3 50756E74616A653A20-         score_label: db "Puntaje: [          ]", 0xA, 0xD  ; 10 espacios para el número
   957 000020FC 5B2020202020202020-
   957 00002105 20205D0A0D         
   958                                      score_label_len: equ $ - score_label
   959 0000210A 426C6F717565732064-         blocks_label: db "Bloques destruidos: [   ]", 0xA, 0xD  ; 3 espacios para el número
   959 00002113 657374727569646F73-
   959 0000211C 3A205B2020205D0A0D 
   960                                      blocks_label_len: equ $ - blocks_label
   961                                      
   962                                      ; Posición donde insertar los números en los labels
   963                                      score_pos equ 10    ; Posición después de "Puntaje: ["
   964                                      blocks_pos equ 20   ; Posición después de "Bloques destruidos: ["
   965                                      
   966                                      ; Definición de las vidas (x, y, estado)
   967                                      ; Formato: posición_x, posición_y, estado (1 = activa, 0 = inactiva)
   968                                      lives_data: 
   969 00002125 021E01                          db 2, 30, 1     ; Vida 1 (activa)
   970 00002128 041E01                          db 4, 30, 1     ; Vida 2 (activa)
   971 0000212B 061E01                          db 6, 30, 1     ; Vida 3 (inactiva)
   972 0000212E 081E00                          db 8, 30, 0     ; Vida 4 (inactiva)
   973 00002131 0A1E00                          db 10, 30, 0    ; Vida 5 (inactiva)
   974 00002134 0C1E00                          db 12, 30, 0    ; Vida 6 (inactiva)
   975 00002137 0E1E00                          db 14, 30, 0    ; Vida 7 (inactiva)
   976                                      lives_count equ 7    ; Total de vidas
   977 0000213A 5E                          life_char db "^"    
   978 0000213B 03                          current_lives db 3   ; Contador de vidas activas actual
   979                                  
   980                                  ; Estructura para almacenar las letras y sus posiciones
   981                                      ; Formato: x, y, letra, activo (1 = activo, 0 = inactivo)
   982 0000213C 00<rep 190h>                letters_map: times 100 * 4 db 0  ; Espacio para 100 letras
   983 000022CC 00                          letters_count db 0   
   984 000022CD 20                          last_letter db ' '    ; Variable para almacenar la última letra
   985 000022CE 506F64657220616374-         last_letter_msg db "Poder actual: [ ]", 0xA, 0xD  ; Mensaje para mostrar la última letra
   985 000022D7 75616C3A205B205D0A-
   985 000022E0 0D                 
   986                                      last_letter_msg_len equ $ - last_letter_msg
   987 000022E1 00                          current_power_processed db 0 ; 0 = no procesado, 1 = ya procesado
   988 000022E2 07                          max_lives db 7              ; Máximo número de vidas permitidas
   989 000022E3 0700000000000000            ball_speed dq 7             ; Velocidad normal de la bola
   990 000022EB 0200000000000000            slow_ball_speed dq 2        ; Velocidad lenta (se usará como divisor)
   991 000022F3 0000000000000000            speed_counter dq 0          ; Contador para ralentizar el movimiento
   992                                     
   993 000022FB 00                          initial_catch_active db 0   ; 0 = inactivo, 1 = activo
   994                                  
   995 000022FC 00                          catch_power_active db 0     ; 0 = inactivo, 1 = activo
   996 000022FD 00                          ball_caught db 0           ; 0 = no atrapada, 1 = atrapada
   997 000022FE 00                          ball_caught_2 db 0           ; 0 = no atrapada, 1 = atrapada
   998 000022FF 00                          ball_caught_3 db 0           ; 0 = no atrapada, 1 = atrapada
   999                                  
  1000 00002300 0000000000000000            ball_catch_offset dq 0     ; Offset respecto a la paleta cuando está atrapada
  1001 00002308 00                          last_key db 0    ; Variable para almacenar la última tecla presionada
  1002                                  
  1003 00002309 00                          laser_power_active: db 0         ; Flag para indicar si el poder láser está activo
  1004 0000230A 7C                          laser_symbol: db '|'             ; Símbolo para representar el láser
  1005 0000230B 00                          laser_count: db 0                ; Contador de láseres activos
  1006 0000230C 00<rep C8h>                 lasers: times 200 db 0           ; Array para almacenar posiciones de láseres (x,y)
  1007 000023D4 0100000000000000            laser_speed: dq 1                ; Velocidad del láser
  1008                                  
  1009                                      balls_data:     ; Array para almacenar hasta 3 bolas
  1010                                          ; Bola 1 (principal)
  1011 000023DC 0000000000000000                dq 0        ; x_pos
  1012 000023E4 0000000000000000                dq 0        ; y_pos
  1013 000023EC 0100000000000000                dq 1        ; direction_x
  1014 000023F4 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1015 000023FC 01                              db 1        ; active
  1016                                          ; Bola 2
  1017 000023FD 0000000000000000                dq 0        ; x_pos
  1018 00002405 0000000000000000                dq 0        ; y_pos
  1019 0000240D FFFFFFFFFFFFFFFF                dq -1       ; direction_x
  1020 00002415 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1021 0000241D 00                              db 0        ; active
  1022                                          ; Bola 3
  1023 0000241E 0000000000000000                dq 0        ; x_pos
  1024 00002426 0000000000000000                dq 0        ; y_pos
  1025 0000242E 0000000000000000                dq 0        ; direction_x
  1026 00002436 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1027 0000243E 00                              db 0        ; active
  1028                                      
  1029 0000243F 01                          balls_count db 1     ; Contador de bolas activas
  1030                                      BALL_STRUCT_SIZE equ 33  ; Tamaño de cada estructura de bola (8*4 + 1)
  1031 00002440 00<rep Ah>                  enemy_last_x:       times 10 db 0
  1032 0000244A 00<rep Ah>                  enemy_last_y:       times 10 db 0
  1033 00002454 00<rep Ah>                  enemy_stuck_count:  times 10 db 0
  1034 0000245E 00                          letter_move_counter db 0
  1035                                      initial_ball_offset_x equ 2    ; Offset desde el centro de la paleta
  1036                                      initial_ball_offset_y equ -1   ; Offset vertical desde la paleta
  1037                                  
  1038                                  section .text
  1039                                  
  1040                                  
  1041                                  print_lives:
  1042 000001DD 55                          push rbp
  1043 000001DE 4889E5                      mov rbp, rsp
  1044                                      
  1045 000001E1 4D31E4                      xor r12, r12                    ; Índice de la vida actual
  1046                                      
  1047                                      .print_loop:
  1048 000001E4 4983FC07                        cmp r12, lives_count
  1049 000001E8 7D45                            jge .end
  1050                                          
  1051                                          ; Calcular offset de la vida actual
  1052 000001EA 4C89E0                          mov rax, r12
  1053 000001ED 486BC003                        imul rax, 3                     ; Cada vida ocupa 3 bytes (x, y, estado)
  1054 000001F1 488DB0[25210000]                lea rsi, [lives_data + rax]
  1055                                          
  1056                                          ; Calcular posición en el tablero
  1057 000001F8 4C0FB606                        movzx r8, byte [rsi]            ; X
  1058 000001FC 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  1059                                          
  1060                                          ; Calcular offset en el tablero
  1061 00000201 B850000000                      mov rax, column_cells
  1062 00000206 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  1063 0000020A 49F7E1                          mul r9
  1064 0000020D 4C01C0                          add rax, r8
  1065 00000210 488DB8[400A0000]                lea rdi, [board + rax]
  1066                                          
  1067                                          ; Verificar estado de la vida y dibujar el carácter correspondiente
  1068 00000217 807E0201                        cmp byte [rsi + 2], 1
  1069 0000021B 7405                            je .draw_active
  1070                                          
  1071                                          ; Si está inactiva, dibujar espacio
  1072 0000021D C60720                          mov byte [rdi], ' '
  1073 00000220 EB08                            jmp .next_life
  1074                                          
  1075                                      .draw_active:
  1076                                          ; Si está activa, dibujar el símbolo de vida
  1077 00000222 8A05(3A210000)                  mov al, [life_char]
  1078 00000228 8807                            mov [rdi], al
  1079                                          
  1080                                      .next_life:
  1081 0000022A 49FFC4                          inc r12
  1082 0000022D EBB5                            jmp .print_loop
  1083                                          
  1084                                      .end:
  1085 0000022F 5D                              pop rbp
  1086 00000230 C3                              ret
  1087                                  
  1088                                  ; Función para desactivar una vida
  1089                                  ; Función modificada para perder una vida
  1090                                  ; Modificar lose_life para reiniciar solo la bola principal
  1091                                  lose_life:
  1092 00000231 55                          push rbp
  1093 00000232 4889E5                      mov rbp, rsp
  1094                                      
  1095                                      ; Verificar si aún quedan vidas
  1096 00000235 803D(3B210000)00            cmp byte [current_lives], 0
  1097 0000023C 0F84AB000000                je .game_lost
  1098                                      
  1099                                      ; Encontrar la última vida activa
  1100 00000242 B907000000                  mov rcx, lives_count
  1101 00000247 48FFC9                      dec rcx
  1102                                      
  1103                                      .find_active_life:
  1104 0000024A 4889C8                          mov rax, rcx
  1105 0000024D 486BC003                        imul rax, 3
  1106 00000251 488DB0[25210000]                lea rsi, [lives_data + rax]
  1107 00000258 807E0201                        cmp byte [rsi + 2], 1
  1108 0000025C 740A                            je .deactivate_life
  1109 0000025E 48FFC9                          dec rcx
  1110 00000261 79E7                            jns .find_active_life
  1111 00000263 E985000000                      jmp .game_lost
  1112                                          
  1113                                      .deactivate_life:
  1114                                          ; Borrar vida visualmente y en datos
  1115 00000268 4C0FB606                        movzx r8, byte [rsi]
  1116 0000026C 4C0FB64E01                      movzx r9, byte [rsi + 1]
  1117 00000271 B850000000                      mov rax, column_cells
  1118 00000276 4883C002                        add rax, 2
  1119 0000027A 49F7E1                          mul r9
  1120 0000027D 4C01C0                          add rax, r8
  1121 00000280 488DB8[400A0000]                lea rdi, [board + rax]
  1122 00000287 C60720                          mov byte [rdi], ' '
  1123 0000028A C6460200                        mov byte [rsi + 2], 0
  1124 0000028E FE0D(3B210000)                  dec byte [current_lives]
  1125                                          
  1126                                          ; Borrar paleta anterior
  1127 00000294 4C8B05(BF140000)                mov r8, [pallet_position]
  1128 0000029B 488B0D(C7140000)                mov rcx, [pallet_size]
  1129                                          .erase_pallet_loop:
  1130 000002A2 41C60020                            mov byte [r8], ' '
  1131 000002A6 49FFC0                              inc r8
  1132 000002A9 48FFC9                              dec rcx
  1133 000002AC 75F4                                jnz .erase_pallet_loop
  1134                                          
  1135                                          ; Reiniciar solo la bola principal
  1136 000002AE 48C705(DF140000)28-             mov qword [ball_x_pos], 40
  1136 000002B6 000000             
  1137 000002B9 48C705(E7140000)1C-             mov qword [ball_y_pos], 28
  1137 000002C1 000000             
  1138 000002C4 C605(FF140000)00                mov byte [ball_moving], 0
  1139 000002CB C605(00150000)01                mov byte [ball_active], 1       ; Activar bola principal
  1140 000002D2 48C705(BF140000)-               mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  1140 000002D9 [B0130000]         
  1141                                          
  1142                                          ; Asegurarse que las otras bolas están desactivadas
  1143 000002DD C605(22150000)00                mov byte [ball2_active], 0
  1144 000002E4 C605(44150000)00                mov byte [ball3_active], 0
  1145                                          
  1146 000002EB EB07                            jmp .end
  1147                                          
  1148                                      .game_lost:
  1149 000002ED E8E2000000                      call game_lost
  1150 000002F2 EB00                            jmp .end
  1151                                          
  1152                                      .end:
  1153 000002F4 5D                              pop rbp
  1154 000002F5 C3                              ret
  1155                                  ; Función modificada para verificar colisión con el borde inferior
  1156                                  check_bottom_collision:
  1157 000002F6 55                          push rbp
  1158 000002F7 4889E5                      mov rbp, rsp
  1159                                      
  1160                                      ; Verificar si el nivel está completo (no quedan bloques)
  1161 000002FA 803D(7A150000)00            cmp byte [blocks_remaining], 0
  1162 00000301 0F84CB000000                je .balls_remain            ; Si no quedan bloques, no perder vidas
  1163                                      
  1164                                      ; Verificar bola principal
  1165 00000307 803D(00150000)01            cmp byte [ball_active], 1
  1166 0000030E 7542                        jne .check_ball2
  1167 00000310 488B05(E7140000)            mov rax, [ball_y_pos]
  1168 00000317 4883F81E                    cmp rax, row_cells - 2
  1169 0000031B 7535                        jne .check_ball2
  1170                                      
  1171                                      ; Borrar visualmente la bola principal
  1172 0000031D 4C8B05(DF140000)            mov r8, [ball_x_pos]
  1173 00000324 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  1174 0000032B 4981C0[400A0000]            add r8, board
  1175 00000332 4C89C9                      mov rcx, r9
  1176 00000335 B852000000                  mov rax, column_cells + 2
  1177 0000033A 48F7E9                      imul rcx
  1178 0000033D 4901C0                      add r8, rax
  1179 00000340 41C60020                    mov byte [r8], char_space    ; Borrar la bola del tablero
  1180                                      
  1181 00000344 C605(00150000)00            mov byte [ball_active], 0
  1182 0000034B C605(FF140000)00            mov byte [ball_moving], 0
  1183                                  
  1184                                  .check_ball2:
  1185 00000352 803D(22150000)01            cmp byte [ball2_active], 1
  1186 00000359 751B                        jne .check_ball3
  1187 0000035B 488B05(09150000)            mov rax, [ball2_y_pos]
  1188 00000362 4883F81E                    cmp rax, row_cells - 2
  1189 00000366 750E                        jne .check_ball3
  1190 00000368 C605(22150000)00            mov byte [ball2_active], 0
  1191 0000036F C605(21150000)00            mov byte [ball2_moving], 0
  1192                                  
  1193                                  .check_ball3:
  1194 00000376 803D(44150000)01            cmp byte [ball3_active], 1
  1195 0000037D 751B                        jne .check_active_balls
  1196 0000037F 488B05(2B150000)            mov rax, [ball3_y_pos]
  1197 00000386 4883F81E                    cmp rax, row_cells - 2
  1198 0000038A 750E                        jne .check_active_balls
  1199 0000038C C605(44150000)00            mov byte [ball3_active], 0
  1200 00000393 C605(43150000)00            mov byte [ball3_moving], 0
  1201                                  
  1202                                  .check_active_balls:
  1203                                      ; Verificar si quedan bolas activas
  1204 0000039A 4831C9                      xor rcx, rcx
  1205                                      
  1206                                      ; Contar bolas activas
  1207 0000039D 8A05(00150000)              mov al, byte [ball_active]
  1208 000003A3 4801C1                      add rcx, rax
  1209 000003A6 8A05(22150000)              mov al, byte [ball2_active]
  1210 000003AC 4801C1                      add rcx, rax
  1211 000003AF 8A05(44150000)              mov al, byte [ball3_active]
  1212 000003B5 4801C1                      add rcx, rax
  1213                                      
  1214                                      ; Si no hay bolas activas y quedan bloques, perder vida
  1215 000003B8 4885C9                      test rcx, rcx
  1216 000003BB 7515                        jnz .balls_remain
  1217                                      
  1218 000003BD 803D(7A150000)00            cmp byte [blocks_remaining], 0  ; Verificar si quedan bloques
  1219 000003C4 740C                        je .balls_remain               ; Si no quedan bloques, no perder vida
  1220                                      
  1221 000003C6 E866FEFFFF                  call lose_life
  1222 000003CB C605(00150000)01            mov byte [ball_active], 1      ; Reactivar bola principal
  1223                                      
  1224                                  .balls_remain:
  1225 000003D2 5D                          pop rbp
  1226 000003D3 C3                          ret
  1227                                  
  1228                                  ; Nueva función para game over
  1229                                  game_lost:
  1230                                      ; Limpiar la pantalla
  1231                                      print clear, clear_length
    82 000003D4 B801000000          <1>  mov eax, sys_write
    83 000003D9 BF01000000          <1>  mov edi, 1
    84 000003DE 48BE-               <1>  mov rsi, %1
    84 000003E0 [1000000000000000]  <1>
    85 000003E8 BA07000000          <1>  mov edx, %2
    86 000003ED 0F05                <1>  syscall
  1232                                      
  1233                                      ; Mostrar mensaje de derrota
  1234                                      section .data
  1235 0000245F C2A148617320706572-             lost_msg: db "¡Has perdido!", 0xA, 0xD
  1235 00002468 6469646F210A0D     
  1236                                          lost_msg_len: equ $ - lost_msg
  1237                                      section .text
  1238                                      
  1239                                      ; Imprimir mensaje de derrota
  1240                                      print lost_msg, lost_msg_len
    82 000003EF B801000000          <1>  mov eax, sys_write
    83 000003F4 BF01000000          <1>  mov edi, 1
    84 000003F9 48BE-               <1>  mov rsi, %1
    84 000003FB [5F24000000000000]  <1>
    85 00000403 BA10000000          <1>  mov edx, %2
    86 00000408 0F05                <1>  syscall
  1241                                      print score_msg, score_msg_len
    82 0000040A B801000000          <1>  mov eax, sys_write
    83 0000040F BF01000000          <1>  mov edi, 1
    84 00000414 48BE-               <1>  mov rsi, %1
    84 00000416 [8D24000000000000]  <1>
    85 0000041E BA0F000000          <1>  mov edx, %2
    86 00000423 0F05                <1>  syscall
  1242                                      
  1243                                      ; Mostrar puntaje final
  1244 00000425 488B05(3E200000)            mov rax, [current_score]
  1245 0000042C 48BF-                       mov rdi, number_buffer
  1245 0000042E [4720000000000000] 
  1246 00000436 E838150000                  call number_to_string
  1247                                      print number_buffer, 20
    82 0000043B B801000000          <1>  mov eax, sys_write
    83 00000440 BF01000000          <1>  mov edi, 1
    84 00000445 48BE-               <1>  mov rsi, %1
    84 00000447 [4720000000000000]  <1>
    85 0000044F BA14000000          <1>  mov edx, %2
    86 00000454 0F05                <1>  syscall
  1248                                      
  1249                                      ; Esperar un momento antes de salir
  1250 00000456 48C7059FFBFFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  1250 0000045F 0000               
  1251 00000461 48C7059CFBFFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  1251 0000046A 0000               
  1252                                      sleeptime
    98 0000046C B823000000          <1>  mov eax, sys_nanosleep
    99 00000471 48BF-               <1>  mov rdi, timespec
    99 00000473 [0000000000000000]  <1>
   100 0000047B 31F6                <1>  xor esi, esi
   101 0000047D 0F05                <1>  syscall
  1253                                      
  1254 0000047F E96D1F0000                  jmp exit
  1255                                  
  1256                                  
  1257                                  ; Función para registrar una nueva letra en el mapa
  1258                                  ; Entrada:
  1259                                  ;   al - letra a registrar
  1260                                  ;   r8b - posición x
  1261                                  ;   r9b - posición y
  1262                                  register_letter:
  1263 00000484 55                          push rbp
  1264 00000485 4889E5                      mov rbp, rsp
  1265 00000488 53                          push rbx
  1266 00000489 51                          push rcx
  1267                                      
  1268 0000048A 3C20                        cmp al, ' '
  1269 0000048C 7438                        je .end
  1270                                  
  1271                                      ; Encontrar un espacio libre en el mapa
  1272 0000048E 4831C9                      xor rcx, rcx
  1273 00000491 480FB615(CC220000)          movzx rdx, byte [letters_count]
  1274                                      
  1275                                      .find_slot:
  1276 00000499 4883F964                        cmp rcx, 100              ; Máximo de letras
  1277 0000049D 7D27                            jge .end                  ; Si no hay espacio, salir
  1278                                          
  1279 0000049F 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1280 000004A7 807B0300                        cmp byte [rbx + 3], 0    ; Verificar si el slot está inactivo
  1281 000004AB 7405                            je .found_slot
  1282                                          
  1283 000004AD 48FFC1                          inc rcx
  1284 000004B0 EBE7                            jmp .find_slot
  1285                                          
  1286                                      .found_slot:
  1287                                          ; Guardar la información de la letra
  1288 000004B2 448803                          mov [rbx], r8b           ; x
  1289 000004B5 44884B01                        mov [rbx + 1], r9b       ; y
  1290 000004B9 884302                          mov [rbx + 2], al        ; letra
  1291 000004BC C6430301                        mov byte [rbx + 3], 1    ; marcar como activo
  1292                                          
  1293 000004C0 FE05(CC220000)                  inc byte [letters_count]
  1294                                          
  1295                                      .end:
  1296 000004C6 59                              pop rcx
  1297 000004C7 5B                              pop rbx
  1298 000004C8 5D                              pop rbp
  1299 000004C9 C3                              ret
  1300                                  
  1301                                  ; Función para imprimir todas las letras registradas
  1302                                  print_letters:
  1303 000004CA 55                          push rbp
  1304 000004CB 4889E5                      mov rbp, rsp
  1305 000004CE 53                          push rbx
  1306 000004CF 51                          push rcx
  1307                                      
  1308 000004D0 4831C9                      xor rcx, rcx
  1309                                      
  1310                                      .print_loop:
  1311 000004D3 4883F964                        cmp rcx, 100              ; Máximo de letras
  1312 000004D7 7D37                            jge .end
  1313                                          
  1314                                          ; Obtener puntero a la letra actual
  1315 000004D9 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1316                                          
  1317                                          ; Verificar si está activa
  1318 000004E1 807B0300                        cmp byte [rbx + 3], 0
  1319 000004E5 7424                            je .next_letter
  1320                                          
  1321                                          ; Calcular posición en el tablero
  1322 000004E7 4C0FB603                        movzx r8, byte [rbx]      ; x
  1323 000004EB 4C0FB64B01                      movzx r9, byte [rbx + 1]  ; y
  1324                                          
  1325                                          ; Calcular offset en el tablero
  1326 000004F0 B850000000                      mov rax, column_cells
  1327 000004F5 4883C002                        add rax, 2                ; Incluir caracteres de nueva línea
  1328 000004F9 49F7E1                          mul r9
  1329 000004FC 4C01C0                          add rax, r8
  1330 000004FF 488DB8[400A0000]                lea rdi, [board + rax]
  1331                                          
  1332                                          ; Imprimir la letra
  1333 00000506 8A4302                          mov al, [rbx + 2]
  1334 00000509 8807                            mov [rdi], al
  1335                                          
  1336                                      .next_letter:
  1337 0000050B 48FFC1                          inc rcx
  1338 0000050E EBC3                            jmp .print_loop
  1339                                          
  1340                                      .end:
  1341 00000510 59                              pop rcx
  1342 00000511 5B                              pop rbx
  1343 00000512 5D                              pop rbp
  1344 00000513 C3                              ret
  1345                                  
  1346                                  ; Función para borrar una letra específica
  1347                                  ; Entrada:
  1348                                  ;   r8b - posición x
  1349                                  ;   r9b - posición y
  1350                                  remove_letter:
  1351 00000514 55                          push rbp
  1352 00000515 4889E5                      mov rbp, rsp
  1353 00000518 53                          push rbx
  1354 00000519 51                          push rcx
  1355                                      
  1356 0000051A 4831C9                      xor rcx, rcx
  1357                                      
  1358                                      .find_loop:
  1359 0000051D 4883F964                        cmp rcx, 100              ; Máximo de letras
  1360 00000521 7D2E                            jge .end
  1361                                          
  1362 00000523 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1363                                          
  1364                                          ; Verificar si está activa y coincide la posición
  1365 0000052B 807B0300                        cmp byte [rbx + 3], 0
  1366 0000052F 741B                            je .next_letter
  1367                                          
  1368 00000531 8A03                            mov al, [rbx]
  1369 00000533 4438C0                          cmp al, r8b
  1370 00000536 7514                            jne .next_letter
  1371                                          
  1372 00000538 8A4301                          mov al, [rbx + 1]
  1373 0000053B 4438C8                          cmp al, r9b
  1374 0000053E 750C                            jne .next_letter
  1375                                          
  1376                                          ; Encontrada la letra, desactivarla
  1377 00000540 C6430300                        mov byte [rbx + 3], 0
  1378 00000544 FE0D(CC220000)                  dec byte [letters_count]
  1379 0000054A EB05                            jmp .end
  1380                                          
  1381                                      .next_letter:
  1382 0000054C 48FFC1                          inc rcx
  1383 0000054F EBCC                            jmp .find_loop
  1384                                          
  1385                                      .end:
  1386 00000551 59                              pop rcx
  1387 00000552 5B                              pop rbx
  1388 00000553 5D                              pop rbp
  1389 00000554 C3                              ret
  1390                                  ; Función para mover las letras hacia abajo
  1391                                  move_letters:
  1392 00000555 55                          push rbp
  1393 00000556 4889E5                      mov rbp, rsp
  1394 00000559 53                          push rbx
  1395 0000055A 57                          push rdi
  1396 0000055B 56                          push rsi
  1397 0000055C 4150                        push r8
  1398 0000055E 4151                        push r9
  1399 00000560 4152                        push r10
  1400 00000562 4153                        push r11
  1401                                  
  1402 00000564 4831C9                      xor rcx, rcx
  1403                                  
  1404                                      ; Verificar si debemos mover la letra en este frame
  1405 00000567 FE05(5E240000)              inc byte [letter_move_counter]    ; Incrementar contador
  1406 0000056D 803D(5E240000)0B            cmp byte [letter_move_counter], 11 ; Ajusta este número para cambiar velocidad
  1407 00000574 0F8C20020000                jl .skip_all                         ; Si no es momento de mover, terminar
  1408 0000057A C605(5E240000)00            mov byte [letter_move_counter], 0 ; Resetear contador
  1409                                  
  1410                                      .move_loop:
  1411 00000581 4883F964                        cmp rcx, 100
  1412 00000585 0F8D0D020000                    jge .print_last_letter
  1413                                          
  1414 0000058B 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1415 00000593 807B0300                        cmp byte [rbx + 3], 0
  1416 00000597 0F84F3010000                    je .next_letter
  1417                                  
  1418 0000059D 4C0FB603                        movzx r8, byte [rbx]
  1419 000005A1 4C0FB64B01                      movzx r9, byte [rbx + 1]
  1420                                  
  1421 000005A6 B850000000                      mov rax, column_cells
  1422 000005AB 4883C002                        add rax, 2
  1423 000005AF 49F7E1                          mul r9
  1424 000005B2 4C01C0                          add rax, r8
  1425 000005B5 488DB8[400A0000]                lea rdi, [board + rax]
  1426 000005BC C60720                          mov byte [rdi], ' '
  1427                                  
  1428 000005BF FE4301                          inc byte [rbx + 1]
  1429 000005C2 4C0FB64B01                      movzx r9, byte [rbx + 1]
  1430                                  
  1431 000005C7 4983F91F                        cmp r9, row_cells - 1
  1432 000005CB 7C09                            jl .check_pallet_collision
  1433                                  
  1434 000005CD C6430300                        mov byte [rbx + 3], 0
  1435 000005D1 E9BA010000                      jmp .next_letter
  1436                                  
  1437                                          .check_pallet_collision:
  1438 000005D6 B850000000                          mov rax, column_cells
  1439 000005DB 4883C002                            add rax, 2
  1440 000005DF 49F7E1                              mul r9
  1441 000005E2 4C01C0                              add rax, r8
  1442 000005E5 488DB8[400A0000]                    lea rdi, [board + rax]
  1443                                  
  1444 000005EC 8A07                                mov al, [rdi]
  1445 000005EE 3C20                                cmp al, ' '
  1446 000005F0 0F849A010000                        je .next_letter
  1447 000005F6 3C3D                                cmp al, char_equal
  1448 000005F8 740A                                je .capture_letter
  1449                                  
  1450 000005FA 8A4302                              mov al, [rbx + 2]
  1451 000005FD 8807                                mov [rdi], al
  1452 000005FF E98C010000                          jmp .next_letter
  1453                                  
  1454                                          .capture_letter:
  1455                                              ; Obtener la nueva letra
  1456 00000604 8A4302                              mov al, [rbx + 2]
  1457                                              
  1458                                              ; Comparar con la última letra
  1459 00000607 3A05(CD220000)                      cmp al, [last_letter]
  1460 0000060D 7407                                je .same_letter
  1461                                              
  1462                                              ; Es una letra diferente, resetear el procesamiento
  1463 0000060F C605(E1220000)00                    mov byte [current_power_processed], 0
  1464                                              
  1465                                              .same_letter:
  1466                                              ; Guardar la nueva letra
  1467 00000616 8805(CD220000)                      mov [last_letter], al
  1468                                              
  1469                                              ; Verificar si es 'E' para extender la paleta
  1470 0000061C 3C45                                cmp al, 'E'
  1471 0000061E 7450                                je .extend_pallet
  1472                                              
  1473                                              ; Verificar si es 'P' para añadir vida
  1474 00000620 3C50                                cmp al, 'P'
  1475 00000622 7478                                je .check_add_life
  1476                                  
  1477 00000624 3C53                                cmp al, 'S'
  1478 00000626 0F84B4000000                        je .slow_ball
  1479                                  
  1480 0000062C 3C43                                cmp al, 'C'
  1481 0000062E 0F84D8000000                        je .activate_catch
  1482                                              
  1483 00000634 3C4C                                cmp al, 'L'
  1484 00000636 0F84F9000000                        je .activate_laser
  1485                                  
  1486 0000063C 3C44                                cmp al, 'D'
  1487 0000063E 0F841A010000                        je .activate_split
  1488                                  
  1489                                              ; Si no es ningún power-up, restaurar tamaño normal
  1490 00000644 488B05(CF140000)                    mov rax, [default_pallet_size]
  1491 0000064B 488905(C7140000)                    mov [pallet_size], rax
  1492 00000652 48C705(E3220000)07-                 mov qword [ball_speed], 7    ; Restaurar velocidad normal
  1492 0000065A 000000             
  1493 0000065D C605(FC220000)00                    mov byte [catch_power_active], 0
  1494 00000664 C605(09230000)00                    mov byte [laser_power_active], 0
  1495 0000066B E91C010000                          jmp .finish_capture
  1496                                  
  1497                                              .extend_pallet:
  1498 00000670 C605(09230000)00                        mov byte [laser_power_active], 0
  1499 00000677 C605(FC220000)00                        mov byte [catch_power_active], 0
  1500 0000067E 48C705(E3220000)07-                     mov qword [ball_speed], 7    ; Restaurar velocidad normal
  1500 00000686 000000             
  1501 00000689 488B05(D7140000)                        mov rax, [extended_pallet_size]
  1502 00000690 488905(C7140000)                        mov [pallet_size], rax
  1503 00000697 E9F0000000                              jmp .finish_capture
  1504                                  
  1505                                              .check_add_life:
  1506 0000069C C605(09230000)00                        mov byte [laser_power_active], 0
  1507 000006A3 C605(FC220000)00                        mov byte [catch_power_active], 0
  1508 000006AA 488B05(CF140000)                        mov rax, [default_pallet_size]
  1509 000006B1 488905(C7140000)                        mov [pallet_size], rax
  1510 000006B8 48C705(E3220000)07-                     mov qword [ball_speed], 7 
  1510 000006C0 000000             
  1511                                                  ; Verificar si ya procesamos este power-up
  1512 000006C3 803D(E1220000)00                        cmp byte [current_power_processed], 0
  1513 000006CA 0F85BC000000                            jne .finish_capture
  1514                                                  
  1515                                                  ; Preservar registros importantes
  1516 000006D0 51                                      push rcx
  1517 000006D1 53                                      push rbx
  1518                                                  
  1519                                                  ; Marcar como procesado
  1520 000006D2 C605(E1220000)01                        mov byte [current_power_processed], 1
  1521                                                  
  1522                                                  ; Añadir una vida
  1523 000006D9 E8A8040000                              call add_life
  1524                                                  
  1525                                                  ; Restaurar registros
  1526 000006DE 5B                                      pop rbx
  1527 000006DF 59                                      pop rcx
  1528                                                  
  1529                                              .slow_ball:
  1530 000006E0 C605(09230000)00                        mov byte [laser_power_active], 0
  1531 000006E7 C605(FC220000)00                        mov byte [catch_power_active], 0                
  1532 000006EE 488B05(CF140000)                        mov rax, [default_pallet_size]
  1533 000006F5 488905(C7140000)                        mov [pallet_size], rax
  1534 000006FC 48C705(E3220000)0A-                     mov qword [ball_speed], 10    ; Activar velocidad lenta
  1534 00000704 000000             
  1535 00000707 E980000000                              jmp .finish_capture
  1536                                  
  1537                                              .activate_catch:
  1538 0000070C C605(09230000)00                        mov byte [laser_power_active], 0
  1539 00000713 488B05(CF140000)                        mov rax, [default_pallet_size]
  1540 0000071A 488905(C7140000)                        mov [pallet_size], rax
  1541 00000721 48C705(E3220000)07-                     mov qword [ball_speed], 7
  1541 00000729 000000             
  1542 0000072C C605(FC220000)01                        mov byte [catch_power_active], 1
  1543 00000733 EB57                                    jmp .finish_capture
  1544                                  
  1545                                              .activate_laser:
  1546 00000735 C605(FC220000)00                        mov byte [catch_power_active], 0
  1547 0000073C 488B05(CF140000)                        mov rax, [default_pallet_size]
  1548 00000743 488905(C7140000)                        mov [pallet_size], rax
  1549 0000074A 48C705(E3220000)07-                     mov qword [ball_speed], 7
  1549 00000752 000000             
  1550 00000755 C605(09230000)01                        mov byte [laser_power_active], 1    ; Activar el poder láser
  1551 0000075C EB2E                                    jmp .finish_capture
  1552                                  
  1553                                              .activate_split:
  1554 0000075E C605(09230000)00                        mov byte [laser_power_active], 0
  1555 00000765 C605(FC220000)00                        mov byte [catch_power_active], 0
  1556 0000076C 488B05(CF140000)                        mov rax, [default_pallet_size]
  1557 00000773 488905(C7140000)                        mov [pallet_size], rax
  1558 0000077A 48C705(E3220000)07-                     mov qword [ball_speed], 7 
  1558 00000782 000000             
  1559 00000785 E8DF000000                              call activate_split_power
  1560 0000078A EB00                                    jmp .finish_capture
  1561                                  
  1562                                              .finish_capture:
  1563 0000078C C6430300                                mov byte [rbx + 3], 0
  1564                                  
  1565                                          .next_letter:
  1566 00000790 48FFC1                              inc rcx
  1567 00000793 E9E9FDFFFF                          jmp .move_loop
  1568                                  
  1569                                      .print_last_letter:
  1570                                          ; ;; en vez de imprimir, saltamos
  1571 00000798 EB0D                            jmp .end
  1572                                  
  1573                                  
  1574                                      .skip_all:                        ; Nueva etiqueta para saltar todo cuando no movemos
  1575 0000079A 415B                            pop r11
  1576 0000079C 415A                            pop r10
  1577 0000079E 4159                            pop r9
  1578 000007A0 4158                            pop r8
  1579 000007A2 5E                              pop rsi
  1580 000007A3 5F                              pop rdi
  1581 000007A4 5B                              pop rbx
  1582 000007A5 5D                              pop rbp
  1583 000007A6 C3                              ret
  1584                                  
  1585                                      .end:
  1586 000007A7 415B                            pop r11
  1587 000007A9 415A                            pop r10
  1588 000007AB 4159                            pop r9
  1589 000007AD 4158                            pop r8
  1590 000007AF 5E                              pop rsi
  1591 000007B0 5F                              pop rdi
  1592 000007B1 5B                              pop rbx
  1593 000007B2 5D                              pop rbp
  1594 000007B3 C3                              ret
  1595                                  
  1596                                  print_power_label:
  1597 000007B4 55                          push rbp
  1598 000007B5 4889E5                      mov  rbp, rsp
  1599                                      
  1600                                      ; Crear buffer temporal
  1601 000007B8 4883EC20                    sub rsp, 32
  1602                                      
  1603                                      ; Copiar el mensaje base al buffer
  1604 000007BC 4889E7                      mov rdi, rsp
  1605 000007BF 48BE-                       mov rsi, last_letter_msg
  1605 000007C1 [CE22000000000000] 
  1606 000007C9 B913000000                  mov rcx, last_letter_msg_len
  1607 000007CE F3A4                        rep movsb
  1608                                      
  1609                                      ; Insertar la última letra capturada
  1610 000007D0 8A05(CD220000)              mov al, [last_letter]
  1611 000007D6 8844240F                    mov byte [rsp + 15], al    ; Asumiendo que 15 es la posición correcta
  1612                                      
  1613                                      ; Imprimir el buffer completo
  1614                                      print rsp, last_letter_msg_len
    82 000007DA B801000000          <1>  mov eax, sys_write
    83 000007DF BF01000000          <1>  mov edi, 1
    84 000007E4 4889E6              <1>  mov rsi, %1
    85 000007E7 BA13000000          <1>  mov edx, %2
    86 000007EC 0F05                <1>  syscall
  1615                                      
  1616                                      ; Restaurar stack
  1617 000007EE 4883C420                    add rsp, 32
  1618 000007F2 5D                          pop rbp
  1619 000007F3 C3                          ret
  1620                                  
  1621                                  
  1622                                  
  1623                                  clear_lasers:
  1624 000007F4 55                          push rbp
  1625 000007F5 4889E5                      mov  rbp, rsp
  1626                                  
  1627                                      ; Recorrer el array de láseres
  1628 000007F8 4831C9                      xor rcx, rcx                ; Índice del láser
  1629 000007FB 480FB61D(0B230000)          movzx rbx, byte [laser_count]  ; Cantidad de láseres activos
  1630                                  
  1631                                      .clear_loop:
  1632 00000803 4839D9                          cmp rcx, rbx
  1633 00000806 7D2F                            jge .done                ; Salir si no quedan láseres
  1634                                  
  1635                                          ; Obtener posición del láser actual
  1636 00000808 488DB409[0C230000]              lea rsi, [lasers + rcx * 2]
  1637 00000810 4C0FB606                        movzx r8, byte [rsi]     ; X
  1638 00000814 4C0FB64E01                      movzx r9, byte [rsi + 1] ; Y
  1639                                  
  1640                                          ; Calcular posición en el tablero
  1641 00000819 B850000000                      mov rax, column_cells
  1642 0000081E 4883C002                        add rax, 2
  1643 00000822 49F7E1                          mul r9
  1644 00000825 4C01C0                          add rax, r8
  1645 00000828 488DB8[400A0000]                lea rdi, [board + rax]
  1646                                  
  1647                                          ; Borrar el láser visualmente
  1648 0000082F C60720                          mov byte [rdi], ' '
  1649                                  
  1650                                          ; Pasar al siguiente láser
  1651 00000832 48FFC1                          inc rcx
  1652 00000835 EBCC                            jmp .clear_loop
  1653                                  
  1654                                      .done:
  1655                                          ; Resetear contador de láseres
  1656 00000837 C605(0B230000)00                mov byte [laser_count], 0
  1657                                  
  1658 0000083E 5D                              pop rbp
  1659 0000083F C3                              ret
  1660                                  
  1661                                  
  1662                                  ; Nueva función para actualizar los láseres
  1663                                  update_lasers:
  1664 00000840 55                          push rbp
  1665 00000841 4889E5                      mov rbp, rsp
  1666                                      
  1667                                      ; Verificar si el poder láser está activo
  1668 00000844 803D(09230000)00            cmp byte [laser_power_active], 0
  1669 0000084B 741A                        je .end
  1670                                      
  1671                                      ; Verificar si se presionó la tecla de espacio
  1672 0000084D 803D(08230000)20            cmp byte [last_key], ' '
  1673 00000854 750C                        jne .skip_shooting
  1674                                      
  1675                                      ; Disparar nuevos láseres
  1676 00000856 E8FD000000                  call shoot_lasers
  1677 0000085B C605(08230000)00            mov byte [last_key], 0    ; Limpiar la tecla procesada
  1678                                      
  1679                                      .skip_shooting:
  1680                                      ; Mover los láseres existentes
  1681 00000862 E88B010000                  call move_lasers
  1682                                      
  1683                                      .end:
  1684 00000867 5D                              pop rbp
  1685 00000868 C3                              ret
  1686                                  
  1687                                  activate_split_power:
  1688 00000869 55                          push rbp
  1689 0000086A 4889E5                      mov rbp, rsp
  1690 0000086D 50                          push rax
  1691 0000086E 53                          push rbx
  1692 0000086F 51                          push rcx
  1693 00000870 52                          push rdx
  1694                                      
  1695                                      ; Si ambas bolas extra ya están activas, salimos
  1696 00000871 8A0D(22150000)              mov cl, byte [ball2_active]
  1697 00000877 220D(44150000)              and cl, byte [ball3_active]
  1698 0000087D 80F901                      cmp cl, 1
  1699 00000880 0F84CC000000                je .end
  1700                                      
  1701                                  .find_active_ball:
  1702                                      ; Guardar posición de la bola activa
  1703 00000886 4831C0                      xor rax, rax    ; Limpiar rax
  1704 00000889 4831DB                      xor rbx, rbx    ; Limpiar rbx
  1705                                      
  1706                                      ; Revisar ball1
  1707 0000088C 803D(00150000)01            cmp byte [ball_active], 1
  1708 00000893 7417                        je .use_ball1
  1709                                      
  1710                                      ; Revisar ball2
  1711 00000895 803D(22150000)01            cmp byte [ball2_active], 1
  1712 0000089C 741E                        je .use_ball2
  1713                                      
  1714                                      ; Revisar ball3
  1715 0000089E 803D(44150000)01            cmp byte [ball3_active], 1
  1716 000008A5 7425                        je .use_ball3
  1717                                      
  1718 000008A7 E9A6000000                  jmp .end        ; Si no hay bolas activas, salimos
  1719                                  
  1720                                  .use_ball1:
  1721 000008AC 488B05(DF140000)            mov rax, qword [ball_x_pos]
  1722 000008B3 488B1D(E7140000)            mov rbx, qword [ball_y_pos]
  1723 000008BA EB20                        jmp .create_missing_balls
  1724                                  
  1725                                  .use_ball2:
  1726 000008BC 488B05(01150000)            mov rax, qword [ball2_x_pos]
  1727 000008C3 488B1D(09150000)            mov rbx, qword [ball2_y_pos]
  1728 000008CA EB10                        jmp .create_missing_balls
  1729                                  
  1730                                  .use_ball3:
  1731 000008CC 488B05(23150000)            mov rax, qword [ball3_x_pos]
  1732 000008D3 488B1D(2B150000)            mov rbx, qword [ball3_y_pos]
  1733 000008DA EB00                        jmp .create_missing_balls
  1734                                  
  1735                                  .create_missing_balls:
  1736                                      ; Intentar crear ball2 si no está activa
  1737 000008DC 803D(22150000)01            cmp byte [ball2_active], 1
  1738 000008E3 7432                        je .create_ball3    ; Si ball2 ya está activa, intentar crear ball3
  1739                                      
  1740                                      ; Crear ball2
  1741 000008E5 488905(01150000)            mov qword [ball2_x_pos], rax
  1742 000008EC 48891D(09150000)            mov qword [ball2_y_pos], rbx
  1743 000008F3 48C705(11150000)FF-         mov qword [ball2_direction_x], -1
  1743 000008FB FFFFFF             
  1744 000008FE 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  1744 00000906 FFFFFF             
  1745 00000909 C605(21150000)01            mov byte [ball2_moving], 1
  1746 00000910 C605(22150000)01            mov byte [ball2_active], 1
  1747                                      
  1748                                  .create_ball3:
  1749                                      ; Intentar crear ball3 si no está activa
  1750 00000917 803D(44150000)01            cmp byte [ball3_active], 1
  1751 0000091E 7432                        je .end
  1752                                      
  1753                                      ; Crear ball3
  1754 00000920 488905(23150000)            mov qword [ball3_x_pos], rax
  1755 00000927 48891D(2B150000)            mov qword [ball3_y_pos], rbx
  1756 0000092E 48C705(33150000)01-         mov qword [ball3_direction_x], 1
  1756 00000936 000000             
  1757 00000939 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  1757 00000941 FFFFFF             
  1758 00000944 C605(43150000)01            mov byte [ball3_moving], 1
  1759 0000094B C605(44150000)01            mov byte [ball3_active], 1
  1760                                  
  1761                                  .end:
  1762 00000952 5A                          pop rdx
  1763 00000953 59                          pop rcx
  1764 00000954 5B                          pop rbx
  1765 00000955 58                          pop rax
  1766 00000956 5D                          pop rbp
  1767 00000957 C3                          ret
  1768                                  
  1769                                  
  1770                                  shoot_lasers:
  1771 00000958 55                          push rbp
  1772 00000959 4889E5                      mov rbp, rsp
  1773 0000095C 53                          push rbx
  1774                                      
  1775                                      ; Verificar si hay espacio para más láseres
  1776 0000095D 480FB605(0B230000)          movzx rax, byte [laser_count]
  1777 00000965 4883F862                    cmp rax, 98  ; Asegurar que hay espacio para 2 láseres
  1778 00000969 0F8D80000000                jge .end
  1779                                      
  1780                                      ; Obtener posición de la paleta
  1781 0000096F 4C8B05(BF140000)            mov r8, [pallet_position]
  1782 00000976 4981E8[400A0000]            sub r8, board                  ; Offset relativo de la paleta
  1783                                      
  1784                                      ; Calcular coordenadas x,y
  1785 0000097D 4C89C0                      mov rax, r8
  1786 00000980 41B950000000                mov r9, column_cells
  1787 00000986 4983C102                    add r9, 2                     ; Ancho total de línea
  1788 0000098A 4831D2                      xor rdx, rdx
  1789 0000098D 49F7F1                      div r9                        ; rax = y, rdx = x
  1790                                      
  1791                                      ; Guardar coordenadas
  1792 00000990 4989C2                      mov r10, rax                  ; Y en r10
  1793 00000993 4989D3                      mov r11, rdx                  ; X en r11
  1794                                      
  1795                                      ; Validar coordenadas
  1796 00000996 4983FA00                    cmp r10, 0
  1797 0000099A 7C53                        jl .end
  1798 0000099C 4983FA20                    cmp r10, row_cells
  1799 000009A0 7D4D                        jge .end
  1800 000009A2 4983FB00                    cmp r11, 0
  1801 000009A6 7C47                        jl .end
  1802 000009A8 4983FB50                    cmp r11, column_cells
  1803 000009AC 7D41                        jge .end
  1804                                      
  1805                                      ; Calcular índice para el primer láser
  1806 000009AE 480FB61D(0B230000)          movzx rbx, byte [laser_count]
  1807 000009B6 486BDB02                    imul rbx, 2                   ; Cada láser usa 2 bytes
  1808                                      
  1809                                      ; Primer láser (izquierda)
  1810 000009BA 488DBB[0C230000]            lea rdi, [lasers + rbx]
  1811 000009C1 44881F                      mov [rdi], r11b              ; X
  1812 000009C4 4488D0                      mov al, r10b
  1813 000009C7 FEC8                        dec al                       ; Y - 1
  1814 000009C9 884701                      mov [rdi + 1], al           ; Y
  1815                                      
  1816                                      ; Segundo láser (derecha)
  1817 000009CC 4488D8                      mov al, r11b
  1818 000009CF 0205(C7140000)              add al, byte [pallet_size]
  1819 000009D5 FEC8                        dec al                       ; Ajustar para el último carácter
  1820 000009D7 488DBB[0E230000]            lea rdi, [lasers + rbx + 2]
  1821 000009DE 8807                        mov [rdi], al               ; X
  1822 000009E0 4488D0                      mov al, r10b
  1823 000009E3 FEC8                        dec al                      ; Y - 1
  1824 000009E5 884701                      mov [rdi + 1], al          ; Y
  1825                                      
  1826                                      ; Incrementar contador de láseres
  1827 000009E8 8005(0B230000)02            add byte [laser_count], 2
  1828                                      
  1829                                      
  1830                                      .end:
  1831 000009EF 5B                              pop rbx
  1832 000009F0 5D                              pop rbp
  1833 000009F1 C3                              ret
  1834                                  
  1835                                  ; Función corregida para mover láseres
  1836                                  ; Función corregida para mover láseres
  1837                                  ; Esta es la parte clave para recorrer los láseres de atrás hacia adelante.
  1838                                  
  1839                                  ; Actualizar la función move_lasers para incluir verificación de colisiones
  1840                                  ; ============================================================
  1841                                  ; NUEVA FUNCIÓN move_lasers (todo-en-uno)
  1842                                  ; ============================================================
  1843                                  ; Mueve cada láser hacia arriba, verifica colisiones (bloques/enemigos)
  1844                                  ; y lo elimina inmediatamente si choca, de lo contrario lo dibuja.
  1845                                  ; ============================================================
  1846                                  move_lasers:
  1847 000009F2 55                          push rbp
  1848 000009F3 4889E5                      mov  rbp, rsp
  1849 000009F6 53                          push rbx
  1850 000009F7 57                          push rdi
  1851 000009F8 56                          push rsi
  1852 000009F9 4154                        push r12
  1853 000009FB 4155                        push r13
  1854 000009FD 4156                        push r14
  1855 000009FF 4157                        push r15
  1856                                  
  1857                                      ; 1) Tomamos la cantidad de láseres
  1858 00000A01 480FB60D(0B230000)          movzx rcx, byte [laser_count]
  1859 00000A09 4885C9                      test rcx, rcx
  1860 00000A0C 0F84BB000000                jz .fin              ; Si es cero, no hay láseres => salir
  1861                                  
  1862                                      ; Ajustamos RCX para que sea el último índice (laser_count - 1)
  1863 00000A12 48FFC9                      dec rcx              ; Empezamos desde el último láser
  1864                                  
  1865                                  .loop_lasers:
  1866                                      ; RSI apunta a lasers + (rcx * 2) => (x, y) del láser
  1867 00000A15 488DB409[0C230000]          lea rsi, [lasers + rcx*2]
  1868                                  
  1869                                      ; 2) Cargar x,y actuales del láser
  1870 00000A1D 4C0FB606                    movzx r8,  byte [rsi]      ; X
  1871 00000A21 4C0FB64E01                  movzx r9,  byte [rsi + 1]  ; Y
  1872                                  
  1873                                      ; 3) Borrar el láser de su posición actual en pantalla
  1874                                      ;    (por si en el ciclo anterior se había dibujado)
  1875 00000A26 B850000000                  mov rax, column_cells
  1876 00000A2B 4883C002                    add rax, 2
  1877 00000A2F 49F7E1                      mul r9
  1878 00000A32 4C01C0                      add rax, r8
  1879 00000A35 488DB8[400A0000]            lea rdi, [board + rax]
  1880 00000A3C C60720                      mov byte [rdi], ' '        ; Borramos el símbolo anterior (láser)
  1881                                  
  1882                                      ; 4) Mover el láser hacia arriba (y - 1)
  1883 00000A3F 49FFC9                      dec r9
  1884                                  
  1885                                      ; Si y < 1, está fuera de pantalla => eliminarlo
  1886 00000A42 4983F901                    cmp r9, 1
  1887 00000A46 7C57                        jl .delete_laser
  1888                                  
  1889                                      ; Guardamos la posición nueva en el array (aún no lo dibujamos)
  1890 00000A48 44884E01                    mov byte [rsi + 1], r9b
  1891                                  
  1892                                      ; 5) Verificamos colisión inmediata con bloques o enemigos
  1893                                      ;    - Primero colisión con bloques
  1894                                      ; ---------------------------------------------------------
  1895                                      ; Calculamos la nueva dirección de memoria para esa posición (r9,r8)
  1896 00000A4C B850000000                  mov rax, column_cells
  1897 00000A51 4883C002                    add rax, 2
  1898 00000A55 49F7E1                      mul r9
  1899 00000A58 4C01C0                      add rax, r8
  1900 00000A5B 488DB8[400A0000]            lea rdi, [board + rax]   ; rdi apunta a la celda donde estaría el láser
  1901                                  
  1902                                      ; Revisar si hay bloque
  1903 00000A62 51                          push rcx
  1904 00000A63 56                          push rsi
  1905 00000A64 57                          push rdi
  1906 00000A65 4989FA                      mov r10, rdi    ; En check_block_collision, r10 = posición en board
  1907 00000A68 E85E100000                  call check_block_collision
  1908 00000A6D 5F                          pop rdi
  1909 00000A6E 5E                          pop rsi
  1910 00000A6F 59                          pop rcx
  1911                                  
  1912 00000A70 4885C0                      test rax, rax          ; rax=1 => hubo colisión con bloque
  1913 00000A73 752A                        jnz .delete_laser      ; si chocó, eliminar ya el láser
  1914                                  
  1915                                      ;    - Luego colisión con enemigos
  1916                                      ; ---------------------------------------------------------
  1917 00000A75 51                          push rcx
  1918 00000A76 56                          push rsi
  1919 00000A77 57                          push rdi
  1920                                      ; Pasamos (r8=X, r9=Y, r10=punteroEnBoard) a la función
  1921                                      ; o podemos crear una versión inlined. A modo de ejemplo:
  1922                                      ; Llamamos a check_laser_enemy_collision, que retorna
  1923                                      ; rax=1 si hubo colisión con enemigo, 0 si no.
  1924                                      ;
  1925                                      ; Hacemos algo como:
  1926 00000A78 4989FA                      mov r10, rdi
  1927 00000A7B E85A000000                  call check_laser_enemy_collision
  1928 00000A80 5F                          pop rdi
  1929 00000A81 5E                          pop rsi
  1930 00000A82 59                          pop rcx
  1931                                  
  1932 00000A83 4885C0                      test rax, rax          ; rax=1 => colisión con un enemigo
  1933 00000A86 7517                        jnz .delete_laser
  1934                                  
  1935                                      ; 6) Si NO hubo colisión, dibujamos el láser en la nueva posición
  1936 00000A88 8A05(0A230000)              mov al, [laser_symbol]
  1937 00000A8E 8807                        mov [rdi], al
  1938                                  
  1939                                  .next_laser:
  1940                                      ; Pasamos al láser anterior en el array
  1941 00000A90 48FFC9                      dec rcx
  1942 00000A93 4883F9FF                    cmp rcx, -1
  1943 00000A97 0F8F78FFFFFF                jg .loop_lasers   ; Mientras rcx >= 0, seguir iterando
  1944 00000A9D EB2E                        jmp .fin
  1945                                  
  1946                                  ; -----------------------------------------------------------------
  1947                                  ; Subrutina interna: .delete_laser
  1948                                  ; -----------------------------------------------------------------
  1949                                  ; Elimina el láser actual del array 'lasers' moviendo el último
  1950                                  ; láser a su posición (si no es el último). Decrementa laser_count.
  1951                                  .delete_laser:
  1952 00000A9F 4C0FB625(0B230000)          movzx r12, byte [laser_count]
  1953 00000AA7 49FFCC                      dec r12                    ; r12 = índice del último láser
  1954 00000AAA 4939CC                      cmp r12, rcx
  1955 00000AAD 7616                        jbe .just_decrement        ; Si rcx ya apunta al último, no copiamos
  1956                                  
  1957                                      ; Copiamos el último láser a la posición actual
  1958 00000AAF 488DBC09[0C230000]          lea rdi, [lasers + rcx*2]
  1959 00000AB7 4B8DB424[0C230000]          lea rsi, [lasers + r12*2]
  1960 00000ABF 668B06                      mov ax, [rsi]             ; lee 2 bytes (X,Y) del último láser
  1961 00000AC2 668907                      mov [rdi], ax             ; copiamos X,Y
  1962                                  
  1963                                  .just_decrement:
  1964 00000AC5 FE0D(0B230000)              dec byte [laser_count]    ; Decrementar contador de láseres
  1965 00000ACB EBC3                        jmp .next_laser
  1966                                  
  1967                                  .fin:
  1968 00000ACD 415F                        pop r15
  1969 00000ACF 415E                        pop r14
  1970 00000AD1 415D                        pop r13
  1971 00000AD3 415C                        pop r12
  1972 00000AD5 5E                          pop rsi
  1973 00000AD6 5F                          pop rdi
  1974 00000AD7 5B                          pop rbx
  1975 00000AD8 5D                          pop rbp
  1976 00000AD9 C3                          ret
  1977                                  
  1978                                  
  1979                                  ; Nueva función para verificar colisión entre láser y enemigos
  1980                                  ; ==========================================================
  1981                                  ; NUEVA check_laser_enemy_collision - inlined destroy
  1982                                  ; ==========================================================
  1983                                  check_laser_enemy_collision:
  1984 00000ADA 55                          push rbp
  1985 00000ADB 4889E5                      mov  rbp, rsp
  1986                                      
  1987 00000ADE 4D31ED                      xor r13, r13            ; Índice del enemigo
  1988 00000AE1 4831C0                      xor rax, rax            ; 0 = no colisión
  1989                                  
  1990                                  .loop_enemies:
  1991 00000AE4 4983FD05                    cmp r13, 5              ; Máximo 5 enemigos
  1992 00000AE8 7D64                        jge .end
  1993                                  
  1994                                      ; r13 * 3 => offset del enemigo i
  1995 00000AEA 4C89E9                      mov rcx, r13
  1996 00000AED 486BC903                    imul rcx, 3
  1997 00000AF1 488DB1[60200000]            lea rsi, [enemies + rcx]   ; rsi => &enemies[i]
  1998                                  
  1999                                      ; Verificar si está activo
  2000 00000AF8 807E0201                    cmp byte [rsi+2], 1
  2001 00000AFC 754B                        jne .next_enemy
  2002                                  
  2003                                      ; Cargar posición X/Y del enemigo
  2004 00000AFE 4C0FB636                    movzx r14, byte [rsi]      ; X
  2005 00000B02 4C0FB67E01                  movzx r15, byte [rsi+1]    ; Y
  2006                                  
  2007                                      ; Comparar con posición del láser (r8=X, r9=Y)
  2008 00000B07 4D39F0                      cmp r8, r14
  2009 00000B0A 753D                        jne .next_enemy
  2010 00000B0C 4D39F9                      cmp r9, r15
  2011 00000B0F 7538                        jne .next_enemy
  2012                                  
  2013                                      ; ==== Colisión detectada con láser ====
  2014                                  
  2015                                      ; 1) Desactivar enemigo
  2016 00000B11 C6460200                    mov byte [rsi+2], 0     ; (activo=0)
  2017                                  
  2018                                      ; 2) Sumar puntos
  2019 00000B15 488B05(7F200000)            mov rax, [enemy_points]
  2020 00000B1C 480105(3E200000)            add [current_score], rax
  2021                                  
  2022                                      ; 3) (Opcional) Borrar del board, SOLO si no coincide con la paleta
  2023                                      ;    Evita crasheos en la fila de la paleta (row_cells - 2).
  2024 00000B23 4983FF1E                    cmp r15, row_cells - 2
  2025 00000B27 7419                        je .skip_erase
  2026                                  
  2027                                      ; Borrar visualmente del board
  2028 00000B29 B850000000                  mov rax, column_cells
  2029 00000B2E 4883C002                    add rax, 2
  2030 00000B32 49F7E7                      mul r15
  2031 00000B35 4C01F0                      add rax, r14
  2032 00000B38 488DB8[400A0000]            lea rdi, [board + rax]
  2033 00000B3F C60720                      mov byte [rdi], ' '
  2034                                  
  2035                                  .skip_erase:
  2036                                  
  2037                                      ; 4) Devolver rax=1 => colisión con enemigo
  2038 00000B42 B801000000                  mov rax, 1
  2039 00000B47 EB05                        jmp .end
  2040                                  
  2041                                  .next_enemy:
  2042 00000B49 49FFC5                      inc r13
  2043 00000B4C EB96                        jmp .loop_enemies
  2044                                  
  2045                                  .end:
  2046 00000B4E 5D                          pop rbp
  2047 00000B4F C3                          ret
  2048                                  
  2049                                  
  2050                                  ; Función auxiliar para eliminar un láser específico
  2051                                  remove_laser:
  2052 00000B50 55                          push rbp
  2053 00000B51 4889E5                      mov rbp, rsp
  2054                                  
  2055                                      ; Borrar el láser del tablero
  2056 00000B54 41C60220                    mov byte [r10], ' '
  2057                                  
  2058                                      ; Mover el último láser a esta posición si no es el último
  2059 00000B58 480FB605(0B230000)          movzx rax, byte [laser_count]
  2060 00000B60 48FFC8                      dec rax                    ; Índice del último láser
  2061 00000B63 4939C4                      cmp r12, rax              ; Comparar con láser actual
  2062 00000B66 7416                        je .just_decrease         ; Si es el último, solo decrementar contador
  2063                                  
  2064                                      ; Copiar último láser a la posición actual
  2065 00000B68 4B8DBC24[0C230000]          lea rdi, [lasers + r12*2]
  2066 00000B70 488DB400[0C230000]          lea rsi, [lasers + rax*2]
  2067 00000B78 668B16                      mov dx, [rsi]             ; Copiar X,Y del último láser
  2068 00000B7B 668917                      mov [rdi], dx
  2069                                  
  2070                                  .just_decrease:
  2071 00000B7E FE0D(0B230000)              dec byte [laser_count]    ; Decrementar contador de láseres
  2072                                  
  2073 00000B84 5D                          pop rbp
  2074 00000B85 C3                          ret
  2075                                  
  2076                                  add_life:
  2077 00000B86 55                          push rbp
  2078 00000B87 4889E5                      mov rbp, rsp
  2079 00000B8A 53                          push rbx
  2080 00000B8B 51                          push rcx
  2081 00000B8C 57                          push rdi
  2082 00000B8D 56                          push rsi
  2083 00000B8E 4150                        push r8
  2084 00000B90 4151                        push r9
  2085                                      
  2086                                      ; Verificar si ya tenemos el máximo de vidas
  2087 00000B92 480FB605(3B210000)          movzx rax, byte [current_lives]
  2088 00000B9A 4883F807                    cmp rax, 7          ; Comparar con el máximo de vidas
  2089 00000B9E 7D2C                        jge .end
  2090                                      
  2091                                      ; Incrementar el contador de vidas
  2092 00000BA0 FE05(3B210000)              inc byte [current_lives]
  2093                                      
  2094                                      ; Encontrar la siguiente vida inactiva
  2095 00000BA6 4831C9                      xor rcx, rcx
  2096                                      
  2097                                      .find_inactive:
  2098 00000BA9 4883F907                        cmp rcx, lives_count
  2099 00000BAD 7D1D                            jge .end
  2100                                          
  2101                                          ; Calcular offset de la vida actual
  2102 00000BAF 4889C8                          mov rax, rcx
  2103 00000BB2 486BC003                        imul rax, 3
  2104 00000BB6 488DB0[25210000]                lea rsi, [lives_data + rax]
  2105                                          
  2106                                          ; Verificar si está inactiva
  2107 00000BBD 807E0200                        cmp byte [rsi + 2], 0
  2108 00000BC1 7405                            je .activate_life
  2109                                          
  2110 00000BC3 48FFC1                          inc rcx
  2111 00000BC6 EBE1                            jmp .find_inactive
  2112                                          
  2113                                      .activate_life:
  2114                                          ; Activar la vida
  2115 00000BC8 C6460201                        mov byte [rsi + 2], 1
  2116                                          
  2117                                      .end:
  2118 00000BCC 4159                            pop r9
  2119 00000BCE 4158                            pop r8
  2120 00000BD0 5E                              pop rsi
  2121 00000BD1 5F                              pop rdi
  2122 00000BD2 59                              pop rcx
  2123 00000BD3 5B                              pop rbx
  2124 00000BD4 5D                              pop rbp
  2125 00000BD5 C3                              ret
  2126                                  
  2127                                  
  2128                                  print_ball:
  2129 00000BD6 4C8B05(DF140000)        	mov r8, [ball_x_pos]
  2130 00000BDD 4C8B0D(E7140000)        	mov r9, [ball_y_pos]
  2131 00000BE4 4981C0[400A0000]        	add r8, board
  2132                                  
  2133 00000BEB 4C89C9                  	mov rcx, r9
  2134 00000BEE B852000000              	mov rax, column_cells + 2
  2135 00000BF3 48F7E9                  	imul rcx
  2136                                  	
  2137 00000BF6 4901C0                  	add r8, rax
  2138 00000BF9 41C6004F                	mov byte [r8], char_O
  2139 00000BFD C3                      	ret
  2140                                  
  2141                                  print_ball_2:
  2142 00000BFE 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2143 00000C05 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2144 00000C0C 4981C0[400A0000]            add r8, board
  2145 00000C13 4C89C9                      mov rcx, r9
  2146 00000C16 B852000000                  mov rax, column_cells + 2
  2147 00000C1B 48F7E9                      imul rcx
  2148 00000C1E 4901C0                      add r8, rax
  2149 00000C21 41C6004F                    mov byte [r8], char_O
  2150 00000C25 C3                          ret
  2151                                  
  2152                                  print_ball_3:
  2153 00000C26 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2154 00000C2D 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2155 00000C34 4981C0[400A0000]            add r8, board
  2156 00000C3B 4C89C9                      mov rcx, r9
  2157 00000C3E B852000000                  mov rax, column_cells + 2
  2158 00000C43 48F7E9                      imul rcx
  2159 00000C46 4901C0                      add r8, rax
  2160 00000C49 41C6004F                    mov byte [r8], char_O
  2161 00000C4D C3                          ret
  2162                                  
  2163                                  	;mov rax, board + r8 + r9 * (column_cells + 2)
  2164                                  	
  2165                                  print_pallet:
  2166                                      ; Primero borrar la paleta anterior completa (usando el tamaño máximo posible)
  2167 00000C4E 4C8B05(BF140000)            mov r8, [pallet_position]
  2168 00000C55 488B0D(C7140000)            mov rcx, [pallet_size]
  2169                                      .clear_pallet:
  2170 00000C5C 41C60020                        mov byte [r8], char_space
  2171 00000C60 49FFC0                          inc r8
  2172 00000C63 48FFC9                          dec rcx
  2173 00000C66 75F4                            jnz .clear_pallet
  2174                                  
  2175                                      ; Luego dibujar la nueva paleta con el tamaño actual
  2176 00000C68 4C8B05(BF140000)            mov r8, [pallet_position]
  2177 00000C6F 488B0D(C7140000)            mov rcx, [pallet_size]
  2178                                      .write_pallet:
  2179 00000C76 41C6003D                        mov byte [r8], char_equal
  2180 00000C7A 49FFC0                          inc r8
  2181 00000C7D 48FFC9                          dec rcx
  2182 00000C80 75F4                            jnz .write_pallet
  2183                                  
  2184 00000C82 C3                          ret
  2185                                  
  2186                                  move_pallet:
  2187                                      
  2188 00000C83 803D(FF140000)00            cmp byte [ball_moving], 0
  2189 00000C8A 7507                        jne .continue_movement
  2190 00000C8C C605(FF140000)01            mov byte [ball_moving], 1
  2191                                  
  2192                                      .continue_movement:
  2193 00000C93 4883FFFF                        cmp rdi, left_direction
  2194 00000C97 7531                            jne .move_right
  2195                                  
  2196                                          .move_left:
  2197                                              ; Verificar si la siguiente posición sería una X (borde izquierdo)
  2198 00000C99 4C8B05(BF140000)                    mov r8, [pallet_position]
  2199 00000CA0 49FFC8                              dec r8              ; Verificar la posición a la izquierda
  2200 00000CA3 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
  2201 00000CA6 3C58                                cmp al, 'X'        ; Comparar si es una X
  2202 00000CA8 744D                                je .end            ; Si es X, no mover
  2203                                              
  2204 00000CAA 4C8B05(BF140000)                    mov r8, [pallet_position]
  2205 00000CB1 4C8B0D(C7140000)                    mov r9, [pallet_size]
  2206 00000CB8 43C64408FF20                        mov byte [r8 + r9 - 1], char_space  ; Borrar último carácter de la paleta
  2207 00000CBE 49FFC8                              dec r8
  2208 00000CC1 4C8905(BF140000)                    mov [pallet_position], r8
  2209 00000CC8 EB2D                                jmp .end
  2210                                              
  2211                                          .move_right:
  2212                                              ; Verificar si la siguiente posición después de la paleta sería una X
  2213 00000CCA 4C8B05(BF140000)                    mov r8, [pallet_position]
  2214 00000CD1 4C8B0D(C7140000)                    mov r9, [pallet_size]
  2215 00000CD8 4D01C8                              add r8, r9         ; Moverse al final de la paleta
  2216 00000CDB 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
  2217 00000CDE 3C58                                cmp al, 'X'        ; Comparar si es una X
  2218 00000CE0 7415                                je .end            ; Si es X, no mover
  2219                                              
  2220 00000CE2 4C8B05(BF140000)                    mov r8, [pallet_position]
  2221 00000CE9 41C60020                            mov byte [r8], char_space
  2222 00000CED 49FFC0                              inc r8
  2223 00000CF0 4C8905(BF140000)                    mov [pallet_position], r8
  2224                                          .end:
  2225 00000CF7 C3                                  ret
  2226                                  
  2227                                  
  2228                                  
  2229                                              
  2230                                  ; Nueva función auxiliar para actualizar la posición de la bola atrapada
  2231                                  update_caught_ball_position:
  2232 00000CF8 55                          push rbp
  2233 00000CF9 4889E5                      mov rbp, rsp
  2234                                      
  2235                                      ; Calcular la nueva posición de la bola basada en la paleta
  2236 00000CFC 4C8B05(BF140000)            mov r8, [pallet_position]
  2237 00000D03 4981E8[400A0000]            sub r8, board          ; Obtener posición relativa
  2238 00000D0A B852000000                  mov rax, column_cells + 2
  2239 00000D0F 4831D2                      xor rdx, rdx
  2240 00000D12 48F7F0                      div rax                ; División para obtener X,Y
  2241                                      
  2242                                      ; rdx contiene X (resto), rax contiene Y (cociente)
  2243 00000D15 4989C1                      mov r9, rax            ; Y de la paleta
  2244 00000D18 49FFC9                      dec r9                 ; Una posición arriba de la paleta
  2245                                      
  2246                                      ; Añadir el offset guardado a la posición X
  2247 00000D1B 4889D0                      mov rax, rdx
  2248 00000D1E 480305(00230000)            add rax, [ball_catch_offset]
  2249 00000D25 488905(DF140000)            mov [ball_x_pos], rax
  2250 00000D2C 4C890D(E7140000)            mov [ball_y_pos], r9
  2251                                      
  2252 00000D33 5D                          pop rbp
  2253 00000D34 C3                          ret
  2254                                  
  2255                                  
  2256                                  move_all_balls:
  2257 00000D35 55                          push rbp
  2258 00000D36 4889E5                      mov rbp, rsp
  2259 00000D39 53                          push rbx
  2260                                      
  2261                                      ; Inicializar contador de bolas
  2262 00000D3A 4831DB                      xor rbx, rbx
  2263                                      
  2264                                  .loop_balls:
  2265                                      ; Verificar si hemos procesado todas las bolas
  2266 00000D3D 3A1D(3F240000)              cmp bl, byte [balls_count]
  2267 00000D43 7D1D                        jge .end
  2268                                      
  2269                                      ; Calcular offset de la bola actual
  2270 00000D45 B821000000                  mov rax, BALL_STRUCT_SIZE
  2271 00000D4A 48F7E3                      mul rbx
  2272                                      
  2273                                      ; Verificar si la bola está activa
  2274 00000D4D 80B8[FC230000]01            cmp byte [balls_data + rax + 32], 1
  2275 00000D54 7507                        jne .next_ball
  2276                                      
  2277                                      ; Guardar offset en la pila
  2278 00000D56 50                          push rax
  2279                                      
  2280                                      ; Llamar a move_ball con los parámetros de esta bola
  2281 00000D57 E809000000                  call move_ball
  2282                                      
  2283                                      ; Restaurar offset
  2284 00000D5C 58                          pop rax
  2285                                      
  2286                                  .next_ball:
  2287 00000D5D 48FFC3                      inc rbx
  2288 00000D60 EBDB                        jmp .loop_balls
  2289                                      
  2290                                  .end:
  2291 00000D62 5B                          pop rbx
  2292 00000D63 5D                          pop rbp
  2293 00000D64 C3                          ret
  2294                                  
  2295                                  move_ball:
  2296                                  
  2297 00000D65 803D(FD220000)01            cmp byte [ball_caught], 1
  2298 00000D6C 0F849D000000                je .move_with_pallet
  2299                                  
  2300 00000D72 803D(FF140000)00            cmp byte [ball_moving], 0
  2301 00000D79 0F84B8010000                je .end
  2302                                  
  2303                                      ; Incrementar contador de velocidad
  2304 00000D7F 48FF05(F3220000)            inc qword [speed_counter]
  2305                                      
  2306                                      ; Verificar si debemos mover la bola en este ciclo
  2307 00000D86 488B05(F3220000)            mov rax, [speed_counter]
  2308 00000D8D 483B05(E3220000)            cmp rax, [ball_speed]
  2309 00000D94 0F8C9D010000                jl .end
  2310                                      
  2311                                      ; Resetear contador de velocidad
  2312 00000D9A 48C705(F3220000)00-         mov qword [speed_counter], 0
  2312 00000DA2 000000             
  2313                                  
  2314                                      ; Borrar la posición actual de la bola
  2315 00000DA5 4C8B05(DF140000)            mov r8, [ball_x_pos]
  2316 00000DAC 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  2317 00000DB3 4981C0[400A0000]            add r8, board
  2318 00000DBA 4C89C9                      mov rcx, r9
  2319 00000DBD B852000000                  mov rax, column_cells + 2
  2320 00000DC2 48F7E9                      imul rcx
  2321 00000DC5 4901C0                      add r8, rax
  2322 00000DC8 41C60020                    mov byte [r8], char_space
  2323                                  
  2324                                      ; Calcular siguiente posición X
  2325 00000DCC 4C8B05(DF140000)            mov r8, [ball_x_pos]
  2326 00000DD3 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  2327 00000DDA 488B05(EF140000)            mov rax, [ball_direction_x]
  2328 00000DE1 4901C0                      add r8, rax               ; Nueva posición X
  2329                                  
  2330                                      ; Calcular la dirección de memoria para la siguiente posición
  2331 00000DE4 4D89C2                      mov r10, r8
  2332 00000DE7 4981C2[400A0000]            add r10, board
  2333 00000DEE 4C89C9                      mov rcx, r9
  2334 00000DF1 B852000000                  mov rax, column_cells + 2
  2335 00000DF6 48F7E9                      imul rcx
  2336 00000DF9 4901C2                      add r10, rax
  2337                                  
  2338                                      ; Verificar si hay una X en la siguiente posición X
  2339 00000DFC 418A02                      mov al, [r10]
  2340 00000DFF 3C58                        cmp al, 'X'
  2341 00000E01 7565                        jne .check_block_x
  2342 00000E03 48F71D(EF140000)            neg qword [ball_direction_x]  ; Cambiar dirección X si hay una X
  2343 00000E0A E928010000                  jmp .end
  2344                                  
  2345                                      .move_with_pallet:
  2346                                          ; Borrar la posición actual de la bola
  2347 00000E0F 4C8B05(DF140000)                mov r8, [ball_x_pos]
  2348 00000E16 4C8B0D(E7140000)                mov r9, [ball_y_pos]
  2349 00000E1D 4D89C2                          mov r10, r8
  2350 00000E20 4981C2[400A0000]                add r10, board
  2351 00000E27 4C89C9                          mov rcx, r9
  2352 00000E2A B852000000                      mov rax, column_cells + 2
  2353 00000E2F 48F7E9                          imul rcx
  2354 00000E32 4901C2                          add r10, rax
  2355 00000E35 41C60220                        mov byte [r10], char_space
  2356                                  
  2357                                          ; Actualizar posición X basada en la paleta
  2358 00000E39 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2359 00000E40 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2360 00000E47 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2361 00000E4E 4C8905(DF140000)                mov [ball_x_pos], r8          ; Guardar nueva posición X
  2362                                  
  2363                                          ; Mantener la bola una posición arriba de la paleta
  2364 00000E55 4C8B0D(E7140000)                mov r9, [ball_y_pos]          ; Mantener la misma altura
  2365 00000E5C 4C890D(E7140000)                mov [ball_y_pos], r9          ; Actualizar posición Y
  2366                                  
  2367 00000E63 E9CF000000                      jmp .end
  2368                                  
  2369                                  
  2370                                      .check_block_x:
  2371                                          ; Verificar colisión con bloques en X
  2372 00000E68 4150                            push r8     ; Guardar registros que usa check_block_collision
  2373 00000E6A 4151                            push r9
  2374 00000E6C 4152                            push r10
  2375 00000E6E E8580C0000                      call check_block_collision
  2376 00000E73 415A                            pop r10
  2377 00000E75 4159                            pop r9
  2378 00000E77 4158                            pop r8
  2379 00000E79 4885C0                          test rax, rax
  2380 00000E7C 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2381 00000E7E 48F71D(EF140000)                neg qword [ball_direction_x]  ; Si hay colisión, rebotar
  2382 00000E85 E9AD000000                      jmp .end
  2383                                  
  2384                                      .check_paddle_x:
  2385                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2386 00000E8A 41803A3D                        cmp byte [r10], char_equal
  2387 00000E8E 750C                            jne .check_y_movement
  2388 00000E90 48F71D(EF140000)                neg qword [ball_direction_x]  ; Cambiar dirección X si hay una paleta
  2389 00000E97 E99B000000                      jmp .end
  2390                                  
  2391                                      .check_y_movement:
  2392                                          ; Calcular siguiente posición Y
  2393 00000E9C 488B05(F7140000)                mov rax, [ball_direction_y]
  2394 00000EA3 4901C1                          add r9, rax                  ; Nueva posición Y
  2395                                  
  2396                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2397 00000EA6 4D89C2                          mov r10, r8
  2398 00000EA9 4981C2[400A0000]                add r10, board
  2399 00000EB0 4C89C9                          mov rcx, r9
  2400 00000EB3 B852000000                      mov rax, column_cells + 2
  2401 00000EB8 48F7E9                          imul rcx
  2402 00000EBB 4901C2                          add r10, rax
  2403                                  
  2404                                          ; Verificar si hay una X en la siguiente posición Y
  2405 00000EBE 418A02                          mov al, [r10]
  2406 00000EC1 3C58                            cmp al, 'X'
  2407 00000EC3 7509                            jne .check_block_y
  2408 00000EC5 48F71D(F7140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una X
  2409 00000ECC EB69                            jmp .end
  2410                                  
  2411                                      .check_block_y:
  2412                                          ; Verificar colisión con bloques en Y
  2413 00000ECE 4150                            push r8     ; Guardar registros que usa check_block_collision
  2414 00000ED0 4151                            push r9
  2415 00000ED2 4152                            push r10
  2416 00000ED4 E8F20B0000                      call check_block_collision
  2417 00000ED9 415A                            pop r10
  2418 00000EDB 4159                            pop r9
  2419 00000EDD 4158                            pop r8
  2420 00000EDF 4885C0                          test rax, rax
  2421 00000EE2 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2422 00000EE4 48F71D(F7140000)                neg qword [ball_direction_y]  ; Si hay colisión, rebotar
  2423 00000EEB EB4A                            jmp .end
  2424                                  
  2425                                      .check_paddle_y:
  2426                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2427 00000EED 41803A3D                        cmp byte [r10], char_equal
  2428 00000EF1 7536                            jne .update_position
  2429                                  
  2430                                          ; Verificar si el poder catch está activo
  2431 00000EF3 803D(FC220000)01                cmp byte [catch_power_active], 1
  2432 00000EFA 7524                            jne .normal_bounce
  2433                                  
  2434                                          ; Activar el modo "atrapado"
  2435 00000EFC C605(FD220000)01                mov byte [ball_caught], 1
  2436                                          
  2437                                          ; Guardar la posición X actual de la bola como offset
  2438 00000F03 488B05(DF140000)                mov rax, [ball_x_pos]           ; Posición X actual de la bola
  2439 00000F0A 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2440 00000F11 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2441 00000F17 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2442                                          
  2443 00000F1E EB17                            jmp .end
  2444                                  
  2445                                      .normal_bounce:
  2446 00000F20 48F71D(F7140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una paleta
  2447 00000F27 EB0E                            jmp .end
  2448                                  
  2449                                  
  2450                                      .update_position:
  2451 00000F29 4C8905(DF140000)                mov [ball_x_pos], r8
  2452 00000F30 4C890D(E7140000)                mov [ball_y_pos], r9
  2453                                  
  2454                                      .end:
  2455 00000F37 C3                              ret
  2456                                  
  2457                                  
  2458                                  move_ball_2:
  2459                                  
  2460 00000F38 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2461 00000F3F 0F849D000000                je .move_with_pallet
  2462                                  
  2463 00000F45 803D(21150000)00            cmp byte [ball2_moving], 0
  2464 00000F4C 0F84B8010000                je .end
  2465                                  
  2466                                      ; Incrementar contador de velocidad
  2467 00000F52 48FF05(F3220000)            inc qword [speed_counter]
  2468                                      
  2469                                      ; Verificar si debemos mover la bola en este ciclo
  2470 00000F59 488B05(F3220000)            mov rax, [speed_counter]
  2471 00000F60 483B05(E3220000)            cmp rax, [ball_speed]
  2472 00000F67 0F8C9D010000                jl .end
  2473                                      
  2474                                      ; Resetear contador de velocidad
  2475 00000F6D 48C705(F3220000)00-         mov qword [speed_counter], 0
  2475 00000F75 000000             
  2476                                  
  2477                                      ; Borrar la posición actual de la bola
  2478 00000F78 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2479 00000F7F 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2480 00000F86 4981C0[400A0000]            add r8, board
  2481 00000F8D 4C89C9                      mov rcx, r9
  2482 00000F90 B852000000                  mov rax, column_cells + 2
  2483 00000F95 48F7E9                      imul rcx
  2484 00000F98 4901C0                      add r8, rax
  2485 00000F9B 41C60020                    mov byte [r8], char_space
  2486                                  
  2487                                      ; Calcular siguiente posición X
  2488 00000F9F 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2489 00000FA6 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2490 00000FAD 488B05(11150000)            mov rax, [ball2_direction_x]
  2491 00000FB4 4901C0                      add r8, rax               ; Nueva posición X
  2492                                  
  2493                                      ; Calcular la dirección de memoria para la siguiente posición
  2494 00000FB7 4D89C2                      mov r10, r8
  2495 00000FBA 4981C2[400A0000]            add r10, board
  2496 00000FC1 4C89C9                      mov rcx, r9
  2497 00000FC4 B852000000                  mov rax, column_cells + 2
  2498 00000FC9 48F7E9                      imul rcx
  2499 00000FCC 4901C2                      add r10, rax
  2500                                  
  2501                                      ; Verificar si hay una X en la siguiente posición X
  2502 00000FCF 418A02                      mov al, [r10]
  2503 00000FD2 3C58                        cmp al, 'X'
  2504 00000FD4 7565                        jne .check_block_x
  2505 00000FD6 48F71D(11150000)            neg qword [ball2_direction_x]  ; Cambiar dirección X si hay una X
  2506 00000FDD E928010000                  jmp .end
  2507                                  
  2508                                      .move_with_pallet:
  2509                                          ; Borrar la posición actual de la bola
  2510 00000FE2 4C8B05(01150000)                mov r8, [ball2_x_pos]
  2511 00000FE9 4C8B0D(09150000)                mov r9, [ball2_y_pos]
  2512 00000FF0 4D89C2                          mov r10, r8
  2513 00000FF3 4981C2[400A0000]                add r10, board
  2514 00000FFA 4C89C9                          mov rcx, r9
  2515 00000FFD B852000000                      mov rax, column_cells + 2
  2516 00001002 48F7E9                          imul rcx
  2517 00001005 4901C2                          add r10, rax
  2518 00001008 41C60220                        mov byte [r10], char_space
  2519                                  
  2520                                          ; Actualizar posición X basada en la paleta
  2521 0000100C 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2522 00001013 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2523 0000101A 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2524 00001021 4C8905(01150000)                mov [ball2_x_pos], r8          ; Guardar nueva posición X
  2525                                  
  2526                                          ; Mantener la bola una posición arriba de la paleta
  2527 00001028 4C8B0D(09150000)                mov r9, [ball2_y_pos]          ; Mantener la misma altura
  2528 0000102F 4C890D(09150000)                mov [ball2_y_pos], r9          ; Actualizar posición Y
  2529                                  
  2530 00001036 E9CF000000                      jmp .end
  2531                                  
  2532                                  
  2533                                      .check_block_x:
  2534                                          ; Verificar colisión con bloques en X
  2535 0000103B 4150                            push r8     ; Guardar registros que usa check_block_collision
  2536 0000103D 4151                            push r9
  2537 0000103F 4152                            push r10
  2538 00001041 E8850A0000                      call check_block_collision
  2539 00001046 415A                            pop r10
  2540 00001048 4159                            pop r9
  2541 0000104A 4158                            pop r8
  2542 0000104C 4885C0                          test rax, rax
  2543 0000104F 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2544 00001051 48F71D(11150000)                neg qword [ball2_direction_x]  ; Si hay colisión, rebotar
  2545 00001058 E9AD000000                      jmp .end
  2546                                  
  2547                                      .check_paddle_x:
  2548                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2549 0000105D 41803A3D                        cmp byte [r10], char_equal
  2550 00001061 750C                            jne .check_y_movement
  2551 00001063 48F71D(11150000)                neg qword [ball2_direction_x]  ; Cambiar dirección X si hay una paleta
  2552 0000106A E99B000000                      jmp .end
  2553                                  
  2554                                      .check_y_movement:
  2555                                          ; Calcular siguiente posición Y
  2556 0000106F 488B05(19150000)                mov rax, [ball2_direction_y]
  2557 00001076 4901C1                          add r9, rax                  ; Nueva posición Y
  2558                                  
  2559                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2560 00001079 4D89C2                          mov r10, r8
  2561 0000107C 4981C2[400A0000]                add r10, board
  2562 00001083 4C89C9                          mov rcx, r9
  2563 00001086 B852000000                      mov rax, column_cells + 2
  2564 0000108B 48F7E9                          imul rcx
  2565 0000108E 4901C2                          add r10, rax
  2566                                  
  2567                                          ; Verificar si hay una X en la siguiente posición Y
  2568 00001091 418A02                          mov al, [r10]
  2569 00001094 3C58                            cmp al, 'X'
  2570 00001096 7509                            jne .check_block_y
  2571 00001098 48F71D(19150000)                neg qword [ball2_direction_y]  ; Cambiar dirección Y si hay una X
  2572 0000109F EB69                            jmp .end
  2573                                  
  2574                                      .check_block_y:
  2575                                          ; Verificar colisión con bloques en Y
  2576 000010A1 4150                            push r8     ; Guardar registros que usa check_block_collision
  2577 000010A3 4151                            push r9
  2578 000010A5 4152                            push r10
  2579 000010A7 E81F0A0000                      call check_block_collision
  2580 000010AC 415A                            pop r10
  2581 000010AE 4159                            pop r9
  2582 000010B0 4158                            pop r8
  2583 000010B2 4885C0                          test rax, rax
  2584 000010B5 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2585 000010B7 48F71D(19150000)                neg qword [ball2_direction_y]  ; Si hay colisión, rebotar
  2586 000010BE EB4A                            jmp .end
  2587                                  
  2588                                      .check_paddle_y:
  2589                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2590 000010C0 41803A3D                        cmp byte [r10], char_equal
  2591 000010C4 7536                            jne .update_position
  2592                                  
  2593                                          ; Verificar si el poder catch está activo
  2594 000010C6 803D(FC220000)01                cmp byte [catch_power_active], 1
  2595 000010CD 7524                            jne .normal_bounce
  2596                                  
  2597                                          ; Activar el modo "atrapado"
  2598 000010CF C605(FE220000)01                mov byte [ball_caught_2], 1
  2599                                          
  2600                                          ; Guardar la posición X actual de la bola como offset
  2601 000010D6 488B05(01150000)                mov rax, [ball2_x_pos]           ; Posición X actual de la bola
  2602 000010DD 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2603 000010E4 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2604 000010EA 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2605                                          
  2606 000010F1 EB17                            jmp .end
  2607                                  
  2608                                      .normal_bounce:
  2609 000010F3 48F71D(19150000)                neg qword [ball2_direction_y]  ; Cambiar dirección Y si hay una paleta
  2610 000010FA EB0E                            jmp .end
  2611                                  
  2612                                  
  2613                                      .update_position:
  2614 000010FC 4C8905(01150000)                mov [ball2_x_pos], r8
  2615 00001103 4C890D(09150000)                mov [ball2_y_pos], r9
  2616                                  
  2617                                      .end:
  2618 0000110A C3                              ret
  2619                                  
  2620                                  move_ball_3:
  2621                                  
  2622 0000110B 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2623 00001112 0F849D000000                je .move_with_pallet
  2624                                  
  2625 00001118 803D(43150000)00            cmp byte [ball3_moving], 0
  2626 0000111F 0F84B8010000                je .end
  2627                                  
  2628                                      ; Incrementar contador de velocidad
  2629 00001125 48FF05(F3220000)            inc qword [speed_counter]
  2630                                      
  2631                                      ; Verificar si debemos mover la bola en este ciclo
  2632 0000112C 488B05(F3220000)            mov rax, [speed_counter]
  2633 00001133 483B05(E3220000)            cmp rax, [ball_speed]
  2634 0000113A 0F8C9D010000                jl .end
  2635                                      
  2636                                      ; Resetear contador de velocidad
  2637 00001140 48C705(F3220000)00-         mov qword [speed_counter], 0
  2637 00001148 000000             
  2638                                  
  2639                                      ; Borrar la posición actual de la bola
  2640 0000114B 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2641 00001152 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2642 00001159 4981C0[400A0000]            add r8, board
  2643 00001160 4C89C9                      mov rcx, r9
  2644 00001163 B852000000                  mov rax, column_cells + 2
  2645 00001168 48F7E9                      imul rcx
  2646 0000116B 4901C0                      add r8, rax
  2647 0000116E 41C60020                    mov byte [r8], char_space
  2648                                  
  2649                                      ; Calcular siguiente posición X
  2650 00001172 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2651 00001179 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2652 00001180 488B05(33150000)            mov rax, [ball3_direction_x]
  2653 00001187 4901C0                      add r8, rax               ; Nueva posición X
  2654                                  
  2655                                      ; Calcular la dirección de memoria para la siguiente posición
  2656 0000118A 4D89C2                      mov r10, r8
  2657 0000118D 4981C2[400A0000]            add r10, board
  2658 00001194 4C89C9                      mov rcx, r9
  2659 00001197 B852000000                  mov rax, column_cells + 2
  2660 0000119C 48F7E9                      imul rcx
  2661 0000119F 4901C2                      add r10, rax
  2662                                  
  2663                                      ; Verificar si hay una X en la siguiente posición X
  2664 000011A2 418A02                      mov al, [r10]
  2665 000011A5 3C58                        cmp al, 'X'
  2666 000011A7 7565                        jne .check_block_x
  2667 000011A9 48F71D(33150000)            neg qword [ball3_direction_x]  ; Cambiar dirección X si hay una X
  2668 000011B0 E928010000                  jmp .end
  2669                                  
  2670                                      .move_with_pallet:
  2671                                          ; Borrar la posición actual de la bola
  2672 000011B5 4C8B05(23150000)                mov r8, [ball3_x_pos]
  2673 000011BC 4C8B0D(2B150000)                mov r9, [ball3_y_pos]
  2674 000011C3 4D89C2                          mov r10, r8
  2675 000011C6 4981C2[400A0000]                add r10, board
  2676 000011CD 4C89C9                          mov rcx, r9
  2677 000011D0 B852000000                      mov rax, column_cells + 2
  2678 000011D5 48F7E9                          imul rcx
  2679 000011D8 4901C2                          add r10, rax
  2680 000011DB 41C60220                        mov byte [r10], char_space
  2681                                  
  2682                                          ; Actualizar posición X basada en la paleta
  2683 000011DF 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2684 000011E6 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2685 000011ED 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2686 000011F4 4C8905(23150000)                mov [ball3_x_pos], r8          ; Guardar nueva posición X
  2687                                  
  2688                                          ; Mantener la bola una posición arriba de la paleta
  2689 000011FB 4C8B0D(2B150000)                mov r9, [ball3_y_pos]          ; Mantener la misma altura
  2690 00001202 4C890D(2B150000)                mov [ball3_y_pos], r9          ; Actualizar posición Y
  2691                                  
  2692 00001209 E9CF000000                      jmp .end
  2693                                  
  2694                                  
  2695                                      .check_block_x:
  2696                                          ; Verificar colisión con bloques en X
  2697 0000120E 4150                            push r8     ; Guardar registros que usa check_block_collision
  2698 00001210 4151                            push r9
  2699 00001212 4152                            push r10
  2700 00001214 E8B2080000                      call check_block_collision
  2701 00001219 415A                            pop r10
  2702 0000121B 4159                            pop r9
  2703 0000121D 4158                            pop r8
  2704 0000121F 4885C0                          test rax, rax
  2705 00001222 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2706 00001224 48F71D(33150000)                neg qword [ball3_direction_x]  ; Si hay colisión, rebotar
  2707 0000122B E9AD000000                      jmp .end
  2708                                  
  2709                                      .check_paddle_x:
  2710                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2711 00001230 41803A3D                        cmp byte [r10], char_equal
  2712 00001234 750C                            jne .check_y_movement
  2713 00001236 48F71D(33150000)                neg qword [ball3_direction_x]  ; Cambiar dirección X si hay una paleta
  2714 0000123D E99B000000                      jmp .end
  2715                                  
  2716                                      .check_y_movement:
  2717                                          ; Calcular siguiente posición Y
  2718 00001242 488B05(3B150000)                mov rax, [ball3_direction_y]
  2719 00001249 4901C1                          add r9, rax                  ; Nueva posición Y
  2720                                  
  2721                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2722 0000124C 4D89C2                          mov r10, r8
  2723 0000124F 4981C2[400A0000]                add r10, board
  2724 00001256 4C89C9                          mov rcx, r9
  2725 00001259 B852000000                      mov rax, column_cells + 2
  2726 0000125E 48F7E9                          imul rcx
  2727 00001261 4901C2                          add r10, rax
  2728                                  
  2729                                          ; Verificar si hay una X en la siguiente posición Y
  2730 00001264 418A02                          mov al, [r10]
  2731 00001267 3C58                            cmp al, 'X'
  2732 00001269 7509                            jne .check_block_y
  2733 0000126B 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Cambiar dirección Y si hay una X
  2734 00001272 EB69                            jmp .end
  2735                                  
  2736                                      .check_block_y:
  2737                                          ; Verificar colisión con bloques en Y
  2738 00001274 4150                            push r8     ; Guardar registros que usa check_block_collision
  2739 00001276 4151                            push r9
  2740 00001278 4152                            push r10
  2741 0000127A E84C080000                      call check_block_collision
  2742 0000127F 415A                            pop r10
  2743 00001281 4159                            pop r9
  2744 00001283 4158                            pop r8
  2745 00001285 4885C0                          test rax, rax
  2746 00001288 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2747 0000128A 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Si hay colisión, rebotar
  2748 00001291 EB4A                            jmp .end
  2749                                  
  2750                                      .check_paddle_y:
  2751                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2752 00001293 41803A3D                        cmp byte [r10], char_equal
  2753 00001297 7536                            jne .update_position
  2754                                  
  2755                                          ; Verificar si el poder catch está activo
  2756 00001299 803D(FC220000)01                cmp byte [catch_power_active], 1
  2757 000012A0 7524                            jne .normal_bounce
  2758                                  
  2759                                          ; Activar el modo "atrapado"
  2760 000012A2 C605(FF220000)01                mov byte [ball_caught_3], 1
  2761                                          
  2762                                          ; Guardar la posición X actual de la bola como offset
  2763 000012A9 488B05(23150000)                mov rax, [ball3_x_pos]           ; Posición X actual de la bola
  2764 000012B0 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2765 000012B7 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2766 000012BD 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2767                                          
  2768 000012C4 EB17                            jmp .end
  2769                                  
  2770                                      .normal_bounce:
  2771 000012C6 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Cambiar dirección Y si hay una paleta
  2772 000012CD EB0E                            jmp .end
  2773                                  
  2774                                  
  2775                                      .update_position:
  2776 000012CF 4C8905(23150000)                mov [ball3_x_pos], r8
  2777 000012D6 4C890D(2B150000)                mov [ball3_y_pos], r9
  2778                                  
  2779                                      .end:
  2780 000012DD C3                              ret
  2781                                  
  2782                                  ; Nueva función para procesar la tecla C cuando la bola está atrapada
  2783                                  ; Procesar la tecla 'c' cuando el poder de atrapar está activo
  2784                                  process_catch_release:
  2785 000012DE 55                          push rbp
  2786 000012DF 4889E5                      mov  rbp, rsp
  2787                                  
  2788                                      ; Verificar si el poder de catch está activo
  2789 000012E2 803D(FC220000)01            cmp byte [catch_power_active], 1
  2790 000012E9 0F8531010000                jne .no_catch_power
  2791                                  
  2792                                      ; Verificar si se presionó 'c' (derecha y arriba)
  2793 000012EF 803D(08230000)63            cmp byte [last_key], 'c'
  2794 000012F6 7412                        je .release_right
  2795                                      
  2796                                      ; Verificar si se presionó 'x' (izquierda y arriba)
  2797 000012F8 803D(08230000)78            cmp byte [last_key], 'x'
  2798 000012FF 0F8487000000                je .release_left
  2799                                      
  2800 00001305 E916010000                  jmp .no_catch_power
  2801                                  
  2802                                  .release_right:
  2803                                      ; Liberar la bola hacia la derecha
  2804 0000130A 803D(FD220000)01            cmp byte [ball_caught], 1
  2805 00001311 7522                        jne .check_ball2_right
  2806 00001313 C605(FD220000)00            mov byte [ball_caught], 0
  2807 0000131A 48C705(EF140000)01-         mov qword [ball_direction_x], 1    ; Derecha
  2807 00001322 000000             
  2808 00001325 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Arriba
  2808 0000132D FFFFFF             
  2809 00001330 E9CD000000                  jmp .release_complete
  2810                                  
  2811                                  .check_ball2_right:
  2812 00001335 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2813 0000133C 7522                        jne .check_ball3_right
  2814 0000133E C605(FE220000)00            mov byte [ball_caught_2], 0
  2815 00001345 48C705(11150000)01-         mov qword [ball2_direction_x], 1
  2815 0000134D 000000             
  2816 00001350 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  2816 00001358 FFFFFF             
  2817 0000135B E9A2000000                  jmp .release_complete
  2818                                  
  2819                                  .check_ball3_right:
  2820 00001360 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2821 00001367 0F8595000000                jne .release_complete
  2822 0000136D C605(FF220000)00            mov byte [ball_caught_3], 0
  2823 00001374 48C705(33150000)01-         mov qword [ball3_direction_x], 1
  2823 0000137C 000000             
  2824 0000137F 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  2824 00001387 FFFFFF             
  2825 0000138A EB76                        jmp .release_complete
  2826                                  
  2827                                  .release_left:
  2828                                      ; Liberar la bola hacia la izquierda
  2829 0000138C 803D(FD220000)01            cmp byte [ball_caught], 1
  2830 00001393 751F                        jne .check_ball2_left
  2831 00001395 C605(FD220000)00            mov byte [ball_caught], 0
  2832 0000139C 48C705(EF140000)FF-         mov qword [ball_direction_x], -1   ; Izquierda
  2832 000013A4 FFFFFF             
  2833 000013A7 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Arriba
  2833 000013AF FFFFFF             
  2834 000013B2 EB4E                        jmp .release_complete
  2835                                  
  2836                                  .check_ball2_left:
  2837 000013B4 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2838 000013BB 751F                        jne .check_ball3_left
  2839 000013BD C605(FE220000)00            mov byte [ball_caught_2], 0
  2840 000013C4 48C705(11150000)FF-         mov qword [ball2_direction_x], -1
  2840 000013CC FFFFFF             
  2841 000013CF 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  2841 000013D7 FFFFFF             
  2842 000013DA EB26                        jmp .release_complete
  2843                                  
  2844                                  .check_ball3_left:
  2845 000013DC 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2846 000013E3 751D                        jne .release_complete
  2847 000013E5 C605(FF220000)00            mov byte [ball_caught_3], 0
  2848 000013EC 48C705(33150000)FF-         mov qword [ball3_direction_x], -1
  2848 000013F4 FFFFFF             
  2849 000013F7 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  2849 000013FF FFFFFF             
  2850                                  
  2851                                  .release_complete:
  2852                                      ; Si era el catch inicial, desactivarlo
  2853 00001402 803D(FB220000)01            cmp byte [initial_catch_active], 1
  2854 00001409 750E                        jne .finish
  2855 0000140B C605(FB220000)00            mov byte [initial_catch_active], 0
  2856 00001412 C605(FC220000)00            mov byte [catch_power_active], 0  ; Desactivar poder de catch después de la 1ra vez
  2857                                  
  2858                                  .finish:
  2859 00001419 C605(08230000)00            mov byte [last_key], 0  ; Limpiar la tecla
  2860                                  .no_catch_power:
  2861 00001420 5D                          pop rbp
  2862 00001421 C3                          ret
  2863                                  
  2864                                  
  2865                                  
  2866                                  display_level_number:
  2867 00001422 55                          push rbp
  2868 00001423 4889E5                      mov rbp, rsp
  2869                                      
  2870                                      ; Limpiar la pantalla primero
  2871                                      print clear, clear_length
    82 00001426 B801000000          <1>  mov eax, sys_write
    83 0000142B BF01000000          <1>  mov edi, 1
    84 00001430 48BE-               <1>  mov rsi, %1
    84 00001432 [1000000000000000]  <1>
    85 0000143A BA07000000          <1>  mov edx, %2
    86 0000143F 0F05                <1>  syscall
  2872                                      
  2873                                      ; Calcular la posición central para el mensaje
  2874                                      ; Para el mensaje "NIVEL X", necesitamos centrar 7 caracteres
  2875 00001441 B850000000                  mov rax, column_cells
  2876 00001446 4883E807                    sub rax, 7                  ; longitud de "NIVEL X"
  2877 0000144A 48D1E8                      shr rax, 1                  ; dividir por 2 para centrar
  2878                                      
  2879                                      ; Calcular la fila central
  2880 0000144D BB20000000                  mov rbx, row_cells
  2881 00001452 48D1EB                      shr rbx, 1                  ; dividir por 2 para obtener la fila central
  2882                                      
  2883                                      ; Calcular el offset en el buffer
  2884 00001455 B952000000                  mov rcx, column_cells + 2   ; ancho total de una línea incluyendo newline
  2885 0000145A 48F7E3                      mul rbx                     ; multiplicar por la fila central
  2886 0000145D 4801D8                      add rax, rbx                ; añadir el offset horizontal
  2887                                      
  2888                                      ; Escribir "NIVEL " en la posición calculada
  2889 00001460 488DB8[400A0000]            lea rdi, [board + rax]
  2890 00001467 48BE-                       mov rsi, level_msg
  2890 00001469 [A414000000000000] 
  2891 00001471 B906000000                  mov rcx, level_msg_len
  2892 00001476 F3A4                        rep movsb
  2893                                      
  2894                                      ; Escribir el número del nivel
  2895 00001478 8A05(79150000)              mov al, [current_level]
  2896 0000147E 0430                        add al, '0'                 ; convertir a ASCII
  2897 00001480 8807                        mov [rdi], al
  2898                                      
  2899                                      ; Mostrar el board con el mensaje
  2900                                      print board, board_size
    82 00001482 B801000000          <1>  mov eax, sys_write
    83 00001487 BF01000000          <1>  mov edi, 1
    84 0000148C 48BE-               <1>  mov rsi, %1
    84 0000148E [400A000000000000]  <1>
    85 00001496 BA400A0000          <1>  mov edx, %2
    86 0000149B 0F05                <1>  syscall
  2901                                      
  2902                                      ; Esperar un segundo
  2903 0000149D B823000000                  mov rax, sys_nanosleep
  2904 000014A2 48BF-                       mov rdi, level_display_time
  2904 000014A4 [AF14000000000000] 
  2905 000014AC 4831F6                      xor rsi, rsi
  2906 000014AF 0F05                        syscall
  2907                                      
  2908 000014B1 5D                          pop rbp
  2909 000014B2 C3                          ret
  2910                                  
  2911                                  ; Función para inicializar un tablero vacío
  2912                                  init_empty_board:
  2913 000014B3 56                          push rsi
  2914 000014B4 57                          push rdi
  2915 000014B5 51                          push rcx
  2916 000014B6 50                          push rax
  2917                                  
  2918 000014B7 488D35(00000000)            lea rsi, [board_template]   ; Copiar la plantilla del tablero
  2919 000014BE 488D3D(400A0000)            lea rdi, [board]            ; Destino: el tablero actual
  2920 000014C5 B9400A0000                  mov rcx, board_template_size
  2921 000014CA F3A4                        rep movsb                   ; Copiar el tablero
  2922                                  
  2923 000014CC 58                          pop rax
  2924 000014CD 59                          pop rcx
  2925 000014CE 5F                          pop rdi
  2926 000014CF 5E                          pop rsi
  2927 000014D0 C3                          ret
  2928                                  
  2929                                  clear_enemies_from_board:
  2930 000014D1 55                          push rbp
  2931 000014D2 4889E5                      mov rbp, rsp
  2932 000014D5 56                          push rsi
  2933 000014D6 57                          push rdi
  2934                                  
  2935                                      ; Primero limpiar board
  2936 000014D7 B9400A0000                  mov rcx, board_size      
  2937 000014DC 488D35(400A0000)            lea rsi, [board]         
  2938                                  
  2939                                  .clear_loop:
  2940 000014E3 4883F900                    cmp rcx, 0              
  2941 000014E7 741F                        je .clear_template      ; En vez de terminar, vamos a limpiar template
  2942                                      
  2943 000014E9 8A06                        mov al, [rsi]           
  2944 000014EB 3C40                        cmp al, '@'             
  2945 000014ED 740E                        je .make_space
  2946 000014EF 3C23                        cmp al, '#'             
  2947 000014F1 740A                        je .make_space
  2948 000014F3 3C24                        cmp al, '$'             
  2949 000014F5 7406                        je .make_space
  2950 000014F7 3C26                        cmp al, '&'             
  2951 000014F9 7402                        je .make_space
  2952                                      
  2953 000014FB EB03                        jmp .next               
  2954                                  
  2955                                  .make_space:
  2956 000014FD C60620                      mov byte [rsi], ' '     
  2957                                  
  2958                                  .next:
  2959 00001500 48FFC6                      inc rsi                 
  2960 00001503 48FFC9                      dec rcx                
  2961 00001506 EBDB                        jmp .clear_loop        
  2962                                  
  2963                                  .clear_template:
  2964                                      ; Ahora limpiar board_template
  2965 00001508 B9400A0000                  mov rcx, board_template_size
  2966 0000150D 488D35(00000000)            lea rsi, [board_template]
  2967                                  
  2968                                  .template_loop:
  2969 00001514 4883F900                    cmp rcx, 0
  2970 00001518 741F                        je .end
  2971                                      
  2972 0000151A 8A06                        mov al, [rsi]
  2973 0000151C 3C40                        cmp al, '@'
  2974 0000151E 740E                        je .make_space_template
  2975 00001520 3C23                        cmp al, '#'
  2976 00001522 740A                        je .make_space_template
  2977 00001524 3C24                        cmp al, '$'
  2978 00001526 7406                        je .make_space_template
  2979 00001528 3C26                        cmp al, '&'
  2980 0000152A 7402                        je .make_space_template
  2981                                      
  2982 0000152C EB03                        jmp .next_template
  2983                                  
  2984                                  .make_space_template:
  2985 0000152E C60620                      mov byte [rsi], ' '
  2986                                  
  2987                                  .next_template:
  2988 00001531 48FFC6                      inc rsi
  2989 00001534 48FFC9                      dec rcx
  2990 00001537 EBDB                        jmp .template_loop
  2991                                  
  2992                                  .end:
  2993 00001539 5F                          pop rdi
  2994 0000153A 5E                          pop rsi
  2995 0000153B 5D                          pop rbp
  2996 0000153C C3                          ret
  2997                                  
  2998                                  
  2999                                  
  3000                                  
  3001                                  init_level:
  3002 0000153D E88FFFFFFF                  call clear_enemies_from_board
  3003 00001542 C605(22150000)00            mov byte [ball2_active], 0
  3004 00001549 C605(44150000)00            mov byte [ball3_active], 0
  3005 00001550 C605(09230000)00            mov byte [laser_power_active], 0
  3006 00001557 E898F2FFFF                  call clear_lasers
  3007 0000155C 488B05(CF140000)            mov rax, [default_pallet_size]
  3008 00001563 488905(C7140000)            mov [pallet_size], rax
  3009 0000156A 48C705(E3220000)07-         mov qword [ball_speed], 7    ; Restaurar velocidad normal
  3009 00001572 000000             
  3010                                  
  3011                                      ; 1) Copiamos board_template en board para que quede "virgen"
  3012                                          ; Reiniciar letras activas
  3013 00001575 488D3D(3C210000)            lea rdi, [letters_map]
  3014 0000157C B990010000                  mov rcx, 100 * 4             ; Cada letra ocupa 4 bytes, limpiar 100 letras
  3015 00001581 4831C0                      xor rax, rax
  3016 00001584 F3AA                        rep stosb                    ; Llenar con ceros
  3017                                      
  3018                                      ; Inicializar dirección de la bola (derecha y arriba)
  3019 00001586 48C705(EF140000)01-         mov qword [ball_direction_x], 1    ; Dirección hacia la derecha (1 = derecha, -1 = izquierda)
  3019 0000158E 000000             
  3020 00001591 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Dirección hacia arriba (-1 = arriba, 1 = abajo)
  3020 00001599 FFFFFF             
  3021                                  
  3022                                      ; En init_level, después de inicializar las direcciones
  3023 0000159C C605(FC220000)01            mov byte [catch_power_active], 1    ; Activar el poder catch
  3024 000015A3 C605(FD220000)01            mov byte [ball_caught], 1           ; Marcar la bola como atrapada
  3025 000015AA C605(FB220000)01            mov byte [initial_catch_active], 1  ; Marcar que es el catch inicial
  3026                                  
  3027                                      ; Calcular y guardar el offset inicial de la bola respecto a la paleta
  3028 000015B1 488B05(DF140000)            mov rax, [ball_x_pos]              ; Posición X actual de la bola
  3029 000015B8 482B05(BF140000)            sub rax, [pallet_position]         ; Restar la posición de la paleta
  3030 000015BF 4805[400A0000]              add rax, board                     ; Ajustar por el offset del tablero
  3031 000015C5 488905(00230000)            mov [ball_catch_offset], rax       ; Guardar el offset
  3032                                  
  3033                                  
  3034                                  
  3035                                      ; Reiniciar contador de letras activas
  3036 000015CC 4831C0                      xor rax, rax
  3037 000015CF 8805(CC220000)              mov [letters_count], al
  3038                                  
  3039                                      ; Reiniciar última letra capturada
  3040 000015D5 C605(CD220000)20            mov byte [last_letter], ' '
  3041 000015DC C605(46200000)00            mov byte [destroyed_blocks], 0 
  3042 000015E3 E8CBFEFFFF                  call init_empty_board
  3043 000015E8 E835FEFFFF                  call display_level_number
  3044                                  
  3045 000015ED 56                          push rsi
  3046 000015EE 57                          push rdi
  3047 000015EF 51                          push rcx
  3048 000015F0 50                          push rax
  3049                                  
  3050 000015F1 488D35(00000000)            lea rsi, [board_template]
  3051 000015F8 488D3D(400A0000)            lea rdi, [board]
  3052 000015FF B9400A0000                  mov rcx, board_template_size
  3053 00001604 F3A4                        rep movsb                 ; Copiamos la plantilla a board
  3054                                  
  3055 00001606 58                          pop rax
  3056 00001607 59                          pop rcx
  3057 00001608 5F                          pop rdi
  3058 00001609 5E                          pop rsi
  3059                                  
  3060 0000160A B90A000000                  mov rcx, 10
  3061 0000160F 4831C0                      xor rax, rax
  3062 00001612 488D3D(E9200000)            lea rdi, [enemy_spawns_triggered]
  3063 00001619 F3AA                        rep stosb   
  3064 0000161B E8D4050000                  call init_enemies   
  3065                                  
  3066                                      ; Verificar el nivel actual y cargar los bloques correspondientes
  3067 00001620 803D(79150000)01            cmp byte [current_level], 1
  3068 00001627 7431                        je .level1
  3069 00001629 803D(79150000)02            cmp byte [current_level], 2
  3070 00001630 7454                        je .level2
  3071 00001632 803D(79150000)03            cmp byte [current_level], 3
  3072 00001639 7477                        je .level3
  3073 0000163B 803D(79150000)04            cmp byte [current_level], 4
  3074 00001642 0F8492000000                je .level4
  3075 00001648 803D(79150000)05            cmp byte [current_level], 5
  3076 0000164F 0F84B0000000                je .level5
  3077 00001655 E9D3000000                  jmp .done
  3078                                  
  3079                                  
  3080                                  
  3081                                      .level1:
  3082 0000165A C605(7A150000)4E                mov byte [blocks_remaining], level1_blocks_count
  3083 00001661 4831C9                          xor rcx, rcx             
  3084                                          .init_loop1:
  3085 00001664 4883F94E                            cmp rcx, level1_blocks_count
  3086 00001668 0F8DBF000000                        jge .done
  3087 0000166E 4889C8                              mov rax, rcx         
  3088 00001671 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3089 00001675 8A90[7E150000]                      mov dl, byte [level1_blocks + rax + 3]  
  3090 0000167B 8891[761F0000]                      mov byte [block_states + rcx], dl
  3091 00001681 48FFC1                              inc rcx
  3092 00001684 EBDE                                jmp .init_loop1
  3093                                  
  3094                                      .level2:
  3095 00001686 C605(7A150000)5B                mov byte [blocks_remaining], level2_blocks_count
  3096 0000168D 4831C9                          xor rcx, rcx             
  3097                                          .init_loop2:
  3098 00001690 4883F95B                            cmp rcx, level2_blocks_count
  3099 00001694 0F8D93000000                        jge .done
  3100 0000169A 4889C8                              mov rax, rcx         
  3101 0000169D 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3102 000016A1 8A90[04170000]                      mov dl, byte [level2_blocks + rax + 3]  
  3103 000016A7 8891[761F0000]                      mov byte [block_states + rcx], dl
  3104 000016AD 48FFC1                              inc rcx
  3105 000016B0 EBDE                                jmp .init_loop2
  3106                                      .level3:
  3107 000016B2 C605(7A150000)40                mov byte [blocks_remaining], 64
  3108 000016B9 4831C9                          xor rcx, rcx             
  3109                                          .init_loop3:
  3110 000016BC 4883F968                            cmp rcx, level3_blocks_count
  3111 000016C0 7D6B                                jge .done
  3112 000016C2 4889C8                              mov rax, rcx         
  3113 000016C5 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3114 000016C9 8A90[CB180000]                      mov dl, byte [level3_blocks + rax + 3]  
  3115 000016CF 8891[761F0000]                      mov byte [block_states + rcx], dl
  3116 000016D5 48FFC1                              inc rcx
  3117 000016D8 EBE2                                jmp .init_loop3
  3118                                  
  3119                                      .level4:
  3120 000016DA C605(7A150000)8C                mov byte [blocks_remaining], level4_blocks_count
  3121 000016E1 4831C9                          xor rcx, rcx             
  3122                                          .init_loop4:
  3123 000016E4 4881F98C000000                      cmp rcx, level4_blocks_count
  3124 000016EB 7D40                                jge .done
  3125 000016ED 4889C8                              mov rax, rcx         
  3126 000016F0 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3127 000016F4 8A90[D31A0000]                      mov dl, byte [level4_blocks + rax + 3]  
  3128 000016FA 8891[761F0000]                      mov byte [block_states + rcx], dl
  3129 00001700 48FFC1                              inc rcx
  3130 00001703 EBDF                                jmp .init_loop4
  3131                                  
  3132                                      .level5:
  3133 00001705 C605(7A150000)62                mov byte [blocks_remaining], level5_blocks_count
  3134 0000170C 4831C9                          xor rcx, rcx             
  3135                                          .init_loop5:
  3136 0000170F 4883F962                            cmp rcx, level5_blocks_count
  3137 00001713 7D18                                jge .done
  3138 00001715 4889C8                              mov rax, rcx         
  3139 00001718 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3140 0000171C 8A90[8F1D0000]                      mov dl, byte [level5_blocks + rax + 3]  
  3141 00001722 8891[761F0000]                      mov byte [block_states + rcx], dl
  3142 00001728 48FFC1                              inc rcx
  3143 0000172B EBE2                                jmp .init_loop5
  3144                                      .done:
  3145 0000172D C3                              ret
  3146                                  
  3147                                  
  3148                                  ; Función para verificar y manejar la transición de nivel
  3149                                  check_level_complete:
  3150                                      ; Verificar si quedan bloques
  3151 0000172E 803D(7A150000)00            cmp byte [blocks_remaining], 0
  3152 00001735 7556                        jne .not_complete
  3153                                      
  3154                                      ; Incrementar el nivel
  3155 00001737 FE05(79150000)              inc byte [current_level]
  3156                                      
  3157                                      ; Verificar si hemos completado todos los niveles
  3158 0000173D 803D(79150000)06            cmp byte [current_level], 6
  3159 00001744 7448                        je game_win
  3160                                      
  3161                                  
  3162 00001746 E886FDFFFF                  call clear_enemies_from_board
  3163                                      ; Primero establecer las posiciones seguras
  3164 0000174B 48C705(BF140000)-           mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  3164 00001752 [B0130000]         
  3165 00001756 48C705(DF140000)28-         mov qword [ball_x_pos], 40
  3165 0000175E 000000             
  3166 00001761 48C705(E7140000)1C-         mov qword [ball_y_pos], 28
  3166 00001769 000000             
  3167 0000176C C605(FF140000)00            mov byte [ball_moving], 0
  3168                                      
  3169                                      ; Asegurar que la bola esté en un estado seguro
  3170 00001773 C605(FC220000)01            mov byte [catch_power_active], 1
  3171 0000177A C605(FD220000)01            mov byte [ball_caught], 1
  3172 00001781 C605(FB220000)01            mov byte [initial_catch_active], 1
  3173                                      
  3174                                      ; Reinicializar el juego para el siguiente nivel
  3175 00001788 E8B0FDFFFF                  call init_level
  3176                                      
  3177                                  .not_complete:
  3178 0000178D C3                          ret
  3179                                  
  3180                                      ; Nueva función para manejar la victoria del juego
  3181                                  game_win:
  3182                                      ; Limpiar la pantalla primero
  3183                                      print clear, clear_length
    82 0000178E B801000000          <1>  mov eax, sys_write
    83 00001793 BF01000000          <1>  mov edi, 1
    84 00001798 48BE-               <1>  mov rsi, %1
    84 0000179A [1000000000000000]  <1>
    85 000017A2 BA07000000          <1>  mov edx, %2
    86 000017A7 0F05                <1>  syscall
  3184                                      
  3185                                      ; Mensaje de victoria
  3186 000017A9 488B05(3E200000)            mov rax, [current_score]    ; Obtener el puntaje final
  3187 000017B0 48BF-                       mov rdi, number_buffer      ; Convertir a string
  3187 000017B2 [4720000000000000] 
  3188 000017BA E8B4010000                  call number_to_string
  3189                                      
  3190                                      ; Definir mensaje de victoria
  3191                                      section .data
  3192 0000246F C2A146656C69636964-             win_msg: db "¡Felicidades! ¡Has ganado!", 0xA, 0xD
  3192 00002478 616465732120C2A148-
  3192 00002481 61732067616E61646F-
  3192 0000248A 210A0D             
  3193                                          win_msg_len: equ $ - win_msg
  3194 0000248D 50756E74616A652066-             score_msg: db "Puntaje final: "
  3194 00002496 696E616C3A20       
  3195                                          score_msg_len: equ $ - score_msg
  3196                                      section .text
  3197                                      
  3198                                      ; Imprimir mensajes
  3199                                      print win_msg, win_msg_len
    82 000017BF B801000000          <1>  mov eax, sys_write
    83 000017C4 BF01000000          <1>  mov edi, 1
    84 000017C9 48BE-               <1>  mov rsi, %1
    84 000017CB [6F24000000000000]  <1>
    85 000017D3 BA1E000000          <1>  mov edx, %2
    86 000017D8 0F05                <1>  syscall
  3200                                      print score_msg, score_msg_len
    82 000017DA B801000000          <1>  mov eax, sys_write
    83 000017DF BF01000000          <1>  mov edi, 1
    84 000017E4 48BE-               <1>  mov rsi, %1
    84 000017E6 [8D24000000000000]  <1>
    85 000017EE BA0F000000          <1>  mov edx, %2
    86 000017F3 0F05                <1>  syscall
  3201                                      print number_buffer, 20
    82 000017F5 B801000000          <1>  mov eax, sys_write
    83 000017FA BF01000000          <1>  mov edi, 1
    84 000017FF 48BE-               <1>  mov rsi, %1
    84 00001801 [4720000000000000]  <1>
    85 00001809 BA14000000          <1>  mov edx, %2
    86 0000180E 0F05                <1>  syscall
  3202                                      
  3203                                      ; Esperar un momento antes de salir
  3204 00001810 48C705E5E7FFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  3204 00001819 0000               
  3205 0000181B 48C705E2E7FFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  3205 00001824 0000               
  3206                                      sleeptime
    98 00001826 B823000000          <1>  mov eax, sys_nanosleep
    99 0000182B 48BF-               <1>  mov rdi, timespec
    99 0000182D [0000000000000000]  <1>
   100 00001835 31F6                <1>  xor esi, esi
   101 00001837 0F05                <1>  syscall
  3207                                      
  3208 00001839 E9B30B0000                  jmp exit
  3209                                  
  3210                                  ; Función para imprimir los bloques
  3211                                  ; Función modificada para imprimir bloques
  3212                                  
  3213                                  ; Primero, agreguemos una función para obtener el puntero a los bloques del nivel actual
  3214                                  get_current_level_blocks:
  3215 0000183E 803D(79150000)01            cmp byte [current_level], 1
  3216 00001845 7428                        je .level1
  3217 00001847 803D(79150000)02            cmp byte [current_level], 2
  3218 0000184E 7427                        je .level2
  3219 00001850 803D(79150000)03            cmp byte [current_level], 3
  3220 00001857 7426                        je .level3
  3221 00001859 803D(79150000)04            cmp byte [current_level], 4
  3222 00001860 7425                        je .level4
  3223 00001862 803D(79150000)05            cmp byte [current_level], 5
  3224 00001869 7424                        je .level5
  3225                                      ; Si llegamos aquí, hay un error en el nivel
  3226 0000186B 4831C0                      xor rax, rax
  3227 0000186E C3                          ret
  3228                                  
  3229                                      .level1:
  3230 0000186F 488D05(7B150000)                lea rax, [level1_blocks]
  3231 00001876 C3                              ret
  3232                                      .level2:
  3233 00001877 488D05(01170000)                lea rax, [level2_blocks]
  3234 0000187E C3                              ret
  3235                                      .level3:
  3236 0000187F 488D05(C8180000)                lea rax, [level3_blocks]
  3237 00001886 C3                              ret
  3238                                      .level4:
  3239 00001887 488D05(D01A0000)                lea rax, [level4_blocks]
  3240 0000188E C3                              ret
  3241                                      .level5:
  3242 0000188F 488D05(8C1D0000)                lea rax, [level5_blocks]
  3243 00001896 C3                              ret
  3244                                  ; Función para obtener la cantidad de bloques del nivel actual
  3245                                  get_current_level_count:
  3246 00001897 803D(79150000)01            cmp byte [current_level], 1
  3247 0000189E 7428                        je .level1
  3248 000018A0 803D(79150000)02            cmp byte [current_level], 2
  3249 000018A7 7425                        je .level2
  3250 000018A9 803D(79150000)03            cmp byte [current_level], 3
  3251 000018B0 7422                        je .level3
  3252 000018B2 803D(79150000)04            cmp byte [current_level], 4
  3253 000018B9 741F                        je .level4
  3254 000018BB 803D(79150000)05            cmp byte [current_level], 5
  3255 000018C2 741C                        je .level5
  3256                                      ; Si llegamos aquí, hay un error en el nivel
  3257 000018C4 4831C0                      xor rax, rax
  3258 000018C7 C3                          ret
  3259                                  
  3260                                      .level1:
  3261 000018C8 B84E000000                      mov rax, level1_blocks_count
  3262 000018CD C3                              ret
  3263                                      .level2:
  3264 000018CE B85B000000                      mov rax, level2_blocks_count
  3265 000018D3 C3                              ret
  3266                                      .level3:
  3267 000018D4 B868000000                      mov rax, level3_blocks_count
  3268 000018D9 C3                              ret
  3269                                      .level4:
  3270 000018DA B88C000000                      mov rax, level4_blocks_count
  3271 000018DF C3                              ret
  3272                                      .level5:
  3273 000018E0 B862000000                      mov rax, level5_blocks_count
  3274 000018E5 C3                              ret
  3275                                  
  3276                                  
  3277                                  print_blocks:
  3278 000018E6 55                          push rbp
  3279 000018E7 4889E5                      mov rbp, rsp
  3280                                      
  3281                                      ; Obtener puntero a los bloques del nivel actual
  3282 000018EA E84FFFFFFF                  call get_current_level_blocks
  3283 000018EF 4989C5                      mov r13, rax                  ; Guardar puntero a los bloques en r13
  3284                                      
  3285                                      ; Obtener cantidad de bloques del nivel actual
  3286 000018F2 E8A0FFFFFF                  call get_current_level_count
  3287 000018F7 4989C6                      mov r14, rax                  ; Guardar cantidad de bloques en r14
  3288                                      
  3289 000018FA 4D31E4                      xor r12, r12                  ; Índice del bloque actual
  3290                                      
  3291                                      .print_loop:
  3292 000018FD 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
  3293 00001900 7D6F                            jge .end
  3294                                          
  3295                                          ; Verificar si el bloque está activo
  3296 00001902 490FB68424-                     movzx rax, byte [block_states + r12]
  3296 00001907 [761F0000]         
  3297 0000190B 4885C0                          test rax, rax
  3298 0000190E 745C                            jz .next_block
  3299                                          
  3300                                          ; Obtener posición y tipo del bloque usando r13
  3301 00001910 4C89E0                          mov rax, r12
  3302 00001913 486BC005                        imul rax, 5
  3303 00001917 4C01E8                          add rax, r13
  3304 0000191A 448A00                          mov r8b, [rax]        ; X position
  3305 0000191D 448A4801                        mov r9b, [rax + 1]    ; Y position
  3306 00001921 448A5002                        mov r10b, [rax + 2]   ; Tipo de bloque
  3307                                  
  3308                                          ; El resto de la lógica de impresión permanece igual
  3309 00001925 4D0FB6C0                        movzx r8, r8b
  3310 00001929 4D0FB6C9                        movzx r9, r9b
  3311 0000192D 4981C0[400A0000]                add r8, board
  3312 00001934 B852000000                      mov rax, column_cells + 2
  3313 00001939 49F7E1                          mul r9
  3314 0000193C 4901C0                          add r8, rax
  3315                                          
  3316 0000193F B906000000                      mov rcx, block_length
  3317 00001944 48BE-                           mov rsi, block_type_1
  3317 00001946 [5515000000000000] 
  3318 0000194E 490FB6C2                        movzx rax, r10b
  3319 00001952 48FFC8                          dec rax
  3320 00001955 486BC006                        imul rax, block_length
  3321 00001959 4801C6                          add rsi, rax
  3322                                          
  3323                                      .print_block_chars:
  3324 0000195C 8A06                            mov al, [rsi]
  3325 0000195E 418800                          mov [r8], al
  3326 00001961 48FFC6                          inc rsi
  3327 00001964 49FFC0                          inc r8
  3328 00001967 48FFC9                          dec rcx
  3329 0000196A 75F0                            jnz .print_block_chars
  3330                                          
  3331                                      .next_block:
  3332 0000196C 49FFC4                          inc r12
  3333 0000196F EB8C                            jmp .print_loop
  3334                                          
  3335                                      .end:
  3336 00001971 5D                              pop rbp
  3337 00001972 C3                              ret
  3338                                  
  3339                                  ; Función para convertir número a string
  3340                                  ; Input: RAX = número a convertir
  3341                                  ; RDI = buffer donde escribir el string
  3342                                  number_to_string:
  3343 00001973 53                          push rbx
  3344 00001974 52                          push rdx
  3345 00001975 56                          push rsi
  3346 00001976 BB0A000000                  mov rbx, 10          ; Divisor
  3347 0000197B B900000000                  mov rcx, 0          ; Contador de dígitos
  3348                                      
  3349                                      ; Si el número es 0, manejarlo especialmente
  3350 00001980 4885C0                      test rax, rax
  3351 00001983 7509                        jnz .convert_loop
  3352 00001985 C60730                      mov byte [rdi], '0'
  3353 00001988 C6470100                    mov byte [rdi + 1], 0
  3354 0000198C EB20                        jmp .end
  3355                                      
  3356                                      .convert_loop:
  3357 0000198E 4831D2                          xor rdx, rdx    ; Limpiar RDX para la división
  3358 00001991 48F7F3                          div rbx         ; RAX/10, cociente en RAX, residuo en RDX
  3359 00001994 80C230                          add dl, '0'     ; Convertir a ASCII
  3360 00001997 52                              push rdx        ; Guardar el dígito
  3361 00001998 48FFC1                          inc rcx         ; Incrementar contador
  3362 0000199B 4885C0                          test rax, rax   ; Verificar si quedan más dígitos
  3363 0000199E 75EE                            jnz .convert_loop
  3364                                          
  3365                                      .write_loop:
  3366 000019A0 5A                              pop rdx         ; Obtener dígito
  3367 000019A1 8817                            mov [rdi], dl   ; Escribir al buffer
  3368 000019A3 48FFC7                          inc rdi         ; Siguiente posición
  3369 000019A6 48FFC9                          dec rcx         ; Decrementar contador
  3370 000019A9 75F5                            jnz .write_loop
  3371                                          
  3372 000019AB C60700                      mov byte [rdi], 0   ; Null terminator
  3373                                      
  3374                                      .end:
  3375 000019AE 5E                          pop rsi
  3376 000019AF 5A                          pop rdx
  3377 000019B0 5B                          pop rbx
  3378 000019B1 C3                          ret
  3379                                  
  3380                                  ; Función para imprimir los labels
  3381                                  print_labels:
  3382 000019B2 55                          push rbp
  3383 000019B3 4889E5                      mov rbp, rsp
  3384                                  
  3385                                      ; Crear buffer temporal
  3386 000019B6 4883EC20                    sub rsp, 32
  3387                                  
  3388                                      ; Copiar labels a buffer temporal
  3389 000019BA 4889E7                      mov rdi, rsp
  3390 000019BD 488D35(F3200000)            lea rsi, [score_label]
  3391 000019C4 B917000000                  mov rcx, score_label_len
  3392 000019C9 F3A4                        rep movsb
  3393                                  
  3394                                      ; Convertir score a string
  3395 000019CB 488B05(3E200000)            mov rax, [current_score]
  3396 000019D2 48BF-                       mov rdi, number_buffer
  3396 000019D4 [4720000000000000] 
  3397 000019DC E892FFFFFF                  call number_to_string
  3398                                  
  3399                                      ; Calcular longitud del número
  3400 000019E1 B900000000                  mov rcx, 0
  3401 000019E6 48BF-                       mov rdi, number_buffer
  3401 000019E8 [4720000000000000] 
  3402                                      .count_loop:
  3403 000019F0 803C0F00                        cmp byte [rdi + rcx], 0
  3404 000019F4 7405                            je .count_done
  3405 000019F6 48FFC1                          inc rcx
  3406 000019F9 EBF5                            jmp .count_loop
  3407                                      .count_done:
  3408                                  
  3409                                      ; Insertar el número en la posición correcta, alineado a la derecha
  3410 000019FB 4889E7                      mov rdi, rsp
  3411 000019FE 4883C70A                    add rdi, score_pos           ; Moverse a la posición del número
  3412 00001A02 BE0A000000                  mov rsi, 10                  ; Espacio reservado para el número
  3413 00001A07 4829CE                      sub rsi, rcx                 ; Calcular padding necesario
  3414                                      .pad_loop:
  3415 00001A0A 4885F6                          test rsi, rsi
  3416 00001A0D 740B                            jz .pad_done
  3417 00001A0F C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  3418 00001A12 48FFC7                          inc rdi
  3419 00001A15 48FFCE                          dec rsi
  3420 00001A18 EBF0                            jmp .pad_loop
  3421                                      .pad_done:
  3422                                  
  3423                                      ; Copiar el número
  3424 00001A1A 48BE-                       mov rsi, number_buffer
  3424 00001A1C [4720000000000000] 
  3425 00001A24 F3A4                        rep movsb
  3426                                  
  3427                                      ; Imprimir el buffer completo
  3428                                      print rsp, score_label_len
    82 00001A26 B801000000          <1>  mov eax, sys_write
    83 00001A2B BF01000000          <1>  mov edi, 1
    84 00001A30 4889E6              <1>  mov rsi, %1
    85 00001A33 BA17000000          <1>  mov edx, %2
    86 00001A38 0F05                <1>  syscall
  3429                                  
  3430                                      ; Repetir proceso para bloques destruidos
  3431 00001A3A 4889E7                      mov rdi, rsp
  3432 00001A3D 488D35(0A210000)            lea rsi, [blocks_label]
  3433 00001A44 B91B000000                  mov rcx, blocks_label_len
  3434 00001A49 F3A4                        rep movsb
  3435                                  
  3436                                      ; Verificar que el `[` esté en su posición correcta
  3437 00001A4B 4889E7                      mov rdi, rsp
  3438 00001A4E 4883C713                    add rdi, blocks_pos - 1  ; Posición exacta donde debe ir el '['
  3439 00001A52 C6075B                      mov byte [rdi], '['      ; Garantizar que el `[` esté presente
  3440                                  
  3441                                      ; Convertir bloques destruidos a string
  3442 00001A55 480FB605(46200000)          movzx rax, byte [destroyed_blocks]
  3443 00001A5D 48BF-                       mov rdi, number_buffer
  3443 00001A5F [4720000000000000] 
  3444 00001A67 E807FFFFFF                  call number_to_string
  3445                                  
  3446                                      ; Calcular longitud del número
  3447 00001A6C B900000000                  mov rcx, 0
  3448 00001A71 48BF-                       mov rdi, number_buffer
  3448 00001A73 [4720000000000000] 
  3449                                      .count_loop2:
  3450 00001A7B 803C0F00                        cmp byte [rdi + rcx], 0
  3451 00001A7F 7405                            je .count_done2
  3452 00001A81 48FFC1                          inc rcx
  3453 00001A84 EBF5                            jmp .count_loop2
  3454                                      .count_done2:
  3455                                  
  3456                                      ; Insertar el número en la posición correcta, alineado a la derecha
  3457 00001A86 4889E7                      mov rdi, rsp
  3458 00001A89 4883C714                    add rdi, blocks_pos         ; Moverse a la posición del número
  3459 00001A8D BE03000000                  mov rsi, 3                  ; Espacio reservado para el número
  3460 00001A92 4829CE                      sub rsi, rcx                ; Calcular padding necesario
  3461                                      .pad_loop2:
  3462 00001A95 4885F6                          test rsi, rsi
  3463 00001A98 740B                            jz .pad_done2
  3464 00001A9A C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  3465 00001A9D 48FFC7                          inc rdi
  3466 00001AA0 48FFCE                          dec rsi
  3467 00001AA3 EBF0                            jmp .pad_loop2
  3468                                      .pad_done2:
  3469                                  
  3470                                      ; Copiar el número
  3471 00001AA5 48BE-                       mov rsi, number_buffer
  3471 00001AA7 [4720000000000000] 
  3472 00001AAF F3A4                        rep movsb
  3473                                  
  3474                                      ; Imprimir el buffer completo
  3475                                      print rsp, blocks_label_len
    82 00001AB1 B801000000          <1>  mov eax, sys_write
    83 00001AB6 BF01000000          <1>  mov edi, 1
    84 00001ABB 4889E6              <1>  mov rsi, %1
    85 00001ABE BA1B000000          <1>  mov edx, %2
    86 00001AC3 0F05                <1>  syscall
  3476                                  
  3477                                      ; Restaurar stack
  3478 00001AC5 4883C420                    add rsp, 32
  3479 00001AC9 5D                          pop rbp
  3480 00001ACA C3                          ret
  3481                                  
  3482                                  
  3483                                  
  3484                                  check_block_collision:
  3485 00001ACB 55                          push rbp
  3486 00001ACC 4889E5                      mov rbp, rsp
  3487                                  
  3488                                      ; Almacenar el carácter en la posición r10 (pos. de la bola en board[])
  3489 00001ACF 418A02                      mov al, [r10]
  3490                                  
  3491                                      ; Verificar si el carácter es un bloque
  3492 00001AD2 3C55                        cmp al, 'U'  
  3493 00001AD4 7419                        je .possible
  3494 00001AD6 3C4F                        cmp al, 'O'  
  3495 00001AD8 7415                        je .possible
  3496 00001ADA 3C44                        cmp al, 'D'  
  3497 00001ADC 7411                        je .possible
  3498 00001ADE 3C4C                        cmp al, 'L'  
  3499 00001AE0 740D                        je .possible
  3500 00001AE2 3C56                        cmp al, 'V'  
  3501 00001AE4 7409                        je .possible
  3502 00001AE6 3C38                        cmp al, '8'  
  3503 00001AE8 7405                        je .possible
  3504                                  
  3505                                      ; No es bloque, salir
  3506 00001AEA 4831C0                      xor rax, rax
  3507 00001AED 5D                          pop rbp
  3508 00001AEE C3                          ret
  3509                                  
  3510                                  .possible:
  3511 00001AEF 53                          push rbx
  3512 00001AF0 57                          push rdi
  3513 00001AF1 56                          push rsi
  3514 00001AF2 4154                        push r12
  3515 00001AF4 4155                        push r13
  3516 00001AF6 4156                        push r14
  3517 00001AF8 4157                        push r15
  3518                                  
  3519                                      ; 1) Obtener base de los bloques del nivel actual
  3520 00001AFA E83FFDFFFF                  call get_current_level_blocks
  3521 00001AFF 4989C5                      mov r13, rax  ; (r13) = base de levelX_blocks
  3522                                  
  3523                                      ; 2) Obtener la cantidad de bloques
  3524 00001B02 E890FDFFFF                  call get_current_level_count
  3525 00001B07 4989C6                      mov r14, rax
  3526                                  
  3527 00001B0A 4D31E4                      xor r12, r12  ; Índice del bloque actual
  3528                                  
  3529                                  .find_block_loop:
  3530 00001B0D 4D39F4                      cmp r12, r14
  3531 00001B10 0F8DCE000000                jge .no_block_found  ; Se acabaron los bloques
  3532                                  
  3533                                      ; Calcular puntero base del bloque actual en levelX_blocks
  3534 00001B16 4C89E0                      mov rax, r12
  3535 00001B19 486BC005                    imul rax, 5            ; (x, y, tipo, durabilidad_inicial, letra)
  3536 00001B1D 4C01E8                      add rax, r13
  3537 00001B20 4989C7                      mov r15, rax           ; r15 apunta a los datos del bloque actual
  3538                                  
  3539                                      ; --- Aquí la diferencia: la durabilidad no la leemos de [r15+3], sino de block_states[r12]
  3540 00001B23 490FB69C24-                 movzx rbx, byte [block_states + r12]  ; Durabilidad "viva" en block_states
  3540 00001B28 [761F0000]         
  3541 00001B2C 4885DB                      test rbx, rbx
  3542 00001B2F 0F84A7000000                jz .next_block  ; si durabilidad=0 => bloque destruido => ignorar
  3543                                  
  3544                                      ; Obtener coordenadas
  3545 00001B35 418A17                      mov dl, [r15]         ; x
  3546 00001B38 418A4F01                    mov cl, [r15 + 1]     ; y
  3547                                  
  3548                                      ; Calcular posición en el board
  3549 00001B3C 488D3D(400A0000)            lea rdi, [board]
  3550 00001B43 4831C0                      xor rax, rax
  3551 00001B46 B850000000                  mov rax, column_cells
  3552 00001B4B 4883C002                    add rax, 2
  3553 00001B4F 480FB6C9                    movzx rcx, cl         ; y
  3554 00001B53 480FAFC1                    imul rax, rcx
  3555 00001B57 4801C7                      add rdi, rax
  3556 00001B5A 480FB6C2                    movzx rax, dl         ; x
  3557 00001B5E 4801C7                      add rdi, rax
  3558                                  
  3559                                      ; Guardar la posición base del bloque
  3560 00001B61 57                          push rdi
  3561                                  
  3562                                      ; Verificar si la bola (r10) está dentro de [rdi .. rdi+block_length)
  3563 00001B62 4939FA                      cmp r10, rdi
  3564 00001B65 7274                        jb .skip_collision
  3565 00001B67 488D5F06                    lea rbx, [rdi + block_length]
  3566 00001B6B 4939DA                      cmp r10, rbx
  3567 00001B6E 736B                        jae .skip_collision
  3568                                  
  3569                                      ; ------- Hay colisión, reducir durabilidad en block_states
  3570 00001B70 41FE8C24[761F0000]          dec byte [block_states + r12]
  3571                                      ; Volver a cargar durabilidad
  3572 00001B78 490FB69C24-                 movzx rbx, byte [block_states + r12]
  3572 00001B7D [761F0000]         
  3573 00001B81 4885DB                      test rbx, rbx
  3574 00001B84 754D                        jnz .update_display  ; si no llegó a 0 => solo "golpeado"
  3575                                  
  3576                                      ; >>> Llegó a 0 => Bloque destruido
  3577 00001B86 5F                          pop rdi  ; recuperar puntero base del bloque en board
  3578 00001B87 B906000000                  mov rcx, block_length
  3579                                  .clear_loop:
  3580 00001B8C C60720                      mov byte [rdi], ' '
  3581 00001B8F 48FFC7                      inc rdi
  3582 00001B92 E2F8                        loop .clear_loop
  3583                                  
  3584                                      ; Dibujar letra del bloque destruido
  3585 00001B94 418A4704                    mov al, [r15 + 4]  ; Obtener la letra asociada
  3586 00001B98 4883EF06                    sub rdi, block_length
  3587 00001B9C 8807                        mov [rdi], al      ; Escribir la letra en la posición inicial
  3588                                      ; Después de escribir la letra en el tablero
  3589 00001B9E 418A4704                    mov al, [r15 + 4]      ; Obtener la letra
  3590 00001BA2 4D0FB607                    movzx r8, byte [r15]   ; Posición x del bloque
  3591 00001BA6 4D0FB64F01                  movzx r9, byte [r15 + 1] ; Posición y del bloque
  3592 00001BAB E8D4E8FFFF                  call register_letter
  3593                                      ; Actualizar contadores globales
  3594 00001BB0 FE0D(7A150000)              dec byte [blocks_remaining]
  3595 00001BB6 FE05(46200000)              inc byte [destroyed_blocks]
  3596                                  
  3597                                      ; Sumar puntos según el tipo
  3598 00001BBC 490FB64702                  movzx rax, byte [r15 + 2]  ; tipo del bloque original
  3599 00001BC1 486BC00A                    imul rax, 10
  3600 00001BC5 480105(3E200000)            add [current_score], rax
  3601                                  
  3602 00001BCC B801000000                  mov rax, 1  ; colisión con destrucción
  3603 00001BD1 EB14                        jmp .end_pop
  3604                                  
  3605                                  .update_display:
  3606                                      ; => durabilidad >0, se podría actualizar el "look" del bloque
  3607 00001BD3 B801000000                  mov rax, 1  ; colisión con "rebote"  
  3608 00001BD8 5F                          pop rdi     ; pop que quedó pendiente
  3609 00001BD9 EB0C                        jmp .end_pop
  3610                                  
  3611                                  .skip_collision:
  3612 00001BDB 5F                          pop rdi     ; si no hubo colisión, quita de la pila
  3613                                  .next_block:
  3614 00001BDC 49FFC4                      inc r12
  3615 00001BDF E929FFFFFF                  jmp .find_block_loop
  3616                                  
  3617                                  .no_block_found:
  3618 00001BE4 4831C0                      xor rax, rax  ; 0 => no hubo colisión
  3619                                  
  3620                                  .end_pop:
  3621 00001BE7 415F                        pop r15
  3622 00001BE9 415E                        pop r14
  3623 00001BEB 415D                        pop r13
  3624 00001BED 415C                        pop r12
  3625 00001BEF 5E                          pop rsi
  3626 00001BF0 5F                          pop rdi
  3627 00001BF1 5B                          pop rbx
  3628 00001BF2 5D                          pop rbp
  3629 00001BF3 C3                          ret
  3630                                  
  3631                                  
  3632                                  
  3633                                  init_enemies:
  3634 00001BF4 55                          push rbp
  3635 00001BF5 4889E5                      mov rbp, rsp
  3636                                      
  3637                                      ; Reiniciar contadores de movimiento
  3638 00001BF8 C605(89200000)00            mov byte [enemy_move_total], 0
  3639 00001BFF C605(8A200000)00            mov byte [enemy_target], 0
  3640                                      
  3641                                      ; Limpiar completamente el array de enemigos
  3642 00001C06 B91E000000                  mov rcx, 30  ; 10 enemigos * 3 bytes cada uno
  3643 00001C0B 488D3D(60200000)            lea rdi, [enemies]
  3644 00001C12 30C0                        xor al, al
  3645 00001C14 F3AA                        rep stosb    ; Llenar todo con ceros
  3646                                      
  3647                                      ; Marcar todos los spawns como no activados
  3648 00001C16 488D3D(E9200000)            lea rdi, [enemy_spawns_triggered]
  3649 00001C1D B90A000000                  mov rcx, 10
  3650 00001C22 F3AA                        rep stosb
  3651                                      
  3652 00001C24 5D                          pop rbp
  3653 00001C25 C3                          ret
  3654                                  
  3655                                  
  3656                                  random_move_enemy:
  3657 00001C26 55                          push rbp
  3658 00001C27 4889E5                      mov  rbp, rsp
  3659 00001C2A 53                          push rbx
  3660 00001C2B 52                          push rdx
  3661 00001C2C 57                          push rdi
  3662                                  
  3663                                      ; r12 = índice del enemigo
  3664                                      ; 1) obtener puntero al enemigo i
  3665 00001C2D 4C89E0                      mov rax, r12
  3666 00001C30 486BC003                    imul rax, 3
  3667 00001C34 488D98[60200000]            lea rbx, [enemies + rax]     ; rbx => &enemies[r12]
  3668                                  
  3669                                      ; 2) Cargar X, Y actuales (NO SE BORRA AQUÍ TODAVÍA)
  3670 00001C3B 4C0FB603                    movzx r8, byte [rbx]         ; r8 = X actual
  3671 00001C3F 4C0FB64B01                  movzx r9, byte [rbx + 1]     ; r9 = Y actual
  3672                                  
  3673                                      ; 3) Generar "movimiento aleatorio" => tomamos [enemy_move_counter] & 3
  3674 00001C44 480FB605(87200000)          movzx rax, byte [enemy_move_counter]
  3675 00001C4C 4883E003                    and rax, 3
  3676                                  
  3677 00001C50 4883F800                    cmp rax, 0
  3678 00001C54 741B                        je .try_left
  3679 00001C56 4883F801                    cmp rax, 1
  3680 00001C5A 7410                        je .try_right
  3681 00001C5C 4883F802                    cmp rax, 2
  3682 00001C60 7405                        je .try_up
  3683                                      ; si es 3 => mover abajo
  3684                                  .try_down:
  3685 00001C62 49FFC1                      inc r9
  3686 00001C65 EB0D                        jmp .check_valid
  3687                                  
  3688                                  .try_up:
  3689 00001C67 49FFC9                      dec r9
  3690 00001C6A EB08                        jmp .check_valid
  3691                                  
  3692                                  .try_right:
  3693 00001C6C 49FFC0                      inc r8
  3694 00001C6F EB03                        jmp .check_valid
  3695                                  
  3696                                  .try_left:
  3697 00001C71 49FFC8                      dec r8
  3698                                  
  3699                                  .check_valid:
  3700                                      ; 4) Verificar límites
  3701 00001C74 4983F801                    cmp r8, 1                    
  3702 00001C78 0F8EA4000000                jle .invalid_move
  3703 00001C7E 4983F850                    cmp r8, column_cells        
  3704 00001C82 0F8D9A000000                jge .invalid_move
  3705 00001C88 4983F901                    cmp r9, 1                    
  3706 00001C8C 0F8E90000000                jle .invalid_move
  3707 00001C92 4983F920                    cmp r9, row_cells          
  3708 00001C96 0F8D86000000                jge .invalid_move
  3709                                  
  3710                                      ; 5) Verificar colisión con bloques/enemigos
  3711 00001C9C 4150                        push r8
  3712 00001C9E 4151                        push r9
  3713 00001CA0 B850000000                  mov rax, column_cells
  3714 00001CA5 4883C002                    add rax, 2
  3715 00001CA9 49F7E1                      mul r9
  3716 00001CAC 4C01C0                      add rax, r8
  3717 00001CAF 488DB8[400A0000]            lea rdi, [board + rax]
  3718 00001CB6 8A07                        mov al, [rdi]
  3719                                  
  3720                                      ; Revisa si es bloque o borde
  3721 00001CB8 3C55                        cmp al, 'U'
  3722 00001CBA 7462                        je .pop_and_invalid
  3723 00001CBC 3C4F                        cmp al, 'O'
  3724 00001CBE 745E                        je .pop_and_invalid
  3725 00001CC0 3C44                        cmp al, 'D'
  3726 00001CC2 745A                        je .pop_and_invalid
  3727 00001CC4 3C4C                        cmp al, 'L'
  3728 00001CC6 7456                        je .pop_and_invalid
  3729 00001CC8 3C56                        cmp al, 'V'
  3730 00001CCA 7452                        je .pop_and_invalid
  3731 00001CCC 3C38                        cmp al, '8'
  3732 00001CCE 744E                        je .pop_and_invalid
  3733 00001CD0 3C58                        cmp al, 'X'
  3734 00001CD2 744A                        je .pop_and_invalid
  3735                                  
  3736                                      ; Revisa si hay enemigo
  3737 00001CD4 3C40                        cmp al, '@'
  3738 00001CD6 7446                        je .pop_and_invalid
  3739 00001CD8 3C23                        cmp al, '#'
  3740 00001CDA 7442                        je .pop_and_invalid
  3741 00001CDC 3C24                        cmp al, '$'
  3742 00001CDE 743E                        je .pop_and_invalid
  3743 00001CE0 3C26                        cmp al, '&'
  3744 00001CE2 743A                        je .pop_and_invalid
  3745                                  
  3746 00001CE4 E808030000                  call check_enemy_at_position
  3747 00001CE9 4883F801                    cmp rax, 1
  3748 00001CED 742F                        je .pop_and_invalid
  3749                                  
  3750                                      ; ------------------------------
  3751                                      ; SI LLEGAMOS AQUI => POSICIÓN NUEVA ES VÁLIDA
  3752                                      ; AHORA SÍ BORRAMOS LA POSICIÓN ANTIGUA:
  3753                                      ; ------------------------------
  3754 00001CEF 4159                        pop r9
  3755 00001CF1 4158                        pop r8
  3756                                  
  3757                                      ; (A) Borrar la posición antigua en el board
  3758                                      ;    (X,Y) originales estaban en [rbx], [rbx+1].
  3759 00001CF3 4C0FB613                    movzx r10, byte [rbx]   ; oldX
  3760 00001CF7 4C0FB65B01                  movzx r11, byte [rbx+1] ; oldY
  3761 00001CFC B850000000                  mov rax, column_cells
  3762 00001D01 4883C002                    add rax, 2
  3763 00001D05 49F7E3                      mul r11
  3764 00001D08 4C01D0                      add rax, r10
  3765 00001D0B 488DB8[400A0000]            lea rdi, [board + rax]
  3766 00001D12 C60720                      mov byte [rdi], ' '     ; BORRA la posición vieja
  3767                                  
  3768                                      ; (B) Guardar la nueva X,Y en la estructura
  3769 00001D15 448803                      mov byte [rbx], r8b
  3770 00001D18 44884B01                    mov byte [rbx + 1], r9b
  3771                                  
  3772 00001D1C EB0D                        jmp .done
  3773                                  
  3774                                  .pop_and_invalid:
  3775 00001D1E 4159                        pop r9
  3776 00001D20 4158                        pop r8
  3777                                  
  3778                                  .invalid_move:
  3779                                      ; Restablecer la posición X,Y en [rbx], [rbx+1] (no se borró la vieja)
  3780 00001D22 4C0FB603                    movzx r8, byte [rbx]
  3781 00001D26 4C0FB64B01                  movzx r9, byte [rbx + 1]
  3782                                      ; Se queda donde estaba
  3783                                  .done:
  3784 00001D2B 5F                          pop rdi
  3785 00001D2C 5A                          pop rdx
  3786 00001D2D 5B                          pop rbx
  3787 00001D2E 5D                          pop rbp
  3788 00001D2F C3                          ret
  3789                                  
  3790                                  
  3791                                  ; Función para mover enemigos
  3792                                  move_enemies:
  3793 00001D30 55                          push rbp
  3794 00001D31 4889E5                      mov rbp, rsp
  3795                                      
  3796                                      ; Incrementar contador de movimiento
  3797 00001D34 FE05(87200000)              inc byte [enemy_move_counter]
  3798 00001D3A 480FB605(87200000)          movzx rax, byte [enemy_move_counter]
  3799 00001D42 3A05(88200000)              cmp al, [enemy_move_delay]
  3800 00001D48 0F85A1020000                jne .end
  3801                                      
  3802                                      ; Resetear contador
  3803 00001D4E C605(87200000)00            mov byte [enemy_move_counter], 0
  3804                                      
  3805 00001D55 4D31E4                      xor r12, r12                    ; Índice del enemigo
  3806                                      
  3807                                      .enemy_loop:
  3808 00001D58 4983FC0A                        cmp r12, 10                     ; Máximo 10 enemigos
  3809 00001D5C 0F8D8D020000                    jge .end
  3810                                          
  3811                                          ; Calcular offset del enemigo actual
  3812 00001D62 4C89E0                          mov rax, r12
  3813 00001D65 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  3814 00001D69 488DB0[60200000]                lea rsi, [enemies + rax]
  3815                                          
  3816                                          ; Verificar si el enemigo está activo
  3817 00001D70 807E0201                        cmp byte [rsi + 2], 1
  3818 00001D74 0F856D020000                    jne .next_enemy
  3819                                          
  3820                                          ; Obtener posición actual
  3821 00001D7A 4C0FB606                        movzx r8, byte [rsi]            ; X
  3822 00001D7E 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  3823                                          
  3824 00001D83 488D3D(40240000)                lea rdi, [enemy_last_x]
  3825 00001D8A 4C01E7                          add rdi, r12
  3826 00001D8D 8A07                            mov al, [rdi]             ; al = last_x
  3827                                  
  3828 00001D8F 488D15(4A240000)                lea rdx, [enemy_last_y]
  3829 00001D96 4C01E2                          add rdx, r12
  3830 00001D99 8A22                            mov ah, [rdx]             ; ah = last_y
  3831                                  
  3832                                          ; r8 = X actual del enemigo
  3833                                          ; r9 = Y actual del enemigo
  3834                                  
  3835                                          ; *** En lugar de cmp ah, r9b => hacemos lo siguiente:
  3836 00001D9B 88E2                            mov dl, ah      ; dl = old_Y
  3837 00001D9D 4488CB                          mov bl, r9b     ; bl = new_Y
  3838 00001DA0 38DA                            cmp dl, bl
  3839 00001DA2 752C                            jne .not_stuck
  3840                                  
  3841                                          ; => SI son iguales => pasa al siguiente check
  3842 00001DA4 88C2                            mov dl, al      ; dl = old_X
  3843 00001DA6 4488C3                          mov bl, r8b     ; bl = new_X
  3844 00001DA9 38DA                            cmp dl, bl
  3845 00001DAB 7523                            jne .not_stuck
  3846                                  
  3847                                          ; => MISMA POSICIÓN (STUCK)
  3848 00001DAD 488D1D(54240000)                lea rbx, [enemy_stuck_count]
  3849 00001DB4 4C01E3                          add rbx, r12
  3850 00001DB7 FE03                            inc byte [rbx]              ; Aumentar contador de “pegarse”
  3851                                  
  3852                                          ; Verificar si supera umbral, digamos 3
  3853 00001DB9 480FB60B                        movzx rcx, byte [rbx]
  3854 00001DBD 4883F902                        cmp rcx, 2
  3855 00001DC1 7C34                            jl .check_normal_move       ; Si aún no llega a 3, seguir normal
  3856                                  
  3857                                          ; SI LLEGA A 3, FORZAR UN MOVIMIENTO ALEATORIO:
  3858                                          ;  1) resetear el stuck_count
  3859 00001DC3 C60300                          mov byte [rbx], 0
  3860                                  
  3861                                          ;  2) cambiar random
  3862 00001DC6 E85BFEFFFF                      call random_move_enemy        ; (Ver ejemplo de abajo)
  3863 00001DCB E917020000                      jmp .next_enemy
  3864                                  
  3865                                      .not_stuck:
  3866                                          ; => Se movió
  3867 00001DD0 488D1D(54240000)                lea rbx, [enemy_stuck_count]
  3868 00001DD7 4C01E3                          add rbx, r12
  3869 00001DDA C60300                          mov byte [rbx], 0            ; Resetear
  3870                                  
  3871                                          ; Guardar su nueva posición en “last_x, last_y”
  3872 00001DDD 488D3D(40240000)                lea rdi, [enemy_last_x]
  3873 00001DE4 4C01E7                          add rdi, r12
  3874 00001DE7 448807                          mov [rdi], r8b
  3875                                          
  3876 00001DEA 488D3D(4A240000)                lea rdi, [enemy_last_y]
  3877 00001DF1 4C01E7                          add rdi, r12
  3878 00001DF4 44880F                          mov [rdi], r9b
  3879                                  
  3880                                          ; Limpiar posición actual antes de mover
  3881                                      .check_normal_move:
  3882 00001DF7 4150                            push r8
  3883 00001DF9 4151                            push r9
  3884 00001DFB B850000000                      mov rax, column_cells
  3885 00001E00 4883C002                        add rax, 2
  3886 00001E04 49F7E1                          mul r9
  3887 00001E07 4C01C0                          add rax, r8
  3888 00001E0A 488DB8[400A0000]                lea rdi, [board + rax]
  3889 00001E11 C60720                          mov byte [rdi], ' '         ; Limpiar rastro
  3890 00001E14 4159                            pop r9
  3891 00001E16 4158                            pop r8
  3892                                  
  3893                                          ; Determinar comportamiento basado en índice
  3894 00001E18 4C89E0                          mov rax, r12
  3895 00001E1B 4883E001                        and rax, 1                      ; 0 para índices pares, 1 para impares
  3896 00001E1F 4885C0                          test rax, rax
  3897 00001E22 7405                            jz .chase_ball
  3898 00001E24 E996000000                      jmp .chase_paddle             ; Si es 1, perseguir paleta
  3899                                          
  3900                                          ; Perseguir bola (comportamiento original)
  3901                                      .chase_ball:
  3902                                          ; Primero intentar con la bola principal
  3903 00001E29 803D(00150000)01                cmp byte [ball_active], 1
  3904 00001E30 7414                            je .use_ball1
  3905                                          
  3906                                          ; Si no está activa, probar con ball2
  3907 00001E32 803D(22150000)01                cmp byte [ball2_active], 1
  3908 00001E39 7414                            je .use_ball2
  3909                                          
  3910                                          ; Si no está activa, probar con ball3
  3911 00001E3B 803D(44150000)01                cmp byte [ball3_active], 1
  3912 00001E42 7414                            je .use_ball3
  3913                                          
  3914                                          ; Si no hay bolas activas, perseguir la paleta
  3915 00001E44 EB79                            jmp .chase_paddle
  3916                                  
  3917                                      .use_ball1:
  3918 00001E46 4C8B15(DF140000)                mov r10, [ball_x_pos]
  3919 00001E4D EB12                            jmp .compare_positions
  3920                                  
  3921                                      .use_ball2:
  3922 00001E4F 4C8B15(01150000)                mov r10, [ball2_x_pos]
  3923 00001E56 EB09                            jmp .compare_positions
  3924                                  
  3925                                      .use_ball3:
  3926 00001E58 4C8B15(23150000)                mov r10, [ball3_x_pos]
  3927 00001E5F EB00                            jmp .compare_positions
  3928                                  
  3929                                      .compare_positions:
  3930                                          ; Comparar X
  3931 00001E61 4D39D0                          cmp r8, r10
  3932 00001E64 0F8FCA000000                    jg .move_left
  3933 00001E6A 0F8CC9000000                    jl .move_right
  3934                                          
  3935                                          ; Si llegamos aquí, las X son iguales
  3936                                          ; Ahora comparar Y según qué bola estemos siguiendo
  3937 00001E70 803D(00150000)01                cmp byte [ball_active], 1
  3938 00001E77 7417                            je .check_ball1_y
  3939 00001E79 803D(22150000)01                cmp byte [ball2_active], 1
  3940 00001E80 7417                            je .check_ball2_y
  3941 00001E82 803D(44150000)01                cmp byte [ball3_active], 1
  3942 00001E89 7417                            je .check_ball3_y
  3943 00001E8B E9D4000000                      jmp .check_collision
  3944                                  
  3945                                      .check_ball1_y:
  3946 00001E90 4C8B15(E7140000)                mov r10, [ball_y_pos]
  3947 00001E97 EB12                            jmp .compare_y
  3948                                  
  3949                                      .check_ball2_y:
  3950 00001E99 4C8B15(09150000)                mov r10, [ball2_y_pos]
  3951 00001EA0 EB09                            jmp .compare_y
  3952                                  
  3953                                      .check_ball3_y:
  3954 00001EA2 4C8B15(2B150000)                mov r10, [ball3_y_pos]
  3955 00001EA9 EB00                            jmp .compare_y
  3956                                  
  3957                                      .compare_y:
  3958 00001EAB 4D39D1                          cmp r9, r10
  3959 00001EAE 0F8F8A000000                    jg .move_up
  3960 00001EB4 0F8C89000000                    jl .move_down
  3961 00001EBA E9A5000000                      jmp .check_collision
  3962                                          
  3963                                      .chase_paddle:
  3964                                          ; Obtener la posición X actual de la paleta
  3965 00001EBF 4C8B15(BF140000)                mov r10, [pallet_position]
  3966 00001EC6 4981EA[400A0000]                sub r10, board              ; Convertir a offset relativo
  3967                                          
  3968                                          ; Calcular la posición X real de la paleta
  3969 00001ECD 4C89D0                          mov rax, r10
  3970 00001ED0 BB50000000                      mov rbx, column_cells
  3971 00001ED5 4883C302                        add rbx, 2                  ; Añadir newline chars
  3972 00001ED9 4831D2                          xor rdx, rdx
  3973 00001EDC 48F7F3                          div rbx                     ; rax = y, rdx = x
  3974                                          
  3975                                          ; rdx ahora contiene la posición X de la paleta
  3976                                          ; Añadir la mitad del tamaño de la paleta para apuntar al centro
  3977 00001EDF 488B0D(C7140000)                mov rcx, [pallet_size]
  3978 00001EE6 48D1E9                          shr rcx, 1                  ; Dividir por 2
  3979 00001EE9 4801CA                          add rdx, rcx
  3980                                          
  3981                                          ; Comparar con posición X del enemigo y mover gradualmente
  3982 00001EEC 4939D0                          cmp r8, rdx
  3983 00001EEF 7404                            je .check_y_paddle          ; Si está en la misma X, verificar Y
  3984 00001EF1 7F41                            jg .move_left              ; Si está a la derecha, mover izquierda
  3985 00001EF3 7C44                            jl .move_right             ; Si está a la izquierda, mover derecha
  3986                                  
  3987                                      .check_y_paddle:
  3988                                          ; La Y de la paleta siempre es row_cells - 2
  3989 00001EF5 41BA20000000                    mov r10, row_cells
  3990 00001EFB 4983EA02                        sub r10, 2
  3991                                          
  3992                                          ; Comparar con posición Y del enemigo y mover gradualmente
  3993 00001EFF 4D39D1                          cmp r9, r10
  3994 00001F02 7404                            je .no_movement            ; Si está en la misma Y, no mover
  3995 00001F04 7F38                            jg .move_up               ; Si está abajo, mover arriba
  3996 00001F06 7C3B                            jl .move_down             ; Si está arriba, mover abajo
  3997                                          
  3998                                      .no_movement:
  3999 00001F08 EB5A                            jmp .check_collision
  4000                                  
  4001                                      ; También agregar una nueva sección para el movimiento suave
  4002                                      .smooth_transition:
  4003                                          ; Si el enemigo está muy lejos de su objetivo, limitar el movimiento
  4004 00001F0A 8A05(8A200000)                  mov al, [enemy_target]
  4005 00001F10 84C0                            test al, al
  4006 00001F12 7450                            jz .check_collision        ; Si persigue la bola, movimiento normal
  4007                                          
  4008                                          ; Verificar distancia en X
  4009 00001F14 4989D2                          mov r10, rdx              ; Posición X objetivo
  4010 00001F17 4D29C2                          sub r10, r8               ; Calcular diferencia
  4011 00001F1A 4983FA05                        cmp r10, 5               ; Si la diferencia es mayor a 5
  4012 00001F1E 7F08                            jg .limit_right_movement  ; Limitar movimiento a la derecha
  4013 00001F20 4983FAFB                        cmp r10, -5              ; Si la diferencia es menor a -5
  4014 00001F24 7C08                            jl .limit_left_movement   ; Limitar movimiento a la izquierda
  4015 00001F26 EB3C                            jmp .check_collision
  4016                                          
  4017                                      .limit_right_movement:
  4018 00001F28 4983C002                        add r8, 2                ; Mover solo 2 unidades a la derecha
  4019 00001F2C EB36                            jmp .check_collision
  4020                                          
  4021                                      .limit_left_movement:
  4022 00001F2E 4983E802                        sub r8, 2                ; Mover solo 2 unidades a la izquierda
  4023 00001F32 EB30                            jmp .check_collision
  4024                                      .move_left:
  4025 00001F34 49FFC8                          dec r8
  4026 00001F37 EB0F                            jmp .check_vertical
  4027                                          
  4028                                      .move_right:
  4029 00001F39 49FFC0                          inc r8
  4030 00001F3C EB0A                            jmp .check_vertical
  4031                                          
  4032                                      .move_up:
  4033 00001F3E 49FFC9                          dec r9
  4034 00001F41 EB21                            jmp .check_collision
  4035                                          
  4036                                      .move_down:
  4037 00001F43 49FFC1                          inc r9
  4038 00001F46 EB1C                            jmp .check_collision
  4039                                          
  4040                                      .check_vertical:
  4041 00001F48 8A05(8A200000)                  mov al, [enemy_target]
  4042 00001F4E 84C0                            test al, al
  4043 00001F50 0F8569FFFFFF                    jnz .chase_paddle         ; Si persigue paleta, volver a su lógica
  4044 00001F56 4C8B15(E7140000)                mov r10, [ball_y_pos]     ; Si no, seguir persiguiendo la bola
  4045 00001F5D 4D39D1                          cmp r9, r10
  4046 00001F60 7FDC                            jg .move_up
  4047 00001F62 7CDF                            jl .move_down
  4048                                          
  4049                                      .check_collision:
  4050                                          ; Verificar colisión con bordes
  4051 00001F64 4983F801                        cmp r8, 1                       ; Borde izquierdo
  4052 00001F68 7E7D                            jle .next_enemy
  4053 00001F6A 4983F850                        cmp r8, column_cells
  4054 00001F6E 7D77                            jge .next_enemy
  4055 00001F70 4983F901                        cmp r9, 1                       ; Borde superior
  4056 00001F74 7E71                            jle .next_enemy
  4057 00001F76 4983F920                        cmp r9, row_cells
  4058 00001F7A 7D6B                            jge .next_enemy
  4059                                          
  4060                                          ; Verificar colisión con bloques antes de moverse
  4061 00001F7C 4150                            push r8
  4062 00001F7E 4151                            push r9
  4063 00001F80 4152                            push r10
  4064                                          
  4065                                          ; Calcular posición en el tablero para verificar
  4066 00001F82 B850000000                      mov rax, column_cells
  4067 00001F87 4883C002                        add rax, 2
  4068 00001F8B 49F7E1                          mul r9
  4069 00001F8E 4C01C0                          add rax, r8
  4070 00001F91 4C8D90[400A0000]                lea r10, [board + rax]
  4071                                          
  4072                                          ; Verificar si hay un bloque en la nueva posición
  4073 00001F98 418A02                          mov al, [r10]
  4074 00001F9B 3C55                            cmp al, 'U'
  4075 00001F9D 7442                            je .invalid_move
  4076 00001F9F 3C4F                            cmp al, 'O'
  4077 00001FA1 743E                            je .invalid_move
  4078 00001FA3 3C44                            cmp al, 'D'
  4079 00001FA5 743A                            je .invalid_move
  4080 00001FA7 3C4C                            cmp al, 'L'
  4081 00001FA9 7436                            je .invalid_move
  4082 00001FAB 3C56                            cmp al, 'V'
  4083 00001FAD 7432                            je .invalid_move
  4084 00001FAF 3C38                            cmp al, '8'
  4085 00001FB1 742E                            je .invalid_move
  4086 00001FB3 3C58                            cmp al, 'X'
  4087 00001FB5 742A                            je .invalid_move
  4088 00001FB7 3C40                            cmp al, '@'                 ; Enemigo nivel 1 y 5
  4089 00001FB9 7426                            je .invalid_move
  4090 00001FBB 3C23                            cmp al, '#'                 ; Enemigo nivel 2
  4091 00001FBD 7422                            je .invalid_move
  4092 00001FBF 3C24                            cmp al, '$'                 ; Enemigo nivel 3
  4093 00001FC1 741E                            je .invalid_move
  4094 00001FC3 3C26                            cmp al, '&'                 ; Enemigo nivel 4
  4095 00001FC5 741A                            je .invalid_move
  4096                                          
  4097 00001FC7 E825000000                      call check_enemy_at_position
  4098 00001FCC 4883F801                        cmp rax, 1
  4099 00001FD0 740F                            je .invalid_move
  4100 00001FD2 415A                            pop r10
  4101 00001FD4 4159                            pop r9
  4102 00001FD6 4158                            pop r8
  4103                                          
  4104                                          ; Guardar nueva posición si es válida
  4105 00001FD8 448806                          mov [rsi], r8b
  4106 00001FDB 44884E01                        mov [rsi + 1], r9b
  4107 00001FDF EB06                            jmp .next_enemy
  4108                                          
  4109                                      .invalid_move:
  4110 00001FE1 415A                            pop r10
  4111 00001FE3 4159                            pop r9
  4112 00001FE5 4158                            pop r8
  4113                                          
  4114                                      .next_enemy:
  4115 00001FE7 49FFC4                          inc r12
  4116 00001FEA E969FDFFFF                      jmp .enemy_loop
  4117                                          
  4118                                      .end:
  4119 00001FEF 5D                              pop rbp
  4120 00001FF0 C3                              ret
  4121                                  
  4122                                  check_enemy_at_position:
  4123 00001FF1 55                          push rbp
  4124 00001FF2 4889E5                      mov rbp, rsp
  4125                                      
  4126                                      ; Parámetros esperados en r8 (X) y r9 (Y)
  4127 00001FF5 B850000000                  mov rax, column_cells
  4128 00001FFA 4883C002                    add rax, 2
  4129 00001FFE 49F7E1                      mul r9
  4130 00002001 4C01C0                      add rax, r8
  4131 00002004 488DB8[400A0000]            lea rdi, [board + rax]
  4132 0000200B 480FB607                    movzx rax, byte [rdi]
  4133                                      
  4134                                      ; Verificar todos los caracteres de enemigos
  4135 0000200F 3C40                        cmp al, '@'
  4136 00002011 7411                        je .enemy_found
  4137 00002013 3C23                        cmp al, '#'
  4138 00002015 740D                        je .enemy_found
  4139 00002017 3C24                        cmp al, '$'
  4140 00002019 7409                        je .enemy_found
  4141 0000201B 3C26                        cmp al, '&'
  4142 0000201D 7405                        je .enemy_found
  4143                                      
  4144 0000201F 4831C0                      xor rax, rax    ; No hay enemigo (retorna 0)
  4145 00002022 EB05                        jmp .end
  4146                                      
  4147                                  .enemy_found:
  4148 00002024 B801000000                  mov rax, 1      ; Hay enemigo (retorna 1)
  4149                                      
  4150                                  .end:
  4151 00002029 5D                          pop rbp
  4152 0000202A C3                          ret
  4153                                  
  4154                                  get_current_spawn_points:
  4155 0000202B 55                          push rbp
  4156 0000202C 4889E5                      mov rbp, rsp
  4157                                      
  4158 0000202F 480FB605(79150000)          movzx rax, byte [current_level]
  4159 00002037 48FFC8                      dec rax                         ; Ajustar para índice base 0
  4160 0000203A 488B04C5[BE200000]          mov rax, [spawn_points_table + rax * 8]
  4161                                      
  4162 00002042 5D                          pop rbp
  4163 00002043 C3                          ret
  4164                                  
  4165                                  ; Función para verificar si debe aparecer un nuevo enemigo
  4166                                  check_enemy_spawn:
  4167 00002044 55                          push rbp
  4168 00002045 4889E5                      mov rbp, rsp
  4169                                      
  4170                                      ; Obtener spawn points del nivel actual
  4171 00002048 E8DEFFFFFF                  call get_current_spawn_points
  4172 0000204D 4989C4                      mov r12, rax                    ; r12 = puntero a spawn points
  4173                                      
  4174                                      ; Obtener cantidad de bloques destruidos
  4175 00002050 4C0FB62D(46200000)          movzx r13, byte [destroyed_blocks]
  4176                                      
  4177                                      ; Verificar cada punto de spawn
  4178 00002058 4831C9                      xor rcx, rcx                    ; Índice del enemigo
  4179                                      
  4180                                      .check_loop:
  4181 0000205B 4883F90A                        cmp rcx, 10                     ; Máximo 10 enemigos
  4182 0000205F 7D4E                            jge .end
  4183                                          
  4184                                          ; Verificar si este spawn point ya fue usado
  4185 00002061 80B9[E9200000]01                cmp byte [enemy_spawns_triggered + rcx], 1
  4186 00002068 7440                            je .next_enemy
  4187                                          
  4188                                          ; Verificar si este enemigo ya está activo
  4189 0000206A 4889C8                          mov rax, rcx
  4190 0000206D 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  4191 00002071 488DB0[60200000]                lea rsi, [enemies + rax]
  4192 00002078 807E0201                        cmp byte [rsi + 2], 1          ; Verificar si está activo
  4193 0000207C 742C                            je .next_enemy
  4194                                          
  4195                                          ; Verificar si debemos spawnear este enemigo
  4196 0000207E 490FB6040C                      movzx rax, byte [r12 + rcx]    ; Obtener punto de spawn
  4197 00002083 4939C5                          cmp r13, rax                   ; Comparar con bloques destruidos
  4198 00002086 7522                            jne .next_enemy
  4199                                          
  4200                                          ; Marcar este spawn point como usado
  4201 00002088 C681[E9200000]01                mov byte [enemy_spawns_triggered + rcx], 1
  4202                                          
  4203                                          ; Spawner nuevo enemigo
  4204 0000208F B004                            mov al, 4
  4205 00002091 00C8                            add al, cl       ; con 'rcx' como índice
  4206 00002093 8806                            mov [rsi], al
  4207 00002095 C6460101                        mov byte [rsi+1], 1
  4208 00002099 C6460201                        mov byte [rsi+2], 1
  4209                                  
  4210                                          ; Inicializar comportamiento
  4211 0000209D 4889C8                          mov rax, rcx
  4212 000020A0 4883E001                        and rax, 1                     ; Alternar comportamiento basado en índice par/impar
  4213 000020A4 8805(E8200000)                  mov [current_behavior], al      ; 0 = persigue bola, 1 = persigue paleta
  4214                                          
  4215                                      .next_enemy:
  4216 000020AA 48FFC1                          inc rcx
  4217 000020AD EBAC                            jmp .check_loop
  4218                                          
  4219                                      .end:
  4220 000020AF 5D                              pop rbp
  4221 000020B0 C3                              ret
  4222                                  
  4223                                  
  4224                                  ; Función para dibujar enemigos
  4225                                  print_enemies:
  4226 000020B1 55                          push rbp
  4227 000020B2 4889E5                      mov rbp, rsp
  4228                                      
  4229 000020B5 4D31E4                      xor r12, r12                    ; Índice del enemigo
  4230                                      
  4231                                      .print_loop:
  4232 000020B8 4983FC0A                        cmp r12, 10                      ; Máximo 5 enemigos
  4233 000020BC 7D4B                            jge .end
  4234                                          
  4235                                          ; Calcular offset del enemigo actual
  4236 000020BE 4C89E0                          mov rax, r12
  4237 000020C1 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  4238 000020C5 488DB0[60200000]                lea rsi, [enemies + rax]
  4239                                          
  4240                                          ; Verificar si el enemigo está activo
  4241 000020CC 807E0201                        cmp byte [rsi + 2], 1
  4242 000020D0 7532                            jne .next_enemy
  4243                                          
  4244                                          ; Calcular posición en el tablero
  4245 000020D2 4C0FB606                        movzx r8, byte [rsi]            ; X
  4246 000020D6 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  4247                                          
  4248                                          ; Calcular offset en el tablero
  4249 000020DB B850000000                      mov rax, column_cells
  4250 000020E0 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  4251 000020E4 49F7E1                          mul r9
  4252 000020E7 4C01C0                          add rax, r8
  4253 000020EA 488DB8[400A0000]                lea rdi, [board + rax]
  4254                                          
  4255                                          ; Obtener carácter del enemigo según el nivel
  4256 000020F1 480FB605(79150000)              movzx rax, byte [current_level]
  4257 000020F9 48FFC8                          dec rax                         ; Ajustar para índice base 0
  4258 000020FC 8A80[5B200000]                  mov al, [enemy_chars + rax]
  4259                                          
  4260                                          ; Dibujar enemigo
  4261 00002102 8807                            mov [rdi], al
  4262                                          
  4263                                      .next_enemy:
  4264 00002104 49FFC4                          inc r12
  4265 00002107 EBAF                            jmp .print_loop
  4266                                          
  4267                                      .end:
  4268 00002109 5D                              pop rbp
  4269 0000210A C3                              ret
  4270                                  
  4271                                  ; Función para verificar colisión con enemigos
  4272                                  ; Función para verificar colisión con enemigos
  4273                                  check_enemy_collision:
  4274 0000210B 55                          push rbp
  4275 0000210C 4889E5                      mov rbp, rsp
  4276                                      
  4277 0000210F 4D31E4                      xor r12, r12                    ; Índice del enemigo
  4278 00002112 4831C0                      xor rax, rax                    ; Valor de retorno (0 = no colisión)
  4279                                      
  4280                                      .check_loop:
  4281 00002115 4983FC05                        cmp r12, 5                      ; Máximo 5 enemigos
  4282 00002119 0F8DE9000000                    jge .end
  4283                                          
  4284                                          ; Calcular offset del enemigo actual
  4285 0000211F 4C89E1                          mov rcx, r12
  4286 00002122 486BC903                        imul rcx, 3                     ; Cada enemigo ocupa 3 bytes
  4287 00002126 488DB1[60200000]                lea rsi, [enemies + rcx]
  4288                                          
  4289                                          ; Verificar si el enemigo está activo
  4290 0000212D 807E0201                        cmp byte [rsi + 2], 1
  4291 00002131 0F85C9000000                    jne .next_enemy
  4292                                          
  4293                                          ; Verificar colisión con la bola
  4294 00002137 4C0FB606                        movzx r8, byte [rsi]            ; X enemigo
  4295 0000213B 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y enemigo
  4296                                          
  4297                                          ; Verificar si la bola está en el rango del enemigo (considerando el enemigo como un área)
  4298 00002140 4C8B15(DF140000)                mov r10, [ball_x_pos]
  4299 00002147 4C8B1D(E7140000)                mov r11, [ball_y_pos]
  4300                                          
  4301                                          ; Comprobar colisión vertical (misma columna)
  4302 0000214E 4D39C2                          cmp r10, r8
  4303 00002151 7525                            jne .check_horizontal
  4304 00002153 4D29CB                          sub r11, r9
  4305 00002156 4983FB01                        cmp r11, 1
  4306 0000215A 7F1C                            jg .check_horizontal
  4307 0000215C 4983FBFF                        cmp r11, -1
  4308 00002160 7C16                            jl .check_horizontal
  4309                                          
  4310                                          ; Colisión vertical detectada
  4311 00002162 E8A3000000                      call destroy_enemy
  4312 00002167 48F71D(F7140000)                neg qword [ball_direction_y]    ; Invertir dirección vertical
  4313 0000216E B801000000                      mov rax, 1
  4314 00002173 E990000000                      jmp .end
  4315                                          
  4316                                      .check_horizontal:
  4317                                          ; Comprobar colisión horizontal (misma fila)
  4318 00002178 4C8B15(DF140000)                mov r10, [ball_x_pos]
  4319 0000217F 4C8B1D(E7140000)                mov r11, [ball_y_pos]
  4320 00002186 4D39CB                          cmp r11, r9
  4321 00002189 7522                            jne .check_paddle
  4322 0000218B 4D29C2                          sub r10, r8
  4323 0000218E 4983FA01                        cmp r10, 1
  4324 00002192 7F19                            jg .check_paddle
  4325 00002194 4983FAFF                        cmp r10, -1
  4326 00002198 7C13                            jl .check_paddle
  4327                                          
  4328                                          ; Colisión horizontal detectada
  4329 0000219A E86B000000                      call destroy_enemy
  4330 0000219F 48F71D(EF140000)                neg qword [ball_direction_x]    ; Invertir dirección horizontal
  4331 000021A6 B801000000                      mov rax, 1
  4332 000021AB EB5B                            jmp .end
  4333                                          
  4334                                      .check_paddle:
  4335                                          ; Verificar colisión con la paleta
  4336 000021AD 4C8B15(BF140000)                mov r10, [pallet_position]
  4337 000021B4 4981EA[400A0000]                sub r10, board
  4338 000021BB 4C89D0                          mov rax, r10
  4339 000021BE 41BB50000000                    mov r11, column_cells
  4340 000021C4 4983C302                        add r11, 2
  4341 000021C8 4831D2                          xor rdx, rdx
  4342 000021CB 49F7F3                          div r11                     ; División para obtener la posición Y
  4343 000021CE 4989D3                          mov r11, rdx               ; X de la paleta en r11
  4344                                          
  4345 000021D1 488B0D(C7140000)                mov rcx, [pallet_size]     ; Obtener el tamaño de la paleta
  4346                                          
  4347                                          ; Verificar si el enemigo está en la misma fila que la paleta
  4348 000021D8 41BD20000000                    mov r13, row_cells
  4349 000021DE 4983ED02                        sub r13, 2                 ; Y de la paleta
  4350 000021E2 4D39E9                          cmp r9, r13               ; Comparar Y del enemigo con Y de la paleta
  4351 000021E5 7519                            jne .next_enemy
  4352                                          
  4353                                          ; Verificar si el enemigo está dentro del rango X de la paleta
  4354 000021E7 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X inicial de la paleta
  4355 000021EA 7C14                            jl .next_enemy
  4356                                          
  4357 000021EC 4901CB                          add r11, rcx              ; Añadir el tamaño de la paleta
  4358 000021EF 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X final de la paleta
  4359 000021F2 7F0C                            jg .next_enemy
  4360                                          
  4361                                          ; Si llegamos aquí, hay colisión con la paleta
  4362 000021F4 E811000000                      call destroy_enemy        ; Destruir el enemigo
  4363 000021F9 B801000000                      mov rax, 1                ; Indicar que hubo colisión
  4364 000021FE EB08                            jmp .end
  4365                                          
  4366                                      .next_enemy:
  4367 00002200 49FFC4                          inc r12
  4368 00002203 E90DFFFFFF                      jmp .check_loop
  4369                                          
  4370                                      .end:
  4371 00002208 5D                              pop rbp
  4372 00002209 C3                              ret
  4373                                  
  4374                                  ; Función para destruir un enemigo
  4375                                  destroy_enemy:
  4376                                      ; Desactivar enemigo
  4377 0000220A C6460200                    mov byte [rsi + 2], 0   ; Marcar enemigo como inactivo
  4378                                  
  4379                                      ; Sumar puntos por destruir enemigo
  4380 0000220E 488B05(7F200000)            mov rax, [enemy_points]
  4381 00002215 480105(3E200000)            add [current_score], rax
  4382                                  
  4383                                      ; No tocar bloques destruidos aquí
  4384 0000221C C3                          ret
  4385                                  
  4386                                  
  4387                                  _start:
  4388 0000221D E809DFFFFF              	call canonical_off
  4389 00002222 E857010000              	call start_screen
  4390 00002227 E811F3FFFF                  call init_level
  4391 0000222C EB00                    	jmp .main_loop
  4392                                  	
  4393                                  
  4394                                      .main_loop:
  4395 0000222E E87FF7FFFF                      call print_labels
  4396 00002233 E8AEF6FFFF                      call print_blocks
  4397 00002238 E818E3FFFF                      call move_letters
  4398 0000223D E8FEE5FFFF                      call update_lasers
  4399 00002242 E883E2FFFF                      call print_letters
  4400 00002247 E802EAFFFF                      call print_pallet
  4401                                          
  4402                                          ; Mover bola principal solo si está activa
  4403 0000224C 803D(00150000)01                cmp byte [ball_active], 1
  4404 00002253 7505                            jne .skip_ball1
  4405 00002255 E80BEBFFFF                          call move_ball
  4406                                          .skip_ball1:
  4407                                  
  4408                                          ; Mover bola 2 si está activa
  4409 0000225A 803D(22150000)01                cmp byte [ball2_active], 1
  4410 00002261 7505                            jne .skip_ball2
  4411 00002263 E8D0ECFFFF                          call move_ball_2
  4412                                          .skip_ball2:
  4413                                  
  4414                                          ; Mover bola 3 si está activa
  4415 00002268 803D(44150000)01                cmp byte [ball3_active], 1
  4416 0000226F 7505                            jne .skip_ball3
  4417 00002271 E895EEFFFF                          call move_ball_3
  4418                                          .skip_ball3:
  4419                                  
  4420 00002276 E87BE0FFFF                      call check_bottom_collision    ; Nueva función que maneja todas las bolas
  4421 0000227B E85DDFFFFF                      call print_lives
  4422                                  
  4423                                          ; Imprimir solo las bolas activas
  4424 00002280 803D(00150000)01                cmp byte [ball_active], 1
  4425 00002287 7505                            jne .no_pb1
  4426 00002289 E848E9FFFF                          call print_ball
  4427                                          .no_pb1:
  4428                                  
  4429 0000228E 803D(22150000)01                cmp byte [ball2_active], 1
  4430 00002295 7505                            jne .no_pb2
  4431 00002297 E862E9FFFF                          call print_ball_2
  4432                                          .no_pb2:
  4433                                  
  4434 0000229C 803D(44150000)01                cmp byte [ball3_active], 1
  4435 000022A3 7505                            jne .no_pb3
  4436 000022A5 E87CE9FFFF                          call print_ball_3
  4437                                          .no_pb3:
  4438                                  
  4439 000022AA E87FF4FFFF                      call check_level_complete
  4440 000022AF E890FDFFFF                      call check_enemy_spawn
  4441 000022B4 E877FAFFFF                      call move_enemies
  4442 000022B9 E84DFEFFFF                      call check_enemy_collision
  4443 000022BE E8EEFDFFFF                      call print_enemies
  4444 000022C3 E8ECE4FFFF                      call print_power_label
  4445                                  		print board, board_size				
    82 000022C8 B801000000          <1>  mov eax, sys_write
    83 000022CD BF01000000          <1>  mov edi, 1
    84 000022D2 48BE-               <1>  mov rsi, %1
    84 000022D4 [400A000000000000]  <1>
    85 000022DC BA400A0000          <1>  mov edx, %2
    86 000022E1 0F05                <1>  syscall
  4446                                  		;setnonblocking	
  4447                                  	.read_more:	
  4448                                  	    getchar	
    90 000022E3 B800000000          <1>  mov rax, sys_read
    91 000022E8 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 000022ED 48BE-               <1>  mov rsi, input_char
    92 000022EF [0000000000000000]  <1>
    93 000022F7 BA01000000          <1>  mov rdx, 1
    94 000022FC 0F05                <1>  syscall
  4449 000022FE 4883F801                	    cmp rax, 1
  4450 00002302 7547                    	    jne .done
  4451                                  	
  4452 00002304 8A05(00000000)          	    mov al, [input_char]
  4453 0000230A 8805(08230000)          	    mov [last_key], al      ; Registrar la última tecla presionada
  4454                                  	
  4455 00002310 3C61                    	    cmp al, 'a'
  4456 00002312 750E                    	    jne .not_left
  4457 00002314 48C7C7FFFFFFFF          	    mov rdi, left_direction
  4458 0000231B E863E9FFFF              	    call move_pallet
  4459 00002320 EB29                    	    jmp .done
  4460                                  	
  4461                                      .not_left:
  4462 00002322 3C64                    	    cmp al, 'd'
  4463 00002324 750C                    	    jne .not_right
  4464 00002326 BF01000000              	    mov rdi, right_direction
  4465 0000232B E853E9FFFF              	    call move_pallet
  4466 00002330 EB19                    	    jmp .done
  4467                                  	
  4468                                      .not_right:
  4469 00002332 3C63                    	    cmp al, 'c'             ; Verificar si se presionó la tecla 'c'
  4470 00002334 740E                    	    je .release_ball        ; Si sí, liberar la bola
  4471                                  	
  4472 00002336 3C78                            cmp al, 'x'             ; Verificar si se presionó la tecla 'c'
  4473 00002338 740A                    	    je .release_ball        ; Si sí, liberar la bola
  4474                                  	
  4475                                  
  4476 0000233A 3C71                    	    cmp al, 'q' 
  4477 0000233C 0F84AF000000            	    je exit
  4478 00002342 EB9F                    	    jmp .read_more
  4479                                  	
  4480                                      .release_ball:
  4481 00002344 E895EFFFFF              	    call process_catch_release
  4482 00002349 EB00                    	    jmp .done
  4483                                  	
  4484                                      .done:
  4485                                  	    sleeptime
    98 0000234B B823000000          <1>  mov eax, sys_nanosleep
    99 00002350 48BF-               <1>  mov rdi, timespec
    99 00002352 [0000000000000000]  <1>
   100 0000235A 31F6                <1>  xor esi, esi
   101 0000235C 0F05                <1>  syscall
  4486                                  	    print clear, clear_length
    82 0000235E B801000000          <1>  mov eax, sys_write
    83 00002363 BF01000000          <1>  mov edi, 1
    84 00002368 48BE-               <1>  mov rsi, %1
    84 0000236A [1000000000000000]  <1>
    85 00002372 BA07000000          <1>  mov edx, %2
    86 00002377 0F05                <1>  syscall
  4487 00002379 E9B0FEFFFF              	    jmp .main_loop
  4488                                  
  4489                                  
  4490                                  
  4491                                  
  4492                                  start_screen:
  4493                                      print clear, clear_length    ; Limpiamos la pantalla primero
    82 0000237E B801000000          <1>  mov eax, sys_write
    83 00002383 BF01000000          <1>  mov edi, 1
    84 00002388 48BE-               <1>  mov rsi, %1
    84 0000238A [1000000000000000]  <1>
    85 00002392 BA07000000          <1>  mov edx, %2
    86 00002397 0F05                <1>  syscall
  4494                                      print msg1, msg1_length
    82 00002399 B801000000          <1>  mov eax, sys_write
    83 0000239E BF01000000          <1>  mov edi, 1
    84 000023A3 48BE-               <1>  mov rsi, %1
    84 000023A5 [1700000000000000]  <1>
    85 000023AD BA14010000          <1>  mov edx, %2
    86 000023B2 0F05                <1>  syscall
  4495                                      
  4496                                      .wait_for_key:              ; Agregamos una etiqueta para esperar la tecla
  4497                                          getchar                 ; Esperamos una tecla
    90 000023B4 B800000000          <1>  mov rax, sys_read
    91 000023B9 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 000023BE 48BE-               <1>  mov rsi, input_char
    92 000023C0 [0000000000000000]  <1>
    93 000023C8 BA01000000          <1>  mov rdx, 1
    94 000023CD 0F05                <1>  syscall
  4498 000023CF 4883F801                        cmp rax, 1             ; Verificamos si se leyó un carácter
  4499 000023D3 75DF                            jne .wait_for_key      ; Si no se leyó, seguimos esperando
  4500                                          
  4501                                      print clear, clear_length   ; Limpiamos la pantalla antes de salir
    82 000023D5 B801000000          <1>  mov eax, sys_write
    83 000023DA BF01000000          <1>  mov edi, 1
    84 000023DF 48BE-               <1>  mov rsi, %1
    84 000023E1 [1000000000000000]  <1>
    85 000023E9 BA07000000          <1>  mov edx, %2
    86 000023EE 0F05                <1>  syscall
  4502 000023F0 C3                          ret
  4503                                  
  4504                                  exit: 
  4505 000023F1 E877DDFFFF              	call canonical_on
  4506 000023F6 B83C000000              	mov    rax, 60
  4507 000023FB BF00000000                  mov    rdi, 0
  4508 00002400 0F05                        syscall
  4509                                  
