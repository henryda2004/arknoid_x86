     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  sys_read: equ 0	
     7                                  sys_write:	equ 1
     8                                  sys_nanosleep:	equ 35
     9                                  sys_time:	equ 201
    10                                  sys_fcntl:	equ 72
    11                                  
    12                                  
    13                                  STDIN_FILENO: equ 0
    14                                  
    15                                  F_SETFL:	equ 0x0004
    16                                  O_NONBLOCK: equ 0x0004
    17                                  
    18                                  ;screen clean definition
    19                                  row_cells:	equ 32	; set to any (reasonable) value you wish
    20                                  column_cells: 	equ 80 ; set to any (reasonable) value you wish
    21                                  array_length:	equ row_cells * column_cells + row_cells ; cells are mapped to bytes in the array and a new line char ends each row
    22                                  
    23                                  ;This is regarding the sleep time
    24                                  timespec:
    25 00000000 0000000000000000            tv_sec  dq 0
    26 00000008 00C2EB0B00000000            tv_nsec dq 200000000
    27                                  
    28                                  
    29                                  ;This is for cleaning up the screen
    30 00000010 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"
    31                                  clear_length:	equ $-clear
    32                                  	
    33                                  	
    34                                  
    35                                  ; Start Message
    36 00000017 202020202020202054-     msg1: db "        TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    36 00000020 45434E4F4C4F474943-
    36 00000029 4F20444520434F5354-
    36 00000032 412052494341202020-
    36 0000003B 20202020200A0D     
    37 00000042 202020202020202041-     msg2: db "        ARQUITECTURA DE COMPUTADORAS I        ", 0xA, 0xD
    37 0000004B 525155495445435455-
    37 00000054 524120444520434F4D-
    37 0000005D 50555441444F524153-
    37 00000066 204920202020202020-
    37 0000006F 200A0D             
    38 00000072 202020202020202045-     msg3: db "        ESTUDIANTE: HENRY NUNEZ PEREZ        ", 0xA, 0xD
    38 0000007B 5354554449414E5445-
    38 00000084 3A2048454E5259204E-
    38 0000008D 554E455A2050455245-
    38 00000096 5A2020202020202020-
    38 0000009F 0A0D               
    39 000000A1 202020202020202050-     msg4: db "        PROFESOR: ERNESTO RIVERA ALVARADO        ", 0xA, 0xD
    39 000000AA 524F4645534F523A20-
    39 000000B3 45524E4553544F2052-
    39 000000BC 495645524120414C56-
    39 000000C5 415241444F20202020-
    39 000000CE 202020200A0D       
    40 000000D4 202020202020202041-     msg5: db "        ARKANOID RETRO        ", 0xA, 0xD
    40 000000DD 524B414E4F49442052-
    40 000000E6 4554524F2020202020-
    40 000000EF 2020200A0D         
    41 000000F4 202020202020202050-     msg6: db "        PRESIONE CUALQUIER TECLA PARA INICIAR        ", 0xA, 0xD
    41 000000FD 524553494F4E452043-
    41 00000106 55414C515549455220-
    41 0000010F 5445434C4120504152-
    41 00000118 4120494E4943494152-
    41 00000121 20202020202020200A-
    41 0000012A 0D                 
    42                                  msg1_length: equ $-msg1
    43                                  msg2_length: equ $-msg2
    44                                  msg3_length: equ $-msg3
    45                                  msg4_length: equ $-msg4
    46                                  msg5_length: equ $-msg5
    47                                  msg6_length: equ $-msg6
    48                                  
    49                                  ; Usefull macros
    50                                  
    51                                  
    52                                  
    53                                  %macro setnonblocking 0
    54                                  	mov rax, sys_fcntl
    55                                      mov rdi, STDIN_FILENO
    56                                      mov rsi, F_SETFL
    57                                      mov rdx, O_NONBLOCK
    58                                      syscall
    59                                  %endmacro
    60                                  
    61                                  %macro unsetnonblocking 0
    62                                  	mov rax, sys_fcntl
    63                                      mov rdi, STDIN_FILENO
    64                                      mov rsi, F_SETFL
    65                                      mov rdx, 0
    66                                      syscall
    67                                  %endmacro
    68                                  
    69                                  %macro full_line 0
    70                                      times column_cells db "X"
    71                                      db 0x0a, 0xD
    72                                  %endmacro
    73                                  
    74                                  %macro hollow_line 0
    75                                      db "X"
    76                                      times column_cells-2 db " "
    77                                      db "X", 0x0a, 0xD
    78                                  %endmacro
    79                                  
    80                                  
    81                                  %macro print 2
    82                                  	mov eax, sys_write
    83                                  	mov edi, 1 	; stdout
    84                                  	mov rsi, %1
    85                                  	mov edx, %2
    86                                  	syscall
    87                                  %endmacro
    88                                  
    89                                  %macro getchar 0
    90                                  	mov     rax, sys_read
    91                                      mov     rdi, STDIN_FILENO
    92                                      mov     rsi, input_char
    93                                      mov     rdx, 1 ; number of bytes
    94                                      syscall         ;read text input from keyboard
    95                                  %endmacro
    96                                  
    97                                  %macro sleeptime 0
    98                                  	mov eax, sys_nanosleep
    99                                  	mov rdi, timespec
   100                                  	xor esi, esi		; ignore remaining time in case of call interruption
   101                                  	syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   102                                  %endmacro
   103                                  
   104                                  
   105                                  
   106                                  global _start
   107                                  
   108                                  section .bss
   109                                  
   110 00000000 ??                      input_char: resb 1
   111                                  
   112                                  section .data
   113                                  
   114                                  	; Guardamos la plantilla del tablero (32 filas)
   115                                      board_template:
   116                                          full_line
    70 00000000 58<rep 50h>         <1>  times column_cells db "X"
    71 00000050 0A0D                <1>  db 0x0a, 0xD
   117                                          %rep 30
   118                                          hollow_line
   119                                          %endrep
   118                              <1>  hollow_line
    75 00000052 58                  <2>  db "X"
    76 00000053 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000A1 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000A4 58                  <2>  db "X"
    76 000000A5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000000F3 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000F6 58                  <2>  db "X"
    76 000000F7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000145 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000148 58                  <2>  db "X"
    76 00000149 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000197 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000019A 58                  <2>  db "X"
    76 0000019B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000001E9 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000001EC 58                  <2>  db "X"
    76 000001ED 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000023B 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000023E 58                  <2>  db "X"
    76 0000023F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000028D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000290 58                  <2>  db "X"
    76 00000291 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000002DF 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000002E2 58                  <2>  db "X"
    76 000002E3 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000331 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000334 58                  <2>  db "X"
    76 00000335 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000383 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000386 58                  <2>  db "X"
    76 00000387 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000003D5 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000003D8 58                  <2>  db "X"
    76 000003D9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000427 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000042A 58                  <2>  db "X"
    76 0000042B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000479 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000047C 58                  <2>  db "X"
    76 0000047D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000004CB 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000004CE 58                  <2>  db "X"
    76 000004CF 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000051D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000520 58                  <2>  db "X"
    76 00000521 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000056F 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000572 58                  <2>  db "X"
    76 00000573 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000005C1 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005C4 58                  <2>  db "X"
    76 000005C5 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000613 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000616 58                  <2>  db "X"
    76 00000617 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000665 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000668 58                  <2>  db "X"
    76 00000669 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000006B7 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000006BA 58                  <2>  db "X"
    76 000006BB 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000709 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000070C 58                  <2>  db "X"
    76 0000070D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 0000075B 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000075E 58                  <2>  db "X"
    76 0000075F 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007AD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000007B0 58                  <2>  db "X"
    76 000007B1 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000007FF 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000802 58                  <2>  db "X"
    76 00000803 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000851 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000854 58                  <2>  db "X"
    76 00000855 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008A3 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008A6 58                  <2>  db "X"
    76 000008A7 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000008F5 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008F8 58                  <2>  db "X"
    76 000008F9 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000947 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000094A 58                  <2>  db "X"
    76 0000094B 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 00000999 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 0000099C 58                  <2>  db "X"
    76 0000099D 20<rep 4Eh>         <2>  times column_cells-2 db " "
    77 000009EB 580A0D              <2>  db "X", 0x0a, 0xD
   120                                          full_line
    70 000009EE 58<rep 50h>         <1>  times column_cells db "X"
    71 00000A3E 0A0D                <1>  db 0x0a, 0xD
   121                                      board_template_size: equ $ - board_template
   122                                  
   123                                      ; Espacio real que se usará en la ejecución
   124 00000A40 00<rep A40h>                board: times board_template_size db 0
   125                                      board_size: equ board_template_size
   126                                  
   127                                  	; Added for the terminal issue
   128 00001480 00<rep 24h>             	termios:        times 36 db 0
   129                                  	stdin:          equ 0
   130                                  	ICANON:         equ 1<<1
   131                                  	ECHO:           equ 1<<3
   132                                  	VTIME: 			equ 5
   133                                  	VMIN:			equ 6
   134                                  	CC_C:			equ 18
   135                                  
   136                                  section .text
   137                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   138                                  canonical_off:
   139 0000012B E86F000000                      call read_stdin_termios
   140                                  
   141                                          ; clear canonical bit in local mode flags
   142 00000130 50                              push rax
   143 00000131 B802000000                      mov eax, ICANON
   144 00000136 F7D0                            not eax
   145 00000138 2105(8C140000)                  and [termios+12], eax
   146 0000013E C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   147 00000145 C605(98140000)00        		mov byte[termios+CC_C+VMIN], 0
   148 0000014C 58                              pop rax
   149                                  
   150 0000014D E86C000000                      call write_stdin_termios
   151 00000152 C3                              ret
   152                                  
   153                                  echo_off:
   154 00000153 E847000000                      call read_stdin_termios
   155                                  
   156                                          ; clear echo bit in local mode flags
   157 00000158 50                              push rax
   158 00000159 B808000000                      mov eax, ECHO
   159 0000015E F7D0                            not eax
   160 00000160 2105(8C140000)                  and [termios+12], eax
   161 00000166 58                              pop rax
   162                                  
   163 00000167 E852000000                      call write_stdin_termios
   164 0000016C C3                              ret
   165                                  
   166                                  canonical_on:
   167 0000016D E82D000000                      call read_stdin_termios
   168                                  
   169                                          ; set canonical bit in local mode flags
   170 00000172 830D(8C140000)02                or dword [termios+12], ICANON
   171 00000179 C605(97140000)00        		mov byte[termios+CC_C+VTIME], 0
   172 00000180 C605(98140000)01        		mov byte[termios+CC_C+VMIN], 1
   173 00000187 E832000000                      call write_stdin_termios
   174 0000018C C3                              ret
   175                                  
   176                                  echo_on:
   177 0000018D E80D000000                      call read_stdin_termios
   178                                  
   179                                          ; set echo bit in local mode flags
   180 00000192 830D(8C140000)08                or dword [termios+12], ECHO
   181                                  
   182 00000199 E820000000                      call write_stdin_termios
   183 0000019E C3                              ret
   184                                  
   185                                  read_stdin_termios:
   186 0000019F 50                              push rax
   187 000001A0 53                              push rbx
   188 000001A1 51                              push rcx
   189 000001A2 52                              push rdx
   190                                  
   191 000001A3 B836000000                      mov eax, 36h
   192 000001A8 BB00000000                      mov ebx, stdin
   193 000001AD B901540000                      mov ecx, 5401h
   194 000001B2 BA[80140000]                    mov edx, termios
   195 000001B7 CD80                            int 80h
   196                                  
   197 000001B9 5A                              pop rdx
   198 000001BA 59                              pop rcx
   199 000001BB 5B                              pop rbx
   200 000001BC 58                              pop rax
   201 000001BD C3                              ret
   202                                  
   203                                  write_stdin_termios:
   204 000001BE 50                              push rax
   205 000001BF 53                              push rbx
   206 000001C0 51                              push rcx
   207 000001C1 52                              push rdx
   208                                  
   209 000001C2 B836000000                      mov eax, 36h
   210 000001C7 BB00000000                      mov ebx, stdin
   211 000001CC B902540000                      mov ecx, 5402h
   212 000001D1 BA[80140000]                    mov edx, termios
   213 000001D6 CD80                            int 80h
   214                                  
   215 000001D8 5A                              pop rdx
   216 000001D9 59                              pop rcx
   217 000001DA 5B                              pop rbx
   218 000001DB 58                              pop rax
   219 000001DC C3                              ret
   220                                  
   221                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   222                                  
   223                                  char_equal: equ 61
   224                                  char_space: equ 32
   225                                  char_O: equ 79
   226                                  left_direction: equ -1
   227                                  right_direction: equ 1
   228                                  
   229                                  
   230                                  section .data
   231                                  
   232                                  ; Mensajes para los niveles
   233 000014A4 4E4956454C20                level_msg: db "NIVEL "
   234                                      level_msg_len: equ $ - level_msg
   235 000014AA 31                          level_1_char: db "1"
   236 000014AB 32                          level_2_char: db "2"
   237 000014AC 33                          level_3_char: db "3"
   238 000014AD 34                          level_4_char: db "4"
   239 000014AE 35                          level_5_char: db "5"
   240                                      level_char_len: equ 1
   241                                  
   242                                      ; Timespec para la pausa del mensaje de nivel
   243                                      level_display_time:
   244 000014AF 0100000000000000                lvl_tv_sec dq 1           ; 1 segundo
   245 000014B7 0000000000000000                lvl_tv_nsec dq 0
   246                                          
   247 000014BF [B013000000000000]      	pallet_position dq board + 38 + 29 * (column_cells +2)
   248 000014C7 0500000000000000            pallet_size dq 5
   249 000014CF 0500000000000000            default_pallet_size dq 5    ; Tamaño normal de la paleta
   250 000014D7 0700000000000000            extended_pallet_size dq 7   ; Tamaño extendido de la paleta
   251                                  
   252 000014DF 2800000000000000        	ball_x_pos: dq 40
   253 000014E7 1C00000000000000        	ball_y_pos: dq 28
   254 000014EF 0100000000000000            ball_direction_x dq 1    ; 1 = derecha, -1 = izquierda
   255 000014F7 FFFFFFFFFFFFFFFF            ball_direction_y dq -1   ; -1 = arriba, 1 = abajo
   256 000014FF 00                          ball_moving db 0         ; 0 = estática, 1 = en movimiento
   257 00001500 00                          ball_active db 0
   258                                  
   259 00001501 0000000000000000            ball2_x_pos:        dq 0
   260 00001509 0000000000000000            ball2_y_pos:        dq 0
   261 00001511 0000000000000000            ball2_direction_x:  dq 0
   262 00001519 0000000000000000            ball2_direction_y:  dq 0
   263 00001521 00                          ball2_moving:       db 0    ; 0 = estática, 1 = en movimiento
   264 00001522 00                          ball2_active:       db 0    ; 0 = inactiva, 1 = activa
   265                                  
   266                                      ; -- Pelota 3 --
   267 00001523 0000000000000000            ball3_x_pos:        dq 0
   268 0000152B 0000000000000000            ball3_y_pos:        dq 0
   269 00001533 0000000000000000            ball3_direction_x:  dq 0
   270 0000153B 0000000000000000            ball3_direction_y:  dq 0
   271 00001543 00                          ball3_moving:       db 0
   272 00001544 00                          ball3_active:       db 0
   273                                  
   274                                  
   275                                  ; Definir los límites de la pantalla o área de juego
   276                                      board_top_left_x equ 1
   277                                      board_top_left_y equ 1
   278                                      board_bottom_right_x equ column_cells - 1
   279                                      board_bottom_right_y equ row_cells
   280                                  
   281                                      ; Limites laterales
   282                                      left_edge equ board_top_left_x               ; Límite izquierdo en la primera columna
   283                                      right_edge equ board_bottom_right_x         ; Límite derecho en la última columna
   284                                  
   285                                      ; O también puedes hacerlo así si prefieres usando las coordenadas en memoria para obtener la ubicación exacta:
   286 00001545 [920A000000000000]          left_edge_position dq board + (board_top_left_y * (column_cells + 2)) ; Coordenada de la parte izquierda del marco
   287 0000154D [E00A000000000000]          right_edge_position dq board + (board_top_left_y * (column_cells + 2) + board_bottom_right_x - 1) ; Coordenada de la parte derecha del marco
   288                                  
   289                                      ; Definición de tipos de bloques
   290 00001555 555555555555                block_type_1: db "UUUUUU"    ; Durabilidad 1
   291 0000155B 4F4F4F4F4F4F                block_type_2: db "OOOOOO"    ; Durabilidad 2
   292 00001561 444444444444                block_type_3: db "DDDDDD"    ; Durabilidad 3
   293 00001567 4C4C4C4C4C4C                block_type_4: db "LLLLLL"    ; Durabilidad 4
   294 0000156D 565656565656                block_type_5: db "VVVVVV"    ; Durabilidad 5
   295 00001573 383838383838                block_type_6: db "888888"    ; Durabilidad 6
   296                                      block_length: equ 6        ; Longitud de cada bloque
   297                                  
   298                                      ; Estructura para el nivel actual
   299 00001579 01                          current_level db 1
   300 0000157A 00                          blocks_remaining db 0
   301                                  
   302                                      ; Definición del nivel 1 (ejemplo con múltiples bloques)destroyed_blocks
   303                                      ; Formato: x_pos, y_pos, tipo_bloque, durabilidad_actual
   304                                      level1_blocks:
   305                                          ; Tercera fila (tipo 3)
   306 0000157B 0106050220                      db 1, 6, 5, 2, ' '   
   307 00001580 0706050220                      db 7, 6, 5, 2, ' '    
   308 00001585 0D06050220                      db 13, 6, 5, 2, ' '   
   309 0000158A 1306050220                      db 19, 6, 5, 2, ' '   
   310 0000158F 1906050220                      db 25, 6, 5, 2, ' '   
   311 00001594 1F06050220                      db 31, 6, 5, 2, ' '   
   312 00001599 2506050220                      db 37, 6, 5, 2, ' '   
   313 0000159E 2B06050220                      db 43, 6, 5, 2, ' '   
   314 000015A3 3106050220                      db 49, 6, 5, 2, ' '   
   315 000015A8 3706050220                      db 55, 6, 5, 2, ' '   
   316 000015AD 3D06050220                      db 61, 6, 5, 2, ' '  
   317 000015B2 4306050220                      db 67, 6, 5, 2, ' '   
   318 000015B7 4906050220                      db 73, 6, 5, 2, ' '   
   319                                  
   320 000015BC 0107040145                      db 1, 7, 4, 1, 'E'   
   321 000015C1 0707020153                      db 7, 7, 2, 1, 'S'    
   322 000015C6 0D07040153                      db 13, 7, 4, 1, 'S'   
   323 000015CB 1307020153                      db 19, 7, 2, 1, 'S'   
   324 000015D0 1907040120                      db 25, 7, 4, 1, ' '   
   325 000015D5 1F07020120                      db 31, 7, 2, 1, ' '   
   326 000015DA 2507040120                      db 37, 7, 4, 1, ' '   
   327 000015DF 2B07020143                      db 43, 7, 2, 1, 'C'   
   328 000015E4 3107040120                      db 49, 7, 4, 1, ' '   
   329 000015E9 3707020120                      db 55, 7, 2, 1, ' '   
   330 000015EE 3D07040120                      db 61, 7, 4, 1, ' '  
   331 000015F3 4307020120                      db 67, 7, 2, 1, ' '   
   332 000015F8 4907040120                      db 73, 7, 4, 1, ' ' 
   333                                  
   334 000015FD 0108010120                      db 1, 8, 1, 1, ' '   
   335 00001602 0708030120                      db 7, 8, 3, 1, ' '    
   336 00001607 0D08010120                      db 13, 8, 1, 1, ' '   
   337 0000160C 1308030120                      db 19, 8, 3, 1, ' '   
   338 00001611 1908010120                      db 25, 8, 1, 1, ' '   
   339 00001616 1F08030120                      db 31, 8, 3, 1, ' '   
   340 0000161B 2508010120                      db 37, 8, 1, 1, ' '   
   341 00001620 2B08030120                      db 43, 8, 3, 1, ' '   
   342 00001625 3108010120                      db 49, 8, 1, 1, ' '   
   343 0000162A 3708030120                      db 55, 8, 3, 1, ' '   
   344 0000162F 3D08010120                      db 61, 8, 1, 1, ' '  
   345 00001634 4308030120                      db 67, 8, 3, 1, ' '   
   346 00001639 4908010120                      db 73, 8, 1, 1, ' ' 
   347                                  
   348 0000163E 0109040120                      db 1, 9, 4, 1, ' '   
   349 00001643 0709020120                      db 7, 9, 2, 1, ' '    
   350 00001648 0D09040150                      db 13, 9, 4, 1, 'P'   
   351 0000164D 1309020120                      db 19, 9, 2, 1, ' '   
   352 00001652 1909040120                      db 25, 9, 4, 1, ' '   
   353 00001657 1F09020120                      db 31, 9, 2, 1, ' '   
   354 0000165C 2509040145                      db 37, 9, 4, 1, 'E'   
   355 00001661 2B09020143                      db 43, 9, 2, 1, 'C'   
   356 00001666 3109040120                      db 49, 9, 4, 1, ' '   
   357 0000166B 3709020120                      db 55, 9, 2, 1, ' '   
   358 00001670 3D09040120                      db 61, 9, 4, 1, ' '  
   359 00001675 4309020120                      db 67, 9, 2, 1, ' '   
   360 0000167A 4909040120                      db 73, 9, 4, 1, ' ' 
   361                                  
   362 0000167F 010A010120                      db 1, 10, 1, 1, ' '   
   363 00001684 070A030120                      db 7, 10, 3, 1, ' '    
   364 00001689 0D0A010120                      db 13, 10, 1, 1, ' '   
   365 0000168E 130A030120                      db 19, 10, 3, 1, ' '   
   366 00001693 190A010120                      db 25, 10, 1, 1, ' '   
   367 00001698 1F0A030120                      db 31, 10, 3, 1, ' '   
   368 0000169D 250A010120                      db 37, 10, 1, 1, ' '   
   369 000016A2 2B0A030120                      db 43, 10, 3, 1, ' '   
   370 000016A7 310A010120                      db 49, 10, 1, 1, ' '   
   371 000016AC 370A030120                      db 55, 10, 3, 1, ' '   
   372 000016B1 3D0A010120                      db 61, 10, 1, 1, ' '  
   373 000016B6 430A030120                      db 67, 10, 3, 1, ' '   
   374 000016BB 490A010120                      db 73, 10, 1, 1, ' ' 
   375                                  
   376 000016C0 010B040145                      db 1, 11, 4, 1, 'E'   
   377 000016C5 070B020120                      db 7, 11, 2, 1, ' '    
   378 000016CA 0D0B040120                      db 13, 11, 4, 1, ' '   
   379 000016CF 130B020120                      db 19, 11, 2, 1, ' '   
   380 000016D4 190B040120                      db 25, 11, 4, 1, ' '   
   381 000016D9 1F0B020120                      db 31, 11, 2, 1, ' '   
   382 000016DE 250B040143                      db 37, 11, 4, 1, 'C'   
   383 000016E3 2B0B020120                      db 43, 11, 2, 1, ' '   
   384 000016E8 310B040120                      db 49, 11, 4, 1, ' '   
   385 000016ED 370B02014C                      db 55, 11, 2, 1, 'L'   
   386 000016F2 3D0B040120                      db 61, 11, 4, 1, ' '  
   387 000016F7 430B020120                      db 67, 11, 2, 1, ' '   
   388 000016FC 490B040120                      db 73, 11, 4, 1, ' ' 
   389                                  
   390                                      level1_blocks_count equ 78   ; Cantidad total de bloques
   391                                  
   392                                      ; Nivel 2: Bloques de prueba
   393                                      level2_blocks:
   394 00001701 0103040120                      db 1, 3, 4, 1, ' '
   395                                  
   396 00001706 0104030120                      db 1, 4, 3, 1, ' '   
   397 0000170B 0704040120                      db 7, 4, 4, 1, ' '   
   398                                                  
   399 00001710 0105020120                      db 1, 5, 2, 1, ' '   
   400 00001715 0705030120                      db 7, 5, 3, 1, ' '
   401 0000171A 0D05040120                      db 13, 5, 4, 1, ' '
   402                                  
   403 0000171F 0106010120                      db 1, 6, 1, 1, ' '   
   404 00001724 0706020120                      db 7, 6, 2, 1, ' '
   405 00001729 0D06030120                      db 13, 6, 3, 1, ' '
   406 0000172E 1306040120                      db 19, 6, 4, 1, ' '   
   407                                  
   408 00001733 0107040120                      db 1, 7, 4, 1, ' '   
   409 00001738 0707010120                      db 7, 7, 1, 1, ' '
   410 0000173D 0D07020120                      db 13, 7, 2, 1, ' '
   411 00001742 1307030120                      db 19, 7, 3, 1, ' '  
   412 00001747 1907040120                      db 25, 7, 4, 1, ' '   
   413                                  
   414 0000174C 0108030120                      db 1, 8, 3, 1, ' '   
   415 00001751 0708040120                      db 7, 8, 4, 1, ' '
   416 00001756 0D08010120                      db 13, 8, 1, 1, ' '
   417 0000175B 1308020120                      db 19, 8, 2, 1, ' '  
   418 00001760 1908030120                      db 25, 8, 3, 1, ' ' 
   419 00001765 1F08040120                      db 31, 8, 4, 1, ' '   
   420                                  
   421 0000176A 0109020120                      db 1, 9, 2, 1, ' '   
   422 0000176F 0709030120                      db 7, 9, 3, 1, ' '
   423 00001774 0D09040120                      db 13, 9, 4, 1, ' '
   424 00001779 1309010120                      db 19, 9, 1, 1, ' '  
   425 0000177E 1909020120                      db 25, 9, 2, 1, ' ' 
   426 00001783 1F09030120                      db 31, 9, 3, 1, ' ' 
   427 00001788 2509040120                      db 37, 9, 4, 1, ' '   
   428                                  
   429 0000178D 010A010120                      db 1, 10, 1, 1, ' '   
   430 00001792 070A020120                      db 7, 10, 2, 1, ' '
   431 00001797 0D0A030120                      db 13, 10, 3, 1, ' '
   432 0000179C 130A040120                      db 19, 10, 4, 1, ' '  
   433 000017A1 190A010120                      db 25, 10, 1, 1, ' ' 
   434 000017A6 1F0A020120                      db 31, 10, 2, 1, ' ' 
   435 000017AB 250A030120                      db 37, 10, 3, 1, ' '  
   436 000017B0 2B0A040120                      db 43, 10, 4, 1, ' '   
   437                                  
   438 000017B5 010B040120                      db 1, 11, 4, 1, ' '   
   439 000017BA 070B010120                      db 7, 11, 1, 1, ' '
   440 000017BF 0D0B020120                      db 13, 11, 2, 1, ' '
   441 000017C4 130B030120                      db 19, 11, 3, 1, ' '  
   442 000017C9 190B040120                      db 25, 11, 4, 1, ' ' 
   443 000017CE 1F0B010120                      db 31, 11, 1, 1, ' ' 
   444 000017D3 250B020120                      db 37, 11, 2, 1, ' '  
   445 000017D8 2B0B030120                      db 43, 11, 3, 1, ' ' 
   446 000017DD 310B040120                      db 49, 11, 4, 1, ' '   
   447                                  
   448 000017E2 010C030120                      db 1, 12, 3, 1, ' '   
   449 000017E7 070C040120                      db 7, 12, 4, 1, ' '
   450 000017EC 0D0C010120                      db 13, 12, 1, 1, ' '
   451 000017F1 130C020120                      db 19, 12, 2, 1, ' '  
   452 000017F6 190C030120                      db 25, 12, 3, 1, ' ' 
   453 000017FB 1F0C040120                      db 31, 12, 4, 1, ' ' 
   454 00001800 250C010120                      db 37, 12, 1, 1, ' '  
   455 00001805 2B0C020120                      db 43, 12, 2, 1, ' ' 
   456 0000180A 310C030120                      db 49, 12, 3, 1, ' '
   457 0000180F 370C040120                      db 55, 12, 4, 1, ' '   
   458                                  
   459 00001814 010D020120                      db 1, 13, 2, 1, ' '   
   460 00001819 070D030120                      db 7, 13, 3, 1, ' '
   461 0000181E 0D0D040120                      db 13, 13, 4, 1, ' '
   462 00001823 130D010120                      db 19, 13, 1, 1, ' '  
   463 00001828 190D020120                      db 25, 13, 2, 1, ' ' 
   464 0000182D 1F0D030120                      db 31, 13, 3, 1, ' ' 
   465 00001832 250D040120                      db 37, 13, 4, 1, ' '  
   466 00001837 2B0D010120                      db 43, 13, 1, 1, ' ' 
   467 0000183C 310D020120                      db 49, 13, 2, 1, ' '
   468 00001841 370D030120                      db 55, 13, 3, 1, ' ' 
   469 00001846 3D0D040120                      db 61, 13, 4, 1, ' '   
   470                                  
   471 0000184B 010E010120                      db 1, 14, 1, 1, ' '   
   472 00001850 070E020120                      db 7, 14, 2, 1, ' '
   473 00001855 0D0E030120                      db 13, 14, 3, 1, ' '
   474 0000185A 130E040120                      db 19, 14, 4, 1, ' '  
   475 0000185F 190E010120                      db 25, 14, 1, 1, ' ' 
   476 00001864 1F0E020120                      db 31, 14, 2, 1, ' ' 
   477 00001869 250E030120                      db 37, 14, 3, 1, ' '  
   478 0000186E 2B0E040120                      db 43, 14, 4, 1, ' ' 
   479 00001873 310E010120                      db 49, 14, 1, 1, ' '
   480 00001878 370E020120                      db 55, 14, 2, 1, ' ' 
   481 0000187D 3D0E030120                      db 61, 14, 3, 1, ' '  
   482 00001882 430E040120                      db 67, 14, 4, 1, ' '   
   483                                  
   484 00001887 010F050220                      db 1, 15, 5, 2, ' '   
   485 0000188C 070F050220                      db 7, 15, 5, 2, ' '
   486 00001891 0D0F050220                      db 13, 15, 5, 2, ' '
   487 00001896 130F050220                      db 19, 15, 5, 2, ' '  
   488 0000189B 190F050220                      db 25, 15, 5, 2, ' ' 
   489 000018A0 1F0F050220                      db 31, 15, 5, 2, ' ' 
   490 000018A5 250F050220                      db 37, 15, 5, 2, ' '  
   491 000018AA 2B0F050220                      db 43, 15, 5, 2, ' ' 
   492 000018AF 310F050220                      db 49, 15, 5, 2, ' '
   493 000018B4 370F050220                      db 55, 15, 5, 2, ' ' 
   494 000018B9 3D0F050220                      db 61, 15, 5, 2, ' '  
   495 000018BE 430F050220                      db 67, 15, 5, 2, ' '
   496 000018C3 490F040120                      db 73, 15, 4, 1, ' '   
   497                                         
   498                                  
   499                                      level2_blocks_count equ 91
   500                                  
   501                                      ; Nivel 3
   502                                      level3_blocks:
   503                                  
   504 000018C8 0105010120                      db 1, 5, 1, 1, ' '   
   505 000018CD 0705020120                      db 7, 5, 2, 1, ' '    
   506 000018D2 0D05010120                      db 13, 5, 1, 1, ' '   
   507 000018D7 1305020120                      db 19, 5, 2, 1, ' '   
   508 000018DC 1905010120                      db 25, 5, 1, 1, ' '   
   509 000018E1 1F05020120                      db 31, 5, 2, 1, ' '   
   510 000018E6 2505010120                      db 37, 5, 1, 1, ' '   
   511 000018EB 2B05020120                      db 43, 5, 2, 1, ' '   
   512 000018F0 3105010120                      db 49, 5, 1, 1, ' '   
   513 000018F5 3705020120                      db 55, 5, 2, 1, ' '   
   514 000018FA 3D05010120                      db 61, 5, 1, 1, ' '  
   515 000018FF 4305020120                      db 67, 5, 2, 1, ' '   
   516 00001904 4905010120                      db 73, 5, 1, 1, ' ' 
   517                                  
   518 00001909 0107040120                      db 1, 7, 4, 1, ' '   
   519 0000190E 0707040120                      db 7, 7, 4, 1, ' '    
   520 00001913 0D07040120                      db 13, 7, 4, 1, ' '   
   521 00001918 1307063C20                      db 19, 7, 6, 60, ' '   
   522 0000191D 1907063C20                      db 25, 7, 6, 60, ' '   
   523 00001922 1F07063C20                      db 31, 7, 6, 60, ' '   
   524 00001927 2507063C20                      db 37, 7, 6, 60, ' '   
   525 0000192C 2B07063C20                      db 43, 7, 6, 60, ' '   
   526 00001931 3107063C20                      db 49, 7, 6, 60, ' '   
   527 00001936 3707063C20                      db 55, 7, 6, 60, ' '   
   528 0000193B 3D07063C20                      db 61, 7, 6, 60, ' '  
   529 00001940 4307063C20                      db 67, 7, 6, 60, ' '   
   530 00001945 4907063C20                      db 73, 7, 6, 60, ' ' 
   531                                  
   532 0000194A 0109040120                      db 1, 9, 4, 1, ' '   
   533 0000194F 0709030120                      db 7, 9, 3, 1, ' '    
   534 00001954 0D09040120                      db 13, 9, 4, 1, ' '   
   535 00001959 1309030120                      db 19, 9, 3, 1, ' '   
   536 0000195E 1909040120                      db 25, 9, 4, 1, ' '   
   537 00001963 1F09030120                      db 31, 9, 3, 1, ' '   
   538 00001968 2509040120                      db 37, 9, 4, 1, ' '   
   539 0000196D 2B09030120                      db 43, 9, 3, 1, ' '   
   540 00001972 3109040120                      db 49, 9, 4, 1, ' '   
   541 00001977 3709030120                      db 55, 9, 3, 1, ' '   
   542 0000197C 3D09040120                      db 61, 9, 4, 1, ' '  
   543 00001981 4309030120                      db 67, 9, 3, 1, ' '   
   544 00001986 4909040120                      db 73, 9, 4, 1, ' ' 
   545                                  
   546 0000198B 010B063C20                      db 1, 11, 6, 60, ' '   
   547 00001990 070B063C20                      db 7, 11, 6, 60, ' '    
   548 00001995 0D0B063C20                      db 13, 11, 6, 60, ' '   
   549 0000199A 130B063C20                      db 19, 11, 6, 60, ' '   
   550 0000199F 190B063C20                      db 25, 11, 6, 60, ' '   
   551 000019A4 1F0B063C20                      db 31, 11, 6, 60, ' '   
   552 000019A9 250B063C20                      db 37, 11, 6, 60, ' '   
   553 000019AE 2B0B063C20                      db 43, 11, 6, 60, ' '   
   554 000019B3 310B063C20                      db 49, 11, 6, 60, ' '   
   555 000019B8 370B063C20                      db 55, 11, 6, 60, ' '   
   556 000019BD 3D0B030144                      db 61, 11, 3, 1, 'D'  
   557 000019C2 430B030120                      db 67, 11, 3, 1, ' '   
   558 000019C7 490B030120                      db 73, 11, 3, 1, ' ' 
   559                                  
   560 000019CC 010D010120                      db 1, 13, 1, 1, ' '   
   561 000019D1 070D020150                      db 7, 13, 2, 1, 'P'    
   562 000019D6 0D0D010120                      db 13, 13, 1, 1, ' '   
   563 000019DB 130D020120                      db 19, 13, 2, 1, ' '   
   564 000019E0 190D010120                      db 25, 13, 1, 1, ' '   
   565 000019E5 1F0D020120                      db 31, 13, 2, 1, ' '   
   566 000019EA 250D010120                      db 37, 13, 1, 1, ' '   
   567 000019EF 2B0D020120                      db 43, 13, 2, 1, ' '   
   568 000019F4 310D010120                      db 49, 13, 1, 1, ' '   
   569 000019F9 370D020120                      db 55, 13, 2, 1, ' '   
   570 000019FE 3D0D010120                      db 61, 13, 1, 1, ' '  
   571 00001A03 430D020120                      db 67, 13, 2, 1, ' '   
   572 00001A08 490D010120                      db 73, 13, 1, 1, ' ' 
   573                                  
   574 00001A0D 010F020120                      db 1, 15, 2, 1, ' '   
   575 00001A12 070F020120                      db 7, 15, 2, 1, ' '    
   576 00001A17 0D0F020120                      db 13, 15, 2, 1, ' '   
   577 00001A1C 130F063C20                      db 19, 15, 6, 60, ' '   
   578 00001A21 190F063C20                      db 25, 15, 6, 60, ' '   
   579 00001A26 1F0F063C20                      db 31, 15, 6, 60, ' '   
   580 00001A2B 250F063C20                      db 37, 15, 6, 60, ' '   
   581 00001A30 2B0F063C20                      db 43, 15, 6, 60, ' '   
   582 00001A35 310F063C20                      db 49, 15, 6, 60, ' '   
   583 00001A3A 370F063C20                      db 55, 15, 6, 60, ' '   
   584 00001A3F 3D0F063C20                      db 61, 15, 6, 60, ' '  
   585 00001A44 430F063C20                      db 67, 15, 6, 60, ' '   
   586 00001A49 490F063C20                      db 73, 15, 6, 60, ' ' 
   587                                  
   588 00001A4E 0111020120                      db 1, 17, 2, 1, ' '   
   589 00001A53 0711030120                      db 7, 17, 3, 1, ' '    
   590 00001A58 0D11020120                      db 13, 17, 2, 1, ' '   
   591 00001A5D 1311030120                      db 19, 17, 3, 1, ' '   
   592 00001A62 1911020120                      db 25, 17, 2, 1, ' '   
   593 00001A67 1F11030120                      db 31, 17, 3, 1, ' '   
   594 00001A6C 2511020120                      db 37, 17, 2, 1, ' '   
   595 00001A71 2B11030120                      db 43, 17, 3, 1, ' '   
   596 00001A76 3111020120                      db 49, 17, 2, 1, ' '   
   597 00001A7B 3711030120                      db 55, 17, 3, 1, ' '   
   598 00001A80 3D11020120                      db 61, 17, 2, 1, ' '  
   599 00001A85 4311030143                      db 67, 17, 3, 1, 'C'   
   600 00001A8A 4911020120                      db 73, 17, 2, 1, ' ' 
   601                                  
   602                                  
   603 00001A8F 0113063C20                      db 1, 19, 6, 60, ' '   
   604 00001A94 0713063C20                      db 7, 19, 6, 60, ' '    
   605 00001A99 0D13063C20                      db 13, 19, 6, 60, ' '   
   606 00001A9E 1313063C20                      db 19, 19, 6, 60, ' '   
   607 00001AA3 1913063C20                      db 25, 19, 6, 60, ' '   
   608 00001AA8 1F13063C20                      db 31, 19, 6, 60, ' '   
   609 00001AAD 2513063C20                      db 37, 19, 6, 60, ' '   
   610 00001AB2 2B13063C20                      db 43, 19, 6, 60, ' '   
   611 00001AB7 3113063C20                      db 49, 19, 6, 60, ' '   
   612 00001ABC 3713063C20                      db 55, 19, 6, 60, ' '   
   613 00001AC1 3D13010120                      db 61, 19, 1, 1, ' '  
   614 00001AC6 4313010153                      db 67, 19, 1, 1, 'S'   
   615 00001ACB 4913010120                      db 73, 19, 1, 1, ' ' 
   616                                  
   617                                      level3_blocks_count equ 104
   618                                  
   619                                      ; Nivel 4
   620                                      level4_blocks:
   621                                  
   622 00001AD0 0704010120                      db 7, 4, 1, 1, ' '    
   623 00001AD5 0D04020120                      db 13, 4, 2, 1, ' '   
   624 00001ADA 1304030120                      db 19, 4, 3, 1, ' '   
   625 00001ADF 1904050220                      db 25, 4, 5, 2, ' '   
   626 00001AE4 1F04020120                      db 31, 4, 2, 1, ' '
   627                                  
   628 00001AE9 2B04010120                      db 43, 4, 1, 1, ' '   
   629 00001AEE 3104020120                      db 49, 4, 2, 1, ' '   
   630 00001AF3 3704030120                      db 55, 4, 3, 1, ' '   
   631 00001AF8 3D04040120                      db 61, 4, 4, 1, ' '  
   632 00001AFD 4304020120                      db 67, 4, 2, 1, ' ' 
   633                                  
   634 00001B02 0705020120                      db 7, 5, 2, 1, ' '    
   635 00001B07 0D05030120                      db 13, 5, 3, 1, ' '   
   636 00001B0C 1305050220                      db 19, 5, 5, 2, ' '   
   637 00001B11 1905020120                      db 25, 5, 2, 1, ' '   
   638 00001B16 1F05010120                      db 31, 5, 1, 1, ' '
   639                                  
   640 00001B1B 2B05020120                      db 43, 5, 2, 1, ' '   
   641 00001B20 3105030120                      db 49, 5, 3, 1, ' '   
   642 00001B25 3705040120                      db 55, 5, 4, 1, ' '   
   643 00001B2A 3D05020120                      db 61, 5, 2, 1, ' '  
   644 00001B2F 4305050220                      db 67, 5, 5, 2, ' '  
   645                                  
   646 00001B34 0706030120                      db 7, 6, 3, 1, ' '    
   647 00001B39 0D06050220                      db 13, 6, 5, 2, ' '   
   648 00001B3E 1306020120                      db 19, 6, 2, 1, ' '   
   649 00001B43 1906010120                      db 25, 6, 1, 1, ' '   
   650 00001B48 1F06020120                      db 31, 6, 2, 1, ' '
   651                                  
   652 00001B4D 2B06030120                      db 43, 6, 3, 1, ' '   
   653 00001B52 3106040120                      db 49, 6, 4, 1, ' '   
   654 00001B57 3706020120                      db 55, 6, 2, 1, ' '   
   655 00001B5C 3D06050220                      db 61, 6, 5, 2, ' '  
   656 00001B61 4306020120                      db 67, 6, 2, 1, ' '
   657                                  
   658 00001B66 0707050220                      db 7, 7, 5, 2, ' '    
   659 00001B6B 0D07020120                      db 13, 7, 2, 1, ' '   
   660 00001B70 1307010120                      db 19, 7, 1, 1, ' '   
   661 00001B75 1907020120                      db 25, 7, 2, 1, ' '   
   662 00001B7A 1F07030120                      db 31, 7, 3, 1, ' '
   663                                  
   664 00001B7F 2B07040120                      db 43, 7, 4, 1, ' '   
   665 00001B84 3107020120                      db 49, 7, 2, 1, ' '   
   666 00001B89 3707050220                      db 55, 7, 5, 2, ' '   
   667 00001B8E 3D07020120                      db 61, 7, 2, 1, ' '  
   668 00001B93 4307030120                      db 67, 7, 3, 1, ' '
   669                                  
   670 00001B98 0708020120                      db 7, 8, 2, 1, ' '    
   671 00001B9D 0D08010120                      db 13, 8, 1, 1, ' '   
   672 00001BA2 1308020120                      db 19, 8, 2, 1, ' '   
   673 00001BA7 1908030120                      db 25, 8, 3, 1, ' '   
   674 00001BAC 1F08040120                      db 31, 8, 4, 1, ' '
   675                                  
   676 00001BB1 2B08020120                      db 43, 8, 2, 1, ' '   
   677 00001BB6 3108050220                      db 49, 8, 5, 2, ' '   
   678 00001BBB 3708020120                      db 55, 8, 2, 1, ' '   
   679 00001BC0 3D08030120                      db 61, 8, 3, 1, ' '  
   680 00001BC5 4308040120                      db 67, 8, 4, 1, ' '
   681                                  
   682 00001BCA 0709010120                      db 7, 9, 1, 1, ' '    
   683 00001BCF 0D09020120                      db 13, 9, 2, 1, ' '   
   684 00001BD4 1309030120                      db 19, 9, 3, 1, ' '   
   685 00001BD9 1909040120                      db 25, 9, 4, 1, ' '   
   686 00001BDE 1F09020120                      db 31, 9, 2, 1, ' '
   687                                  
   688 00001BE3 2B09050220                      db 43, 9, 5, 2, ' '   
   689 00001BE8 3109020120                      db 49, 9, 2, 1, ' '   
   690 00001BED 3709030120                      db 55, 9, 3, 1, ' '   
   691 00001BF2 3D09040120                      db 61, 9, 4, 1, ' '  
   692 00001BF7 4309020120                      db 67, 9, 2, 1, ' '
   693                                  
   694 00001BFC 070A020120                      db 7, 10, 2, 1, ' '    
   695 00001C01 0D0A030120                      db 13, 10, 3, 1, ' '   
   696 00001C06 130A040120                      db 19, 10, 4, 1, ' '   
   697 00001C0B 190A020120                      db 25, 10, 2, 1, ' '   
   698 00001C10 1F0A010120                      db 31, 10, 1, 1, ' '
   699                                  
   700 00001C15 2B0A020120                      db 43, 10, 2, 1, ' '   
   701 00001C1A 310A030120                      db 49, 10, 3, 1, ' '   
   702 00001C1F 370A040120                      db 55, 10, 4, 1, ' '   
   703 00001C24 3D0A020120                      db 61, 10, 2, 1, ' '  
   704 00001C29 430A010120                      db 67, 10, 1, 1, ' '
   705                                  
   706 00001C2E 070B030120                      db 7, 11, 3, 1, ' '   
   707 00001C33 0D0B040120                      db 13, 11, 4, 1, ' '   
   708 00001C38 130B020120                      db 19, 11, 2, 1, ' '   
   709 00001C3D 190B010120                      db 25, 11, 1, 1, ' '  
   710 00001C42 1F0B050220                      db 31, 11, 5, 2, ' '
   711                                  
   712 00001C47 2B0B030120                      db 43, 11, 3, 1, ' '   
   713 00001C4C 310B040120                      db 49, 11, 4, 1, ' '   
   714 00001C51 370B020120                      db 55, 11, 2, 1, ' '   
   715 00001C56 3D0B010120                      db 61, 11, 1, 1, ' '  
   716 00001C5B 430B020120                      db 67, 11, 2, 1, ' '
   717                                  
   718 00001C60 070C040120                      db 7, 12, 4, 1, ' '   
   719 00001C65 0D0C020120                      db 13, 12, 2, 1, ' '   
   720 00001C6A 130C010120                      db 19, 12, 1, 1, ' '   
   721 00001C6F 190C050220                      db 25, 12, 5, 2, ' '  
   722 00001C74 1F0C030120                      db 31, 12, 3, 1, ' '
   723                                  
   724 00001C79 2B0C040120                      db 43, 12, 4, 1, ' '    
   725 00001C7E 310C020120                      db 49, 12, 2, 1, ' '   
   726 00001C83 370C010120                      db 55, 12, 1, 1, ' '   
   727 00001C88 3D0C020120                      db 61, 12, 2, 1, ' '   
   728 00001C8D 430C030120                      db 67, 12, 3, 1, ' '
   729                                  
   730 00001C92 070D020120                      db 7, 13, 2, 1, ' '   
   731 00001C97 0D0D010120                      db 13, 13, 1, 1, ' '   
   732 00001C9C 130D050220                      db 19, 13, 5, 2, ' '   
   733 00001CA1 190D030120                      db 25, 13, 3, 1, ' '  
   734 00001CA6 1F0D040120                      db 31, 13, 4, 1, ' '
   735                                  
   736 00001CAB 2B0D020120                      db 43, 13, 2, 1, ' '    
   737 00001CB0 310D010120                      db 49, 13, 1, 1, ' '   
   738 00001CB5 370D020120                      db 55, 13, 2, 1, ' '   
   739 00001CBA 3D0D030120                      db 61, 13, 3, 1, ' '   
   740 00001CBF 430D050220                      db 67, 13, 5, 2, ' '
   741                                  
   742 00001CC4 070E010120                      db 7, 14, 1, 1, ' '   
   743 00001CC9 0D0E050220                      db 13, 14, 5, 2, ' '   
   744 00001CCE 130E030120                      db 19, 14, 3, 1, ' '   
   745 00001CD3 190E040120                      db 25, 14, 4, 1, ' '  
   746 00001CD8 1F0E020120                      db 31, 14, 2, 1, ' '
   747                                  
   748 00001CDD 2B0E010120                      db 43, 14, 1, 1, ' '    
   749 00001CE2 310E020120                      db 49, 14, 2, 1, ' '   
   750 00001CE7 370E030120                      db 55, 14, 3, 1, ' '   
   751 00001CEC 3D0E050220                      db 61, 14, 5, 2, ' '   
   752 00001CF1 430E020120                      db 67, 14, 2, 1, ' '
   753                                  
   754 00001CF6 070F050220                      db 7, 15, 5, 2, ' '   
   755 00001CFB 0D0F030120                      db 13, 15, 3, 1, ' '   
   756 00001D00 130F040120                      db 19, 15, 4, 1, ' '   
   757 00001D05 190F020120                      db 25, 15, 2, 1, ' '  
   758 00001D0A 1F0F010120                      db 31, 15, 1, 1, ' '
   759                                  
   760 00001D0F 2B0F020120                      db 43, 15, 2, 1, ' '    
   761 00001D14 310F030120                      db 49, 15, 3, 1, ' '   
   762 00001D19 370F050220                      db 55, 15, 5, 2, ' '   
   763 00001D1E 3D0F020120                      db 61, 15, 2, 1, ' '   
   764 00001D23 430F010120                      db 67, 15, 1, 1, ' '
   765                                  
   766 00001D28 0710030120                      db 7, 16, 3, 1, ' '   
   767 00001D2D 0D10040120                      db 13, 16, 4, 1, ' '   
   768 00001D32 1310020120                      db 19, 16, 2, 1, ' '   
   769 00001D37 1910010120                      db 25, 16, 1, 1, ' '  
   770 00001D3C 1F10020120                      db 31, 16, 2, 1, ' '
   771                                  
   772 00001D41 2B10030120                      db 43, 16, 3, 1, ' '    
   773 00001D46 3110050220                      db 49, 16, 5, 2, ' '   
   774 00001D4B 3710020120                      db 55, 16, 2, 1, ' '   
   775 00001D50 3D10010120                      db 61, 16, 1, 1, ' '   
   776 00001D55 4310020120                      db 67, 16, 2, 1, ' '
   777                                  
   778 00001D5A 0711040120                      db 7, 17, 4, 1, ' '   
   779 00001D5F 0D11020120                      db 13, 17, 2, 1, ' '   
   780 00001D64 1311010120                      db 19, 17, 1, 1, ' '   
   781 00001D69 1911020120                      db 25, 17, 2, 1, ' '  
   782 00001D6E 1F11030120                      db 31, 17, 3, 1, ' '
   783                                  
   784 00001D73 2B11050220                      db 43, 17, 5, 2, ' '    
   785 00001D78 3111020120                      db 49, 17, 2, 1, ' '    
   786 00001D7D 3711010120                      db 55, 17, 1, 1, ' '   
   787 00001D82 3D11020120                      db 61, 17, 2, 1, ' '   
   788 00001D87 4311030120                      db 67, 17, 3, 1, ' '
   789                                  
   790                                      level4_blocks_count equ 140
   791                                  
   792                                      ; Nivel 5
   793                                      level5_blocks:
   794                                  
   795 00001D8C 1303020120                      db 19, 3, 2, 1, ' '   
   796 00001D91 3703020120                      db 55, 3, 2, 1, ' '   
   797                                  
   798 00001D96 1304020120                      db 19, 4, 2, 1, ' '   
   799 00001D9B 3704020120                      db 55, 4, 2, 1, ' ' 
   800                                  
   801 00001DA0 1905020120                      db 25, 5, 2, 1, ' '   
   802 00001DA5 3105020120                      db 49, 5, 2, 1, ' '   
   803                                  
   804 00001DAA 1906020120                      db 25, 6, 2, 1, ' '   
   805 00001DAF 3106020120                      db 49, 6, 2, 1, ' '   
   806                                  
   807 00001DB4 1307050220                      db 19, 7, 5, 2, ' '   
   808 00001DB9 1907050220                      db 25, 7, 5, 2, ' '  
   809 00001DBE 1F07050220                      db 31, 7, 5, 2, ' '
   810 00001DC3 2507050220                      db 37, 7, 5, 2, ' '
   811 00001DC8 2B07050220                      db 43, 7, 5, 2, ' '    
   812 00001DCD 3107050220                      db 49, 7, 5, 2, ' '    
   813 00001DD2 3707050220                      db 55, 7, 5, 2, ' '   
   814                                  
   815 00001DD7 1308050220                      db 19, 8, 5, 2, ' '   
   816 00001DDC 1908050220                      db 25, 8, 5, 2, ' '  
   817 00001DE1 1F08050220                      db 31, 8, 5, 2, ' '
   818 00001DE6 2508050220                      db 37, 8, 5, 2, ' '
   819 00001DEB 2B08050220                      db 43, 8, 5, 2, ' '    
   820 00001DF0 3108050220                      db 49, 8, 5, 2, ' '    
   821 00001DF5 3708050220                      db 55, 8, 5, 2, ' '   
   822                                  
   823 00001DFA 0D09050220                      db 13, 9, 5, 2, ' '   
   824 00001DFF 1309050220                      db 19, 9, 5, 2, ' '   
   825 00001E04 1909040120                      db 25, 9, 4, 1, ' '  
   826 00001E09 1F09050220                      db 31, 9, 5, 2, ' '
   827 00001E0E 2509050220                      db 37, 9, 5, 2, ' '
   828 00001E13 2B09050220                      db 43, 9, 5, 2, ' '    
   829 00001E18 3109040120                      db 49, 9, 4, 1, ' '    
   830 00001E1D 3709050220                      db 55, 9, 5, 2, ' '   
   831 00001E22 3D09050220                      db 61, 9, 5, 2, ' '  
   832                                  
   833 00001E27 0D0A050220                      db 13, 10, 5, 2, ' '   
   834 00001E2C 130A050220                      db 19, 10, 5, 2, ' '   
   835 00001E31 190A040120                      db 25, 10, 4, 1, ' '  
   836 00001E36 1F0A050220                      db 31, 10, 5, 2, ' '
   837 00001E3B 250A050220                      db 37, 10, 5, 2, ' '
   838 00001E40 2B0A050220                      db 43, 10, 5, 2, ' '    
   839 00001E45 310A040120                      db 49, 10, 4, 1, ' '    
   840 00001E4A 370A050220                      db 55, 10, 5, 2, ' '   
   841 00001E4F 3D0A050220                      db 61, 10, 5, 2, ' '   
   842                                          
   843 00001E54 070B050220                      db 7, 11, 5, 2, ' '   
   844 00001E59 0D0B050220                      db 13, 11, 5, 2, ' '   
   845 00001E5E 130B050220                      db 19, 11, 5, 2, ' '   
   846 00001E63 190B050220                      db 25, 11, 5, 2, ' '  
   847 00001E68 1F0B050220                      db 31, 11, 5, 2, ' '
   848 00001E6D 250B050220                      db 37, 11, 5, 2, ' '
   849 00001E72 2B0B050220                      db 43, 11, 5, 2, ' '    
   850 00001E77 310B050220                      db 49, 11, 5, 2, ' '    
   851 00001E7C 370B050220                      db 55, 11, 5, 2, ' '   
   852 00001E81 3D0B050220                      db 61, 11, 5, 2, ' '   
   853 00001E86 430B050220                      db 67, 11, 5, 2, ' '
   854                                  
   855 00001E8B 070C050220                      db 7, 12, 5, 2, ' '   
   856 00001E90 0D0C050220                      db 13, 12, 5, 2, ' '   
   857 00001E95 130C050220                      db 19, 12, 5, 2, ' '   
   858 00001E9A 190C050220                      db 25, 12, 5, 2, ' '  
   859 00001E9F 1F0C050220                      db 31, 12, 5, 2, ' '
   860 00001EA4 250C050220                      db 37, 12, 5, 2, ' '
   861 00001EA9 2B0C050220                      db 43, 12, 5, 2, ' '    
   862 00001EAE 310C050220                      db 49, 12, 5, 2, ' '    
   863 00001EB3 370C050220                      db 55, 12, 5, 2, ' '   
   864 00001EB8 3D0C050220                      db 61, 12, 5, 2, ' '   
   865 00001EBD 430C050220                      db 67, 12, 5, 2, ' '
   866                                  
   867 00001EC2 070D050220                      db 7, 13, 5, 2, ' '   
   868 00001EC7 0D0D050220                      db 13, 13, 5, 2, ' '   
   869 00001ECC 130D050220                      db 19, 13, 5, 2, ' '   
   870 00001ED1 190D050220                      db 25, 13, 5, 2, ' '  
   871 00001ED6 1F0D050220                      db 31, 13, 5, 2, ' '
   872 00001EDB 250D050220                      db 37, 13, 5, 2, ' '
   873 00001EE0 2B0D050220                      db 43, 13, 5, 2, ' '    
   874 00001EE5 310D050220                      db 49, 13, 5, 2, ' '    
   875 00001EEA 370D050220                      db 55, 13, 5, 2, ' '   
   876 00001EEF 3D0D050220                      db 61, 13, 5, 2, ' '   
   877 00001EF4 430D050220                      db 67, 13, 5, 2, ' '
   878                                  
   879                                          
   880 00001EF9 070E050220                      db 7, 14, 5, 2, ' '   
   881 00001EFE 130E050220                      db 19, 14, 5, 2, ' '   
   882 00001F03 190E050220                      db 25, 14, 5, 2, ' '  
   883 00001F08 1F0E050220                      db 31, 14, 5, 2, ' '
   884 00001F0D 250E050220                      db 37, 14, 5, 2, ' '
   885 00001F12 2B0E050220                      db 43, 14, 5, 2, ' '    
   886 00001F17 310E050220                      db 49, 14, 5, 2, ' '    
   887 00001F1C 370E050220                      db 55, 14, 5, 2, ' '   
   888 00001F21 430E050220                      db 67, 14, 5, 2, ' '
   889                                  
   890 00001F26 070F050220                      db 7, 15, 5, 2, ' '   
   891 00001F2B 130F050220                      db 19, 15, 5, 2, ' '      
   892 00001F30 370F050220                      db 55, 15, 5, 2, ' '   
   893 00001F35 430F050220                      db 67, 15, 5, 2, ' '
   894                                   
   895 00001F3A 0710050220                      db 7, 16, 5, 2, ' '   
   896 00001F3F 1310050220                      db 19, 16, 5, 2, ' '      
   897 00001F44 3710050220                      db 55, 16, 5, 2, ' '   
   898 00001F49 4310050220                      db 67, 16, 5, 2, ' '
   899                                  
   900                                  
   901 00001F4E 1911050220                      db 25, 17, 5, 2, ' '  
   902 00001F53 1F11050220                      db 31, 17, 5, 2, ' '
   903 00001F58 2B11050220                      db 43, 17, 5, 2, ' '    
   904 00001F5D 3111050220                      db 49, 17, 5, 2, ' ' 
   905                                  
   906 00001F62 1912050220                      db 25, 18, 5, 2, ' '  
   907 00001F67 1F12050220                      db 31, 18, 5, 2, ' '
   908 00001F6C 2B12050220                      db 43, 18, 5, 2, ' '    
   909 00001F71 3112050220                      db 49, 18, 5, 2, ' ' 
   910                                  
   911                                      level5_blocks_count equ 98
   912                                  
   913                                      ; Array para mantener el estado de los bloques
   914 00001F76 00<rep C8h>                 block_states: times 200 db 0  ; Durabilidad actual de cada bloque
   915                                  
   916                                      
   917                                      ; Variables para almacenar los valores
   918 0000203E 0000000000000000            current_score dq 0          ; Score actual
   919 00002046 00                          destroyed_blocks db 0       ; Bloques destruidos en el nivel actual
   920                                      
   921                                      ; Buffer para convertir números a string
   922 00002047 00<rep 14h>                 number_buffer: times 20 db 0
   923                                  
   924 0000205B 4023242640                  enemy_chars db "@", "#", "$", "&", "@"    ; El nivel 1 y 5 comparten el mismo caracter (@)
   925                                      
   926                                      ; Estructura para los enemigos (x, y, activo)
   927 00002060 00<rep 1Eh>                 enemies: times 10 * 3 db 0     ; Máximo 5 enemigos, cada uno con 3 bytes (x, y, activo)
   928 0000207E 0A                          enemies_count db 10            ; Cantidad de enemigos activos
   929                                      
   930 0000207F 3200000000000000            enemy_points dq 50              ; Puntos por destruir un enemigo
   931 00002087 00                          enemy_move_counter db 0         ; Contador para controlar velocidad de movimiento
   932 00002088 02                          enemy_move_delay db 2           ; Mover enemigos cada N ciclos
   933 00002089 00                          enemy_move_total db 0      ; Contador total de movimientos
   934 0000208A 00                          enemy_target db 0          ; 0 = persigue bola, 1 = persigue paleta
   935 0000208B 14                          MOVEMENT_THRESHOLD db 20   ; Número de movimientos antes de cambiar objetivo
   936                                   ;Formato: número de bloques destruidos necesario para que aparezca cada enemigo
   937                                      ; Añade esto en la sección .dataa
   938 0000208C 464748494A4C788CA0-         level1_spawn_points: db 70, 71, 72, 73, 74, 76, 120, 140, 160, 180    ; 10 enemigos, cada 2 bloques
   938 00002095 B4                 
   939 00002096 01030507090B0D0F11-         level2_spawn_points: db 1, 3, 5, 7, 9, 11, 13, 15, 17, 19    ; 10 enemigos, cada 2 bloques
   939 0000209F 13                 
   940 000020A0 00000032373C646464-         level3_spawn_points: db 0, 0, 0, 50, 55, 60, 100, 100, 100, 100   ; 10 enemigos, cada 3 bloques
   940 000020A9 64                 
   941 000020AA 0104070A0D10131619-         level4_spawn_points: db 1, 4, 7, 10, 13, 16, 19, 22, 25, 28  ; 10 enemigos, cada 3 bloques
   941 000020B3 1C                 
   942 000020B4 00050A0F14191E2328-         level5_spawn_points: db 0, 5, 10, 15, 20, 25, 30, 35, 40, 45 ; 10 enemigos, cada 5 bloques
   942 000020BD 2D                 
   943                                          ; Arreglo de punteros a los spawn points de cada nivel
   944                                      spawn_points_table:
   945 000020BE [8C20000000000000]              dq level1_spawn_points
   946 000020C6 [9620000000000000]              dq level2_spawn_points
   947 000020CE [A020000000000000]              dq level3_spawn_points
   948 000020D6 [AA20000000000000]              dq level4_spawn_points
   949 000020DE [B420000000000000]              dq level5_spawn_points
   950                                  
   951                                      ; Variables para el comportamiento de enemigos
   952 000020E6 1E                          BEHAVIOR_CHANGE_TIME db 30    ; Ciclos antes de cambiar comportamiento
   953 000020E7 00                          behavior_counter db 0          ; Contador para cambio de comportamiento
   954 000020E8 00                          current_behavior db 0          ; 0 = persigue bola, 1 = persigue paleta
   955 000020E9 00<rep Ah>                  enemy_spawns_triggered: times 10 db 0  ; 0 = no spawned, 1 = spawned
   956                                  
   957 000020F3 50756E74616A653A20-         score_label: db "Puntaje: [          ]", 0xA, 0xD  ; 10 espacios para el número
   957 000020FC 5B2020202020202020-
   957 00002105 20205D0A0D         
   958                                      score_label_len: equ $ - score_label
   959 0000210A 426C6F717565732064-         blocks_label: db "Bloques destruidos: [   ]", 0xA, 0xD  ; 3 espacios para el número
   959 00002113 657374727569646F73-
   959 0000211C 3A205B2020205D0A0D 
   960                                      blocks_label_len: equ $ - blocks_label
   961                                      
   962                                      ; Posición donde insertar los números en los labels
   963                                      score_pos equ 10    ; Posición después de "Puntaje: ["
   964                                      blocks_pos equ 20   ; Posición después de "Bloques destruidos: ["
   965                                      
   966                                      ; Definición de las vidas (x, y, estado)
   967                                      ; Formato: posición_x, posición_y, estado (1 = activa, 0 = inactiva)
   968                                      lives_data: 
   969 00002125 021E01                          db 2, 30, 1     ; Vida 1 (activa)
   970 00002128 041E01                          db 4, 30, 1     ; Vida 2 (activa)
   971 0000212B 061E01                          db 6, 30, 1     ; Vida 3 (inactiva)
   972 0000212E 081E01                          db 8, 30, 1     ; Vida 4 (inactiva)
   973 00002131 0A1E01                          db 10, 30, 1    ; Vida 5 (inactiva)
   974 00002134 0C1E01                          db 12, 30, 1    ; Vida 6 (inactiva)
   975 00002137 0E1E01                          db 14, 30, 1    ; Vida 7 (inactiva)
   976                                      lives_count equ 7    ; Total de vidas
   977 0000213A 5E                          life_char db "^"    
   978 0000213B 07                          current_lives db 7   ; Contador de vidas activas actual
   979                                  
   980                                  ; Estructura para almacenar las letras y sus posiciones
   981                                      ; Formato: x, y, letra, activo (1 = activo, 0 = inactivo)
   982 0000213C 00<rep 190h>                letters_map: times 100 * 4 db 0  ; Espacio para 100 letras
   983 000022CC 00                          letters_count db 0   
   984 000022CD 20                          last_letter db ' '    ; Variable para almacenar la última letra
   985 000022CE 506F64657220616374-         last_letter_msg db "Poder actual: [ ]", 0xA, 0xD  ; Mensaje para mostrar la última letra
   985 000022D7 75616C3A205B205D0A-
   985 000022E0 0D                 
   986                                      last_letter_msg_len equ $ - last_letter_msg
   987 000022E1 00                          current_power_processed db 0 ; 0 = no procesado, 1 = ya procesado
   988 000022E2 07                          max_lives db 7              ; Máximo número de vidas permitidas
   989 000022E3 0100000000000000            ball_speed dq 1             ; Velocidad normal de la bola
   990 000022EB 0200000000000000            slow_ball_speed dq 2        ; Velocidad lenta (se usará como divisor)
   991 000022F3 0000000000000000            speed_counter dq 0          ; Contador para ralentizar el movimiento
   992                                     
   993 000022FB 00                          initial_catch_active db 0   ; 0 = inactivo, 1 = activo
   994                                  
   995 000022FC 00                          catch_power_active db 0     ; 0 = inactivo, 1 = activo
   996 000022FD 00                          ball_caught db 0           ; 0 = no atrapada, 1 = atrapada
   997 000022FE 00                          ball_caught_2 db 0           ; 0 = no atrapada, 1 = atrapada
   998 000022FF 00                          ball_caught_3 db 0           ; 0 = no atrapada, 1 = atrapada
   999                                  
  1000 00002300 0000000000000000            ball_catch_offset dq 0     ; Offset respecto a la paleta cuando está atrapada
  1001 00002308 00                          last_key db 0    ; Variable para almacenar la última tecla presionada
  1002                                  
  1003 00002309 00                          laser_power_active: db 0         ; Flag para indicar si el poder láser está activo
  1004 0000230A 7C                          laser_symbol: db '|'             ; Símbolo para representar el láser
  1005 0000230B 00                          laser_count: db 0                ; Contador de láseres activos
  1006 0000230C 00<rep C8h>                 lasers: times 200 db 0           ; Array para almacenar posiciones de láseres (x,y)
  1007 000023D4 0100000000000000            laser_speed: dq 1                ; Velocidad del láser
  1008                                  
  1009                                      balls_data:     ; Array para almacenar hasta 3 bolas
  1010                                          ; Bola 1 (principal)
  1011 000023DC 0000000000000000                dq 0        ; x_pos
  1012 000023E4 0000000000000000                dq 0        ; y_pos
  1013 000023EC 0100000000000000                dq 1        ; direction_x
  1014 000023F4 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1015 000023FC 01                              db 1        ; active
  1016                                          ; Bola 2
  1017 000023FD 0000000000000000                dq 0        ; x_pos
  1018 00002405 0000000000000000                dq 0        ; y_pos
  1019 0000240D FFFFFFFFFFFFFFFF                dq -1       ; direction_x
  1020 00002415 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1021 0000241D 00                              db 0        ; active
  1022                                          ; Bola 3
  1023 0000241E 0000000000000000                dq 0        ; x_pos
  1024 00002426 0000000000000000                dq 0        ; y_pos
  1025 0000242E 0000000000000000                dq 0        ; direction_x
  1026 00002436 FFFFFFFFFFFFFFFF                dq -1       ; direction_y
  1027 0000243E 00                              db 0        ; active
  1028                                      
  1029 0000243F 01                          balls_count db 1     ; Contador de bolas activas
  1030                                      BALL_STRUCT_SIZE equ 33  ; Tamaño de cada estructura de bola (8*4 + 1)
  1031 00002440 00<rep Ah>                  enemy_last_x:       times 10 db 0
  1032 0000244A 00<rep Ah>                  enemy_last_y:       times 10 db 0
  1033 00002454 00<rep Ah>                  enemy_stuck_count:  times 10 db 0
  1034 0000245E 00                          letter_move_counter db 0
  1035                                  
  1036                                  section .text
  1037                                  
  1038                                  
  1039                                  print_lives:
  1040 000001DD 55                          push rbp
  1041 000001DE 4889E5                      mov rbp, rsp
  1042                                      
  1043 000001E1 4D31E4                      xor r12, r12                    ; Índice de la vida actual
  1044                                      
  1045                                      .print_loop:
  1046 000001E4 4983FC07                        cmp r12, lives_count
  1047 000001E8 7D45                            jge .end
  1048                                          
  1049                                          ; Calcular offset de la vida actual
  1050 000001EA 4C89E0                          mov rax, r12
  1051 000001ED 486BC003                        imul rax, 3                     ; Cada vida ocupa 3 bytes (x, y, estado)
  1052 000001F1 488DB0[25210000]                lea rsi, [lives_data + rax]
  1053                                          
  1054                                          ; Calcular posición en el tablero
  1055 000001F8 4C0FB606                        movzx r8, byte [rsi]            ; X
  1056 000001FC 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  1057                                          
  1058                                          ; Calcular offset en el tablero
  1059 00000201 B850000000                      mov rax, column_cells
  1060 00000206 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  1061 0000020A 49F7E1                          mul r9
  1062 0000020D 4C01C0                          add rax, r8
  1063 00000210 488DB8[400A0000]                lea rdi, [board + rax]
  1064                                          
  1065                                          ; Verificar estado de la vida y dibujar el carácter correspondiente
  1066 00000217 807E0201                        cmp byte [rsi + 2], 1
  1067 0000021B 7405                            je .draw_active
  1068                                          
  1069                                          ; Si está inactiva, dibujar espacio
  1070 0000021D C60720                          mov byte [rdi], ' '
  1071 00000220 EB08                            jmp .next_life
  1072                                          
  1073                                      .draw_active:
  1074                                          ; Si está activa, dibujar el símbolo de vida
  1075 00000222 8A05(3A210000)                  mov al, [life_char]
  1076 00000228 8807                            mov [rdi], al
  1077                                          
  1078                                      .next_life:
  1079 0000022A 49FFC4                          inc r12
  1080 0000022D EBB5                            jmp .print_loop
  1081                                          
  1082                                      .end:
  1083 0000022F 5D                              pop rbp
  1084 00000230 C3                              ret
  1085                                  
  1086                                  ; Función para desactivar una vida
  1087                                  ; Función modificada para perder una vida
  1088                                  ; Modificar lose_life para reiniciar solo la bola principal
  1089                                  lose_life:
  1090 00000231 55                          push rbp
  1091 00000232 4889E5                      mov rbp, rsp
  1092                                      
  1093                                      ; Verificar si aún quedan vidas
  1094 00000235 803D(3B210000)00            cmp byte [current_lives], 0
  1095 0000023C 0F84AB000000                je .game_lost
  1096                                      
  1097                                      ; Encontrar la última vida activa
  1098 00000242 B907000000                  mov rcx, lives_count
  1099 00000247 48FFC9                      dec rcx
  1100                                      
  1101                                      .find_active_life:
  1102 0000024A 4889C8                          mov rax, rcx
  1103 0000024D 486BC003                        imul rax, 3
  1104 00000251 488DB0[25210000]                lea rsi, [lives_data + rax]
  1105 00000258 807E0201                        cmp byte [rsi + 2], 1
  1106 0000025C 740A                            je .deactivate_life
  1107 0000025E 48FFC9                          dec rcx
  1108 00000261 79E7                            jns .find_active_life
  1109 00000263 E985000000                      jmp .game_lost
  1110                                          
  1111                                      .deactivate_life:
  1112                                          ; Borrar vida visualmente y en datos
  1113 00000268 4C0FB606                        movzx r8, byte [rsi]
  1114 0000026C 4C0FB64E01                      movzx r9, byte [rsi + 1]
  1115 00000271 B850000000                      mov rax, column_cells
  1116 00000276 4883C002                        add rax, 2
  1117 0000027A 49F7E1                          mul r9
  1118 0000027D 4C01C0                          add rax, r8
  1119 00000280 488DB8[400A0000]                lea rdi, [board + rax]
  1120 00000287 C60720                          mov byte [rdi], ' '
  1121 0000028A C6460200                        mov byte [rsi + 2], 0
  1122 0000028E FE0D(3B210000)                  dec byte [current_lives]
  1123                                          
  1124                                          ; Borrar paleta anterior
  1125 00000294 4C8B05(BF140000)                mov r8, [pallet_position]
  1126 0000029B 488B0D(C7140000)                mov rcx, [pallet_size]
  1127                                          .erase_pallet_loop:
  1128 000002A2 41C60020                            mov byte [r8], ' '
  1129 000002A6 49FFC0                              inc r8
  1130 000002A9 48FFC9                              dec rcx
  1131 000002AC 75F4                                jnz .erase_pallet_loop
  1132                                          
  1133                                          ; Reiniciar solo la bola principal
  1134 000002AE 48C705(DF140000)28-             mov qword [ball_x_pos], 40
  1134 000002B6 000000             
  1135 000002B9 48C705(E7140000)1C-             mov qword [ball_y_pos], 28
  1135 000002C1 000000             
  1136 000002C4 C605(FF140000)00                mov byte [ball_moving], 0
  1137 000002CB C605(00150000)01                mov byte [ball_active], 1       ; Activar bola principal
  1138 000002D2 48C705(BF140000)-               mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  1138 000002D9 [B0130000]         
  1139                                          
  1140                                          ; Asegurarse que las otras bolas están desactivadas
  1141 000002DD C605(22150000)00                mov byte [ball2_active], 0
  1142 000002E4 C605(44150000)00                mov byte [ball3_active], 0
  1143                                          
  1144 000002EB EB07                            jmp .end
  1145                                          
  1146                                      .game_lost:
  1147 000002ED E8C7000000                      call game_lost
  1148 000002F2 EB00                            jmp .end
  1149                                          
  1150                                      .end:
  1151 000002F4 5D                              pop rbp
  1152 000002F5 C3                              ret
  1153                                  ; Función modificada para verificar colisión con el borde inferior
  1154                                  check_bottom_collision:
  1155 000002F6 55                          push rbp
  1156 000002F7 4889E5                      mov rbp, rsp
  1157                                      
  1158                                      ; Verificar bola principal
  1159 000002FA 803D(00150000)01            cmp byte [ball_active], 1
  1160 00000301 7542                        jne .check_ball2
  1161 00000303 488B05(E7140000)            mov rax, [ball_y_pos]
  1162 0000030A 4883F81E                    cmp rax, row_cells - 2
  1163 0000030E 7535                        jne .check_ball2
  1164                                      
  1165                                      ; Borrar visualmente la bola principal
  1166 00000310 4C8B05(DF140000)            mov r8, [ball_x_pos]
  1167 00000317 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  1168 0000031E 4981C0[400A0000]            add r8, board
  1169 00000325 4C89C9                      mov rcx, r9
  1170 00000328 B852000000                  mov rax, column_cells + 2
  1171 0000032D 48F7E9                      imul rcx
  1172 00000330 4901C0                      add r8, rax
  1173 00000333 41C60020                    mov byte [r8], char_space    ; Borrar la bola del tablero
  1174                                      
  1175 00000337 C605(00150000)00            mov byte [ball_active], 0
  1176 0000033E C605(FF140000)00            mov byte [ball_moving], 0
  1177                                  
  1178                                  .check_ball2:
  1179 00000345 803D(22150000)01            cmp byte [ball2_active], 1
  1180 0000034C 751B                        jne .check_ball3
  1181 0000034E 488B05(09150000)            mov rax, [ball2_y_pos]
  1182 00000355 4883F81E                    cmp rax, row_cells - 2
  1183 00000359 750E                        jne .check_ball3
  1184 0000035B C605(22150000)00            mov byte [ball2_active], 0
  1185 00000362 C605(21150000)00            mov byte [ball2_moving], 0
  1186                                  
  1187                                  .check_ball3:
  1188 00000369 803D(44150000)01            cmp byte [ball3_active], 1
  1189 00000370 751B                        jne .check_active_balls
  1190 00000372 488B05(2B150000)            mov rax, [ball3_y_pos]
  1191 00000379 4883F81E                    cmp rax, row_cells - 2
  1192 0000037D 750E                        jne .check_active_balls
  1193 0000037F C605(44150000)00            mov byte [ball3_active], 0
  1194 00000386 C605(43150000)00            mov byte [ball3_moving], 0
  1195                                  
  1196                                  .check_active_balls:
  1197                                      ; Verificar si quedan bolas activas
  1198 0000038D 4831C9                      xor rcx, rcx
  1199 00000390 803D(00150000)01            cmp byte [ball_active], 1
  1200 00000397 741E                        je .balls_remain
  1201 00000399 803D(22150000)01            cmp byte [ball2_active], 1
  1202 000003A0 7415                        je .balls_remain
  1203 000003A2 803D(44150000)01            cmp byte [ball3_active], 1
  1204 000003A9 740C                        je .balls_remain
  1205                                      
  1206                                      ; Si no quedan bolas activas, perder una vida y reiniciar
  1207 000003AB E881FEFFFF                  call lose_life
  1208 000003B0 C605(00150000)01            mov byte [ball_active], 1    ; Reactivar bola principal
  1209                                      
  1210                                  .balls_remain:
  1211 000003B7 5D                          pop rbp
  1212 000003B8 C3                          ret
  1213                                  
  1214                                  
  1215                                  
  1216                                  ; Nueva función para game over
  1217                                  game_lost:
  1218                                      ; Limpiar la pantalla
  1219                                      print clear, clear_length
    82 000003B9 B801000000          <1>  mov eax, sys_write
    83 000003BE BF01000000          <1>  mov edi, 1
    84 000003C3 48BE-               <1>  mov rsi, %1
    84 000003C5 [1000000000000000]  <1>
    85 000003CD BA07000000          <1>  mov edx, %2
    86 000003D2 0F05                <1>  syscall
  1220                                      
  1221                                      ; Mostrar mensaje de derrota
  1222                                      section .data
  1223 0000245F C2A148617320706572-             lost_msg: db "¡Has perdido!", 0xA, 0xD
  1223 00002468 6469646F210A0D     
  1224                                          lost_msg_len: equ $ - lost_msg
  1225                                      section .text
  1226                                      
  1227                                      ; Imprimir mensaje de derrota
  1228                                      print lost_msg, lost_msg_len
    82 000003D4 B801000000          <1>  mov eax, sys_write
    83 000003D9 BF01000000          <1>  mov edi, 1
    84 000003DE 48BE-               <1>  mov rsi, %1
    84 000003E0 [5F24000000000000]  <1>
    85 000003E8 BA10000000          <1>  mov edx, %2
    86 000003ED 0F05                <1>  syscall
  1229                                      print score_msg, score_msg_len
    82 000003EF B801000000          <1>  mov eax, sys_write
    83 000003F4 BF01000000          <1>  mov edi, 1
    84 000003F9 48BE-               <1>  mov rsi, %1
    84 000003FB [8D24000000000000]  <1>
    85 00000403 BA0F000000          <1>  mov edx, %2
    86 00000408 0F05                <1>  syscall
  1230                                      
  1231                                      ; Mostrar puntaje final
  1232 0000040A 488B05(3E200000)            mov rax, [current_score]
  1233 00000411 48BF-                       mov rdi, number_buffer
  1233 00000413 [4720000000000000] 
  1234 0000041B E84B140000                  call number_to_string
  1235                                      print number_buffer, 20
    82 00000420 B801000000          <1>  mov eax, sys_write
    83 00000425 BF01000000          <1>  mov edi, 1
    84 0000042A 48BE-               <1>  mov rsi, %1
    84 0000042C [4720000000000000]  <1>
    85 00000434 BA14000000          <1>  mov edx, %2
    86 00000439 0F05                <1>  syscall
  1236                                      
  1237                                      ; Esperar un momento antes de salir
  1238 0000043B 48C705BAFBFFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  1238 00000444 0000               
  1239 00000446 48C705B7FBFFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  1239 0000044F 0000               
  1240                                      sleeptime
    98 00000451 B823000000          <1>  mov eax, sys_nanosleep
    99 00000456 48BF-               <1>  mov rdi, timespec
    99 00000458 [0000000000000000]  <1>
   100 00000460 31F6                <1>  xor esi, esi
   101 00000462 0F05                <1>  syscall
  1241                                      
  1242 00000464 E91F1E0000                  jmp exit
  1243                                  
  1244                                  
  1245                                  ; Función para registrar una nueva letra en el mapa
  1246                                  ; Entrada:
  1247                                  ;   al - letra a registrar
  1248                                  ;   r8b - posición x
  1249                                  ;   r9b - posición y
  1250                                  register_letter:
  1251 00000469 55                          push rbp
  1252 0000046A 4889E5                      mov rbp, rsp
  1253 0000046D 53                          push rbx
  1254 0000046E 51                          push rcx
  1255                                      
  1256 0000046F 3C20                        cmp al, ' '
  1257 00000471 7438                        je .end
  1258                                  
  1259                                      ; Encontrar un espacio libre en el mapa
  1260 00000473 4831C9                      xor rcx, rcx
  1261 00000476 480FB615(CC220000)          movzx rdx, byte [letters_count]
  1262                                      
  1263                                      .find_slot:
  1264 0000047E 4883F964                        cmp rcx, 100              ; Máximo de letras
  1265 00000482 7D27                            jge .end                  ; Si no hay espacio, salir
  1266                                          
  1267 00000484 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1268 0000048C 807B0300                        cmp byte [rbx + 3], 0    ; Verificar si el slot está inactivo
  1269 00000490 7405                            je .found_slot
  1270                                          
  1271 00000492 48FFC1                          inc rcx
  1272 00000495 EBE7                            jmp .find_slot
  1273                                          
  1274                                      .found_slot:
  1275                                          ; Guardar la información de la letra
  1276 00000497 448803                          mov [rbx], r8b           ; x
  1277 0000049A 44884B01                        mov [rbx + 1], r9b       ; y
  1278 0000049E 884302                          mov [rbx + 2], al        ; letra
  1279 000004A1 C6430301                        mov byte [rbx + 3], 1    ; marcar como activo
  1280                                          
  1281 000004A5 FE05(CC220000)                  inc byte [letters_count]
  1282                                          
  1283                                      .end:
  1284 000004AB 59                              pop rcx
  1285 000004AC 5B                              pop rbx
  1286 000004AD 5D                              pop rbp
  1287 000004AE C3                              ret
  1288                                  
  1289                                  ; Función para imprimir todas las letras registradas
  1290                                  print_letters:
  1291 000004AF 55                          push rbp
  1292 000004B0 4889E5                      mov rbp, rsp
  1293 000004B3 53                          push rbx
  1294 000004B4 51                          push rcx
  1295                                      
  1296 000004B5 4831C9                      xor rcx, rcx
  1297                                      
  1298                                      .print_loop:
  1299 000004B8 4883F964                        cmp rcx, 100              ; Máximo de letras
  1300 000004BC 7D37                            jge .end
  1301                                          
  1302                                          ; Obtener puntero a la letra actual
  1303 000004BE 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1304                                          
  1305                                          ; Verificar si está activa
  1306 000004C6 807B0300                        cmp byte [rbx + 3], 0
  1307 000004CA 7424                            je .next_letter
  1308                                          
  1309                                          ; Calcular posición en el tablero
  1310 000004CC 4C0FB603                        movzx r8, byte [rbx]      ; x
  1311 000004D0 4C0FB64B01                      movzx r9, byte [rbx + 1]  ; y
  1312                                          
  1313                                          ; Calcular offset en el tablero
  1314 000004D5 B850000000                      mov rax, column_cells
  1315 000004DA 4883C002                        add rax, 2                ; Incluir caracteres de nueva línea
  1316 000004DE 49F7E1                          mul r9
  1317 000004E1 4C01C0                          add rax, r8
  1318 000004E4 488DB8[400A0000]                lea rdi, [board + rax]
  1319                                          
  1320                                          ; Imprimir la letra
  1321 000004EB 8A4302                          mov al, [rbx + 2]
  1322 000004EE 8807                            mov [rdi], al
  1323                                          
  1324                                      .next_letter:
  1325 000004F0 48FFC1                          inc rcx
  1326 000004F3 EBC3                            jmp .print_loop
  1327                                          
  1328                                      .end:
  1329 000004F5 59                              pop rcx
  1330 000004F6 5B                              pop rbx
  1331 000004F7 5D                              pop rbp
  1332 000004F8 C3                              ret
  1333                                  
  1334                                  ; Función para borrar una letra específica
  1335                                  ; Entrada:
  1336                                  ;   r8b - posición x
  1337                                  ;   r9b - posición y
  1338                                  remove_letter:
  1339 000004F9 55                          push rbp
  1340 000004FA 4889E5                      mov rbp, rsp
  1341 000004FD 53                          push rbx
  1342 000004FE 51                          push rcx
  1343                                      
  1344 000004FF 4831C9                      xor rcx, rcx
  1345                                      
  1346                                      .find_loop:
  1347 00000502 4883F964                        cmp rcx, 100              ; Máximo de letras
  1348 00000506 7D2E                            jge .end
  1349                                          
  1350 00000508 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1351                                          
  1352                                          ; Verificar si está activa y coincide la posición
  1353 00000510 807B0300                        cmp byte [rbx + 3], 0
  1354 00000514 741B                            je .next_letter
  1355                                          
  1356 00000516 8A03                            mov al, [rbx]
  1357 00000518 4438C0                          cmp al, r8b
  1358 0000051B 7514                            jne .next_letter
  1359                                          
  1360 0000051D 8A4301                          mov al, [rbx + 1]
  1361 00000520 4438C8                          cmp al, r9b
  1362 00000523 750C                            jne .next_letter
  1363                                          
  1364                                          ; Encontrada la letra, desactivarla
  1365 00000525 C6430300                        mov byte [rbx + 3], 0
  1366 00000529 FE0D(CC220000)                  dec byte [letters_count]
  1367 0000052F EB05                            jmp .end
  1368                                          
  1369                                      .next_letter:
  1370 00000531 48FFC1                          inc rcx
  1371 00000534 EBCC                            jmp .find_loop
  1372                                          
  1373                                      .end:
  1374 00000536 59                              pop rcx
  1375 00000537 5B                              pop rbx
  1376 00000538 5D                              pop rbp
  1377 00000539 C3                              ret
  1378                                  ; Función para mover las letras hacia abajo
  1379                                  move_letters:
  1380 0000053A 55                          push rbp
  1381 0000053B 4889E5                      mov rbp, rsp
  1382 0000053E 53                          push rbx
  1383 0000053F 57                          push rdi
  1384 00000540 56                          push rsi
  1385 00000541 4150                        push r8
  1386 00000543 4151                        push r9
  1387 00000545 4152                        push r10
  1388 00000547 4153                        push r11
  1389                                  
  1390 00000549 4831C9                      xor rcx, rcx
  1391                                  
  1392                                      ; Verificar si debemos mover la letra en este frame
  1393 0000054C FE05(5E240000)              inc byte [letter_move_counter]    ; Incrementar contador
  1394 00000552 803D(5E240000)03            cmp byte [letter_move_counter], 3 ; Ajusta este número para cambiar velocidad
  1395 00000559 0F8C20020000                jl .skip_all                         ; Si no es momento de mover, terminar
  1396 0000055F C605(5E240000)00            mov byte [letter_move_counter], 0 ; Resetear contador
  1397                                  
  1398                                      .move_loop:
  1399 00000566 4883F964                        cmp rcx, 100
  1400 0000056A 0F8D0D020000                    jge .print_last_letter
  1401                                          
  1402 00000570 488D1C8D[3C210000]              lea rbx, [letters_map + rcx * 4]
  1403 00000578 807B0300                        cmp byte [rbx + 3], 0
  1404 0000057C 0F84F3010000                    je .next_letter
  1405                                  
  1406 00000582 4C0FB603                        movzx r8, byte [rbx]
  1407 00000586 4C0FB64B01                      movzx r9, byte [rbx + 1]
  1408                                  
  1409 0000058B B850000000                      mov rax, column_cells
  1410 00000590 4883C002                        add rax, 2
  1411 00000594 49F7E1                          mul r9
  1412 00000597 4C01C0                          add rax, r8
  1413 0000059A 488DB8[400A0000]                lea rdi, [board + rax]
  1414 000005A1 C60720                          mov byte [rdi], ' '
  1415                                  
  1416 000005A4 FE4301                          inc byte [rbx + 1]
  1417 000005A7 4C0FB64B01                      movzx r9, byte [rbx + 1]
  1418                                  
  1419 000005AC 4983F91F                        cmp r9, row_cells - 1
  1420 000005B0 7C09                            jl .check_pallet_collision
  1421                                  
  1422 000005B2 C6430300                        mov byte [rbx + 3], 0
  1423 000005B6 E9BA010000                      jmp .next_letter
  1424                                  
  1425                                          .check_pallet_collision:
  1426 000005BB B850000000                          mov rax, column_cells
  1427 000005C0 4883C002                            add rax, 2
  1428 000005C4 49F7E1                              mul r9
  1429 000005C7 4C01C0                              add rax, r8
  1430 000005CA 488DB8[400A0000]                    lea rdi, [board + rax]
  1431                                  
  1432 000005D1 8A07                                mov al, [rdi]
  1433 000005D3 3C20                                cmp al, ' '
  1434 000005D5 0F849A010000                        je .next_letter
  1435 000005DB 3C3D                                cmp al, char_equal
  1436 000005DD 740A                                je .capture_letter
  1437                                  
  1438 000005DF 8A4302                              mov al, [rbx + 2]
  1439 000005E2 8807                                mov [rdi], al
  1440 000005E4 E98C010000                          jmp .next_letter
  1441                                  
  1442                                          .capture_letter:
  1443                                              ; Obtener la nueva letra
  1444 000005E9 8A4302                              mov al, [rbx + 2]
  1445                                              
  1446                                              ; Comparar con la última letra
  1447 000005EC 3A05(CD220000)                      cmp al, [last_letter]
  1448 000005F2 7407                                je .same_letter
  1449                                              
  1450                                              ; Es una letra diferente, resetear el procesamiento
  1451 000005F4 C605(E1220000)00                    mov byte [current_power_processed], 0
  1452                                              
  1453                                              .same_letter:
  1454                                              ; Guardar la nueva letra
  1455 000005FB 8805(CD220000)                      mov [last_letter], al
  1456                                              
  1457                                              ; Verificar si es 'E' para extender la paleta
  1458 00000601 3C45                                cmp al, 'E'
  1459 00000603 7450                                je .extend_pallet
  1460                                              
  1461                                              ; Verificar si es 'P' para añadir vida
  1462 00000605 3C50                                cmp al, 'P'
  1463 00000607 7478                                je .check_add_life
  1464                                  
  1465 00000609 3C53                                cmp al, 'S'
  1466 0000060B 0F84B4000000                        je .slow_ball
  1467                                  
  1468 00000611 3C43                                cmp al, 'C'
  1469 00000613 0F84D8000000                        je .activate_catch
  1470                                              
  1471 00000619 3C4C                                cmp al, 'L'
  1472 0000061B 0F84F9000000                        je .activate_laser
  1473                                  
  1474 00000621 3C44                                cmp al, 'D'
  1475 00000623 0F841A010000                        je .activate_split
  1476                                  
  1477                                              ; Si no es ningún power-up, restaurar tamaño normal
  1478 00000629 488B05(CF140000)                    mov rax, [default_pallet_size]
  1479 00000630 488905(C7140000)                    mov [pallet_size], rax
  1480 00000637 48C705(E3220000)01-                 mov qword [ball_speed], 1    ; Restaurar velocidad normal
  1480 0000063F 000000             
  1481 00000642 C605(FC220000)00                    mov byte [catch_power_active], 0
  1482 00000649 C605(09230000)00                    mov byte [laser_power_active], 0
  1483 00000650 E91C010000                          jmp .finish_capture
  1484                                  
  1485                                              .extend_pallet:
  1486 00000655 C605(09230000)00                        mov byte [laser_power_active], 0
  1487 0000065C C605(FC220000)00                        mov byte [catch_power_active], 0
  1488 00000663 48C705(E3220000)01-                     mov qword [ball_speed], 1    ; Restaurar velocidad normal
  1488 0000066B 000000             
  1489 0000066E 488B05(D7140000)                        mov rax, [extended_pallet_size]
  1490 00000675 488905(C7140000)                        mov [pallet_size], rax
  1491 0000067C E9F0000000                              jmp .finish_capture
  1492                                  
  1493                                              .check_add_life:
  1494 00000681 C605(09230000)00                        mov byte [laser_power_active], 0
  1495 00000688 C605(FC220000)00                        mov byte [catch_power_active], 0
  1496 0000068F 488B05(CF140000)                        mov rax, [default_pallet_size]
  1497 00000696 488905(C7140000)                        mov [pallet_size], rax
  1498 0000069D 48C705(E3220000)01-                     mov qword [ball_speed], 1 
  1498 000006A5 000000             
  1499                                                  ; Verificar si ya procesamos este power-up
  1500 000006A8 803D(E1220000)00                        cmp byte [current_power_processed], 0
  1501 000006AF 0F85BC000000                            jne .finish_capture
  1502                                                  
  1503                                                  ; Preservar registros importantes
  1504 000006B5 51                                      push rcx
  1505 000006B6 53                                      push rbx
  1506                                                  
  1507                                                  ; Marcar como procesado
  1508 000006B7 C605(E1220000)01                        mov byte [current_power_processed], 1
  1509                                                  
  1510                                                  ; Añadir una vida
  1511 000006BE E845040000                              call add_life
  1512                                                  
  1513                                                  ; Restaurar registros
  1514 000006C3 5B                                      pop rbx
  1515 000006C4 59                                      pop rcx
  1516                                                  
  1517                                              .slow_ball:
  1518 000006C5 C605(09230000)00                        mov byte [laser_power_active], 0
  1519 000006CC C605(FC220000)00                        mov byte [catch_power_active], 0                
  1520 000006D3 488B05(CF140000)                        mov rax, [default_pallet_size]
  1521 000006DA 488905(C7140000)                        mov [pallet_size], rax
  1522 000006E1 48C705(E3220000)02-                     mov qword [ball_speed], 2    ; Activar velocidad lenta
  1522 000006E9 000000             
  1523 000006EC E980000000                              jmp .finish_capture
  1524                                  
  1525                                              .activate_catch:
  1526 000006F1 C605(09230000)00                        mov byte [laser_power_active], 0
  1527 000006F8 488B05(CF140000)                        mov rax, [default_pallet_size]
  1528 000006FF 488905(C7140000)                        mov [pallet_size], rax
  1529 00000706 48C705(E3220000)01-                     mov qword [ball_speed], 1
  1529 0000070E 000000             
  1530 00000711 C605(FC220000)01                        mov byte [catch_power_active], 1
  1531 00000718 EB57                                    jmp .finish_capture
  1532                                  
  1533                                              .activate_laser:
  1534 0000071A C605(FC220000)00                        mov byte [catch_power_active], 0
  1535 00000721 488B05(CF140000)                        mov rax, [default_pallet_size]
  1536 00000728 488905(C7140000)                        mov [pallet_size], rax
  1537 0000072F 48C705(E3220000)01-                     mov qword [ball_speed], 1
  1537 00000737 000000             
  1538 0000073A C605(09230000)01                        mov byte [laser_power_active], 1    ; Activar el poder láser
  1539 00000741 EB2E                                    jmp .finish_capture
  1540                                  
  1541                                              .activate_split:
  1542 00000743 C605(09230000)00                        mov byte [laser_power_active], 0
  1543 0000074A C605(FC220000)00                        mov byte [catch_power_active], 0
  1544 00000751 488B05(CF140000)                        mov rax, [default_pallet_size]
  1545 00000758 488905(C7140000)                        mov [pallet_size], rax
  1546 0000075F 48C705(E3220000)01-                     mov qword [ball_speed], 1 
  1546 00000767 000000             
  1547 0000076A E8DF000000                              call activate_split_power
  1548 0000076F EB00                                    jmp .finish_capture
  1549                                  
  1550                                              .finish_capture:
  1551 00000771 C6430300                                mov byte [rbx + 3], 0
  1552                                  
  1553                                          .next_letter:
  1554 00000775 48FFC1                              inc rcx
  1555 00000778 E9E9FDFFFF                          jmp .move_loop
  1556                                  
  1557                                      .print_last_letter:
  1558                                          ; ;; en vez de imprimir, saltamos
  1559 0000077D EB0D                            jmp .end
  1560                                  
  1561                                  
  1562                                      .skip_all:                        ; Nueva etiqueta para saltar todo cuando no movemos
  1563 0000077F 415B                            pop r11
  1564 00000781 415A                            pop r10
  1565 00000783 4159                            pop r9
  1566 00000785 4158                            pop r8
  1567 00000787 5E                              pop rsi
  1568 00000788 5F                              pop rdi
  1569 00000789 5B                              pop rbx
  1570 0000078A 5D                              pop rbp
  1571 0000078B C3                              ret
  1572                                  
  1573                                      .end:
  1574 0000078C 415B                            pop r11
  1575 0000078E 415A                            pop r10
  1576 00000790 4159                            pop r9
  1577 00000792 4158                            pop r8
  1578 00000794 5E                              pop rsi
  1579 00000795 5F                              pop rdi
  1580 00000796 5B                              pop rbx
  1581 00000797 5D                              pop rbp
  1582 00000798 C3                              ret
  1583                                  
  1584                                  print_power_label:
  1585 00000799 55                          push rbp
  1586 0000079A 4889E5                      mov  rbp, rsp
  1587                                      
  1588                                      ; Crear buffer temporal
  1589 0000079D 4883EC20                    sub rsp, 32
  1590                                      
  1591                                      ; Copiar el mensaje base al buffer
  1592 000007A1 4889E7                      mov rdi, rsp
  1593 000007A4 48BE-                       mov rsi, last_letter_msg
  1593 000007A6 [CE22000000000000] 
  1594 000007AE B913000000                  mov rcx, last_letter_msg_len
  1595 000007B3 F3A4                        rep movsb
  1596                                      
  1597                                      ; Insertar la última letra capturada
  1598 000007B5 8A05(CD220000)              mov al, [last_letter]
  1599 000007BB 8844240F                    mov byte [rsp + 15], al    ; Asumiendo que 15 es la posición correcta
  1600                                      
  1601                                      ; Imprimir el buffer completo
  1602                                      print rsp, last_letter_msg_len
    82 000007BF B801000000          <1>  mov eax, sys_write
    83 000007C4 BF01000000          <1>  mov edi, 1
    84 000007C9 4889E6              <1>  mov rsi, %1
    85 000007CC BA13000000          <1>  mov edx, %2
    86 000007D1 0F05                <1>  syscall
  1603                                      
  1604                                      ; Restaurar stack
  1605 000007D3 4883C420                    add rsp, 32
  1606 000007D7 5D                          pop rbp
  1607 000007D8 C3                          ret
  1608                                  
  1609                                  
  1610                                  
  1611                                  clear_lasers:
  1612 000007D9 55                          push rbp
  1613 000007DA 4889E5                      mov  rbp, rsp
  1614                                  
  1615                                      ; Recorrer el array de láseres
  1616 000007DD 4831C9                      xor rcx, rcx                ; Índice del láser
  1617 000007E0 480FB61D(0B230000)          movzx rbx, byte [laser_count]  ; Cantidad de láseres activos
  1618                                  
  1619                                      .clear_loop:
  1620 000007E8 4839D9                          cmp rcx, rbx
  1621 000007EB 7D2F                            jge .done                ; Salir si no quedan láseres
  1622                                  
  1623                                          ; Obtener posición del láser actual
  1624 000007ED 488DB409[0C230000]              lea rsi, [lasers + rcx * 2]
  1625 000007F5 4C0FB606                        movzx r8, byte [rsi]     ; X
  1626 000007F9 4C0FB64E01                      movzx r9, byte [rsi + 1] ; Y
  1627                                  
  1628                                          ; Calcular posición en el tablero
  1629 000007FE B850000000                      mov rax, column_cells
  1630 00000803 4883C002                        add rax, 2
  1631 00000807 49F7E1                          mul r9
  1632 0000080A 4C01C0                          add rax, r8
  1633 0000080D 488DB8[400A0000]                lea rdi, [board + rax]
  1634                                  
  1635                                          ; Borrar el láser visualmente
  1636 00000814 C60720                          mov byte [rdi], ' '
  1637                                  
  1638                                          ; Pasar al siguiente láser
  1639 00000817 48FFC1                          inc rcx
  1640 0000081A EBCC                            jmp .clear_loop
  1641                                  
  1642                                      .done:
  1643                                          ; Resetear contador de láseres
  1644 0000081C C605(0B230000)00                mov byte [laser_count], 0
  1645                                  
  1646 00000823 5D                              pop rbp
  1647 00000824 C3                              ret
  1648                                  
  1649                                  
  1650                                  ; Nueva función para actualizar los láseres
  1651                                  update_lasers:
  1652 00000825 55                          push rbp
  1653 00000826 4889E5                      mov rbp, rsp
  1654                                      
  1655                                      ; Verificar si el poder láser está activo
  1656 00000829 803D(09230000)00            cmp byte [laser_power_active], 0
  1657 00000830 741A                        je .end
  1658                                      
  1659                                      ; Verificar si se presionó la tecla de espacio
  1660 00000832 803D(08230000)20            cmp byte [last_key], ' '
  1661 00000839 750C                        jne .skip_shooting
  1662                                      
  1663                                      ; Disparar nuevos láseres
  1664 0000083B E89A000000                  call shoot_lasers
  1665 00000840 C605(08230000)00            mov byte [last_key], 0    ; Limpiar la tecla procesada
  1666                                      
  1667                                      .skip_shooting:
  1668                                      ; Mover los láseres existentes
  1669 00000847 E828010000                  call move_lasers
  1670                                      
  1671                                      .end:
  1672 0000084C 5D                              pop rbp
  1673 0000084D C3                              ret
  1674                                  
  1675                                  activate_split_power:
  1676 0000084E 55                          push rbp
  1677 0000084F 4889E5                      mov rbp, rsp
  1678                                      
  1679                                      ; Verificar si la bola2 y bola3 ya están activas
  1680 00000852 803D(22150000)01            cmp byte [ball2_active], 1
  1681 00000859 750B                        jne .enable_balls
  1682 0000085B 803D(44150000)01            cmp byte [ball3_active], 1
  1683 00000862 7502                        jne .enable_balls
  1684                                      
  1685                                      ; Si ambas ya están activas, no hacemos nada.
  1686 00000864 EB72                        jmp .end
  1687                                  
  1688                                  .enable_balls:
  1689                                      ; Copiamos la posición de la bola principal
  1690 00000866 488B05(DF140000)            mov rax, [ball_x_pos]
  1691 0000086D 488905(01150000)            mov [ball2_x_pos], rax
  1692 00000874 488905(23150000)            mov [ball3_x_pos], rax
  1693                                  
  1694 0000087B 488B05(E7140000)            mov rax, [ball_y_pos]
  1695 00000882 488905(09150000)            mov [ball2_y_pos], rax
  1696 00000889 488905(2B150000)            mov [ball3_y_pos], rax
  1697                                  
  1698                                      ; Activamos bola2 y bola3 con direcciones diferentes
  1699                                      ; Por ejemplo: una va diagonal izq-arriba, otra diagonal der-arriba
  1700 00000890 48C705(11150000)FF-         mov qword [ball2_direction_x], -1
  1700 00000898 FFFFFF             
  1701 0000089B 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  1701 000008A3 FFFFFF             
  1702 000008A6 C605(21150000)01            mov byte [ball2_moving], 1
  1703 000008AD C605(22150000)01            mov byte [ball2_active], 1
  1704                                  
  1705 000008B4 48C705(33150000)01-         mov qword [ball3_direction_x], 1
  1705 000008BC 000000             
  1706 000008BF 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  1706 000008C7 FFFFFF             
  1707 000008CA C605(43150000)01            mov byte [ball3_moving], 1
  1708 000008D1 C605(44150000)01            mov byte [ball3_active], 1
  1709                                  
  1710                                  .end:
  1711 000008D8 5D                          pop rbp
  1712 000008D9 C3                          ret
  1713                                  
  1714                                  
  1715                                  shoot_lasers:
  1716 000008DA 55                          push rbp
  1717 000008DB 4889E5                      mov rbp, rsp
  1718 000008DE 53                          push rbx
  1719                                      
  1720                                      ; Verificar si hay espacio para más láseres
  1721 000008DF 480FB605(0B230000)          movzx rax, byte [laser_count]
  1722 000008E7 4883F862                    cmp rax, 98  ; Asegurar que hay espacio para 2 láseres
  1723 000008EB 0F8D80000000                jge .end
  1724                                      
  1725                                      ; Obtener posición de la paleta
  1726 000008F1 4C8B05(BF140000)            mov r8, [pallet_position]
  1727 000008F8 4981E8[400A0000]            sub r8, board                  ; Offset relativo de la paleta
  1728                                      
  1729                                      ; Calcular coordenadas x,y
  1730 000008FF 4C89C0                      mov rax, r8
  1731 00000902 41B950000000                mov r9, column_cells
  1732 00000908 4983C102                    add r9, 2                     ; Ancho total de línea
  1733 0000090C 4831D2                      xor rdx, rdx
  1734 0000090F 49F7F1                      div r9                        ; rax = y, rdx = x
  1735                                      
  1736                                      ; Guardar coordenadas
  1737 00000912 4989C2                      mov r10, rax                  ; Y en r10
  1738 00000915 4989D3                      mov r11, rdx                  ; X en r11
  1739                                      
  1740                                      ; Validar coordenadas
  1741 00000918 4983FA00                    cmp r10, 0
  1742 0000091C 7C53                        jl .end
  1743 0000091E 4983FA20                    cmp r10, row_cells
  1744 00000922 7D4D                        jge .end
  1745 00000924 4983FB00                    cmp r11, 0
  1746 00000928 7C47                        jl .end
  1747 0000092A 4983FB50                    cmp r11, column_cells
  1748 0000092E 7D41                        jge .end
  1749                                      
  1750                                      ; Calcular índice para el primer láser
  1751 00000930 480FB61D(0B230000)          movzx rbx, byte [laser_count]
  1752 00000938 486BDB02                    imul rbx, 2                   ; Cada láser usa 2 bytes
  1753                                      
  1754                                      ; Primer láser (izquierda)
  1755 0000093C 488DBB[0C230000]            lea rdi, [lasers + rbx]
  1756 00000943 44881F                      mov [rdi], r11b              ; X
  1757 00000946 4488D0                      mov al, r10b
  1758 00000949 FEC8                        dec al                       ; Y - 1
  1759 0000094B 884701                      mov [rdi + 1], al           ; Y
  1760                                      
  1761                                      ; Segundo láser (derecha)
  1762 0000094E 4488D8                      mov al, r11b
  1763 00000951 0205(C7140000)              add al, byte [pallet_size]
  1764 00000957 FEC8                        dec al                       ; Ajustar para el último carácter
  1765 00000959 488DBB[0E230000]            lea rdi, [lasers + rbx + 2]
  1766 00000960 8807                        mov [rdi], al               ; X
  1767 00000962 4488D0                      mov al, r10b
  1768 00000965 FEC8                        dec al                      ; Y - 1
  1769 00000967 884701                      mov [rdi + 1], al          ; Y
  1770                                      
  1771                                      ; Incrementar contador de láseres
  1772 0000096A 8005(0B230000)02            add byte [laser_count], 2
  1773                                      
  1774                                      
  1775                                      .end:
  1776 00000971 5B                              pop rbx
  1777 00000972 5D                              pop rbp
  1778 00000973 C3                              ret
  1779                                  
  1780                                  ; Función corregida para mover láseres
  1781                                  ; Función corregida para mover láseres
  1782                                  ; Esta es la parte clave para recorrer los láseres de atrás hacia adelante.
  1783                                  
  1784                                  ; Actualizar la función move_lasers para incluir verificación de colisiones
  1785                                  ; ============================================================
  1786                                  ; NUEVA FUNCIÓN move_lasers (todo-en-uno)
  1787                                  ; ============================================================
  1788                                  ; Mueve cada láser hacia arriba, verifica colisiones (bloques/enemigos)
  1789                                  ; y lo elimina inmediatamente si choca, de lo contrario lo dibuja.
  1790                                  ; ============================================================
  1791                                  move_lasers:
  1792 00000974 55                          push rbp
  1793 00000975 4889E5                      mov  rbp, rsp
  1794 00000978 53                          push rbx
  1795 00000979 57                          push rdi
  1796 0000097A 56                          push rsi
  1797 0000097B 4154                        push r12
  1798 0000097D 4155                        push r13
  1799 0000097F 4156                        push r14
  1800 00000981 4157                        push r15
  1801                                  
  1802                                      ; 1) Tomamos la cantidad de láseres
  1803 00000983 480FB60D(0B230000)          movzx rcx, byte [laser_count]
  1804 0000098B 4885C9                      test rcx, rcx
  1805 0000098E 0F84BB000000                jz .fin              ; Si es cero, no hay láseres => salir
  1806                                  
  1807                                      ; Ajustamos RCX para que sea el último índice (laser_count - 1)
  1808 00000994 48FFC9                      dec rcx              ; Empezamos desde el último láser
  1809                                  
  1810                                  .loop_lasers:
  1811                                      ; RSI apunta a lasers + (rcx * 2) => (x, y) del láser
  1812 00000997 488DB409[0C230000]          lea rsi, [lasers + rcx*2]
  1813                                  
  1814                                      ; 2) Cargar x,y actuales del láser
  1815 0000099F 4C0FB606                    movzx r8,  byte [rsi]      ; X
  1816 000009A3 4C0FB64E01                  movzx r9,  byte [rsi + 1]  ; Y
  1817                                  
  1818                                      ; 3) Borrar el láser de su posición actual en pantalla
  1819                                      ;    (por si en el ciclo anterior se había dibujado)
  1820 000009A8 B850000000                  mov rax, column_cells
  1821 000009AD 4883C002                    add rax, 2
  1822 000009B1 49F7E1                      mul r9
  1823 000009B4 4C01C0                      add rax, r8
  1824 000009B7 488DB8[400A0000]            lea rdi, [board + rax]
  1825 000009BE C60720                      mov byte [rdi], ' '        ; Borramos el símbolo anterior (láser)
  1826                                  
  1827                                      ; 4) Mover el láser hacia arriba (y - 1)
  1828 000009C1 49FFC9                      dec r9
  1829                                  
  1830                                      ; Si y < 1, está fuera de pantalla => eliminarlo
  1831 000009C4 4983F901                    cmp r9, 1
  1832 000009C8 7C57                        jl .delete_laser
  1833                                  
  1834                                      ; Guardamos la posición nueva en el array (aún no lo dibujamos)
  1835 000009CA 44884E01                    mov byte [rsi + 1], r9b
  1836                                  
  1837                                      ; 5) Verificamos colisión inmediata con bloques o enemigos
  1838                                      ;    - Primero colisión con bloques
  1839                                      ; ---------------------------------------------------------
  1840                                      ; Calculamos la nueva dirección de memoria para esa posición (r9,r8)
  1841 000009CE B850000000                  mov rax, column_cells
  1842 000009D3 4883C002                    add rax, 2
  1843 000009D7 49F7E1                      mul r9
  1844 000009DA 4C01C0                      add rax, r8
  1845 000009DD 488DB8[400A0000]            lea rdi, [board + rax]   ; rdi apunta a la celda donde estaría el láser
  1846                                  
  1847                                      ; Revisar si hay bloque
  1848 000009E4 51                          push rcx
  1849 000009E5 56                          push rsi
  1850 000009E6 57                          push rdi
  1851 000009E7 4989FA                      mov r10, rdi    ; En check_block_collision, r10 = posición en board
  1852 000009EA E8D40F0000                  call check_block_collision
  1853 000009EF 5F                          pop rdi
  1854 000009F0 5E                          pop rsi
  1855 000009F1 59                          pop rcx
  1856                                  
  1857 000009F2 4885C0                      test rax, rax          ; rax=1 => hubo colisión con bloque
  1858 000009F5 752A                        jnz .delete_laser      ; si chocó, eliminar ya el láser
  1859                                  
  1860                                      ;    - Luego colisión con enemigos
  1861                                      ; ---------------------------------------------------------
  1862 000009F7 51                          push rcx
  1863 000009F8 56                          push rsi
  1864 000009F9 57                          push rdi
  1865                                      ; Pasamos (r8=X, r9=Y, r10=punteroEnBoard) a la función
  1866                                      ; o podemos crear una versión inlined. A modo de ejemplo:
  1867                                      ; Llamamos a check_laser_enemy_collision, que retorna
  1868                                      ; rax=1 si hubo colisión con enemigo, 0 si no.
  1869                                      ;
  1870                                      ; Hacemos algo como:
  1871 000009FA 4989FA                      mov r10, rdi
  1872 000009FD E85A000000                  call check_laser_enemy_collision
  1873 00000A02 5F                          pop rdi
  1874 00000A03 5E                          pop rsi
  1875 00000A04 59                          pop rcx
  1876                                  
  1877 00000A05 4885C0                      test rax, rax          ; rax=1 => colisión con un enemigo
  1878 00000A08 7517                        jnz .delete_laser
  1879                                  
  1880                                      ; 6) Si NO hubo colisión, dibujamos el láser en la nueva posición
  1881 00000A0A 8A05(0A230000)              mov al, [laser_symbol]
  1882 00000A10 8807                        mov [rdi], al
  1883                                  
  1884                                  .next_laser:
  1885                                      ; Pasamos al láser anterior en el array
  1886 00000A12 48FFC9                      dec rcx
  1887 00000A15 4883F9FF                    cmp rcx, -1
  1888 00000A19 0F8F78FFFFFF                jg .loop_lasers   ; Mientras rcx >= 0, seguir iterando
  1889 00000A1F EB2E                        jmp .fin
  1890                                  
  1891                                  ; -----------------------------------------------------------------
  1892                                  ; Subrutina interna: .delete_laser
  1893                                  ; -----------------------------------------------------------------
  1894                                  ; Elimina el láser actual del array 'lasers' moviendo el último
  1895                                  ; láser a su posición (si no es el último). Decrementa laser_count.
  1896                                  .delete_laser:
  1897 00000A21 4C0FB625(0B230000)          movzx r12, byte [laser_count]
  1898 00000A29 49FFCC                      dec r12                    ; r12 = índice del último láser
  1899 00000A2C 4939CC                      cmp r12, rcx
  1900 00000A2F 7616                        jbe .just_decrement        ; Si rcx ya apunta al último, no copiamos
  1901                                  
  1902                                      ; Copiamos el último láser a la posición actual
  1903 00000A31 488DBC09[0C230000]          lea rdi, [lasers + rcx*2]
  1904 00000A39 4B8DB424[0C230000]          lea rsi, [lasers + r12*2]
  1905 00000A41 668B06                      mov ax, [rsi]             ; lee 2 bytes (X,Y) del último láser
  1906 00000A44 668907                      mov [rdi], ax             ; copiamos X,Y
  1907                                  
  1908                                  .just_decrement:
  1909 00000A47 FE0D(0B230000)              dec byte [laser_count]    ; Decrementar contador de láseres
  1910 00000A4D EBC3                        jmp .next_laser
  1911                                  
  1912                                  .fin:
  1913 00000A4F 415F                        pop r15
  1914 00000A51 415E                        pop r14
  1915 00000A53 415D                        pop r13
  1916 00000A55 415C                        pop r12
  1917 00000A57 5E                          pop rsi
  1918 00000A58 5F                          pop rdi
  1919 00000A59 5B                          pop rbx
  1920 00000A5A 5D                          pop rbp
  1921 00000A5B C3                          ret
  1922                                  
  1923                                  
  1924                                  ; Nueva función para verificar colisión entre láser y enemigos
  1925                                  ; ==========================================================
  1926                                  ; NUEVA check_laser_enemy_collision - inlined destroy
  1927                                  ; ==========================================================
  1928                                  check_laser_enemy_collision:
  1929 00000A5C 55                          push rbp
  1930 00000A5D 4889E5                      mov  rbp, rsp
  1931                                      
  1932 00000A60 4D31ED                      xor r13, r13            ; Índice del enemigo
  1933 00000A63 4831C0                      xor rax, rax            ; 0 = no colisión
  1934                                  
  1935                                  .loop_enemies:
  1936 00000A66 4983FD05                    cmp r13, 5              ; Máximo 5 enemigos
  1937 00000A6A 7D64                        jge .end
  1938                                  
  1939                                      ; r13 * 3 => offset del enemigo i
  1940 00000A6C 4C89E9                      mov rcx, r13
  1941 00000A6F 486BC903                    imul rcx, 3
  1942 00000A73 488DB1[60200000]            lea rsi, [enemies + rcx]   ; rsi => &enemies[i]
  1943                                  
  1944                                      ; Verificar si está activo
  1945 00000A7A 807E0201                    cmp byte [rsi+2], 1
  1946 00000A7E 754B                        jne .next_enemy
  1947                                  
  1948                                      ; Cargar posición X/Y del enemigo
  1949 00000A80 4C0FB636                    movzx r14, byte [rsi]      ; X
  1950 00000A84 4C0FB67E01                  movzx r15, byte [rsi+1]    ; Y
  1951                                  
  1952                                      ; Comparar con posición del láser (r8=X, r9=Y)
  1953 00000A89 4D39F0                      cmp r8, r14
  1954 00000A8C 753D                        jne .next_enemy
  1955 00000A8E 4D39F9                      cmp r9, r15
  1956 00000A91 7538                        jne .next_enemy
  1957                                  
  1958                                      ; ==== Colisión detectada con láser ====
  1959                                  
  1960                                      ; 1) Desactivar enemigo
  1961 00000A93 C6460200                    mov byte [rsi+2], 0     ; (activo=0)
  1962                                  
  1963                                      ; 2) Sumar puntos
  1964 00000A97 488B05(7F200000)            mov rax, [enemy_points]
  1965 00000A9E 480105(3E200000)            add [current_score], rax
  1966                                  
  1967                                      ; 3) (Opcional) Borrar del board, SOLO si no coincide con la paleta
  1968                                      ;    Evita crasheos en la fila de la paleta (row_cells - 2).
  1969 00000AA5 4983FF1E                    cmp r15, row_cells - 2
  1970 00000AA9 7419                        je .skip_erase
  1971                                  
  1972                                      ; Borrar visualmente del board
  1973 00000AAB B850000000                  mov rax, column_cells
  1974 00000AB0 4883C002                    add rax, 2
  1975 00000AB4 49F7E7                      mul r15
  1976 00000AB7 4C01F0                      add rax, r14
  1977 00000ABA 488DB8[400A0000]            lea rdi, [board + rax]
  1978 00000AC1 C60720                      mov byte [rdi], ' '
  1979                                  
  1980                                  .skip_erase:
  1981                                  
  1982                                      ; 4) Devolver rax=1 => colisión con enemigo
  1983 00000AC4 B801000000                  mov rax, 1
  1984 00000AC9 EB05                        jmp .end
  1985                                  
  1986                                  .next_enemy:
  1987 00000ACB 49FFC5                      inc r13
  1988 00000ACE EB96                        jmp .loop_enemies
  1989                                  
  1990                                  .end:
  1991 00000AD0 5D                          pop rbp
  1992 00000AD1 C3                          ret
  1993                                  
  1994                                  
  1995                                  ; Función auxiliar para eliminar un láser específico
  1996                                  remove_laser:
  1997 00000AD2 55                          push rbp
  1998 00000AD3 4889E5                      mov rbp, rsp
  1999                                  
  2000                                      ; Borrar el láser del tablero
  2001 00000AD6 41C60220                    mov byte [r10], ' '
  2002                                  
  2003                                      ; Mover el último láser a esta posición si no es el último
  2004 00000ADA 480FB605(0B230000)          movzx rax, byte [laser_count]
  2005 00000AE2 48FFC8                      dec rax                    ; Índice del último láser
  2006 00000AE5 4939C4                      cmp r12, rax              ; Comparar con láser actual
  2007 00000AE8 7416                        je .just_decrease         ; Si es el último, solo decrementar contador
  2008                                  
  2009                                      ; Copiar último láser a la posición actual
  2010 00000AEA 4B8DBC24[0C230000]          lea rdi, [lasers + r12*2]
  2011 00000AF2 488DB400[0C230000]          lea rsi, [lasers + rax*2]
  2012 00000AFA 668B16                      mov dx, [rsi]             ; Copiar X,Y del último láser
  2013 00000AFD 668917                      mov [rdi], dx
  2014                                  
  2015                                  .just_decrease:
  2016 00000B00 FE0D(0B230000)              dec byte [laser_count]    ; Decrementar contador de láseres
  2017                                  
  2018 00000B06 5D                          pop rbp
  2019 00000B07 C3                          ret
  2020                                  
  2021                                  add_life:
  2022 00000B08 55                          push rbp
  2023 00000B09 4889E5                      mov rbp, rsp
  2024 00000B0C 53                          push rbx
  2025 00000B0D 51                          push rcx
  2026 00000B0E 57                          push rdi
  2027 00000B0F 56                          push rsi
  2028 00000B10 4150                        push r8
  2029 00000B12 4151                        push r9
  2030                                      
  2031                                      ; Verificar si ya tenemos el máximo de vidas
  2032 00000B14 480FB605(3B210000)          movzx rax, byte [current_lives]
  2033 00000B1C 4883F807                    cmp rax, 7          ; Comparar con el máximo de vidas
  2034 00000B20 7D2C                        jge .end
  2035                                      
  2036                                      ; Incrementar el contador de vidas
  2037 00000B22 FE05(3B210000)              inc byte [current_lives]
  2038                                      
  2039                                      ; Encontrar la siguiente vida inactiva
  2040 00000B28 4831C9                      xor rcx, rcx
  2041                                      
  2042                                      .find_inactive:
  2043 00000B2B 4883F907                        cmp rcx, lives_count
  2044 00000B2F 7D1D                            jge .end
  2045                                          
  2046                                          ; Calcular offset de la vida actual
  2047 00000B31 4889C8                          mov rax, rcx
  2048 00000B34 486BC003                        imul rax, 3
  2049 00000B38 488DB0[25210000]                lea rsi, [lives_data + rax]
  2050                                          
  2051                                          ; Verificar si está inactiva
  2052 00000B3F 807E0200                        cmp byte [rsi + 2], 0
  2053 00000B43 7405                            je .activate_life
  2054                                          
  2055 00000B45 48FFC1                          inc rcx
  2056 00000B48 EBE1                            jmp .find_inactive
  2057                                          
  2058                                      .activate_life:
  2059                                          ; Activar la vida
  2060 00000B4A C6460201                        mov byte [rsi + 2], 1
  2061                                          
  2062                                      .end:
  2063 00000B4E 4159                            pop r9
  2064 00000B50 4158                            pop r8
  2065 00000B52 5E                              pop rsi
  2066 00000B53 5F                              pop rdi
  2067 00000B54 59                              pop rcx
  2068 00000B55 5B                              pop rbx
  2069 00000B56 5D                              pop rbp
  2070 00000B57 C3                              ret
  2071                                  
  2072                                  
  2073                                  print_ball:
  2074 00000B58 4C8B05(DF140000)        	mov r8, [ball_x_pos]
  2075 00000B5F 4C8B0D(E7140000)        	mov r9, [ball_y_pos]
  2076 00000B66 4981C0[400A0000]        	add r8, board
  2077                                  
  2078 00000B6D 4C89C9                  	mov rcx, r9
  2079 00000B70 B852000000              	mov rax, column_cells + 2
  2080 00000B75 48F7E9                  	imul rcx
  2081                                  	
  2082 00000B78 4901C0                  	add r8, rax
  2083 00000B7B 41C6004F                	mov byte [r8], char_O
  2084 00000B7F C3                      	ret
  2085                                  
  2086                                  print_ball_2:
  2087 00000B80 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2088 00000B87 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2089 00000B8E 4981C0[400A0000]            add r8, board
  2090 00000B95 4C89C9                      mov rcx, r9
  2091 00000B98 B852000000                  mov rax, column_cells + 2
  2092 00000B9D 48F7E9                      imul rcx
  2093 00000BA0 4901C0                      add r8, rax
  2094 00000BA3 41C6004F                    mov byte [r8], char_O
  2095 00000BA7 C3                          ret
  2096                                  
  2097                                  print_ball_3:
  2098 00000BA8 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2099 00000BAF 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2100 00000BB6 4981C0[400A0000]            add r8, board
  2101 00000BBD 4C89C9                      mov rcx, r9
  2102 00000BC0 B852000000                  mov rax, column_cells + 2
  2103 00000BC5 48F7E9                      imul rcx
  2104 00000BC8 4901C0                      add r8, rax
  2105 00000BCB 41C6004F                    mov byte [r8], char_O
  2106 00000BCF C3                          ret
  2107                                  
  2108                                  	;mov rax, board + r8 + r9 * (column_cells + 2)
  2109                                  	
  2110                                  print_pallet:
  2111                                      ; Primero borrar la paleta anterior completa (usando el tamaño máximo posible)
  2112 00000BD0 4C8B05(BF140000)            mov r8, [pallet_position]
  2113 00000BD7 488B0D(D7140000)            mov rcx, [extended_pallet_size]
  2114                                      .clear_pallet:
  2115 00000BDE 41C60020                        mov byte [r8], char_space
  2116 00000BE2 49FFC0                          inc r8
  2117 00000BE5 48FFC9                          dec rcx
  2118 00000BE8 75F4                            jnz .clear_pallet
  2119                                  
  2120                                      ; Luego dibujar la nueva paleta con el tamaño actual
  2121 00000BEA 4C8B05(BF140000)            mov r8, [pallet_position]
  2122 00000BF1 488B0D(C7140000)            mov rcx, [pallet_size]
  2123                                      .write_pallet:
  2124 00000BF8 41C6003D                        mov byte [r8], char_equal
  2125 00000BFC 49FFC0                          inc r8
  2126 00000BFF 48FFC9                          dec rcx
  2127 00000C02 75F4                            jnz .write_pallet
  2128                                  
  2129 00000C04 C3                          ret
  2130                                  
  2131                                  move_pallet:
  2132                                      
  2133 00000C05 803D(FF140000)00            cmp byte [ball_moving], 0
  2134 00000C0C 7507                        jne .continue_movement
  2135 00000C0E C605(FF140000)01            mov byte [ball_moving], 1
  2136                                  
  2137                                      .continue_movement:
  2138 00000C15 4883FFFF                        cmp rdi, left_direction
  2139 00000C19 7531                            jne .move_right
  2140                                  
  2141                                          .move_left:
  2142                                              ; Verificar si la siguiente posición sería una X (borde izquierdo)
  2143 00000C1B 4C8B05(BF140000)                    mov r8, [pallet_position]
  2144 00000C22 49FFC8                              dec r8              ; Verificar la posición a la izquierda
  2145 00000C25 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
  2146 00000C28 3C58                                cmp al, 'X'        ; Comparar si es una X
  2147 00000C2A 744E                                je .end            ; Si es X, no mover
  2148                                              
  2149 00000C2C 4C8B05(BF140000)                    mov r8, [pallet_position]
  2150 00000C33 4C8B0D(C7140000)                    mov r9, [pallet_size]
  2151 00000C3A 43C64408FF20                        mov byte [r8 + r9 - 1], char_space  ; Borrar último carácter de la paleta
  2152 00000C40 49FFC8                              dec r8
  2153 00000C43 4C8905(BF140000)                    mov [pallet_position], r8
  2154 00000C4A EB2E                                jmp .end
  2155                                              
  2156                                          .move_right:
  2157                                              ; Verificar si la siguiente posición después de la paleta sería una X
  2158 00000C4C 4C8B05(BF140000)                    mov r8, [pallet_position]
  2159 00000C53 4C8B0D(C7140000)                    mov r9, [pallet_size]
  2160 00000C5A 4D01C8                              add r8, r9         ; Moverse al final de la paleta
  2161 00000C5D 418A4002                            mov al, [r8+2]       ; Cargar el carácter en esa posición
  2162 00000C61 3C58                                cmp al, 'X'        ; Comparar si es una X
  2163 00000C63 7415                                je .end            ; Si es X, no mover
  2164                                              
  2165 00000C65 4C8B05(BF140000)                    mov r8, [pallet_position]
  2166 00000C6C 41C60020                            mov byte [r8], char_space
  2167 00000C70 49FFC0                              inc r8
  2168 00000C73 4C8905(BF140000)                    mov [pallet_position], r8
  2169                                          .end:
  2170 00000C7A C3                                  ret
  2171                                  
  2172                                  
  2173                                  
  2174                                              
  2175                                  ; Nueva función auxiliar para actualizar la posición de la bola atrapada
  2176                                  update_caught_ball_position:
  2177 00000C7B 55                          push rbp
  2178 00000C7C 4889E5                      mov rbp, rsp
  2179                                      
  2180                                      ; Calcular la nueva posición de la bola basada en la paleta
  2181 00000C7F 4C8B05(BF140000)            mov r8, [pallet_position]
  2182 00000C86 4981E8[400A0000]            sub r8, board          ; Obtener posición relativa
  2183 00000C8D B852000000                  mov rax, column_cells + 2
  2184 00000C92 4831D2                      xor rdx, rdx
  2185 00000C95 48F7F0                      div rax                ; División para obtener X,Y
  2186                                      
  2187                                      ; rdx contiene X (resto), rax contiene Y (cociente)
  2188 00000C98 4989C1                      mov r9, rax            ; Y de la paleta
  2189 00000C9B 49FFC9                      dec r9                 ; Una posición arriba de la paleta
  2190                                      
  2191                                      ; Añadir el offset guardado a la posición X
  2192 00000C9E 4889D0                      mov rax, rdx
  2193 00000CA1 480305(00230000)            add rax, [ball_catch_offset]
  2194 00000CA8 488905(DF140000)            mov [ball_x_pos], rax
  2195 00000CAF 4C890D(E7140000)            mov [ball_y_pos], r9
  2196                                      
  2197 00000CB6 5D                          pop rbp
  2198 00000CB7 C3                          ret
  2199                                  
  2200                                  
  2201                                  move_all_balls:
  2202 00000CB8 55                          push rbp
  2203 00000CB9 4889E5                      mov rbp, rsp
  2204 00000CBC 53                          push rbx
  2205                                      
  2206                                      ; Inicializar contador de bolas
  2207 00000CBD 4831DB                      xor rbx, rbx
  2208                                      
  2209                                  .loop_balls:
  2210                                      ; Verificar si hemos procesado todas las bolas
  2211 00000CC0 3A1D(3F240000)              cmp bl, byte [balls_count]
  2212 00000CC6 7D1D                        jge .end
  2213                                      
  2214                                      ; Calcular offset de la bola actual
  2215 00000CC8 B821000000                  mov rax, BALL_STRUCT_SIZE
  2216 00000CCD 48F7E3                      mul rbx
  2217                                      
  2218                                      ; Verificar si la bola está activa
  2219 00000CD0 80B8[FC230000]01            cmp byte [balls_data + rax + 32], 1
  2220 00000CD7 7507                        jne .next_ball
  2221                                      
  2222                                      ; Guardar offset en la pila
  2223 00000CD9 50                          push rax
  2224                                      
  2225                                      ; Llamar a move_ball con los parámetros de esta bola
  2226 00000CDA E809000000                  call move_ball
  2227                                      
  2228                                      ; Restaurar offset
  2229 00000CDF 58                          pop rax
  2230                                      
  2231                                  .next_ball:
  2232 00000CE0 48FFC3                      inc rbx
  2233 00000CE3 EBDB                        jmp .loop_balls
  2234                                      
  2235                                  .end:
  2236 00000CE5 5B                          pop rbx
  2237 00000CE6 5D                          pop rbp
  2238 00000CE7 C3                          ret
  2239                                  
  2240                                  move_ball:
  2241                                  
  2242 00000CE8 803D(FD220000)01            cmp byte [ball_caught], 1
  2243 00000CEF 0F849D000000                je .move_with_pallet
  2244                                  
  2245 00000CF5 803D(FF140000)00            cmp byte [ball_moving], 0
  2246 00000CFC 0F84B8010000                je .end
  2247                                  
  2248                                      ; Incrementar contador de velocidad
  2249 00000D02 48FF05(F3220000)            inc qword [speed_counter]
  2250                                      
  2251                                      ; Verificar si debemos mover la bola en este ciclo
  2252 00000D09 488B05(F3220000)            mov rax, [speed_counter]
  2253 00000D10 483B05(E3220000)            cmp rax, [ball_speed]
  2254 00000D17 0F8C9D010000                jl .end
  2255                                      
  2256                                      ; Resetear contador de velocidad
  2257 00000D1D 48C705(F3220000)00-         mov qword [speed_counter], 0
  2257 00000D25 000000             
  2258                                  
  2259                                      ; Borrar la posición actual de la bola
  2260 00000D28 4C8B05(DF140000)            mov r8, [ball_x_pos]
  2261 00000D2F 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  2262 00000D36 4981C0[400A0000]            add r8, board
  2263 00000D3D 4C89C9                      mov rcx, r9
  2264 00000D40 B852000000                  mov rax, column_cells + 2
  2265 00000D45 48F7E9                      imul rcx
  2266 00000D48 4901C0                      add r8, rax
  2267 00000D4B 41C60020                    mov byte [r8], char_space
  2268                                  
  2269                                      ; Calcular siguiente posición X
  2270 00000D4F 4C8B05(DF140000)            mov r8, [ball_x_pos]
  2271 00000D56 4C8B0D(E7140000)            mov r9, [ball_y_pos]
  2272 00000D5D 488B05(EF140000)            mov rax, [ball_direction_x]
  2273 00000D64 4901C0                      add r8, rax               ; Nueva posición X
  2274                                  
  2275                                      ; Calcular la dirección de memoria para la siguiente posición
  2276 00000D67 4D89C2                      mov r10, r8
  2277 00000D6A 4981C2[400A0000]            add r10, board
  2278 00000D71 4C89C9                      mov rcx, r9
  2279 00000D74 B852000000                  mov rax, column_cells + 2
  2280 00000D79 48F7E9                      imul rcx
  2281 00000D7C 4901C2                      add r10, rax
  2282                                  
  2283                                      ; Verificar si hay una X en la siguiente posición X
  2284 00000D7F 418A02                      mov al, [r10]
  2285 00000D82 3C58                        cmp al, 'X'
  2286 00000D84 7565                        jne .check_block_x
  2287 00000D86 48F71D(EF140000)            neg qword [ball_direction_x]  ; Cambiar dirección X si hay una X
  2288 00000D8D E928010000                  jmp .end
  2289                                  
  2290                                      .move_with_pallet:
  2291                                          ; Borrar la posición actual de la bola
  2292 00000D92 4C8B05(DF140000)                mov r8, [ball_x_pos]
  2293 00000D99 4C8B0D(E7140000)                mov r9, [ball_y_pos]
  2294 00000DA0 4D89C2                          mov r10, r8
  2295 00000DA3 4981C2[400A0000]                add r10, board
  2296 00000DAA 4C89C9                          mov rcx, r9
  2297 00000DAD B852000000                      mov rax, column_cells + 2
  2298 00000DB2 48F7E9                          imul rcx
  2299 00000DB5 4901C2                          add r10, rax
  2300 00000DB8 41C60220                        mov byte [r10], char_space
  2301                                  
  2302                                          ; Actualizar posición X basada en la paleta
  2303 00000DBC 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2304 00000DC3 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2305 00000DCA 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2306 00000DD1 4C8905(DF140000)                mov [ball_x_pos], r8          ; Guardar nueva posición X
  2307                                  
  2308                                          ; Mantener la bola una posición arriba de la paleta
  2309 00000DD8 4C8B0D(E7140000)                mov r9, [ball_y_pos]          ; Mantener la misma altura
  2310 00000DDF 4C890D(E7140000)                mov [ball_y_pos], r9          ; Actualizar posición Y
  2311                                  
  2312 00000DE6 E9CF000000                      jmp .end
  2313                                  
  2314                                  
  2315                                      .check_block_x:
  2316                                          ; Verificar colisión con bloques en X
  2317 00000DEB 4150                            push r8     ; Guardar registros que usa check_block_collision
  2318 00000DED 4151                            push r9
  2319 00000DEF 4152                            push r10
  2320 00000DF1 E8CD0B0000                      call check_block_collision
  2321 00000DF6 415A                            pop r10
  2322 00000DF8 4159                            pop r9
  2323 00000DFA 4158                            pop r8
  2324 00000DFC 4885C0                          test rax, rax
  2325 00000DFF 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2326 00000E01 48F71D(EF140000)                neg qword [ball_direction_x]  ; Si hay colisión, rebotar
  2327 00000E08 E9AD000000                      jmp .end
  2328                                  
  2329                                      .check_paddle_x:
  2330                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2331 00000E0D 41803A3D                        cmp byte [r10], char_equal
  2332 00000E11 750C                            jne .check_y_movement
  2333 00000E13 48F71D(EF140000)                neg qword [ball_direction_x]  ; Cambiar dirección X si hay una paleta
  2334 00000E1A E99B000000                      jmp .end
  2335                                  
  2336                                      .check_y_movement:
  2337                                          ; Calcular siguiente posición Y
  2338 00000E1F 488B05(F7140000)                mov rax, [ball_direction_y]
  2339 00000E26 4901C1                          add r9, rax                  ; Nueva posición Y
  2340                                  
  2341                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2342 00000E29 4D89C2                          mov r10, r8
  2343 00000E2C 4981C2[400A0000]                add r10, board
  2344 00000E33 4C89C9                          mov rcx, r9
  2345 00000E36 B852000000                      mov rax, column_cells + 2
  2346 00000E3B 48F7E9                          imul rcx
  2347 00000E3E 4901C2                          add r10, rax
  2348                                  
  2349                                          ; Verificar si hay una X en la siguiente posición Y
  2350 00000E41 418A02                          mov al, [r10]
  2351 00000E44 3C58                            cmp al, 'X'
  2352 00000E46 7509                            jne .check_block_y
  2353 00000E48 48F71D(F7140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una X
  2354 00000E4F EB69                            jmp .end
  2355                                  
  2356                                      .check_block_y:
  2357                                          ; Verificar colisión con bloques en Y
  2358 00000E51 4150                            push r8     ; Guardar registros que usa check_block_collision
  2359 00000E53 4151                            push r9
  2360 00000E55 4152                            push r10
  2361 00000E57 E8670B0000                      call check_block_collision
  2362 00000E5C 415A                            pop r10
  2363 00000E5E 4159                            pop r9
  2364 00000E60 4158                            pop r8
  2365 00000E62 4885C0                          test rax, rax
  2366 00000E65 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2367 00000E67 48F71D(F7140000)                neg qword [ball_direction_y]  ; Si hay colisión, rebotar
  2368 00000E6E EB4A                            jmp .end
  2369                                  
  2370                                      .check_paddle_y:
  2371                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2372 00000E70 41803A3D                        cmp byte [r10], char_equal
  2373 00000E74 7536                            jne .update_position
  2374                                  
  2375                                          ; Verificar si el poder catch está activo
  2376 00000E76 803D(FC220000)01                cmp byte [catch_power_active], 1
  2377 00000E7D 7524                            jne .normal_bounce
  2378                                  
  2379                                          ; Activar el modo "atrapado"
  2380 00000E7F C605(FD220000)01                mov byte [ball_caught], 1
  2381                                          
  2382                                          ; Guardar la posición X actual de la bola como offset
  2383 00000E86 488B05(DF140000)                mov rax, [ball_x_pos]           ; Posición X actual de la bola
  2384 00000E8D 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2385 00000E94 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2386 00000E9A 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2387                                          
  2388 00000EA1 EB17                            jmp .end
  2389                                  
  2390                                      .normal_bounce:
  2391 00000EA3 48F71D(F7140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una paleta
  2392 00000EAA EB0E                            jmp .end
  2393                                  
  2394                                  
  2395                                      .update_position:
  2396 00000EAC 4C8905(DF140000)                mov [ball_x_pos], r8
  2397 00000EB3 4C890D(E7140000)                mov [ball_y_pos], r9
  2398                                  
  2399                                      .end:
  2400 00000EBA C3                              ret
  2401                                  
  2402                                  
  2403                                  move_ball_2:
  2404                                  
  2405 00000EBB 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2406 00000EC2 0F849D000000                je .move_with_pallet
  2407                                  
  2408 00000EC8 803D(21150000)00            cmp byte [ball2_moving], 0
  2409 00000ECF 0F84B8010000                je .end
  2410                                  
  2411                                      ; Incrementar contador de velocidad
  2412 00000ED5 48FF05(F3220000)            inc qword [speed_counter]
  2413                                      
  2414                                      ; Verificar si debemos mover la bola en este ciclo
  2415 00000EDC 488B05(F3220000)            mov rax, [speed_counter]
  2416 00000EE3 483B05(E3220000)            cmp rax, [ball_speed]
  2417 00000EEA 0F8C9D010000                jl .end
  2418                                      
  2419                                      ; Resetear contador de velocidad
  2420 00000EF0 48C705(F3220000)00-         mov qword [speed_counter], 0
  2420 00000EF8 000000             
  2421                                  
  2422                                      ; Borrar la posición actual de la bola
  2423 00000EFB 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2424 00000F02 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2425 00000F09 4981C0[400A0000]            add r8, board
  2426 00000F10 4C89C9                      mov rcx, r9
  2427 00000F13 B852000000                  mov rax, column_cells + 2
  2428 00000F18 48F7E9                      imul rcx
  2429 00000F1B 4901C0                      add r8, rax
  2430 00000F1E 41C60020                    mov byte [r8], char_space
  2431                                  
  2432                                      ; Calcular siguiente posición X
  2433 00000F22 4C8B05(01150000)            mov r8, [ball2_x_pos]
  2434 00000F29 4C8B0D(09150000)            mov r9, [ball2_y_pos]
  2435 00000F30 488B05(11150000)            mov rax, [ball2_direction_x]
  2436 00000F37 4901C0                      add r8, rax               ; Nueva posición X
  2437                                  
  2438                                      ; Calcular la dirección de memoria para la siguiente posición
  2439 00000F3A 4D89C2                      mov r10, r8
  2440 00000F3D 4981C2[400A0000]            add r10, board
  2441 00000F44 4C89C9                      mov rcx, r9
  2442 00000F47 B852000000                  mov rax, column_cells + 2
  2443 00000F4C 48F7E9                      imul rcx
  2444 00000F4F 4901C2                      add r10, rax
  2445                                  
  2446                                      ; Verificar si hay una X en la siguiente posición X
  2447 00000F52 418A02                      mov al, [r10]
  2448 00000F55 3C58                        cmp al, 'X'
  2449 00000F57 7565                        jne .check_block_x
  2450 00000F59 48F71D(11150000)            neg qword [ball2_direction_x]  ; Cambiar dirección X si hay una X
  2451 00000F60 E928010000                  jmp .end
  2452                                  
  2453                                      .move_with_pallet:
  2454                                          ; Borrar la posición actual de la bola
  2455 00000F65 4C8B05(01150000)                mov r8, [ball2_x_pos]
  2456 00000F6C 4C8B0D(09150000)                mov r9, [ball2_y_pos]
  2457 00000F73 4D89C2                          mov r10, r8
  2458 00000F76 4981C2[400A0000]                add r10, board
  2459 00000F7D 4C89C9                          mov rcx, r9
  2460 00000F80 B852000000                      mov rax, column_cells + 2
  2461 00000F85 48F7E9                          imul rcx
  2462 00000F88 4901C2                          add r10, rax
  2463 00000F8B 41C60220                        mov byte [r10], char_space
  2464                                  
  2465                                          ; Actualizar posición X basada en la paleta
  2466 00000F8F 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2467 00000F96 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2468 00000F9D 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2469 00000FA4 4C8905(01150000)                mov [ball2_x_pos], r8          ; Guardar nueva posición X
  2470                                  
  2471                                          ; Mantener la bola una posición arriba de la paleta
  2472 00000FAB 4C8B0D(09150000)                mov r9, [ball2_y_pos]          ; Mantener la misma altura
  2473 00000FB2 4C890D(09150000)                mov [ball2_y_pos], r9          ; Actualizar posición Y
  2474                                  
  2475 00000FB9 E9CF000000                      jmp .end
  2476                                  
  2477                                  
  2478                                      .check_block_x:
  2479                                          ; Verificar colisión con bloques en X
  2480 00000FBE 4150                            push r8     ; Guardar registros que usa check_block_collision
  2481 00000FC0 4151                            push r9
  2482 00000FC2 4152                            push r10
  2483 00000FC4 E8FA090000                      call check_block_collision
  2484 00000FC9 415A                            pop r10
  2485 00000FCB 4159                            pop r9
  2486 00000FCD 4158                            pop r8
  2487 00000FCF 4885C0                          test rax, rax
  2488 00000FD2 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2489 00000FD4 48F71D(11150000)                neg qword [ball2_direction_x]  ; Si hay colisión, rebotar
  2490 00000FDB E9AD000000                      jmp .end
  2491                                  
  2492                                      .check_paddle_x:
  2493                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2494 00000FE0 41803A3D                        cmp byte [r10], char_equal
  2495 00000FE4 750C                            jne .check_y_movement
  2496 00000FE6 48F71D(11150000)                neg qword [ball2_direction_x]  ; Cambiar dirección X si hay una paleta
  2497 00000FED E99B000000                      jmp .end
  2498                                  
  2499                                      .check_y_movement:
  2500                                          ; Calcular siguiente posición Y
  2501 00000FF2 488B05(19150000)                mov rax, [ball2_direction_y]
  2502 00000FF9 4901C1                          add r9, rax                  ; Nueva posición Y
  2503                                  
  2504                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2505 00000FFC 4D89C2                          mov r10, r8
  2506 00000FFF 4981C2[400A0000]                add r10, board
  2507 00001006 4C89C9                          mov rcx, r9
  2508 00001009 B852000000                      mov rax, column_cells + 2
  2509 0000100E 48F7E9                          imul rcx
  2510 00001011 4901C2                          add r10, rax
  2511                                  
  2512                                          ; Verificar si hay una X en la siguiente posición Y
  2513 00001014 418A02                          mov al, [r10]
  2514 00001017 3C58                            cmp al, 'X'
  2515 00001019 7509                            jne .check_block_y
  2516 0000101B 48F71D(19150000)                neg qword [ball2_direction_y]  ; Cambiar dirección Y si hay una X
  2517 00001022 EB69                            jmp .end
  2518                                  
  2519                                      .check_block_y:
  2520                                          ; Verificar colisión con bloques en Y
  2521 00001024 4150                            push r8     ; Guardar registros que usa check_block_collision
  2522 00001026 4151                            push r9
  2523 00001028 4152                            push r10
  2524 0000102A E894090000                      call check_block_collision
  2525 0000102F 415A                            pop r10
  2526 00001031 4159                            pop r9
  2527 00001033 4158                            pop r8
  2528 00001035 4885C0                          test rax, rax
  2529 00001038 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2530 0000103A 48F71D(19150000)                neg qword [ball2_direction_y]  ; Si hay colisión, rebotar
  2531 00001041 EB4A                            jmp .end
  2532                                  
  2533                                      .check_paddle_y:
  2534                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2535 00001043 41803A3D                        cmp byte [r10], char_equal
  2536 00001047 7536                            jne .update_position
  2537                                  
  2538                                          ; Verificar si el poder catch está activo
  2539 00001049 803D(FC220000)01                cmp byte [catch_power_active], 1
  2540 00001050 7524                            jne .normal_bounce
  2541                                  
  2542                                          ; Activar el modo "atrapado"
  2543 00001052 C605(FE220000)01                mov byte [ball_caught_2], 1
  2544                                          
  2545                                          ; Guardar la posición X actual de la bola como offset
  2546 00001059 488B05(01150000)                mov rax, [ball2_x_pos]           ; Posición X actual de la bola
  2547 00001060 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2548 00001067 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2549 0000106D 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2550                                          
  2551 00001074 EB17                            jmp .end
  2552                                  
  2553                                      .normal_bounce:
  2554 00001076 48F71D(19150000)                neg qword [ball2_direction_y]  ; Cambiar dirección Y si hay una paleta
  2555 0000107D EB0E                            jmp .end
  2556                                  
  2557                                  
  2558                                      .update_position:
  2559 0000107F 4C8905(01150000)                mov [ball2_x_pos], r8
  2560 00001086 4C890D(09150000)                mov [ball2_y_pos], r9
  2561                                  
  2562                                      .end:
  2563 0000108D C3                              ret
  2564                                  
  2565                                  move_ball_3:
  2566                                  
  2567 0000108E 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2568 00001095 0F849D000000                je .move_with_pallet
  2569                                  
  2570 0000109B 803D(43150000)00            cmp byte [ball3_moving], 0
  2571 000010A2 0F84B8010000                je .end
  2572                                  
  2573                                      ; Incrementar contador de velocidad
  2574 000010A8 48FF05(F3220000)            inc qword [speed_counter]
  2575                                      
  2576                                      ; Verificar si debemos mover la bola en este ciclo
  2577 000010AF 488B05(F3220000)            mov rax, [speed_counter]
  2578 000010B6 483B05(E3220000)            cmp rax, [ball_speed]
  2579 000010BD 0F8C9D010000                jl .end
  2580                                      
  2581                                      ; Resetear contador de velocidad
  2582 000010C3 48C705(F3220000)00-         mov qword [speed_counter], 0
  2582 000010CB 000000             
  2583                                  
  2584                                      ; Borrar la posición actual de la bola
  2585 000010CE 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2586 000010D5 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2587 000010DC 4981C0[400A0000]            add r8, board
  2588 000010E3 4C89C9                      mov rcx, r9
  2589 000010E6 B852000000                  mov rax, column_cells + 2
  2590 000010EB 48F7E9                      imul rcx
  2591 000010EE 4901C0                      add r8, rax
  2592 000010F1 41C60020                    mov byte [r8], char_space
  2593                                  
  2594                                      ; Calcular siguiente posición X
  2595 000010F5 4C8B05(23150000)            mov r8, [ball3_x_pos]
  2596 000010FC 4C8B0D(2B150000)            mov r9, [ball3_y_pos]
  2597 00001103 488B05(33150000)            mov rax, [ball3_direction_x]
  2598 0000110A 4901C0                      add r8, rax               ; Nueva posición X
  2599                                  
  2600                                      ; Calcular la dirección de memoria para la siguiente posición
  2601 0000110D 4D89C2                      mov r10, r8
  2602 00001110 4981C2[400A0000]            add r10, board
  2603 00001117 4C89C9                      mov rcx, r9
  2604 0000111A B852000000                  mov rax, column_cells + 2
  2605 0000111F 48F7E9                      imul rcx
  2606 00001122 4901C2                      add r10, rax
  2607                                  
  2608                                      ; Verificar si hay una X en la siguiente posición X
  2609 00001125 418A02                      mov al, [r10]
  2610 00001128 3C58                        cmp al, 'X'
  2611 0000112A 7565                        jne .check_block_x
  2612 0000112C 48F71D(33150000)            neg qword [ball3_direction_x]  ; Cambiar dirección X si hay una X
  2613 00001133 E928010000                  jmp .end
  2614                                  
  2615                                      .move_with_pallet:
  2616                                          ; Borrar la posición actual de la bola
  2617 00001138 4C8B05(23150000)                mov r8, [ball3_x_pos]
  2618 0000113F 4C8B0D(2B150000)                mov r9, [ball3_y_pos]
  2619 00001146 4D89C2                          mov r10, r8
  2620 00001149 4981C2[400A0000]                add r10, board
  2621 00001150 4C89C9                          mov rcx, r9
  2622 00001153 B852000000                      mov rax, column_cells + 2
  2623 00001158 48F7E9                          imul rcx
  2624 0000115B 4901C2                          add r10, rax
  2625 0000115E 41C60220                        mov byte [r10], char_space
  2626                                  
  2627                                          ; Actualizar posición X basada en la paleta
  2628 00001162 4C8B05(BF140000)                mov r8, [pallet_position]      ; Obtener posición actual de la paleta
  2629 00001169 4981E8[400A0000]                sub r8, board                  ; Ajustar por el offset del tablero
  2630 00001170 4C0305(00230000)                add r8, [ball_catch_offset]    ; Añadir el offset guardado
  2631 00001177 4C8905(23150000)                mov [ball3_x_pos], r8          ; Guardar nueva posición X
  2632                                  
  2633                                          ; Mantener la bola una posición arriba de la paleta
  2634 0000117E 4C8B0D(2B150000)                mov r9, [ball3_y_pos]          ; Mantener la misma altura
  2635 00001185 4C890D(2B150000)                mov [ball3_y_pos], r9          ; Actualizar posición Y
  2636                                  
  2637 0000118C E9CF000000                      jmp .end
  2638                                  
  2639                                  
  2640                                      .check_block_x:
  2641                                          ; Verificar colisión con bloques en X
  2642 00001191 4150                            push r8     ; Guardar registros que usa check_block_collision
  2643 00001193 4151                            push r9
  2644 00001195 4152                            push r10
  2645 00001197 E827080000                      call check_block_collision
  2646 0000119C 415A                            pop r10
  2647 0000119E 4159                            pop r9
  2648 000011A0 4158                            pop r8
  2649 000011A2 4885C0                          test rax, rax
  2650 000011A5 740C                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
  2651 000011A7 48F71D(33150000)                neg qword [ball3_direction_x]  ; Si hay colisión, rebotar
  2652 000011AE E9AD000000                      jmp .end
  2653                                  
  2654                                      .check_paddle_x:
  2655                                          ; Verificar si hay una paleta (=) en la siguiente posición X
  2656 000011B3 41803A3D                        cmp byte [r10], char_equal
  2657 000011B7 750C                            jne .check_y_movement
  2658 000011B9 48F71D(33150000)                neg qword [ball3_direction_x]  ; Cambiar dirección X si hay una paleta
  2659 000011C0 E99B000000                      jmp .end
  2660                                  
  2661                                      .check_y_movement:
  2662                                          ; Calcular siguiente posición Y
  2663 000011C5 488B05(3B150000)                mov rax, [ball3_direction_y]
  2664 000011CC 4901C1                          add r9, rax                  ; Nueva posición Y
  2665                                  
  2666                                          ; Calcular la dirección de memoria para la siguiente posición Y
  2667 000011CF 4D89C2                          mov r10, r8
  2668 000011D2 4981C2[400A0000]                add r10, board
  2669 000011D9 4C89C9                          mov rcx, r9
  2670 000011DC B852000000                      mov rax, column_cells + 2
  2671 000011E1 48F7E9                          imul rcx
  2672 000011E4 4901C2                          add r10, rax
  2673                                  
  2674                                          ; Verificar si hay una X en la siguiente posición Y
  2675 000011E7 418A02                          mov al, [r10]
  2676 000011EA 3C58                            cmp al, 'X'
  2677 000011EC 7509                            jne .check_block_y
  2678 000011EE 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Cambiar dirección Y si hay una X
  2679 000011F5 EB69                            jmp .end
  2680                                  
  2681                                      .check_block_y:
  2682                                          ; Verificar colisión con bloques en Y
  2683 000011F7 4150                            push r8     ; Guardar registros que usa check_block_collision
  2684 000011F9 4151                            push r9
  2685 000011FB 4152                            push r10
  2686 000011FD E8C1070000                      call check_block_collision
  2687 00001202 415A                            pop r10
  2688 00001204 4159                            pop r9
  2689 00001206 4158                            pop r8
  2690 00001208 4885C0                          test rax, rax
  2691 0000120B 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
  2692 0000120D 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Si hay colisión, rebotar
  2693 00001214 EB4A                            jmp .end
  2694                                  
  2695                                      .check_paddle_y:
  2696                                          ; Verificar si hay una paleta (=) en la siguiente posición Y
  2697 00001216 41803A3D                        cmp byte [r10], char_equal
  2698 0000121A 7536                            jne .update_position
  2699                                  
  2700                                          ; Verificar si el poder catch está activo
  2701 0000121C 803D(FC220000)01                cmp byte [catch_power_active], 1
  2702 00001223 7524                            jne .normal_bounce
  2703                                  
  2704                                          ; Activar el modo "atrapado"
  2705 00001225 C605(FF220000)01                mov byte [ball_caught_3], 1
  2706                                          
  2707                                          ; Guardar la posición X actual de la bola como offset
  2708 0000122C 488B05(23150000)                mov rax, [ball3_x_pos]           ; Posición X actual de la bola
  2709 00001233 482B05(BF140000)                sub rax, [pallet_position]      ; Restar la posición de la paleta
  2710 0000123A 4805[400A0000]                  add rax, board                  ; Ajustar por el offset del tablero
  2711 00001240 488905(00230000)                mov [ball_catch_offset], rax    ; Guardar el offset
  2712                                          
  2713 00001247 EB17                            jmp .end
  2714                                  
  2715                                      .normal_bounce:
  2716 00001249 48F71D(3B150000)                neg qword [ball3_direction_y]  ; Cambiar dirección Y si hay una paleta
  2717 00001250 EB0E                            jmp .end
  2718                                  
  2719                                  
  2720                                      .update_position:
  2721 00001252 4C8905(23150000)                mov [ball3_x_pos], r8
  2722 00001259 4C890D(2B150000)                mov [ball3_y_pos], r9
  2723                                  
  2724                                      .end:
  2725 00001260 C3                              ret
  2726                                  
  2727                                  ; Nueva función para procesar la tecla C cuando la bola está atrapada
  2728                                  ; Procesar la tecla 'c' cuando el poder de atrapar está activo
  2729                                  process_catch_release:
  2730 00001261 55                          push rbp
  2731 00001262 4889E5                      mov  rbp, rsp
  2732                                  
  2733                                      ; Verificar si el poder de catch está activo
  2734 00001265 803D(FC220000)01            cmp byte [catch_power_active], 1
  2735 0000126C 0F8531010000                jne .no_catch_power
  2736                                  
  2737                                      ; Verificar si se presionó 'c' (derecha y arriba)
  2738 00001272 803D(08230000)63            cmp byte [last_key], 'c'
  2739 00001279 7412                        je .release_right
  2740                                      
  2741                                      ; Verificar si se presionó 'x' (izquierda y arriba)
  2742 0000127B 803D(08230000)78            cmp byte [last_key], 'x'
  2743 00001282 0F8487000000                je .release_left
  2744                                      
  2745 00001288 E916010000                  jmp .no_catch_power
  2746                                  
  2747                                  .release_right:
  2748                                      ; Liberar la bola hacia la derecha
  2749 0000128D 803D(FD220000)01            cmp byte [ball_caught], 1
  2750 00001294 7522                        jne .check_ball2_right
  2751 00001296 C605(FD220000)00            mov byte [ball_caught], 0
  2752 0000129D 48C705(EF140000)01-         mov qword [ball_direction_x], 1    ; Derecha
  2752 000012A5 000000             
  2753 000012A8 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Arriba
  2753 000012B0 FFFFFF             
  2754 000012B3 E9CD000000                  jmp .release_complete
  2755                                  
  2756                                  .check_ball2_right:
  2757 000012B8 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2758 000012BF 7522                        jne .check_ball3_right
  2759 000012C1 C605(FE220000)00            mov byte [ball_caught_2], 0
  2760 000012C8 48C705(11150000)01-         mov qword [ball2_direction_x], 1
  2760 000012D0 000000             
  2761 000012D3 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  2761 000012DB FFFFFF             
  2762 000012DE E9A2000000                  jmp .release_complete
  2763                                  
  2764                                  .check_ball3_right:
  2765 000012E3 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2766 000012EA 0F8595000000                jne .release_complete
  2767 000012F0 C605(FF220000)00            mov byte [ball_caught_3], 0
  2768 000012F7 48C705(33150000)01-         mov qword [ball3_direction_x], 1
  2768 000012FF 000000             
  2769 00001302 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  2769 0000130A FFFFFF             
  2770 0000130D EB76                        jmp .release_complete
  2771                                  
  2772                                  .release_left:
  2773                                      ; Liberar la bola hacia la izquierda
  2774 0000130F 803D(FD220000)01            cmp byte [ball_caught], 1
  2775 00001316 751F                        jne .check_ball2_left
  2776 00001318 C605(FD220000)00            mov byte [ball_caught], 0
  2777 0000131F 48C705(EF140000)FF-         mov qword [ball_direction_x], -1   ; Izquierda
  2777 00001327 FFFFFF             
  2778 0000132A 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Arriba
  2778 00001332 FFFFFF             
  2779 00001335 EB4E                        jmp .release_complete
  2780                                  
  2781                                  .check_ball2_left:
  2782 00001337 803D(FE220000)01            cmp byte [ball_caught_2], 1
  2783 0000133E 751F                        jne .check_ball3_left
  2784 00001340 C605(FE220000)00            mov byte [ball_caught_2], 0
  2785 00001347 48C705(11150000)FF-         mov qword [ball2_direction_x], -1
  2785 0000134F FFFFFF             
  2786 00001352 48C705(19150000)FF-         mov qword [ball2_direction_y], -1
  2786 0000135A FFFFFF             
  2787 0000135D EB26                        jmp .release_complete
  2788                                  
  2789                                  .check_ball3_left:
  2790 0000135F 803D(FF220000)01            cmp byte [ball_caught_3], 1
  2791 00001366 751D                        jne .release_complete
  2792 00001368 C605(FF220000)00            mov byte [ball_caught_3], 0
  2793 0000136F 48C705(33150000)FF-         mov qword [ball3_direction_x], -1
  2793 00001377 FFFFFF             
  2794 0000137A 48C705(3B150000)FF-         mov qword [ball3_direction_y], -1
  2794 00001382 FFFFFF             
  2795                                  
  2796                                  .release_complete:
  2797                                      ; Si era el catch inicial, desactivarlo
  2798 00001385 803D(FB220000)01            cmp byte [initial_catch_active], 1
  2799 0000138C 750E                        jne .finish
  2800 0000138E C605(FB220000)00            mov byte [initial_catch_active], 0
  2801 00001395 C605(FC220000)00            mov byte [catch_power_active], 0  ; Desactivar poder de catch después de la 1ra vez
  2802                                  
  2803                                  .finish:
  2804 0000139C C605(08230000)00            mov byte [last_key], 0  ; Limpiar la tecla
  2805                                  .no_catch_power:
  2806 000013A3 5D                          pop rbp
  2807 000013A4 C3                          ret
  2808                                  
  2809                                  
  2810                                  
  2811                                  display_level_number:
  2812 000013A5 55                          push rbp
  2813 000013A6 4889E5                      mov rbp, rsp
  2814                                      
  2815                                      ; Limpiar la pantalla primero
  2816                                      print clear, clear_length
    82 000013A9 B801000000          <1>  mov eax, sys_write
    83 000013AE BF01000000          <1>  mov edi, 1
    84 000013B3 48BE-               <1>  mov rsi, %1
    84 000013B5 [1000000000000000]  <1>
    85 000013BD BA07000000          <1>  mov edx, %2
    86 000013C2 0F05                <1>  syscall
  2817                                      
  2818                                      ; Calcular la posición central para el mensaje
  2819                                      ; Para el mensaje "NIVEL X", necesitamos centrar 7 caracteres
  2820 000013C4 B850000000                  mov rax, column_cells
  2821 000013C9 4883E807                    sub rax, 7                  ; longitud de "NIVEL X"
  2822 000013CD 48D1E8                      shr rax, 1                  ; dividir por 2 para centrar
  2823                                      
  2824                                      ; Calcular la fila central
  2825 000013D0 BB20000000                  mov rbx, row_cells
  2826 000013D5 48D1EB                      shr rbx, 1                  ; dividir por 2 para obtener la fila central
  2827                                      
  2828                                      ; Calcular el offset en el buffer
  2829 000013D8 B952000000                  mov rcx, column_cells + 2   ; ancho total de una línea incluyendo newline
  2830 000013DD 48F7E3                      mul rbx                     ; multiplicar por la fila central
  2831 000013E0 4801D8                      add rax, rbx                ; añadir el offset horizontal
  2832                                      
  2833                                      ; Escribir "NIVEL " en la posición calculada
  2834 000013E3 488DB8[400A0000]            lea rdi, [board + rax]
  2835 000013EA 48BE-                       mov rsi, level_msg
  2835 000013EC [A414000000000000] 
  2836 000013F4 B906000000                  mov rcx, level_msg_len
  2837 000013F9 F3A4                        rep movsb
  2838                                      
  2839                                      ; Escribir el número del nivel
  2840 000013FB 8A05(79150000)              mov al, [current_level]
  2841 00001401 0430                        add al, '0'                 ; convertir a ASCII
  2842 00001403 8807                        mov [rdi], al
  2843                                      
  2844                                      ; Mostrar el board con el mensaje
  2845                                      print board, board_size
    82 00001405 B801000000          <1>  mov eax, sys_write
    83 0000140A BF01000000          <1>  mov edi, 1
    84 0000140F 48BE-               <1>  mov rsi, %1
    84 00001411 [400A000000000000]  <1>
    85 00001419 BA400A0000          <1>  mov edx, %2
    86 0000141E 0F05                <1>  syscall
  2846                                      
  2847                                      ; Esperar un segundo
  2848 00001420 B823000000                  mov rax, sys_nanosleep
  2849 00001425 48BF-                       mov rdi, level_display_time
  2849 00001427 [AF14000000000000] 
  2850 0000142F 4831F6                      xor rsi, rsi
  2851 00001432 0F05                        syscall
  2852                                      
  2853 00001434 5D                          pop rbp
  2854 00001435 C3                          ret
  2855                                  
  2856                                  ; Función para inicializar un tablero vacío
  2857                                  init_empty_board:
  2858 00001436 56                          push rsi
  2859 00001437 57                          push rdi
  2860 00001438 51                          push rcx
  2861 00001439 50                          push rax
  2862                                  
  2863 0000143A 488D35(00000000)            lea rsi, [board_template]   ; Copiar la plantilla del tablero
  2864 00001441 488D3D(400A0000)            lea rdi, [board]            ; Destino: el tablero actual
  2865 00001448 B9400A0000                  mov rcx, board_template_size
  2866 0000144D F3A4                        rep movsb                   ; Copiar el tablero
  2867                                  
  2868 0000144F 58                          pop rax
  2869 00001450 59                          pop rcx
  2870 00001451 5F                          pop rdi
  2871 00001452 5E                          pop rsi
  2872 00001453 C3                          ret
  2873                                  
  2874                                  
  2875                                  init_level:
  2876                                  
  2877 00001454 C605(22150000)00            mov byte [ball2_active], 0
  2878 0000145B C605(44150000)00            mov byte [ball3_active], 0
  2879 00001462 C605(09230000)00            mov byte [laser_power_active], 0
  2880 00001469 E86BF3FFFF                  call clear_lasers
  2881 0000146E 488B05(CF140000)            mov rax, [default_pallet_size]
  2882 00001475 488905(C7140000)            mov [pallet_size], rax
  2883 0000147C 48C705(E3220000)01-         mov qword [ball_speed], 1    ; Restaurar velocidad normal
  2883 00001484 000000             
  2884                                  
  2885                                      ; 1) Copiamos board_template en board para que quede "virgen"
  2886                                          ; Reiniciar letras activas
  2887 00001487 488D3D(3C210000)            lea rdi, [letters_map]
  2888 0000148E B990010000                  mov rcx, 100 * 4             ; Cada letra ocupa 4 bytes, limpiar 100 letras
  2889 00001493 4831C0                      xor rax, rax
  2890 00001496 F3AA                        rep stosb                    ; Llenar con ceros
  2891                                      
  2892                                      ; Inicializar dirección de la bola (derecha y arriba)
  2893 00001498 48C705(EF140000)01-         mov qword [ball_direction_x], 1    ; Dirección hacia la derecha (1 = derecha, -1 = izquierda)
  2893 000014A0 000000             
  2894 000014A3 48C705(F7140000)FF-         mov qword [ball_direction_y], -1   ; Dirección hacia arriba (-1 = arriba, 1 = abajo)
  2894 000014AB FFFFFF             
  2895                                  
  2896                                      ; En init_level, después de inicializar las direcciones
  2897 000014AE C605(FC220000)01            mov byte [catch_power_active], 1    ; Activar el poder catch
  2898 000014B5 C605(FD220000)01            mov byte [ball_caught], 1           ; Marcar la bola como atrapada
  2899 000014BC C605(FB220000)01            mov byte [initial_catch_active], 1  ; Marcar que es el catch inicial
  2900                                  
  2901                                      ; Calcular y guardar el offset inicial de la bola respecto a la paleta
  2902 000014C3 488B05(DF140000)            mov rax, [ball_x_pos]              ; Posición X actual de la bola
  2903 000014CA 482B05(BF140000)            sub rax, [pallet_position]         ; Restar la posición de la paleta
  2904 000014D1 4805[400A0000]              add rax, board                     ; Ajustar por el offset del tablero
  2905 000014D7 488905(00230000)            mov [ball_catch_offset], rax       ; Guardar el offset
  2906                                  
  2907                                      ; Reiniciar contador de letras activas
  2908 000014DE 4831C0                      xor rax, rax
  2909 000014E1 8805(CC220000)              mov [letters_count], al
  2910                                  
  2911                                      ; Reiniciar última letra capturada
  2912 000014E7 C605(CD220000)20            mov byte [last_letter], ' '
  2913 000014EE C605(46200000)00            mov byte [destroyed_blocks], 0 
  2914 000014F5 E83CFFFFFF                  call init_empty_board
  2915 000014FA E8A6FEFFFF                  call display_level_number
  2916 000014FF E8E8050000                  call init_enemies
  2917                                      
  2918 00001504 56                          push rsi
  2919 00001505 57                          push rdi
  2920 00001506 51                          push rcx
  2921 00001507 50                          push rax
  2922                                  
  2923 00001508 488D35(00000000)            lea rsi, [board_template]
  2924 0000150F 488D3D(400A0000)            lea rdi, [board]
  2925 00001516 B9400A0000                  mov rcx, board_template_size
  2926 0000151B F3A4                        rep movsb                 ; Copiamos la plantilla a board
  2927                                  
  2928 0000151D 58                          pop rax
  2929 0000151E 59                          pop rcx
  2930 0000151F 5F                          pop rdi
  2931 00001520 5E                          pop rsi
  2932                                  
  2933 00001521 B90A000000                  mov rcx, 10
  2934 00001526 4831C0                      xor rax, rax
  2935 00001529 488D3D(E9200000)            lea rdi, [enemy_spawns_triggered]
  2936 00001530 F3AA                        rep stosb      
  2937                                  
  2938                                      ; Verificar el nivel actual y cargar los bloques correspondientes
  2939 00001532 803D(79150000)01            cmp byte [current_level], 1
  2940 00001539 7431                        je .level1
  2941 0000153B 803D(79150000)02            cmp byte [current_level], 2
  2942 00001542 7454                        je .level2
  2943 00001544 803D(79150000)03            cmp byte [current_level], 3
  2944 0000154B 7477                        je .level3
  2945 0000154D 803D(79150000)04            cmp byte [current_level], 4
  2946 00001554 0F8492000000                je .level4
  2947 0000155A 803D(79150000)05            cmp byte [current_level], 5
  2948 00001561 0F84B0000000                je .level5
  2949 00001567 E9D3000000                  jmp .done
  2950                                  
  2951                                  
  2952                                  
  2953                                      .level1:
  2954 0000156C C605(7A150000)4E                mov byte [blocks_remaining], level1_blocks_count
  2955 00001573 4831C9                          xor rcx, rcx             
  2956                                          .init_loop1:
  2957 00001576 4883F94E                            cmp rcx, level1_blocks_count
  2958 0000157A 0F8DBF000000                        jge .done
  2959 00001580 4889C8                              mov rax, rcx         
  2960 00001583 486BC005                            imul rax, 5         ; en vez de shl rax,2
  2961 00001587 8A90[7E150000]                      mov dl, byte [level1_blocks + rax + 3]  
  2962 0000158D 8891[761F0000]                      mov byte [block_states + rcx], dl
  2963 00001593 48FFC1                              inc rcx
  2964 00001596 EBDE                                jmp .init_loop1
  2965                                  
  2966                                      .level2:
  2967 00001598 C605(7A150000)5B                mov byte [blocks_remaining], level2_blocks_count
  2968 0000159F 4831C9                          xor rcx, rcx             
  2969                                          .init_loop2:
  2970 000015A2 4883F95B                            cmp rcx, level2_blocks_count
  2971 000015A6 0F8D93000000                        jge .done
  2972 000015AC 4889C8                              mov rax, rcx         
  2973 000015AF 486BC005                            imul rax, 5         ; en vez de shl rax,2
  2974 000015B3 8A90[04170000]                      mov dl, byte [level2_blocks + rax + 3]  
  2975 000015B9 8891[761F0000]                      mov byte [block_states + rcx], dl
  2976 000015BF 48FFC1                              inc rcx
  2977 000015C2 EBDE                                jmp .init_loop2
  2978                                      .level3:
  2979 000015C4 C605(7A150000)40                mov byte [blocks_remaining], 64
  2980 000015CB 4831C9                          xor rcx, rcx             
  2981                                          .init_loop3:
  2982 000015CE 4883F968                            cmp rcx, level3_blocks_count
  2983 000015D2 7D6B                                jge .done
  2984 000015D4 4889C8                              mov rax, rcx         
  2985 000015D7 486BC005                            imul rax, 5         ; en vez de shl rax,2
  2986 000015DB 8A90[CB180000]                      mov dl, byte [level3_blocks + rax + 3]  
  2987 000015E1 8891[761F0000]                      mov byte [block_states + rcx], dl
  2988 000015E7 48FFC1                              inc rcx
  2989 000015EA EBE2                                jmp .init_loop3
  2990                                  
  2991                                      .level4:
  2992 000015EC C605(7A150000)8C                mov byte [blocks_remaining], level4_blocks_count
  2993 000015F3 4831C9                          xor rcx, rcx             
  2994                                          .init_loop4:
  2995 000015F6 4881F98C000000                      cmp rcx, level4_blocks_count
  2996 000015FD 7D40                                jge .done
  2997 000015FF 4889C8                              mov rax, rcx         
  2998 00001602 486BC005                            imul rax, 5         ; en vez de shl rax,2
  2999 00001606 8A90[D31A0000]                      mov dl, byte [level4_blocks + rax + 3]  
  3000 0000160C 8891[761F0000]                      mov byte [block_states + rcx], dl
  3001 00001612 48FFC1                              inc rcx
  3002 00001615 EBDF                                jmp .init_loop4
  3003                                  
  3004                                      .level5:
  3005 00001617 C605(7A150000)62                mov byte [blocks_remaining], level5_blocks_count
  3006 0000161E 4831C9                          xor rcx, rcx             
  3007                                          .init_loop5:
  3008 00001621 4883F962                            cmp rcx, level5_blocks_count
  3009 00001625 7D18                                jge .done
  3010 00001627 4889C8                              mov rax, rcx         
  3011 0000162A 486BC005                            imul rax, 5         ; en vez de shl rax,2
  3012 0000162E 8A90[8F1D0000]                      mov dl, byte [level5_blocks + rax + 3]  
  3013 00001634 8891[761F0000]                      mov byte [block_states + rcx], dl
  3014 0000163A 48FFC1                              inc rcx
  3015 0000163D EBE2                                jmp .init_loop5
  3016                                      .done:
  3017 0000163F C3                              ret
  3018                                  
  3019                                  
  3020                                  ; Función para verificar y manejar la transición de nivel
  3021                                  check_level_complete:
  3022                                      ; Verificar si quedan bloques
  3023 00001640 803D(7A150000)00            cmp byte [blocks_remaining], 0
  3024 00001647 753C                        jne .not_complete
  3025                                      
  3026                                      ; Incrementar el nivel
  3027 00001649 FE05(79150000)              inc byte [current_level]
  3028                                      
  3029                                      ; Verificar si hemos completado todos los niveles (asumiendo 2 niveles por ahora)
  3030 0000164F 803D(79150000)06            cmp byte [current_level], 6
  3031 00001656 742E                        je game_win
  3032                                      
  3033                                      ; Reinicializar el juego para el siguiente nivel
  3034 00001658 E8F7FDFFFF                  call init_level
  3035                                      
  3036                                      ; Reinicializar la posición de la bola y la paleta
  3037 0000165D 48C705(DF140000)28-         mov qword [ball_x_pos], 40
  3037 00001665 000000             
  3038 00001668 48C705(E7140000)1C-         mov qword [ball_y_pos], 28
  3038 00001670 000000             
  3039 00001673 C605(FF140000)00            mov byte [ball_moving], 0
  3040 0000167A 48C705(BF140000)-           mov qword [pallet_position], board + 38 + 29 * (column_cells + 2)
  3040 00001681 [B0130000]         
  3041                                      
  3042                                      .not_complete:
  3043 00001685 C3                              ret
  3044                                  
  3045                                      ; Nueva función para manejar la victoria del juego
  3046                                  game_win:
  3047                                      ; Limpiar la pantalla primero
  3048                                      print clear, clear_length
    82 00001686 B801000000          <1>  mov eax, sys_write
    83 0000168B BF01000000          <1>  mov edi, 1
    84 00001690 48BE-               <1>  mov rsi, %1
    84 00001692 [1000000000000000]  <1>
    85 0000169A BA07000000          <1>  mov edx, %2
    86 0000169F 0F05                <1>  syscall
  3049                                      
  3050                                      ; Mensaje de victoria
  3051 000016A1 488B05(3E200000)            mov rax, [current_score]    ; Obtener el puntaje final
  3052 000016A8 48BF-                       mov rdi, number_buffer      ; Convertir a string
  3052 000016AA [4720000000000000] 
  3053 000016B2 E8B4010000                  call number_to_string
  3054                                      
  3055                                      ; Definir mensaje de victoria
  3056                                      section .data
  3057 0000246F C2A146656C69636964-             win_msg: db "¡Felicidades! ¡Has ganado!", 0xA, 0xD
  3057 00002478 616465732120C2A148-
  3057 00002481 61732067616E61646F-
  3057 0000248A 210A0D             
  3058                                          win_msg_len: equ $ - win_msg
  3059 0000248D 50756E74616A652066-             score_msg: db "Puntaje final: "
  3059 00002496 696E616C3A20       
  3060                                          score_msg_len: equ $ - score_msg
  3061                                      section .text
  3062                                      
  3063                                      ; Imprimir mensajes
  3064                                      print win_msg, win_msg_len
    82 000016B7 B801000000          <1>  mov eax, sys_write
    83 000016BC BF01000000          <1>  mov edi, 1
    84 000016C1 48BE-               <1>  mov rsi, %1
    84 000016C3 [6F24000000000000]  <1>
    85 000016CB BA1E000000          <1>  mov edx, %2
    86 000016D0 0F05                <1>  syscall
  3065                                      print score_msg, score_msg_len
    82 000016D2 B801000000          <1>  mov eax, sys_write
    83 000016D7 BF01000000          <1>  mov edi, 1
    84 000016DC 48BE-               <1>  mov rsi, %1
    84 000016DE [8D24000000000000]  <1>
    85 000016E6 BA0F000000          <1>  mov edx, %2
    86 000016EB 0F05                <1>  syscall
  3066                                      print number_buffer, 20
    82 000016ED B801000000          <1>  mov eax, sys_write
    83 000016F2 BF01000000          <1>  mov edi, 1
    84 000016F7 48BE-               <1>  mov rsi, %1
    84 000016F9 [4720000000000000]  <1>
    85 00001701 BA14000000          <1>  mov edx, %2
    86 00001706 0F05                <1>  syscall
  3067                                      
  3068                                      ; Esperar un momento antes de salir
  3069 00001708 48C705EDE8FFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
  3069 00001711 0000               
  3070 00001713 48C705EAE8FFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
  3070 0000171C 0000               
  3071                                      sleeptime
    98 0000171E B823000000          <1>  mov eax, sys_nanosleep
    99 00001723 48BF-               <1>  mov rdi, timespec
    99 00001725 [0000000000000000]  <1>
   100 0000172D 31F6                <1>  xor esi, esi
   101 0000172F 0F05                <1>  syscall
  3072                                      
  3073 00001731 E9520B0000                  jmp exit
  3074                                  
  3075                                  ; Función para imprimir los bloques
  3076                                  ; Función modificada para imprimir bloques
  3077                                  
  3078                                  ; Primero, agreguemos una función para obtener el puntero a los bloques del nivel actual
  3079                                  get_current_level_blocks:
  3080 00001736 803D(79150000)01            cmp byte [current_level], 1
  3081 0000173D 7428                        je .level1
  3082 0000173F 803D(79150000)02            cmp byte [current_level], 2
  3083 00001746 7427                        je .level2
  3084 00001748 803D(79150000)03            cmp byte [current_level], 3
  3085 0000174F 7426                        je .level3
  3086 00001751 803D(79150000)04            cmp byte [current_level], 4
  3087 00001758 7425                        je .level4
  3088 0000175A 803D(79150000)05            cmp byte [current_level], 5
  3089 00001761 7424                        je .level5
  3090                                      ; Si llegamos aquí, hay un error en el nivel
  3091 00001763 4831C0                      xor rax, rax
  3092 00001766 C3                          ret
  3093                                  
  3094                                      .level1:
  3095 00001767 488D05(7B150000)                lea rax, [level1_blocks]
  3096 0000176E C3                              ret
  3097                                      .level2:
  3098 0000176F 488D05(01170000)                lea rax, [level2_blocks]
  3099 00001776 C3                              ret
  3100                                      .level3:
  3101 00001777 488D05(C8180000)                lea rax, [level3_blocks]
  3102 0000177E C3                              ret
  3103                                      .level4:
  3104 0000177F 488D05(D01A0000)                lea rax, [level4_blocks]
  3105 00001786 C3                              ret
  3106                                      .level5:
  3107 00001787 488D05(8C1D0000)                lea rax, [level5_blocks]
  3108 0000178E C3                              ret
  3109                                  ; Función para obtener la cantidad de bloques del nivel actual
  3110                                  get_current_level_count:
  3111 0000178F 803D(79150000)01            cmp byte [current_level], 1
  3112 00001796 7428                        je .level1
  3113 00001798 803D(79150000)02            cmp byte [current_level], 2
  3114 0000179F 7425                        je .level2
  3115 000017A1 803D(79150000)03            cmp byte [current_level], 3
  3116 000017A8 7422                        je .level3
  3117 000017AA 803D(79150000)04            cmp byte [current_level], 4
  3118 000017B1 741F                        je .level4
  3119 000017B3 803D(79150000)05            cmp byte [current_level], 5
  3120 000017BA 741C                        je .level5
  3121                                      ; Si llegamos aquí, hay un error en el nivel
  3122 000017BC 4831C0                      xor rax, rax
  3123 000017BF C3                          ret
  3124                                  
  3125                                      .level1:
  3126 000017C0 B84E000000                      mov rax, level1_blocks_count
  3127 000017C5 C3                              ret
  3128                                      .level2:
  3129 000017C6 B85B000000                      mov rax, level2_blocks_count
  3130 000017CB C3                              ret
  3131                                      .level3:
  3132 000017CC B868000000                      mov rax, level3_blocks_count
  3133 000017D1 C3                              ret
  3134                                      .level4:
  3135 000017D2 B88C000000                      mov rax, level4_blocks_count
  3136 000017D7 C3                              ret
  3137                                      .level5:
  3138 000017D8 B862000000                      mov rax, level5_blocks_count
  3139 000017DD C3                              ret
  3140                                  
  3141                                  
  3142                                  print_blocks:
  3143 000017DE 55                          push rbp
  3144 000017DF 4889E5                      mov rbp, rsp
  3145                                      
  3146                                      ; Obtener puntero a los bloques del nivel actual
  3147 000017E2 E84FFFFFFF                  call get_current_level_blocks
  3148 000017E7 4989C5                      mov r13, rax                  ; Guardar puntero a los bloques en r13
  3149                                      
  3150                                      ; Obtener cantidad de bloques del nivel actual
  3151 000017EA E8A0FFFFFF                  call get_current_level_count
  3152 000017EF 4989C6                      mov r14, rax                  ; Guardar cantidad de bloques en r14
  3153                                      
  3154 000017F2 4D31E4                      xor r12, r12                  ; Índice del bloque actual
  3155                                      
  3156                                      .print_loop:
  3157 000017F5 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
  3158 000017F8 7D6F                            jge .end
  3159                                          
  3160                                          ; Verificar si el bloque está activo
  3161 000017FA 490FB68424-                     movzx rax, byte [block_states + r12]
  3161 000017FF [761F0000]         
  3162 00001803 4885C0                          test rax, rax
  3163 00001806 745C                            jz .next_block
  3164                                          
  3165                                          ; Obtener posición y tipo del bloque usando r13
  3166 00001808 4C89E0                          mov rax, r12
  3167 0000180B 486BC005                        imul rax, 5
  3168 0000180F 4C01E8                          add rax, r13
  3169 00001812 448A00                          mov r8b, [rax]        ; X position
  3170 00001815 448A4801                        mov r9b, [rax + 1]    ; Y position
  3171 00001819 448A5002                        mov r10b, [rax + 2]   ; Tipo de bloque
  3172                                  
  3173                                          ; El resto de la lógica de impresión permanece igual
  3174 0000181D 4D0FB6C0                        movzx r8, r8b
  3175 00001821 4D0FB6C9                        movzx r9, r9b
  3176 00001825 4981C0[400A0000]                add r8, board
  3177 0000182C B852000000                      mov rax, column_cells + 2
  3178 00001831 49F7E1                          mul r9
  3179 00001834 4901C0                          add r8, rax
  3180                                          
  3181 00001837 B906000000                      mov rcx, block_length
  3182 0000183C 48BE-                           mov rsi, block_type_1
  3182 0000183E [5515000000000000] 
  3183 00001846 490FB6C2                        movzx rax, r10b
  3184 0000184A 48FFC8                          dec rax
  3185 0000184D 486BC006                        imul rax, block_length
  3186 00001851 4801C6                          add rsi, rax
  3187                                          
  3188                                      .print_block_chars:
  3189 00001854 8A06                            mov al, [rsi]
  3190 00001856 418800                          mov [r8], al
  3191 00001859 48FFC6                          inc rsi
  3192 0000185C 49FFC0                          inc r8
  3193 0000185F 48FFC9                          dec rcx
  3194 00001862 75F0                            jnz .print_block_chars
  3195                                          
  3196                                      .next_block:
  3197 00001864 49FFC4                          inc r12
  3198 00001867 EB8C                            jmp .print_loop
  3199                                          
  3200                                      .end:
  3201 00001869 5D                              pop rbp
  3202 0000186A C3                              ret
  3203                                  
  3204                                  ; Función para convertir número a string
  3205                                  ; Input: RAX = número a convertir
  3206                                  ; RDI = buffer donde escribir el string
  3207                                  number_to_string:
  3208 0000186B 53                          push rbx
  3209 0000186C 52                          push rdx
  3210 0000186D 56                          push rsi
  3211 0000186E BB0A000000                  mov rbx, 10          ; Divisor
  3212 00001873 B900000000                  mov rcx, 0          ; Contador de dígitos
  3213                                      
  3214                                      ; Si el número es 0, manejarlo especialmente
  3215 00001878 4885C0                      test rax, rax
  3216 0000187B 7509                        jnz .convert_loop
  3217 0000187D C60730                      mov byte [rdi], '0'
  3218 00001880 C6470100                    mov byte [rdi + 1], 0
  3219 00001884 EB20                        jmp .end
  3220                                      
  3221                                      .convert_loop:
  3222 00001886 4831D2                          xor rdx, rdx    ; Limpiar RDX para la división
  3223 00001889 48F7F3                          div rbx         ; RAX/10, cociente en RAX, residuo en RDX
  3224 0000188C 80C230                          add dl, '0'     ; Convertir a ASCII
  3225 0000188F 52                              push rdx        ; Guardar el dígito
  3226 00001890 48FFC1                          inc rcx         ; Incrementar contador
  3227 00001893 4885C0                          test rax, rax   ; Verificar si quedan más dígitos
  3228 00001896 75EE                            jnz .convert_loop
  3229                                          
  3230                                      .write_loop:
  3231 00001898 5A                              pop rdx         ; Obtener dígito
  3232 00001899 8817                            mov [rdi], dl   ; Escribir al buffer
  3233 0000189B 48FFC7                          inc rdi         ; Siguiente posición
  3234 0000189E 48FFC9                          dec rcx         ; Decrementar contador
  3235 000018A1 75F5                            jnz .write_loop
  3236                                          
  3237 000018A3 C60700                      mov byte [rdi], 0   ; Null terminator
  3238                                      
  3239                                      .end:
  3240 000018A6 5E                          pop rsi
  3241 000018A7 5A                          pop rdx
  3242 000018A8 5B                          pop rbx
  3243 000018A9 C3                          ret
  3244                                  
  3245                                  ; Función para imprimir los labels
  3246                                  print_labels:
  3247 000018AA 55                          push rbp
  3248 000018AB 4889E5                      mov rbp, rsp
  3249                                  
  3250                                      ; Crear buffer temporal
  3251 000018AE 4883EC20                    sub rsp, 32
  3252                                  
  3253                                      ; Copiar labels a buffer temporal
  3254 000018B2 4889E7                      mov rdi, rsp
  3255 000018B5 488D35(F3200000)            lea rsi, [score_label]
  3256 000018BC B917000000                  mov rcx, score_label_len
  3257 000018C1 F3A4                        rep movsb
  3258                                  
  3259                                      ; Convertir score a string
  3260 000018C3 488B05(3E200000)            mov rax, [current_score]
  3261 000018CA 48BF-                       mov rdi, number_buffer
  3261 000018CC [4720000000000000] 
  3262 000018D4 E892FFFFFF                  call number_to_string
  3263                                  
  3264                                      ; Calcular longitud del número
  3265 000018D9 B900000000                  mov rcx, 0
  3266 000018DE 48BF-                       mov rdi, number_buffer
  3266 000018E0 [4720000000000000] 
  3267                                      .count_loop:
  3268 000018E8 803C0F00                        cmp byte [rdi + rcx], 0
  3269 000018EC 7405                            je .count_done
  3270 000018EE 48FFC1                          inc rcx
  3271 000018F1 EBF5                            jmp .count_loop
  3272                                      .count_done:
  3273                                  
  3274                                      ; Insertar el número en la posición correcta, alineado a la derecha
  3275 000018F3 4889E7                      mov rdi, rsp
  3276 000018F6 4883C70A                    add rdi, score_pos           ; Moverse a la posición del número
  3277 000018FA BE0A000000                  mov rsi, 10                  ; Espacio reservado para el número
  3278 000018FF 4829CE                      sub rsi, rcx                 ; Calcular padding necesario
  3279                                      .pad_loop:
  3280 00001902 4885F6                          test rsi, rsi
  3281 00001905 740B                            jz .pad_done
  3282 00001907 C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  3283 0000190A 48FFC7                          inc rdi
  3284 0000190D 48FFCE                          dec rsi
  3285 00001910 EBF0                            jmp .pad_loop
  3286                                      .pad_done:
  3287                                  
  3288                                      ; Copiar el número
  3289 00001912 48BE-                       mov rsi, number_buffer
  3289 00001914 [4720000000000000] 
  3290 0000191C F3A4                        rep movsb
  3291                                  
  3292                                      ; Imprimir el buffer completo
  3293                                      print rsp, score_label_len
    82 0000191E B801000000          <1>  mov eax, sys_write
    83 00001923 BF01000000          <1>  mov edi, 1
    84 00001928 4889E6              <1>  mov rsi, %1
    85 0000192B BA17000000          <1>  mov edx, %2
    86 00001930 0F05                <1>  syscall
  3294                                  
  3295                                      ; Repetir proceso para bloques destruidos
  3296 00001932 4889E7                      mov rdi, rsp
  3297 00001935 488D35(0A210000)            lea rsi, [blocks_label]
  3298 0000193C B91B000000                  mov rcx, blocks_label_len
  3299 00001941 F3A4                        rep movsb
  3300                                  
  3301                                      ; Verificar que el `[` esté en su posición correcta
  3302 00001943 4889E7                      mov rdi, rsp
  3303 00001946 4883C713                    add rdi, blocks_pos - 1  ; Posición exacta donde debe ir el '['
  3304 0000194A C6075B                      mov byte [rdi], '['      ; Garantizar que el `[` esté presente
  3305                                  
  3306                                      ; Convertir bloques destruidos a string
  3307 0000194D 480FB605(46200000)          movzx rax, byte [destroyed_blocks]
  3308 00001955 48BF-                       mov rdi, number_buffer
  3308 00001957 [4720000000000000] 
  3309 0000195F E807FFFFFF                  call number_to_string
  3310                                  
  3311                                      ; Calcular longitud del número
  3312 00001964 B900000000                  mov rcx, 0
  3313 00001969 48BF-                       mov rdi, number_buffer
  3313 0000196B [4720000000000000] 
  3314                                      .count_loop2:
  3315 00001973 803C0F00                        cmp byte [rdi + rcx], 0
  3316 00001977 7405                            je .count_done2
  3317 00001979 48FFC1                          inc rcx
  3318 0000197C EBF5                            jmp .count_loop2
  3319                                      .count_done2:
  3320                                  
  3321                                      ; Insertar el número en la posición correcta, alineado a la derecha
  3322 0000197E 4889E7                      mov rdi, rsp
  3323 00001981 4883C714                    add rdi, blocks_pos         ; Moverse a la posición del número
  3324 00001985 BE03000000                  mov rsi, 3                  ; Espacio reservado para el número
  3325 0000198A 4829CE                      sub rsi, rcx                ; Calcular padding necesario
  3326                                      .pad_loop2:
  3327 0000198D 4885F6                          test rsi, rsi
  3328 00001990 740B                            jz .pad_done2
  3329 00001992 C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  3330 00001995 48FFC7                          inc rdi
  3331 00001998 48FFCE                          dec rsi
  3332 0000199B EBF0                            jmp .pad_loop2
  3333                                      .pad_done2:
  3334                                  
  3335                                      ; Copiar el número
  3336 0000199D 48BE-                       mov rsi, number_buffer
  3336 0000199F [4720000000000000] 
  3337 000019A7 F3A4                        rep movsb
  3338                                  
  3339                                      ; Imprimir el buffer completo
  3340                                      print rsp, blocks_label_len
    82 000019A9 B801000000          <1>  mov eax, sys_write
    83 000019AE BF01000000          <1>  mov edi, 1
    84 000019B3 4889E6              <1>  mov rsi, %1
    85 000019B6 BA1B000000          <1>  mov edx, %2
    86 000019BB 0F05                <1>  syscall
  3341                                  
  3342                                      ; Restaurar stack
  3343 000019BD 4883C420                    add rsp, 32
  3344 000019C1 5D                          pop rbp
  3345 000019C2 C3                          ret
  3346                                  
  3347                                  
  3348                                  
  3349                                  check_block_collision:
  3350 000019C3 55                          push rbp
  3351 000019C4 4889E5                      mov rbp, rsp
  3352                                  
  3353                                      ; Almacenar el carácter en la posición r10 (pos. de la bola en board[])
  3354 000019C7 418A02                      mov al, [r10]
  3355                                  
  3356                                      ; Verificar si el carácter es un bloque
  3357 000019CA 3C55                        cmp al, 'U'  
  3358 000019CC 7419                        je .possible
  3359 000019CE 3C4F                        cmp al, 'O'  
  3360 000019D0 7415                        je .possible
  3361 000019D2 3C44                        cmp al, 'D'  
  3362 000019D4 7411                        je .possible
  3363 000019D6 3C4C                        cmp al, 'L'  
  3364 000019D8 740D                        je .possible
  3365 000019DA 3C56                        cmp al, 'V'  
  3366 000019DC 7409                        je .possible
  3367 000019DE 3C38                        cmp al, '8'  
  3368 000019E0 7405                        je .possible
  3369                                  
  3370                                      ; No es bloque, salir
  3371 000019E2 4831C0                      xor rax, rax
  3372 000019E5 5D                          pop rbp
  3373 000019E6 C3                          ret
  3374                                  
  3375                                  .possible:
  3376 000019E7 53                          push rbx
  3377 000019E8 57                          push rdi
  3378 000019E9 56                          push rsi
  3379 000019EA 4154                        push r12
  3380 000019EC 4155                        push r13
  3381 000019EE 4156                        push r14
  3382 000019F0 4157                        push r15
  3383                                  
  3384                                      ; 1) Obtener base de los bloques del nivel actual
  3385 000019F2 E83FFDFFFF                  call get_current_level_blocks
  3386 000019F7 4989C5                      mov r13, rax  ; (r13) = base de levelX_blocks
  3387                                  
  3388                                      ; 2) Obtener la cantidad de bloques
  3389 000019FA E890FDFFFF                  call get_current_level_count
  3390 000019FF 4989C6                      mov r14, rax
  3391                                  
  3392 00001A02 4D31E4                      xor r12, r12  ; Índice del bloque actual
  3393                                  
  3394                                  .find_block_loop:
  3395 00001A05 4D39F4                      cmp r12, r14
  3396 00001A08 0F8DCE000000                jge .no_block_found  ; Se acabaron los bloques
  3397                                  
  3398                                      ; Calcular puntero base del bloque actual en levelX_blocks
  3399 00001A0E 4C89E0                      mov rax, r12
  3400 00001A11 486BC005                    imul rax, 5            ; (x, y, tipo, durabilidad_inicial, letra)
  3401 00001A15 4C01E8                      add rax, r13
  3402 00001A18 4989C7                      mov r15, rax           ; r15 apunta a los datos del bloque actual
  3403                                  
  3404                                      ; --- Aquí la diferencia: la durabilidad no la leemos de [r15+3], sino de block_states[r12]
  3405 00001A1B 490FB69C24-                 movzx rbx, byte [block_states + r12]  ; Durabilidad "viva" en block_states
  3405 00001A20 [761F0000]         
  3406 00001A24 4885DB                      test rbx, rbx
  3407 00001A27 0F84A7000000                jz .next_block  ; si durabilidad=0 => bloque destruido => ignorar
  3408                                  
  3409                                      ; Obtener coordenadas
  3410 00001A2D 418A17                      mov dl, [r15]         ; x
  3411 00001A30 418A4F01                    mov cl, [r15 + 1]     ; y
  3412                                  
  3413                                      ; Calcular posición en el board
  3414 00001A34 488D3D(400A0000)            lea rdi, [board]
  3415 00001A3B 4831C0                      xor rax, rax
  3416 00001A3E B850000000                  mov rax, column_cells
  3417 00001A43 4883C002                    add rax, 2
  3418 00001A47 480FB6C9                    movzx rcx, cl         ; y
  3419 00001A4B 480FAFC1                    imul rax, rcx
  3420 00001A4F 4801C7                      add rdi, rax
  3421 00001A52 480FB6C2                    movzx rax, dl         ; x
  3422 00001A56 4801C7                      add rdi, rax
  3423                                  
  3424                                      ; Guardar la posición base del bloque
  3425 00001A59 57                          push rdi
  3426                                  
  3427                                      ; Verificar si la bola (r10) está dentro de [rdi .. rdi+block_length)
  3428 00001A5A 4939FA                      cmp r10, rdi
  3429 00001A5D 7274                        jb .skip_collision
  3430 00001A5F 488D5F06                    lea rbx, [rdi + block_length]
  3431 00001A63 4939DA                      cmp r10, rbx
  3432 00001A66 736B                        jae .skip_collision
  3433                                  
  3434                                      ; ------- Hay colisión, reducir durabilidad en block_states
  3435 00001A68 41FE8C24[761F0000]          dec byte [block_states + r12]
  3436                                      ; Volver a cargar durabilidad
  3437 00001A70 490FB69C24-                 movzx rbx, byte [block_states + r12]
  3437 00001A75 [761F0000]         
  3438 00001A79 4885DB                      test rbx, rbx
  3439 00001A7C 754D                        jnz .update_display  ; si no llegó a 0 => solo "golpeado"
  3440                                  
  3441                                      ; >>> Llegó a 0 => Bloque destruido
  3442 00001A7E 5F                          pop rdi  ; recuperar puntero base del bloque en board
  3443 00001A7F B906000000                  mov rcx, block_length
  3444                                  .clear_loop:
  3445 00001A84 C60720                      mov byte [rdi], ' '
  3446 00001A87 48FFC7                      inc rdi
  3447 00001A8A E2F8                        loop .clear_loop
  3448                                  
  3449                                      ; Dibujar letra del bloque destruido
  3450 00001A8C 418A4704                    mov al, [r15 + 4]  ; Obtener la letra asociada
  3451 00001A90 4883EF06                    sub rdi, block_length
  3452 00001A94 8807                        mov [rdi], al      ; Escribir la letra en la posición inicial
  3453                                      ; Después de escribir la letra en el tablero
  3454 00001A96 418A4704                    mov al, [r15 + 4]      ; Obtener la letra
  3455 00001A9A 4D0FB607                    movzx r8, byte [r15]   ; Posición x del bloque
  3456 00001A9E 4D0FB64F01                  movzx r9, byte [r15 + 1] ; Posición y del bloque
  3457 00001AA3 E8C1E9FFFF                  call register_letter
  3458                                      ; Actualizar contadores globales
  3459 00001AA8 FE0D(7A150000)              dec byte [blocks_remaining]
  3460 00001AAE FE05(46200000)              inc byte [destroyed_blocks]
  3461                                  
  3462                                      ; Sumar puntos según el tipo
  3463 00001AB4 490FB64702                  movzx rax, byte [r15 + 2]  ; tipo del bloque original
  3464 00001AB9 486BC00A                    imul rax, 10
  3465 00001ABD 480105(3E200000)            add [current_score], rax
  3466                                  
  3467 00001AC4 B801000000                  mov rax, 1  ; colisión con destrucción
  3468 00001AC9 EB14                        jmp .end_pop
  3469                                  
  3470                                  .update_display:
  3471                                      ; => durabilidad >0, se podría actualizar el "look" del bloque
  3472 00001ACB B801000000                  mov rax, 1  ; colisión con "rebote"  
  3473 00001AD0 5F                          pop rdi     ; pop que quedó pendiente
  3474 00001AD1 EB0C                        jmp .end_pop
  3475                                  
  3476                                  .skip_collision:
  3477 00001AD3 5F                          pop rdi     ; si no hubo colisión, quita de la pila
  3478                                  .next_block:
  3479 00001AD4 49FFC4                      inc r12
  3480 00001AD7 E929FFFFFF                  jmp .find_block_loop
  3481                                  
  3482                                  .no_block_found:
  3483 00001ADC 4831C0                      xor rax, rax  ; 0 => no hubo colisión
  3484                                  
  3485                                  .end_pop:
  3486 00001ADF 415F                        pop r15
  3487 00001AE1 415E                        pop r14
  3488 00001AE3 415D                        pop r13
  3489 00001AE5 415C                        pop r12
  3490 00001AE7 5E                          pop rsi
  3491 00001AE8 5F                          pop rdi
  3492 00001AE9 5B                          pop rbx
  3493 00001AEA 5D                          pop rbp
  3494 00001AEB C3                          ret
  3495                                  
  3496                                  
  3497                                  
  3498                                  init_enemies:
  3499 00001AEC 55                          push rbp
  3500 00001AED 4889E5                      mov rbp, rsp
  3501                                      ; Reiniciar contadores de movimiento
  3502 00001AF0 C605(89200000)00            mov byte [enemy_move_total], 0
  3503 00001AF7 C605(8A200000)00            mov byte [enemy_target], 0 ; Inicialmente persigue la bola
  3504                                      ; Limpiar estado previo de enemigos
  3505 00001AFE B90A000000                  mov rcx, 10 ; Máximo 10 enemigos
  3506 00001B03 488D3D(60200000)            lea rdi, [enemies]
  3507 00001B0A 30C0                        xor al, al
  3508 00001B0C F3AA                        rep stosb ; Limpiar datos de enemigos
  3509                                      
  3510                                      ; Marcar todos los enemigos como inactivos
  3511 00001B0E 488D3D(E9200000)            lea rdi, [enemy_spawns_triggered]
  3512 00001B15 30C0                        xor al, al
  3513 00001B17 B90A000000                  mov rcx, 10
  3514 00001B1C F3AA                        rep stosb ; Todos los enemigos no han sido activados aún
  3515                                  
  3516 00001B1E 5D                          pop rbp
  3517 00001B1F C3                          ret
  3518                                  
  3519                                  
  3520                                  random_move_enemy:
  3521 00001B20 55                          push rbp
  3522 00001B21 4889E5                      mov  rbp, rsp
  3523 00001B24 53                          push rbx
  3524 00001B25 52                          push rdx
  3525 00001B26 57                          push rdi
  3526                                  
  3527                                      ; r12 = índice del enemigo
  3528                                      ; 1) obtener puntero al enemigo i
  3529 00001B27 4C89E0                      mov rax, r12
  3530 00001B2A 486BC003                    imul rax, 3
  3531 00001B2E 488D98[60200000]            lea rbx, [enemies + rax]     ; rbx => &enemies[r12]
  3532                                  
  3533                                      ; 2) Cargar X, Y actuales (NO SE BORRA AQUÍ TODAVÍA)
  3534 00001B35 4C0FB603                    movzx r8, byte [rbx]         ; r8 = X actual
  3535 00001B39 4C0FB64B01                  movzx r9, byte [rbx + 1]     ; r9 = Y actual
  3536                                  
  3537                                      ; 3) Generar "movimiento aleatorio" => tomamos [enemy_move_counter] & 3
  3538 00001B3E 480FB605(87200000)          movzx rax, byte [enemy_move_counter]
  3539 00001B46 4883E003                    and rax, 3
  3540                                  
  3541 00001B4A 4883F800                    cmp rax, 0
  3542 00001B4E 741B                        je .try_left
  3543 00001B50 4883F801                    cmp rax, 1
  3544 00001B54 7410                        je .try_right
  3545 00001B56 4883F802                    cmp rax, 2
  3546 00001B5A 7405                        je .try_up
  3547                                      ; si es 3 => mover abajo
  3548                                  .try_down:
  3549 00001B5C 49FFC1                      inc r9
  3550 00001B5F EB0D                        jmp .check_valid
  3551                                  
  3552                                  .try_up:
  3553 00001B61 49FFC9                      dec r9
  3554 00001B64 EB08                        jmp .check_valid
  3555                                  
  3556                                  .try_right:
  3557 00001B66 49FFC0                      inc r8
  3558 00001B69 EB03                        jmp .check_valid
  3559                                  
  3560                                  .try_left:
  3561 00001B6B 49FFC8                      dec r8
  3562                                  
  3563                                  .check_valid:
  3564                                      ; 4) Verificar límites
  3565 00001B6E 4983F801                    cmp r8, 1                    
  3566 00001B72 0F8EA4000000                jle .invalid_move
  3567 00001B78 4983F850                    cmp r8, column_cells        
  3568 00001B7C 0F8D9A000000                jge .invalid_move
  3569 00001B82 4983F901                    cmp r9, 1                    
  3570 00001B86 0F8E90000000                jle .invalid_move
  3571 00001B8C 4983F920                    cmp r9, row_cells          
  3572 00001B90 0F8D86000000                jge .invalid_move
  3573                                  
  3574                                      ; 5) Verificar colisión con bloques/enemigos
  3575 00001B96 4150                        push r8
  3576 00001B98 4151                        push r9
  3577 00001B9A B850000000                  mov rax, column_cells
  3578 00001B9F 4883C002                    add rax, 2
  3579 00001BA3 49F7E1                      mul r9
  3580 00001BA6 4C01C0                      add rax, r8
  3581 00001BA9 488DB8[400A0000]            lea rdi, [board + rax]
  3582 00001BB0 8A07                        mov al, [rdi]
  3583                                  
  3584                                      ; Revisa si es bloque o borde
  3585 00001BB2 3C55                        cmp al, 'U'
  3586 00001BB4 7462                        je .pop_and_invalid
  3587 00001BB6 3C4F                        cmp al, 'O'
  3588 00001BB8 745E                        je .pop_and_invalid
  3589 00001BBA 3C44                        cmp al, 'D'
  3590 00001BBC 745A                        je .pop_and_invalid
  3591 00001BBE 3C4C                        cmp al, 'L'
  3592 00001BC0 7456                        je .pop_and_invalid
  3593 00001BC2 3C56                        cmp al, 'V'
  3594 00001BC4 7452                        je .pop_and_invalid
  3595 00001BC6 3C38                        cmp al, '8'
  3596 00001BC8 744E                        je .pop_and_invalid
  3597 00001BCA 3C58                        cmp al, 'X'
  3598 00001BCC 744A                        je .pop_and_invalid
  3599                                  
  3600                                      ; Revisa si hay enemigo
  3601 00001BCE 3C40                        cmp al, '@'
  3602 00001BD0 7446                        je .pop_and_invalid
  3603 00001BD2 3C23                        cmp al, '#'
  3604 00001BD4 7442                        je .pop_and_invalid
  3605 00001BD6 3C24                        cmp al, '$'
  3606 00001BD8 743E                        je .pop_and_invalid
  3607 00001BDA 3C26                        cmp al, '&'
  3608 00001BDC 743A                        je .pop_and_invalid
  3609                                  
  3610 00001BDE E8A0020000                  call check_enemy_at_position
  3611 00001BE3 4883F801                    cmp rax, 1
  3612 00001BE7 742F                        je .pop_and_invalid
  3613                                  
  3614                                      ; ------------------------------
  3615                                      ; SI LLEGAMOS AQUI => POSICIÓN NUEVA ES VÁLIDA
  3616                                      ; AHORA SÍ BORRAMOS LA POSICIÓN ANTIGUA:
  3617                                      ; ------------------------------
  3618 00001BE9 4159                        pop r9
  3619 00001BEB 4158                        pop r8
  3620                                  
  3621                                      ; (A) Borrar la posición antigua en el board
  3622                                      ;    (X,Y) originales estaban en [rbx], [rbx+1].
  3623 00001BED 4C0FB613                    movzx r10, byte [rbx]   ; oldX
  3624 00001BF1 4C0FB65B01                  movzx r11, byte [rbx+1] ; oldY
  3625 00001BF6 B850000000                  mov rax, column_cells
  3626 00001BFB 4883C002                    add rax, 2
  3627 00001BFF 49F7E3                      mul r11
  3628 00001C02 4C01D0                      add rax, r10
  3629 00001C05 488DB8[400A0000]            lea rdi, [board + rax]
  3630 00001C0C C60720                      mov byte [rdi], ' '     ; BORRA la posición vieja
  3631                                  
  3632                                      ; (B) Guardar la nueva X,Y en la estructura
  3633 00001C0F 448803                      mov byte [rbx], r8b
  3634 00001C12 44884B01                    mov byte [rbx + 1], r9b
  3635                                  
  3636 00001C16 EB0D                        jmp .done
  3637                                  
  3638                                  .pop_and_invalid:
  3639 00001C18 4159                        pop r9
  3640 00001C1A 4158                        pop r8
  3641                                  
  3642                                  .invalid_move:
  3643                                      ; Restablecer la posición X,Y en [rbx], [rbx+1] (no se borró la vieja)
  3644 00001C1C 4C0FB603                    movzx r8, byte [rbx]
  3645 00001C20 4C0FB64B01                  movzx r9, byte [rbx + 1]
  3646                                      ; Se queda donde estaba
  3647                                  .done:
  3648 00001C25 5F                          pop rdi
  3649 00001C26 5A                          pop rdx
  3650 00001C27 5B                          pop rbx
  3651 00001C28 5D                          pop rbp
  3652 00001C29 C3                          ret
  3653                                  
  3654                                  
  3655                                  ; Función para mover enemigos
  3656                                  move_enemies:
  3657 00001C2A 55                          push rbp
  3658 00001C2B 4889E5                      mov rbp, rsp
  3659                                      
  3660                                      ; Incrementar contador de movimiento
  3661 00001C2E FE05(87200000)              inc byte [enemy_move_counter]
  3662 00001C34 480FB605(87200000)          movzx rax, byte [enemy_move_counter]
  3663 00001C3C 3A05(88200000)              cmp al, [enemy_move_delay]
  3664 00001C42 0F8539020000                jne .end
  3665                                      
  3666                                      ; Resetear contador
  3667 00001C48 C605(87200000)00            mov byte [enemy_move_counter], 0
  3668                                      
  3669 00001C4F 4D31E4                      xor r12, r12                    ; Índice del enemigo
  3670                                      
  3671                                      .enemy_loop:
  3672 00001C52 4983FC0A                        cmp r12, 10                     ; Máximo 10 enemigos
  3673 00001C56 0F8D25020000                    jge .end
  3674                                          
  3675                                          ; Calcular offset del enemigo actual
  3676 00001C5C 4C89E0                          mov rax, r12
  3677 00001C5F 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  3678 00001C63 488DB0[60200000]                lea rsi, [enemies + rax]
  3679                                          
  3680                                          ; Verificar si el enemigo está activo
  3681 00001C6A 807E0201                        cmp byte [rsi + 2], 1
  3682 00001C6E 0F8505020000                    jne .next_enemy
  3683                                          
  3684                                          ; Obtener posición actual
  3685 00001C74 4C0FB606                        movzx r8, byte [rsi]            ; X
  3686 00001C78 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  3687                                          
  3688 00001C7D 488D3D(40240000)                lea rdi, [enemy_last_x]
  3689 00001C84 4C01E7                          add rdi, r12
  3690 00001C87 8A07                            mov al, [rdi]             ; al = last_x
  3691                                  
  3692 00001C89 488D15(4A240000)                lea rdx, [enemy_last_y]
  3693 00001C90 4C01E2                          add rdx, r12
  3694 00001C93 8A22                            mov ah, [rdx]             ; ah = last_y
  3695                                  
  3696                                          ; r8 = X actual del enemigo
  3697                                          ; r9 = Y actual del enemigo
  3698                                  
  3699                                          ; *** En lugar de cmp ah, r9b => hacemos lo siguiente:
  3700 00001C95 88E2                            mov dl, ah      ; dl = old_Y
  3701 00001C97 4488CB                          mov bl, r9b     ; bl = new_Y
  3702 00001C9A 38DA                            cmp dl, bl
  3703 00001C9C 752C                            jne .not_stuck
  3704                                  
  3705                                          ; => SI son iguales => pasa al siguiente check
  3706 00001C9E 88C2                            mov dl, al      ; dl = old_X
  3707 00001CA0 4488C3                          mov bl, r8b     ; bl = new_X
  3708 00001CA3 38DA                            cmp dl, bl
  3709 00001CA5 7523                            jne .not_stuck
  3710                                  
  3711                                          ; => MISMA POSICIÓN (STUCK)
  3712 00001CA7 488D1D(54240000)                lea rbx, [enemy_stuck_count]
  3713 00001CAE 4C01E3                          add rbx, r12
  3714 00001CB1 FE03                            inc byte [rbx]              ; Aumentar contador de “pegarse”
  3715                                  
  3716                                          ; Verificar si supera umbral, digamos 3
  3717 00001CB3 480FB60B                        movzx rcx, byte [rbx]
  3718 00001CB7 4883F902                        cmp rcx, 2
  3719 00001CBB 7C34                            jl .check_normal_move       ; Si aún no llega a 3, seguir normal
  3720                                  
  3721                                          ; SI LLEGA A 3, FORZAR UN MOVIMIENTO ALEATORIO:
  3722                                          ;  1) resetear el stuck_count
  3723 00001CBD C60300                          mov byte [rbx], 0
  3724                                  
  3725                                          ;  2) cambiar random
  3726 00001CC0 E85BFEFFFF                      call random_move_enemy        ; (Ver ejemplo de abajo)
  3727 00001CC5 E9AF010000                      jmp .next_enemy
  3728                                  
  3729                                      .not_stuck:
  3730                                          ; => Se movió
  3731 00001CCA 488D1D(54240000)                lea rbx, [enemy_stuck_count]
  3732 00001CD1 4C01E3                          add rbx, r12
  3733 00001CD4 C60300                          mov byte [rbx], 0            ; Resetear
  3734                                  
  3735                                          ; Guardar su nueva posición en “last_x, last_y”
  3736 00001CD7 488D3D(40240000)                lea rdi, [enemy_last_x]
  3737 00001CDE 4C01E7                          add rdi, r12
  3738 00001CE1 448807                          mov [rdi], r8b
  3739                                          
  3740 00001CE4 488D3D(4A240000)                lea rdi, [enemy_last_y]
  3741 00001CEB 4C01E7                          add rdi, r12
  3742 00001CEE 44880F                          mov [rdi], r9b
  3743                                  
  3744                                          ; Limpiar posición actual antes de mover
  3745                                      .check_normal_move:
  3746 00001CF1 4150                            push r8
  3747 00001CF3 4151                            push r9
  3748 00001CF5 B850000000                      mov rax, column_cells
  3749 00001CFA 4883C002                        add rax, 2
  3750 00001CFE 49F7E1                          mul r9
  3751 00001D01 4C01C0                          add rax, r8
  3752 00001D04 488DB8[400A0000]                lea rdi, [board + rax]
  3753 00001D0B C60720                          mov byte [rdi], ' '         ; Limpiar rastro
  3754 00001D0E 4159                            pop r9
  3755 00001D10 4158                            pop r8
  3756                                  
  3757                                          ; Determinar comportamiento basado en índice
  3758 00001D12 4C89E0                          mov rax, r12
  3759 00001D15 4883E001                        and rax, 1                      ; 0 para índices pares, 1 para impares
  3760 00001D19 4885C0                          test rax, rax
  3761 00001D1C 7402                            jz .chase_ball
  3762 00001D1E EB31                            jmp .chase_paddle             ; Si es 1, perseguir paleta
  3763                                          
  3764                                          ; Perseguir bola (comportamiento original)
  3765                                      .chase_ball:
  3766 00001D20 4C8B15(DF140000)                mov r10, [ball_x_pos]
  3767 00001D27 4D39D0                          cmp r8, r10
  3768 00001D2A 0F8F96000000                    jg .move_left
  3769 00001D30 0F8C95000000                    jl .move_right
  3770                                          
  3771 00001D36 4C8B15(E7140000)                mov r10, [ball_y_pos]
  3772 00001D3D 4D39D1                          cmp r9, r10
  3773 00001D40 0F8F8A000000                    jg .move_up
  3774 00001D46 0F8C89000000                    jl .move_down
  3775 00001D4C E9A5000000                      jmp .check_collision
  3776                                          
  3777                                      .chase_paddle:
  3778                                          ; Obtener la posición X actual de la paleta
  3779 00001D51 4C8B15(BF140000)                mov r10, [pallet_position]
  3780 00001D58 4981EA[400A0000]                sub r10, board              ; Convertir a offset relativo
  3781                                          
  3782                                          ; Calcular la posición X real de la paleta
  3783 00001D5F 4C89D0                          mov rax, r10
  3784 00001D62 BB50000000                      mov rbx, column_cells
  3785 00001D67 4883C302                        add rbx, 2                  ; Añadir newline chars
  3786 00001D6B 4831D2                          xor rdx, rdx
  3787 00001D6E 48F7F3                          div rbx                     ; rax = y, rdx = x
  3788                                          
  3789                                          ; rdx ahora contiene la posición X de la paleta
  3790                                          ; Añadir la mitad del tamaño de la paleta para apuntar al centro
  3791 00001D71 488B0D(C7140000)                mov rcx, [pallet_size]
  3792 00001D78 48D1E9                          shr rcx, 1                  ; Dividir por 2
  3793 00001D7B 4801CA                          add rdx, rcx
  3794                                          
  3795                                          ; Comparar con posición X del enemigo y mover gradualmente
  3796 00001D7E 4939D0                          cmp r8, rdx
  3797 00001D81 7404                            je .check_y_paddle          ; Si está en la misma X, verificar Y
  3798 00001D83 7F41                            jg .move_left              ; Si está a la derecha, mover izquierda
  3799 00001D85 7C44                            jl .move_right             ; Si está a la izquierda, mover derecha
  3800                                  
  3801                                      .check_y_paddle:
  3802                                          ; La Y de la paleta siempre es row_cells - 2
  3803 00001D87 41BA20000000                    mov r10, row_cells
  3804 00001D8D 4983EA02                        sub r10, 2
  3805                                          
  3806                                          ; Comparar con posición Y del enemigo y mover gradualmente
  3807 00001D91 4D39D1                          cmp r9, r10
  3808 00001D94 7404                            je .no_movement            ; Si está en la misma Y, no mover
  3809 00001D96 7F38                            jg .move_up               ; Si está abajo, mover arriba
  3810 00001D98 7C3B                            jl .move_down             ; Si está arriba, mover abajo
  3811                                          
  3812                                      .no_movement:
  3813 00001D9A EB5A                            jmp .check_collision
  3814                                  
  3815                                      ; También agregar una nueva sección para el movimiento suave
  3816                                      .smooth_transition:
  3817                                          ; Si el enemigo está muy lejos de su objetivo, limitar el movimiento
  3818 00001D9C 8A05(8A200000)                  mov al, [enemy_target]
  3819 00001DA2 84C0                            test al, al
  3820 00001DA4 7450                            jz .check_collision        ; Si persigue la bola, movimiento normal
  3821                                          
  3822                                          ; Verificar distancia en X
  3823 00001DA6 4989D2                          mov r10, rdx              ; Posición X objetivo
  3824 00001DA9 4D29C2                          sub r10, r8               ; Calcular diferencia
  3825 00001DAC 4983FA05                        cmp r10, 5               ; Si la diferencia es mayor a 5
  3826 00001DB0 7F08                            jg .limit_right_movement  ; Limitar movimiento a la derecha
  3827 00001DB2 4983FAFB                        cmp r10, -5              ; Si la diferencia es menor a -5
  3828 00001DB6 7C08                            jl .limit_left_movement   ; Limitar movimiento a la izquierda
  3829 00001DB8 EB3C                            jmp .check_collision
  3830                                          
  3831                                      .limit_right_movement:
  3832 00001DBA 4983C002                        add r8, 2                ; Mover solo 2 unidades a la derecha
  3833 00001DBE EB36                            jmp .check_collision
  3834                                          
  3835                                      .limit_left_movement:
  3836 00001DC0 4983E802                        sub r8, 2                ; Mover solo 2 unidades a la izquierda
  3837 00001DC4 EB30                            jmp .check_collision
  3838                                      .move_left:
  3839 00001DC6 49FFC8                          dec r8
  3840 00001DC9 EB0F                            jmp .check_vertical
  3841                                          
  3842                                      .move_right:
  3843 00001DCB 49FFC0                          inc r8
  3844 00001DCE EB0A                            jmp .check_vertical
  3845                                          
  3846                                      .move_up:
  3847 00001DD0 49FFC9                          dec r9
  3848 00001DD3 EB21                            jmp .check_collision
  3849                                          
  3850                                      .move_down:
  3851 00001DD5 49FFC1                          inc r9
  3852 00001DD8 EB1C                            jmp .check_collision
  3853                                          
  3854                                      .check_vertical:
  3855 00001DDA 8A05(8A200000)                  mov al, [enemy_target]
  3856 00001DE0 84C0                            test al, al
  3857 00001DE2 0F8569FFFFFF                    jnz .chase_paddle         ; Si persigue paleta, volver a su lógica
  3858 00001DE8 4C8B15(E7140000)                mov r10, [ball_y_pos]     ; Si no, seguir persiguiendo la bola
  3859 00001DEF 4D39D1                          cmp r9, r10
  3860 00001DF2 7FDC                            jg .move_up
  3861 00001DF4 7CDF                            jl .move_down
  3862                                          
  3863                                      .check_collision:
  3864                                          ; Verificar colisión con bordes
  3865 00001DF6 4983F801                        cmp r8, 1                       ; Borde izquierdo
  3866 00001DFA 7E7D                            jle .next_enemy
  3867 00001DFC 4983F850                        cmp r8, column_cells
  3868 00001E00 7D77                            jge .next_enemy
  3869 00001E02 4983F901                        cmp r9, 1                       ; Borde superior
  3870 00001E06 7E71                            jle .next_enemy
  3871 00001E08 4983F920                        cmp r9, row_cells
  3872 00001E0C 7D6B                            jge .next_enemy
  3873                                          
  3874                                          ; Verificar colisión con bloques antes de moverse
  3875 00001E0E 4150                            push r8
  3876 00001E10 4151                            push r9
  3877 00001E12 4152                            push r10
  3878                                          
  3879                                          ; Calcular posición en el tablero para verificar
  3880 00001E14 B850000000                      mov rax, column_cells
  3881 00001E19 4883C002                        add rax, 2
  3882 00001E1D 49F7E1                          mul r9
  3883 00001E20 4C01C0                          add rax, r8
  3884 00001E23 4C8D90[400A0000]                lea r10, [board + rax]
  3885                                          
  3886                                          ; Verificar si hay un bloque en la nueva posición
  3887 00001E2A 418A02                          mov al, [r10]
  3888 00001E2D 3C55                            cmp al, 'U'
  3889 00001E2F 7442                            je .invalid_move
  3890 00001E31 3C4F                            cmp al, 'O'
  3891 00001E33 743E                            je .invalid_move
  3892 00001E35 3C44                            cmp al, 'D'
  3893 00001E37 743A                            je .invalid_move
  3894 00001E39 3C4C                            cmp al, 'L'
  3895 00001E3B 7436                            je .invalid_move
  3896 00001E3D 3C56                            cmp al, 'V'
  3897 00001E3F 7432                            je .invalid_move
  3898 00001E41 3C38                            cmp al, '8'
  3899 00001E43 742E                            je .invalid_move
  3900 00001E45 3C58                            cmp al, 'X'
  3901 00001E47 742A                            je .invalid_move
  3902 00001E49 3C40                            cmp al, '@'                 ; Enemigo nivel 1 y 5
  3903 00001E4B 7426                            je .invalid_move
  3904 00001E4D 3C23                            cmp al, '#'                 ; Enemigo nivel 2
  3905 00001E4F 7422                            je .invalid_move
  3906 00001E51 3C24                            cmp al, '$'                 ; Enemigo nivel 3
  3907 00001E53 741E                            je .invalid_move
  3908 00001E55 3C26                            cmp al, '&'                 ; Enemigo nivel 4
  3909 00001E57 741A                            je .invalid_move
  3910                                          
  3911 00001E59 E825000000                      call check_enemy_at_position
  3912 00001E5E 4883F801                        cmp rax, 1
  3913 00001E62 740F                            je .invalid_move
  3914 00001E64 415A                            pop r10
  3915 00001E66 4159                            pop r9
  3916 00001E68 4158                            pop r8
  3917                                          
  3918                                          ; Guardar nueva posición si es válida
  3919 00001E6A 448806                          mov [rsi], r8b
  3920 00001E6D 44884E01                        mov [rsi + 1], r9b
  3921 00001E71 EB06                            jmp .next_enemy
  3922                                          
  3923                                      .invalid_move:
  3924 00001E73 415A                            pop r10
  3925 00001E75 4159                            pop r9
  3926 00001E77 4158                            pop r8
  3927                                          
  3928                                      .next_enemy:
  3929 00001E79 49FFC4                          inc r12
  3930 00001E7C E9D1FDFFFF                      jmp .enemy_loop
  3931                                          
  3932                                      .end:
  3933 00001E81 5D                              pop rbp
  3934 00001E82 C3                              ret
  3935                                  
  3936                                  check_enemy_at_position:
  3937 00001E83 55                          push rbp
  3938 00001E84 4889E5                      mov rbp, rsp
  3939                                      
  3940                                      ; Parámetros esperados en r8 (X) y r9 (Y)
  3941 00001E87 B850000000                  mov rax, column_cells
  3942 00001E8C 4883C002                    add rax, 2
  3943 00001E90 49F7E1                      mul r9
  3944 00001E93 4C01C0                      add rax, r8
  3945 00001E96 488DB8[400A0000]            lea rdi, [board + rax]
  3946 00001E9D 480FB607                    movzx rax, byte [rdi]
  3947                                      
  3948                                      ; Verificar todos los caracteres de enemigos
  3949 00001EA1 3C40                        cmp al, '@'
  3950 00001EA3 7411                        je .enemy_found
  3951 00001EA5 3C23                        cmp al, '#'
  3952 00001EA7 740D                        je .enemy_found
  3953 00001EA9 3C24                        cmp al, '$'
  3954 00001EAB 7409                        je .enemy_found
  3955 00001EAD 3C26                        cmp al, '&'
  3956 00001EAF 7405                        je .enemy_found
  3957                                      
  3958 00001EB1 4831C0                      xor rax, rax    ; No hay enemigo (retorna 0)
  3959 00001EB4 EB05                        jmp .end
  3960                                      
  3961                                  .enemy_found:
  3962 00001EB6 B801000000                  mov rax, 1      ; Hay enemigo (retorna 1)
  3963                                      
  3964                                  .end:
  3965 00001EBB 5D                          pop rbp
  3966 00001EBC C3                          ret
  3967                                  
  3968                                  get_current_spawn_points:
  3969 00001EBD 55                          push rbp
  3970 00001EBE 4889E5                      mov rbp, rsp
  3971                                      
  3972 00001EC1 480FB605(79150000)          movzx rax, byte [current_level]
  3973 00001EC9 48FFC8                      dec rax                         ; Ajustar para índice base 0
  3974 00001ECC 488B04C5[BE200000]          mov rax, [spawn_points_table + rax * 8]
  3975                                      
  3976 00001ED4 5D                          pop rbp
  3977 00001ED5 C3                          ret
  3978                                  
  3979                                  ; Función para verificar si debe aparecer un nuevo enemigo
  3980                                  check_enemy_spawn:
  3981 00001ED6 55                          push rbp
  3982 00001ED7 4889E5                      mov rbp, rsp
  3983                                      
  3984                                      ; Obtener spawn points del nivel actual
  3985 00001EDA E8DEFFFFFF                  call get_current_spawn_points
  3986 00001EDF 4989C4                      mov r12, rax                    ; r12 = puntero a spawn points
  3987                                      
  3988                                      ; Obtener cantidad de bloques destruidos
  3989 00001EE2 4C0FB62D(46200000)          movzx r13, byte [destroyed_blocks]
  3990                                      
  3991                                      ; Verificar cada punto de spawn
  3992 00001EEA 4831C9                      xor rcx, rcx                    ; Índice del enemigo
  3993                                      
  3994                                      .check_loop:
  3995 00001EED 4883F90A                        cmp rcx, 10                     ; Máximo 10 enemigos
  3996 00001EF1 7D4E                            jge .end
  3997                                          
  3998                                          ; Verificar si este spawn point ya fue usado
  3999 00001EF3 80B9[E9200000]01                cmp byte [enemy_spawns_triggered + rcx], 1
  4000 00001EFA 7440                            je .next_enemy
  4001                                          
  4002                                          ; Verificar si este enemigo ya está activo
  4003 00001EFC 4889C8                          mov rax, rcx
  4004 00001EFF 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  4005 00001F03 488DB0[60200000]                lea rsi, [enemies + rax]
  4006 00001F0A 807E0201                        cmp byte [rsi + 2], 1          ; Verificar si está activo
  4007 00001F0E 742C                            je .next_enemy
  4008                                          
  4009                                          ; Verificar si debemos spawnear este enemigo
  4010 00001F10 490FB6040C                      movzx rax, byte [r12 + rcx]    ; Obtener punto de spawn
  4011 00001F15 4939C5                          cmp r13, rax                   ; Comparar con bloques destruidos
  4012 00001F18 7522                            jne .next_enemy
  4013                                          
  4014                                          ; Marcar este spawn point como usado
  4015 00001F1A C681[E9200000]01                mov byte [enemy_spawns_triggered + rcx], 1
  4016                                          
  4017                                          ; Spawner nuevo enemigo
  4018 00001F21 B004                            mov al, 4
  4019 00001F23 00C8                            add al, cl       ; con 'rcx' como índice
  4020 00001F25 8806                            mov [rsi], al
  4021 00001F27 C6460102                        mov byte [rsi+1], 2
  4022 00001F2B C6460201                        mov byte [rsi+2], 1
  4023                                  
  4024                                          ; Inicializar comportamiento
  4025 00001F2F 4889C8                          mov rax, rcx
  4026 00001F32 4883E001                        and rax, 1                     ; Alternar comportamiento basado en índice par/impar
  4027 00001F36 8805(E8200000)                  mov [current_behavior], al      ; 0 = persigue bola, 1 = persigue paleta
  4028                                          
  4029                                      .next_enemy:
  4030 00001F3C 48FFC1                          inc rcx
  4031 00001F3F EBAC                            jmp .check_loop
  4032                                          
  4033                                      .end:
  4034 00001F41 5D                              pop rbp
  4035 00001F42 C3                              ret
  4036                                  
  4037                                  
  4038                                  ; Función para dibujar enemigos
  4039                                  print_enemies:
  4040 00001F43 55                          push rbp
  4041 00001F44 4889E5                      mov rbp, rsp
  4042                                      
  4043 00001F47 4D31E4                      xor r12, r12                    ; Índice del enemigo
  4044                                      
  4045                                      .print_loop:
  4046 00001F4A 4983FC0A                        cmp r12, 10                      ; Máximo 5 enemigos
  4047 00001F4E 7D4B                            jge .end
  4048                                          
  4049                                          ; Calcular offset del enemigo actual
  4050 00001F50 4C89E0                          mov rax, r12
  4051 00001F53 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  4052 00001F57 488DB0[60200000]                lea rsi, [enemies + rax]
  4053                                          
  4054                                          ; Verificar si el enemigo está activo
  4055 00001F5E 807E0201                        cmp byte [rsi + 2], 1
  4056 00001F62 7532                            jne .next_enemy
  4057                                          
  4058                                          ; Calcular posición en el tablero
  4059 00001F64 4C0FB606                        movzx r8, byte [rsi]            ; X
  4060 00001F68 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  4061                                          
  4062                                          ; Calcular offset en el tablero
  4063 00001F6D B850000000                      mov rax, column_cells
  4064 00001F72 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  4065 00001F76 49F7E1                          mul r9
  4066 00001F79 4C01C0                          add rax, r8
  4067 00001F7C 488DB8[400A0000]                lea rdi, [board + rax]
  4068                                          
  4069                                          ; Obtener carácter del enemigo según el nivel
  4070 00001F83 480FB605(79150000)              movzx rax, byte [current_level]
  4071 00001F8B 48FFC8                          dec rax                         ; Ajustar para índice base 0
  4072 00001F8E 8A80[5B200000]                  mov al, [enemy_chars + rax]
  4073                                          
  4074                                          ; Dibujar enemigo
  4075 00001F94 8807                            mov [rdi], al
  4076                                          
  4077                                      .next_enemy:
  4078 00001F96 49FFC4                          inc r12
  4079 00001F99 EBAF                            jmp .print_loop
  4080                                          
  4081                                      .end:
  4082 00001F9B 5D                              pop rbp
  4083 00001F9C C3                              ret
  4084                                  
  4085                                  ; Función para verificar colisión con enemigos
  4086                                  ; Función para verificar colisión con enemigos
  4087                                  check_enemy_collision:
  4088 00001F9D 55                          push rbp
  4089 00001F9E 4889E5                      mov rbp, rsp
  4090                                      
  4091 00001FA1 4D31E4                      xor r12, r12                    ; Índice del enemigo
  4092 00001FA4 4831C0                      xor rax, rax                    ; Valor de retorno (0 = no colisión)
  4093                                      
  4094                                      .check_loop:
  4095 00001FA7 4983FC05                        cmp r12, 5                      ; Máximo 5 enemigos
  4096 00001FAB 0F8DE9000000                    jge .end
  4097                                          
  4098                                          ; Calcular offset del enemigo actual
  4099 00001FB1 4C89E1                          mov rcx, r12
  4100 00001FB4 486BC903                        imul rcx, 3                     ; Cada enemigo ocupa 3 bytes
  4101 00001FB8 488DB1[60200000]                lea rsi, [enemies + rcx]
  4102                                          
  4103                                          ; Verificar si el enemigo está activo
  4104 00001FBF 807E0201                        cmp byte [rsi + 2], 1
  4105 00001FC3 0F85C9000000                    jne .next_enemy
  4106                                          
  4107                                          ; Verificar colisión con la bola
  4108 00001FC9 4C0FB606                        movzx r8, byte [rsi]            ; X enemigo
  4109 00001FCD 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y enemigo
  4110                                          
  4111                                          ; Verificar si la bola está en el rango del enemigo (considerando el enemigo como un área)
  4112 00001FD2 4C8B15(DF140000)                mov r10, [ball_x_pos]
  4113 00001FD9 4C8B1D(E7140000)                mov r11, [ball_y_pos]
  4114                                          
  4115                                          ; Comprobar colisión vertical (misma columna)
  4116 00001FE0 4D39C2                          cmp r10, r8
  4117 00001FE3 7525                            jne .check_horizontal
  4118 00001FE5 4D29CB                          sub r11, r9
  4119 00001FE8 4983FB01                        cmp r11, 1
  4120 00001FEC 7F1C                            jg .check_horizontal
  4121 00001FEE 4983FBFF                        cmp r11, -1
  4122 00001FF2 7C16                            jl .check_horizontal
  4123                                          
  4124                                          ; Colisión vertical detectada
  4125 00001FF4 E8A3000000                      call destroy_enemy
  4126 00001FF9 48F71D(F7140000)                neg qword [ball_direction_y]    ; Invertir dirección vertical
  4127 00002000 B801000000                      mov rax, 1
  4128 00002005 E990000000                      jmp .end
  4129                                          
  4130                                      .check_horizontal:
  4131                                          ; Comprobar colisión horizontal (misma fila)
  4132 0000200A 4C8B15(DF140000)                mov r10, [ball_x_pos]
  4133 00002011 4C8B1D(E7140000)                mov r11, [ball_y_pos]
  4134 00002018 4D39CB                          cmp r11, r9
  4135 0000201B 7522                            jne .check_paddle
  4136 0000201D 4D29C2                          sub r10, r8
  4137 00002020 4983FA01                        cmp r10, 1
  4138 00002024 7F19                            jg .check_paddle
  4139 00002026 4983FAFF                        cmp r10, -1
  4140 0000202A 7C13                            jl .check_paddle
  4141                                          
  4142                                          ; Colisión horizontal detectada
  4143 0000202C E86B000000                      call destroy_enemy
  4144 00002031 48F71D(EF140000)                neg qword [ball_direction_x]    ; Invertir dirección horizontal
  4145 00002038 B801000000                      mov rax, 1
  4146 0000203D EB5B                            jmp .end
  4147                                          
  4148                                      .check_paddle:
  4149                                          ; Verificar colisión con la paleta
  4150 0000203F 4C8B15(BF140000)                mov r10, [pallet_position]
  4151 00002046 4981EA[400A0000]                sub r10, board
  4152 0000204D 4C89D0                          mov rax, r10
  4153 00002050 41BB50000000                    mov r11, column_cells
  4154 00002056 4983C302                        add r11, 2
  4155 0000205A 4831D2                          xor rdx, rdx
  4156 0000205D 49F7F3                          div r11                     ; División para obtener la posición Y
  4157 00002060 4989D3                          mov r11, rdx               ; X de la paleta en r11
  4158                                          
  4159 00002063 488B0D(C7140000)                mov rcx, [pallet_size]     ; Obtener el tamaño de la paleta
  4160                                          
  4161                                          ; Verificar si el enemigo está en la misma fila que la paleta
  4162 0000206A 41BD20000000                    mov r13, row_cells
  4163 00002070 4983ED02                        sub r13, 2                 ; Y de la paleta
  4164 00002074 4D39E9                          cmp r9, r13               ; Comparar Y del enemigo con Y de la paleta
  4165 00002077 7519                            jne .next_enemy
  4166                                          
  4167                                          ; Verificar si el enemigo está dentro del rango X de la paleta
  4168 00002079 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X inicial de la paleta
  4169 0000207C 7C14                            jl .next_enemy
  4170                                          
  4171 0000207E 4901CB                          add r11, rcx              ; Añadir el tamaño de la paleta
  4172 00002081 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X final de la paleta
  4173 00002084 7F0C                            jg .next_enemy
  4174                                          
  4175                                          ; Si llegamos aquí, hay colisión con la paleta
  4176 00002086 E811000000                      call destroy_enemy        ; Destruir el enemigo
  4177 0000208B B801000000                      mov rax, 1                ; Indicar que hubo colisión
  4178 00002090 EB08                            jmp .end
  4179                                          
  4180                                      .next_enemy:
  4181 00002092 49FFC4                          inc r12
  4182 00002095 E90DFFFFFF                      jmp .check_loop
  4183                                          
  4184                                      .end:
  4185 0000209A 5D                              pop rbp
  4186 0000209B C3                              ret
  4187                                  
  4188                                  ; Función para destruir un enemigo
  4189                                  destroy_enemy:
  4190                                      ; Desactivar enemigo
  4191 0000209C C6460200                    mov byte [rsi + 2], 0   ; Marcar enemigo como inactivo
  4192                                  
  4193                                      ; Sumar puntos por destruir enemigo
  4194 000020A0 488B05(7F200000)            mov rax, [enemy_points]
  4195 000020A7 480105(3E200000)            add [current_score], rax
  4196                                  
  4197                                      ; No tocar bloques destruidos aquí
  4198 000020AE C3                          ret
  4199                                  
  4200                                  
  4201                                  _start:
  4202 000020AF E877E0FFFF              	call canonical_off
  4203 000020B4 E85C010000              	call start_screen
  4204 000020B9 E896F3FFFF                  call init_level
  4205 000020BE E829FAFFFF                  call init_enemies
  4206 000020C3 EB00                    	jmp .main_loop
  4207                                  	
  4208                                  
  4209                                      .main_loop:
  4210 000020C5 E8E0F7FFFF                      call print_labels
  4211 000020CA E80FF7FFFF                      call print_blocks
  4212 000020CF E866E4FFFF                      call move_letters
  4213 000020D4 E84CE7FFFF                      call update_lasers
  4214 000020D9 E8D1E3FFFF                      call print_letters
  4215 000020DE E8EDEAFFFF                      call print_pallet
  4216                                          
  4217                                          ; Mover bola principal solo si está activa
  4218 000020E3 803D(00150000)01                cmp byte [ball_active], 1
  4219 000020EA 7505                            jne .skip_ball1
  4220 000020EC E8F7EBFFFF                          call move_ball
  4221                                          .skip_ball1:
  4222                                  
  4223                                          ; Mover bola 2 si está activa
  4224 000020F1 803D(22150000)01                cmp byte [ball2_active], 1
  4225 000020F8 7505                            jne .skip_ball2
  4226 000020FA E8BCEDFFFF                          call move_ball_2
  4227                                          .skip_ball2:
  4228                                  
  4229                                          ; Mover bola 3 si está activa
  4230 000020FF 803D(44150000)01                cmp byte [ball3_active], 1
  4231 00002106 7505                            jne .skip_ball3
  4232 00002108 E881EFFFFF                          call move_ball_3
  4233                                          .skip_ball3:
  4234                                  
  4235 0000210D E8E4E1FFFF                      call check_bottom_collision    ; Nueva función que maneja todas las bolas
  4236 00002112 E8C6E0FFFF                      call print_lives
  4237                                  
  4238                                          ; Imprimir solo las bolas activas
  4239 00002117 803D(00150000)01                cmp byte [ball_active], 1
  4240 0000211E 7505                            jne .no_pb1
  4241 00002120 E833EAFFFF                          call print_ball
  4242                                          .no_pb1:
  4243                                  
  4244 00002125 803D(22150000)01                cmp byte [ball2_active], 1
  4245 0000212C 7505                            jne .no_pb2
  4246 0000212E E84DEAFFFF                          call print_ball_2
  4247                                          .no_pb2:
  4248                                  
  4249 00002133 803D(44150000)01                cmp byte [ball3_active], 1
  4250 0000213A 7505                            jne .no_pb3
  4251 0000213C E867EAFFFF                          call print_ball_3
  4252                                          .no_pb3:
  4253                                  
  4254 00002141 E8FAF4FFFF                      call check_level_complete
  4255 00002146 E88BFDFFFF                      call check_enemy_spawn
  4256 0000214B E8DAFAFFFF                      call move_enemies
  4257 00002150 E848FEFFFF                      call check_enemy_collision
  4258 00002155 E8E9FDFFFF                      call print_enemies
  4259 0000215A E83AE6FFFF                      call print_power_label
  4260                                  		print board, board_size				
    82 0000215F B801000000          <1>  mov eax, sys_write
    83 00002164 BF01000000          <1>  mov edi, 1
    84 00002169 48BE-               <1>  mov rsi, %1
    84 0000216B [400A000000000000]  <1>
    85 00002173 BA400A0000          <1>  mov edx, %2
    86 00002178 0F05                <1>  syscall
  4261                                  		;setnonblocking	
  4262                                  	.read_more:	
  4263                                  	    getchar	
    90 0000217A B800000000          <1>  mov rax, sys_read
    91 0000217F BF00000000          <1>  mov rdi, STDIN_FILENO
    92 00002184 48BE-               <1>  mov rsi, input_char
    92 00002186 [0000000000000000]  <1>
    93 0000218E BA01000000          <1>  mov rdx, 1
    94 00002193 0F05                <1>  syscall
  4264 00002195 4883F801                	    cmp rax, 1
  4265 00002199 7547                    	    jne .done
  4266                                  	
  4267 0000219B 8A05(00000000)          	    mov al, [input_char]
  4268 000021A1 8805(08230000)          	    mov [last_key], al      ; Registrar la última tecla presionada
  4269                                  	
  4270 000021A7 3C61                    	    cmp al, 'a'
  4271 000021A9 750E                    	    jne .not_left
  4272 000021AB 48C7C7FFFFFFFF          	    mov rdi, left_direction
  4273 000021B2 E84EEAFFFF              	    call move_pallet
  4274 000021B7 EB29                    	    jmp .done
  4275                                  	
  4276                                      .not_left:
  4277 000021B9 3C64                    	    cmp al, 'd'
  4278 000021BB 750C                    	    jne .not_right
  4279 000021BD BF01000000              	    mov rdi, right_direction
  4280 000021C2 E83EEAFFFF              	    call move_pallet
  4281 000021C7 EB19                    	    jmp .done
  4282                                  	
  4283                                      .not_right:
  4284 000021C9 3C63                    	    cmp al, 'c'             ; Verificar si se presionó la tecla 'c'
  4285 000021CB 740E                    	    je .release_ball        ; Si sí, liberar la bola
  4286                                  	
  4287 000021CD 3C78                            cmp al, 'x'             ; Verificar si se presionó la tecla 'c'
  4288 000021CF 740A                    	    je .release_ball        ; Si sí, liberar la bola
  4289                                  	
  4290                                  
  4291 000021D1 3C71                    	    cmp al, 'q' 
  4292 000021D3 0F84AF000000            	    je exit
  4293 000021D9 EB9F                    	    jmp .read_more
  4294                                  	
  4295                                      .release_ball:
  4296 000021DB E881F0FFFF              	    call process_catch_release
  4297 000021E0 EB00                    	    jmp .done
  4298                                  	
  4299                                      .done:
  4300                                  	    sleeptime
    98 000021E2 B823000000          <1>  mov eax, sys_nanosleep
    99 000021E7 48BF-               <1>  mov rdi, timespec
    99 000021E9 [0000000000000000]  <1>
   100 000021F1 31F6                <1>  xor esi, esi
   101 000021F3 0F05                <1>  syscall
  4301                                  	    print clear, clear_length
    82 000021F5 B801000000          <1>  mov eax, sys_write
    83 000021FA BF01000000          <1>  mov edi, 1
    84 000021FF 48BE-               <1>  mov rsi, %1
    84 00002201 [1000000000000000]  <1>
    85 00002209 BA07000000          <1>  mov edx, %2
    86 0000220E 0F05                <1>  syscall
  4302 00002210 E9B0FEFFFF              	    jmp .main_loop
  4303                                  
  4304                                  
  4305                                  
  4306                                  
  4307                                  start_screen:
  4308                                      print clear, clear_length    ; Limpiamos la pantalla primero
    82 00002215 B801000000          <1>  mov eax, sys_write
    83 0000221A BF01000000          <1>  mov edi, 1
    84 0000221F 48BE-               <1>  mov rsi, %1
    84 00002221 [1000000000000000]  <1>
    85 00002229 BA07000000          <1>  mov edx, %2
    86 0000222E 0F05                <1>  syscall
  4309                                      print msg1, msg1_length
    82 00002230 B801000000          <1>  mov eax, sys_write
    83 00002235 BF01000000          <1>  mov edi, 1
    84 0000223A 48BE-               <1>  mov rsi, %1
    84 0000223C [1700000000000000]  <1>
    85 00002244 BA14010000          <1>  mov edx, %2
    86 00002249 0F05                <1>  syscall
  4310                                      
  4311                                      .wait_for_key:              ; Agregamos una etiqueta para esperar la tecla
  4312                                          getchar                 ; Esperamos una tecla
    90 0000224B B800000000          <1>  mov rax, sys_read
    91 00002250 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 00002255 48BE-               <1>  mov rsi, input_char
    92 00002257 [0000000000000000]  <1>
    93 0000225F BA01000000          <1>  mov rdx, 1
    94 00002264 0F05                <1>  syscall
  4313 00002266 4883F801                        cmp rax, 1             ; Verificamos si se leyó un carácter
  4314 0000226A 75DF                            jne .wait_for_key      ; Si no se leyó, seguimos esperando
  4315                                          
  4316                                      print clear, clear_length   ; Limpiamos la pantalla antes de salir
    82 0000226C B801000000          <1>  mov eax, sys_write
    83 00002271 BF01000000          <1>  mov edi, 1
    84 00002276 48BE-               <1>  mov rsi, %1
    84 00002278 [1000000000000000]  <1>
    85 00002280 BA07000000          <1>  mov edx, %2
    86 00002285 0F05                <1>  syscall
  4317 00002287 C3                          ret
  4318                                  
  4319                                  exit: 
  4320 00002288 E8E0DEFFFF              	call canonical_on
  4321 0000228D B83C000000              	mov    rax, 60
  4322 00002292 BF00000000                  mov    rdi, 0
  4323 00002297 0F05                        syscall
  4324                                  
