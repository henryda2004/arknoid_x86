     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  sys_read: equ 0	
     7                                  sys_write:	equ 1
     8                                  sys_nanosleep:	equ 35
     9                                  sys_time:	equ 201
    10                                  sys_fcntl:	equ 72
    11                                  
    12                                  
    13                                  STDIN_FILENO: equ 0
    14                                  
    15                                  F_SETFL:	equ 0x0004
    16                                  O_NONBLOCK: equ 0x0004
    17                                  
    18                                  ;screen clean definition
    19                                  row_cells:	equ 32	; set to any (reasonable) value you wish
    20                                  column_cells: 	equ 78 ; set to any (reasonable) value you wish
    21                                  array_length:	equ row_cells * column_cells + row_cells ; cells are mapped to bytes in the array and a new line char ends each row
    22                                  
    23                                  ;This is regarding the sleep time
    24                                  timespec:
    25 00000000 0000000000000000            tv_sec  dq 0
    26 00000008 00C2EB0B00000000            tv_nsec dq 200000000
    27                                  
    28                                  
    29                                  ;This is for cleaning up the screen
    30 00000010 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"
    31                                  clear_length:	equ $-clear
    32                                  	
    33                                  	
    34                                  
    35                                  ; Start Message
    36 00000017 202020202020202054-     msg1: db "        TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    36 00000020 45434E4F4C4F474943-
    36 00000029 4F20444520434F5354-
    36 00000032 412052494341202020-
    36 0000003B 20202020200A0D     
    37 00000042 202020202020202041-     msg2: db "        ARQUITECTURA DE COMPUTADORAS I        ", 0xA, 0xD
    37 0000004B 525155495445435455-
    37 00000054 524120444520434F4D-
    37 0000005D 50555441444F524153-
    37 00000066 204920202020202020-
    37 0000006F 200A0D             
    38 00000072 202020202020202045-     msg3: db "        ESTUDIANTE: HENRY NUNEZ PEREZ        ", 0xA, 0xD
    38 0000007B 5354554449414E5445-
    38 00000084 3A2048454E5259204E-
    38 0000008D 554E455A2050455245-
    38 00000096 5A2020202020202020-
    38 0000009F 0A0D               
    39 000000A1 202020202020202050-     msg4: db "        PROFESOR: ERNESTO RIVERA ALVARADO        ", 0xA, 0xD
    39 000000AA 524F4645534F523A20-
    39 000000B3 45524E4553544F2052-
    39 000000BC 495645524120414C56-
    39 000000C5 415241444F20202020-
    39 000000CE 202020200A0D       
    40 000000D4 202020202020202041-     msg5: db "        ARKANOID RETRO        ", 0xA, 0xD
    40 000000DD 524B414E4F49442052-
    40 000000E6 4554524F2020202020-
    40 000000EF 2020200A0D         
    41 000000F4 202020202020202050-     msg6: db "        PRESIONE CUALQUIER TECLA PARA INICIAR        ", 0xA, 0xD
    41 000000FD 524553494F4E452043-
    41 00000106 55414C515549455220-
    41 0000010F 5445434C4120504152-
    41 00000118 4120494E4943494152-
    41 00000121 20202020202020200A-
    41 0000012A 0D                 
    42                                  msg1_length: equ $-msg1
    43                                  msg2_length: equ $-msg2
    44                                  msg3_length: equ $-msg3
    45                                  msg4_length: equ $-msg4
    46                                  msg5_length: equ $-msg5
    47                                  msg6_length: equ $-msg6
    48                                  
    49                                  ; Usefull macros
    50                                  
    51                                  
    52                                  
    53                                  %macro setnonblocking 0
    54                                  	mov rax, sys_fcntl
    55                                      mov rdi, STDIN_FILENO
    56                                      mov rsi, F_SETFL
    57                                      mov rdx, O_NONBLOCK
    58                                      syscall
    59                                  %endmacro
    60                                  
    61                                  %macro unsetnonblocking 0
    62                                  	mov rax, sys_fcntl
    63                                      mov rdi, STDIN_FILENO
    64                                      mov rsi, F_SETFL
    65                                      mov rdx, 0
    66                                      syscall
    67                                  %endmacro
    68                                  
    69                                  %macro full_line 0
    70                                      times column_cells db "X"
    71                                      db 0x0a, 0xD
    72                                  %endmacro
    73                                  
    74                                  %macro hollow_line 0
    75                                      db "X"
    76                                      times column_cells-2 db " "
    77                                      db "X", 0x0a, 0xD
    78                                  %endmacro
    79                                  
    80                                  
    81                                  %macro print 2
    82                                  	mov eax, sys_write
    83                                  	mov edi, 1 	; stdout
    84                                  	mov rsi, %1
    85                                  	mov edx, %2
    86                                  	syscall
    87                                  %endmacro
    88                                  
    89                                  %macro getchar 0
    90                                  	mov     rax, sys_read
    91                                      mov     rdi, STDIN_FILENO
    92                                      mov     rsi, input_char
    93                                      mov     rdx, 1 ; number of bytes
    94                                      syscall         ;read text input from keyboard
    95                                  %endmacro
    96                                  
    97                                  %macro sleeptime 0
    98                                  	mov eax, sys_nanosleep
    99                                  	mov rdi, timespec
   100                                  	xor esi, esi		; ignore remaining time in case of call interruption
   101                                  	syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   102                                  %endmacro
   103                                  
   104                                  
   105                                  
   106                                  global _start
   107                                  
   108                                  section .bss
   109                                  
   110 00000000 ??                      input_char: resb 1
   111                                  
   112                                  section .data
   113                                  
   114                                  	; Guardamos la plantilla del tablero (32 filas)
   115                                      board_template:
   116                                          full_line
    70 00000000 58<rep 4Eh>         <1>  times column_cells db "X"
    71 0000004E 0A0D                <1>  db 0x0a, 0xD
   117                                          %rep 30
   118                                          hollow_line
   119                                          %endrep
   118                              <1>  hollow_line
    75 00000050 58                  <2>  db "X"
    76 00000051 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000009D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000A0 58                  <2>  db "X"
    76 000000A1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000000ED 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000000F0 58                  <2>  db "X"
    76 000000F1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000013D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000140 58                  <2>  db "X"
    76 00000141 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000018D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000190 58                  <2>  db "X"
    76 00000191 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000001DD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000001E0 58                  <2>  db "X"
    76 000001E1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000022D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000230 58                  <2>  db "X"
    76 00000231 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000027D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000280 58                  <2>  db "X"
    76 00000281 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000002CD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000002D0 58                  <2>  db "X"
    76 000002D1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000031D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000320 58                  <2>  db "X"
    76 00000321 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000036D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000370 58                  <2>  db "X"
    76 00000371 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000003BD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000003C0 58                  <2>  db "X"
    76 000003C1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000040D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000410 58                  <2>  db "X"
    76 00000411 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000045D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000460 58                  <2>  db "X"
    76 00000461 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000004AD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000004B0 58                  <2>  db "X"
    76 000004B1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000004FD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000500 58                  <2>  db "X"
    76 00000501 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000054D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000550 58                  <2>  db "X"
    76 00000551 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000059D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005A0 58                  <2>  db "X"
    76 000005A1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000005ED 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000005F0 58                  <2>  db "X"
    76 000005F1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000063D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000640 58                  <2>  db "X"
    76 00000641 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000068D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000690 58                  <2>  db "X"
    76 00000691 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000006DD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000006E0 58                  <2>  db "X"
    76 000006E1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000072D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000730 58                  <2>  db "X"
    76 00000731 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000077D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000780 58                  <2>  db "X"
    76 00000781 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000007CD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000007D0 58                  <2>  db "X"
    76 000007D1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000081D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000820 58                  <2>  db "X"
    76 00000821 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000086D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000870 58                  <2>  db "X"
    76 00000871 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000008BD 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 000008C0 58                  <2>  db "X"
    76 000008C1 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000090D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000910 58                  <2>  db "X"
    76 00000911 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 0000095D 580A0D              <2>  db "X", 0x0a, 0xD
   118                              <1>  hollow_line
    75 00000960 58                  <2>  db "X"
    76 00000961 20<rep 4Ch>         <2>  times column_cells-2 db " "
    77 000009AD 580A0D              <2>  db "X", 0x0a, 0xD
   120                                          full_line
    70 000009B0 58<rep 4Eh>         <1>  times column_cells db "X"
    71 000009FE 0A0D                <1>  db 0x0a, 0xD
   121                                      board_template_size: equ $ - board_template
   122                                  
   123                                      ; Espacio real que se usará en la ejecución
   124 00000A00 00<rep A00h>                board: times board_template_size db 0
   125                                      board_size: equ board_template_size
   126                                  
   127                                  	; Added for the terminal issue
   128 00001400 00<rep 24h>             	termios:        times 36 db 0
   129                                  	stdin:          equ 0
   130                                  	ICANON:         equ 1<<1
   131                                  	ECHO:           equ 1<<3
   132                                  	VTIME: 			equ 5
   133                                  	VMIN:			equ 6
   134                                  	CC_C:			equ 18
   135                                  
   136                                  section .text
   137                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   138                                  canonical_off:
   139 0000012B E86F000000                      call read_stdin_termios
   140                                  
   141                                          ; clear canonical bit in local mode flags
   142 00000130 50                              push rax
   143 00000131 B802000000                      mov eax, ICANON
   144 00000136 F7D0                            not eax
   145 00000138 2105(0C140000)                  and [termios+12], eax
   146 0000013E C605(17140000)00        		mov byte[termios+CC_C+VTIME], 0
   147 00000145 C605(18140000)00        		mov byte[termios+CC_C+VMIN], 0
   148 0000014C 58                              pop rax
   149                                  
   150 0000014D E86C000000                      call write_stdin_termios
   151 00000152 C3                              ret
   152                                  
   153                                  echo_off:
   154 00000153 E847000000                      call read_stdin_termios
   155                                  
   156                                          ; clear echo bit in local mode flags
   157 00000158 50                              push rax
   158 00000159 B808000000                      mov eax, ECHO
   159 0000015E F7D0                            not eax
   160 00000160 2105(0C140000)                  and [termios+12], eax
   161 00000166 58                              pop rax
   162                                  
   163 00000167 E852000000                      call write_stdin_termios
   164 0000016C C3                              ret
   165                                  
   166                                  canonical_on:
   167 0000016D E82D000000                      call read_stdin_termios
   168                                  
   169                                          ; set canonical bit in local mode flags
   170 00000172 830D(0C140000)02                or dword [termios+12], ICANON
   171 00000179 C605(17140000)00        		mov byte[termios+CC_C+VTIME], 0
   172 00000180 C605(18140000)01        		mov byte[termios+CC_C+VMIN], 1
   173 00000187 E832000000                      call write_stdin_termios
   174 0000018C C3                              ret
   175                                  
   176                                  echo_on:
   177 0000018D E80D000000                      call read_stdin_termios
   178                                  
   179                                          ; set echo bit in local mode flags
   180 00000192 830D(0C140000)08                or dword [termios+12], ECHO
   181                                  
   182 00000199 E820000000                      call write_stdin_termios
   183 0000019E C3                              ret
   184                                  
   185                                  read_stdin_termios:
   186 0000019F 50                              push rax
   187 000001A0 53                              push rbx
   188 000001A1 51                              push rcx
   189 000001A2 52                              push rdx
   190                                  
   191 000001A3 B836000000                      mov eax, 36h
   192 000001A8 BB00000000                      mov ebx, stdin
   193 000001AD B901540000                      mov ecx, 5401h
   194 000001B2 BA[00140000]                    mov edx, termios
   195 000001B7 CD80                            int 80h
   196                                  
   197 000001B9 5A                              pop rdx
   198 000001BA 59                              pop rcx
   199 000001BB 5B                              pop rbx
   200 000001BC 58                              pop rax
   201 000001BD C3                              ret
   202                                  
   203                                  write_stdin_termios:
   204 000001BE 50                              push rax
   205 000001BF 53                              push rbx
   206 000001C0 51                              push rcx
   207 000001C1 52                              push rdx
   208                                  
   209 000001C2 B836000000                      mov eax, 36h
   210 000001C7 BB00000000                      mov ebx, stdin
   211 000001CC B902540000                      mov ecx, 5402h
   212 000001D1 BA[00140000]                    mov edx, termios
   213 000001D6 CD80                            int 80h
   214                                  
   215 000001D8 5A                              pop rdx
   216 000001D9 59                              pop rcx
   217 000001DA 5B                              pop rbx
   218 000001DB 58                              pop rax
   219 000001DC C3                              ret
   220                                  
   221                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   222                                  
   223                                  char_equal: equ 61
   224                                  char_space: equ 32
   225                                  char_O: equ 79
   226                                  left_direction: equ -1
   227                                  right_direction: equ 1
   228                                  
   229                                  
   230                                  section .data
   231                                  
   232                                  ; Mensajes para los niveles
   233 00001424 4E4956454C20                level_msg: db "NIVEL "
   234                                      level_msg_len: equ $ - level_msg
   235 0000142A 31                          level_1_char: db "1"
   236 0000142B 32                          level_2_char: db "2"
   237 0000142C 33                          level_3_char: db "3"
   238 0000142D 34                          level_4_char: db "4"
   239 0000142E 35                          level_5_char: db "5"
   240                                      level_char_len: equ 1
   241                                  
   242                                      ; Timespec para la pausa del mensaje de nivel
   243                                      level_display_time:
   244 0000142F 0100000000000000                lvl_tv_sec dq 1           ; 1 segundo
   245 00001437 0000000000000000                lvl_tv_nsec dq 0
   246                                          
   247 0000143F [3813000000000000]      	pallet_position dq board + 40 + 29 * (column_cells +2)
   248 00001447 0500000000000000        	pallet_size dq 5
   249                                  
   250 0000144F 2800000000000000        	ball_x_pos: dq 40
   251 00001457 1C00000000000000        	ball_y_pos: dq 28
   252 0000145F 0100000000000000            ball_direction_x dq 1    ; 1 = derecha, -1 = izquierda
   253 00001467 FFFFFFFFFFFFFFFF            ball_direction_y dq -1   ; -1 = arriba, 1 = abajo
   254 0000146F 00                          ball_moving db 0         ; 0 = estática, 1 = en movimiento
   255                                  
   256                                  ; Definir los límites de la pantalla o área de juego
   257                                      board_top_left_x equ 1
   258                                      board_top_left_y equ 1
   259                                      board_bottom_right_x equ column_cells - 1
   260                                      board_bottom_right_y equ row_cells
   261                                  
   262                                      ; Limites laterales
   263                                      left_edge equ board_top_left_x               ; Límite izquierdo en la primera columna
   264                                      right_edge equ board_bottom_right_x         ; Límite derecho en la última columna
   265                                  
   266                                      ; O también puedes hacerlo así si prefieres usando las coordenadas en memoria para obtener la ubicación exacta:
   267 00001470 [500A000000000000]          left_edge_position dq board + (board_top_left_y * (column_cells + 2)) ; Coordenada de la parte izquierda del marco
   268 00001478 [9C0A000000000000]          right_edge_position dq board + (board_top_left_y * (column_cells + 2) + board_bottom_right_x - 1) ; Coordenada de la parte derecha del marco
   269                                  
   270                                      ; Definición de tipos de bloques
   271 00001480 555555555555                block_type_1: db "UUUUUU"    ; Durabilidad 1
   272 00001486 4F4F4F4F4F4F                block_type_2: db "OOOOOO"    ; Durabilidad 2
   273 0000148C 444444444444                block_type_3: db "DDDDDD"    ; Durabilidad 3
   274 00001492 4C4C4C4C4C4C                block_type_4: db "LLLLLL"    ; Durabilidad 4
   275 00001498 565656565656                block_type_5: db "VVVVVV"    ; Durabilidad 5
   276 0000149E 383838383838                block_type_6: db "888888"    ; Durabilidad 6
   277                                      block_length: equ 6        ; Longitud de cada bloque
   278                                  
   279                                      ; Estructura para el nivel actual
   280 000014A4 01                          current_level db 1
   281 000014A5 00                          blocks_remaining db 0
   282                                  
   283                                      ; Definición del nivel 1 (ejemplo con múltiples bloques)destroyed_blocks
   284                                      ; Formato: x_pos, y_pos, tipo_bloque, durabilidad_actual
   285                                      level1_blocks:
   286                                          ; Tercera fila (tipo 3)
   287 000014A6 38070301                        db 56, 7, 3, 1    ; Bloque 7
   288 000014AA 14070301                        db 20, 7, 3, 1    ; Bloque 7
   289 000014AE 1E070301                        db 30, 7, 3, 1    ; Bloque 7
   290                                      level1_blocks_count equ 3   ; Cantidad total de bloques
   291                                  
   292                                      ; Nivel 2: Bloques de prueba
   293                                      level2_blocks:
   294 000014B2 3C070101                        db 60, 7, 1, 1    ; Un bloque simple en el nivel 2   ; Un bloque simple en el nivel 2
   295                                      level2_blocks_count equ 1
   296                                  
   297                                      ; Nivel 3
   298                                      level3_blocks:
   299 000014B6 3C070201                        db 60, 7, 2, 1    ; Bloque 1
   300                                  
   301                                      level3_blocks_count equ 1
   302                                  
   303                                      ; Nivel 4
   304                                      level4_blocks:
   305 000014BA 3C070401                        db 60, 7, 4, 1    ; Bloque 1
   306                                      level4_blocks_count equ 1
   307                                  
   308                                      ; Nivel 5
   309                                      level5_blocks:
   310 000014BE 3C070501                        db 60, 7, 5, 1    ; Bloque 1
   311                                      level5_blocks_count equ 1
   312                                  
   313                                      ; Array para mantener el estado de los bloques
   314 000014C2 00<rep 64h>                 block_states: times 100 db 0  ; Durabilidad actual de cada bloque
   315                                  
   316                                      
   317                                      ; Variables para almacenar los valores
   318 00001526 0000000000000000            current_score dq 0          ; Score actual
   319 0000152E 00                          destroyed_blocks db 0       ; Bloques destruidos en el nivel actual
   320                                      
   321                                      ; Buffer para convertir números a string
   322 0000152F 00<rep 14h>                 number_buffer: times 20 db 0
   323                                  
   324 00001543 4023242640                  enemy_chars db "@", "#", "$", "&", "@"    ; El nivel 1 y 5 comparten el mismo caracter (@)
   325                                      
   326                                      ; Estructura para los enemigos (x, y, activo)
   327 00001548 00<rep 1Eh>                 enemies: times 10 * 3 db 0     ; Máximo 5 enemigos, cada uno con 3 bytes (x, y, activo)
   328 00001566 0A                          enemies_count db 10            ; Cantidad de enemigos activos
   329                                      
   330 00001567 3200000000000000            enemy_points dq 50              ; Puntos por destruir un enemigo
   331 0000156F 00                          enemy_move_counter db 0         ; Contador para controlar velocidad de movimiento
   332 00001570 01                          enemy_move_delay db 1           ; Mover enemigos cada N ciclos
   333 00001571 00                          enemy_move_total db 0      ; Contador total de movimientos
   334 00001572 00                          enemy_target db 0          ; 0 = persigue bola, 1 = persigue paleta
   335 00001573 14                          MOVEMENT_THRESHOLD db 20   ; Número de movimientos antes de cambiar objetivo
   336                                   ;Formato: número de bloques destruidos necesario para que aparezca cada enemigo
   337                                      ; Añade esto en la sección .dataa
   338 00001574 00010206080A0C0E10-         level1_spawn_points: db 0, 1, 2, 6, 8, 10, 12, 14, 16, 18    ; 10 enemigos, cada 2 bloques
   338 0000157D 12                 
   339 0000157E 01030507090B0D0F11-         level2_spawn_points: db 1, 3, 5, 7, 9, 11, 13, 15, 17, 19    ; 10 enemigos, cada 2 bloques
   339 00001587 13                 
   340 00001588 000306090C0F121518-         level3_spawn_points: db 0, 3, 6, 9, 12, 15, 18, 21, 24, 27   ; 10 enemigos, cada 3 bloques
   340 00001591 1B                 
   341 00001592 0104070A0D10131619-         level4_spawn_points: db 1, 4, 7, 10, 13, 16, 19, 22, 25, 28  ; 10 enemigos, cada 3 bloques
   341 0000159B 1C                 
   342 0000159C 00050A0F14191E2328-         level5_spawn_points: db 0, 5, 10, 15, 20, 25, 30, 35, 40, 45 ; 10 enemigos, cada 5 bloques
   342 000015A5 2D                 
   343                                          ; Arreglo de punteros a los spawn points de cada nivel
   344                                      spawn_points_table:
   345 000015A6 [7415000000000000]              dq level1_spawn_points
   346 000015AE [7E15000000000000]              dq level2_spawn_points
   347 000015B6 [8815000000000000]              dq level3_spawn_points
   348 000015BE [9215000000000000]              dq level4_spawn_points
   349 000015C6 [9C15000000000000]              dq level5_spawn_points
   350                                  
   351                                      ; Variables para el comportamiento de enemigos
   352 000015CE 1E                          BEHAVIOR_CHANGE_TIME db 30    ; Ciclos antes de cambiar comportamiento
   353 000015CF 00                          behavior_counter db 0          ; Contador para cambio de comportamiento
   354 000015D0 00                          current_behavior db 0          ; 0 = persigue bola, 1 = persigue paleta
   355 000015D1 00<rep Ah>                  enemy_spawns_triggered: times 10 db 0  ; 0 = no spawned, 1 = spawned
   356                                  
   357 000015DB 50756E74616A653A20-         score_label: db "Puntaje: [          ]", 0xA, 0xD  ; 10 espacios para el número
   357 000015E4 5B2020202020202020-
   357 000015ED 20205D0A0D         
   358                                      score_label_len: equ $ - score_label
   359 000015F2 426C6F717565732064-         blocks_label: db "Bloques destruidos: [   ]", 0xA, 0xD  ; 3 espacios para el número
   359 000015FB 657374727569646F73-
   359 00001604 3A205B2020205D0A0D 
   360                                      blocks_label_len: equ $ - blocks_label
   361                                      
   362                                      ; Posición donde insertar los números en los labels
   363                                      score_pos equ 10    ; Posición después de "Puntaje: ["
   364                                      blocks_pos equ 20   ; Posición después de "Bloques destruidos: ["
   365                                  
   366                                  
   367                                  section .text
   368                                  
   369                                  ;	Function: print_ball
   370                                  ; This function displays the position of the ball
   371                                  ; Arguments: none
   372                                  ;
   373                                  ; Return:
   374                                  ;	Void
   375                                  print_ball:
   376 000001DD 4C8B05(4F140000)        	mov r8, [ball_x_pos]
   377 000001E4 4C8B0D(57140000)        	mov r9, [ball_y_pos]
   378 000001EB 4981C0[000A0000]        	add r8, board
   379                                  
   380 000001F2 4C89C9                  	mov rcx, r9
   381 000001F5 B850000000              	mov rax, column_cells + 2
   382 000001FA 48F7E9                  	imul rcx
   383                                  	
   384 000001FD 4901C0                  	add r8, rax
   385 00000200 41C6004F                	mov byte [r8], char_O
   386 00000204 C3                      	ret
   387                                  
   388                                  	
   389                                  	;mov rax, board + r8 + r9 * (column_cells + 2)
   390                                  	
   391                                  
   392                                  
   393                                  
   394                                  ;	Function: print_pallet
   395                                  ; This function moves the pallet in the game
   396                                  ; Arguments: none
   397                                  ;
   398                                  ; Return;
   399                                  ;	void
   400                                  print_pallet:
   401 00000205 4C8B05(3F140000)        	mov r8, [pallet_position]
   402 0000020C 488B0D(47140000)        	mov rcx, [pallet_size]
   403                                  	.write_pallet:
   404 00000213 41C6003D                		mov byte [r8], char_equal
   405 00000217 49FFC0                  		inc r8
   406 0000021A 48FFC9                  		dec rcx
   407 0000021D 75F4                    		jnz .write_pallet
   408                                  
   409 0000021F C3                      	ret
   410                                  	
   411                                  ;	Function: move_pallet
   412                                  ; This function is in charge of moving the pallet in a given direction
   413                                  ; Arguments:
   414                                  ;	rdi: left direction or right direction
   415                                  ;
   416                                  ; Return:
   417                                  ;	void
   418                                  move_pallet:
   419                                      
   420 00000220 803D(6F140000)00            cmp byte [ball_moving], 0
   421 00000227 7507                        jne .continue_movement
   422 00000229 C605(6F140000)01            mov byte [ball_moving], 1
   423                                  
   424                                      .continue_movement:
   425 00000230 4883FFFF                        cmp rdi, left_direction
   426 00000234 7531                            jne .move_right
   427                                  
   428                                          .move_left:
   429                                              ; Verificar si la siguiente posición sería una X (borde izquierdo)
   430 00000236 4C8B05(3F140000)                    mov r8, [pallet_position]
   431 0000023D 49FFC8                              dec r8              ; Verificar la posición a la izquierda
   432 00000240 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
   433 00000243 3C58                                cmp al, 'X'        ; Comparar si es una X
   434 00000245 744D                                je .end            ; Si es X, no mover
   435                                              
   436 00000247 4C8B05(3F140000)                    mov r8, [pallet_position]
   437 0000024E 4C8B0D(47140000)                    mov r9, [pallet_size]
   438 00000255 43C64408FF20                        mov byte [r8 + r9 - 1], char_space  ; Borrar último carácter de la paleta
   439 0000025B 49FFC8                              dec r8
   440 0000025E 4C8905(3F140000)                    mov [pallet_position], r8
   441 00000265 EB2D                                jmp .end
   442                                              
   443                                          .move_right:
   444                                              ; Verificar si la siguiente posición después de la paleta sería una X
   445 00000267 4C8B05(3F140000)                    mov r8, [pallet_position]
   446 0000026E 4C8B0D(47140000)                    mov r9, [pallet_size]
   447 00000275 4D01C8                              add r8, r9         ; Moverse al final de la paleta
   448 00000278 418A00                              mov al, [r8]       ; Cargar el carácter en esa posición
   449 0000027B 3C58                                cmp al, 'X'        ; Comparar si es una X
   450 0000027D 7415                                je .end            ; Si es X, no mover
   451                                              
   452 0000027F 4C8B05(3F140000)                    mov r8, [pallet_position]
   453 00000286 41C60020                            mov byte [r8], char_space
   454 0000028A 49FFC0                              inc r8
   455 0000028D 4C8905(3F140000)                    mov [pallet_position], r8
   456                                          .end:
   457 00000294 C3                                  ret
   458                                  
   459                                  move_ball:
   460                                      ; Si la bola no está en movimiento, no hacer nada
   461 00000295 803D(6F140000)00            cmp byte [ball_moving], 0
   462 0000029C 0F8406010000                je .end
   463                                  
   464                                      ; Borrar la posición actual de la bola
   465 000002A2 4C8B05(4F140000)            mov r8, [ball_x_pos]
   466 000002A9 4C8B0D(57140000)            mov r9, [ball_y_pos]
   467 000002B0 4981C0[000A0000]            add r8, board
   468 000002B7 4C89C9                      mov rcx, r9
   469 000002BA B850000000                  mov rax, column_cells + 2
   470 000002BF 48F7E9                      imul rcx
   471 000002C2 4901C0                      add r8, rax
   472 000002C5 41C60020                    mov byte [r8], char_space    ; Borrar la bola actual
   473                                  
   474                                      ; Calcular siguiente posición X
   475 000002C9 4C8B05(4F140000)            mov r8, [ball_x_pos]
   476 000002D0 4C8B0D(57140000)            mov r9, [ball_y_pos]
   477 000002D7 488B05(5F140000)            mov rax, [ball_direction_x]
   478 000002DE 4901C0                      add r8, rax                  ; Nueva posición X
   479                                  
   480                                      ; Calcular la dirección de memoria para la siguiente posición
   481 000002E1 4D89C2                      mov r10, r8
   482 000002E4 4981C2[000A0000]            add r10, board
   483 000002EB 4C89C9                      mov rcx, r9
   484 000002EE B850000000                  mov rax, column_cells + 2
   485 000002F3 48F7E9                      imul rcx
   486 000002F6 4901C2                      add r10, rax
   487                                  
   488                                      ; Verificar si hay una X en la siguiente posición X
   489 000002F9 418A02                      mov al, [r10]
   490 000002FC 3C58                        cmp al, 'X'
   491 000002FE 750C                        jne .check_block_x
   492 00000300 48F71D(5F140000)            neg qword [ball_direction_x]  ; Cambiar dirección X si hay una X
   493 00000307 E99C000000                  jmp .end
   494                                  
   495                                      .check_block_x:
   496                                          ; Verificar colisión con bloques en X
   497 0000030C 4150                            push r8     ; Guardar registros que usa check_block_collision
   498 0000030E 4151                            push r9
   499 00000310 4152                            push r10
   500 00000312 E80D060000                      call check_block_collision
   501 00000317 415A                            pop r10
   502 00000319 4159                            pop r9
   503 0000031B 4158                            pop r8
   504 0000031D 4885C0                          test rax, rax
   505 00000320 7409                            jz .check_paddle_x      ; Si no hay colisión, verificar paleta
   506 00000322 48F71D(5F140000)                neg qword [ball_direction_x]  ; Si hay colisión, rebotar
   507 00000329 EB7D                            jmp .end
   508                                  
   509                                      .check_paddle_x:
   510                                          ; Verificar si hay una paleta (=) en la siguiente posición X
   511 0000032B 41803A3D                        cmp byte [r10], char_equal
   512 0000032F 7509                            jne .check_y_movement
   513 00000331 48F71D(5F140000)                neg qword [ball_direction_x]  ; Cambiar dirección X si hay una paleta
   514 00000338 EB6E                            jmp .end
   515                                  
   516                                      .check_y_movement:
   517                                          ; Calcular siguiente posición Y
   518 0000033A 488B05(67140000)                mov rax, [ball_direction_y]
   519 00000341 4901C1                          add r9, rax                  ; Nueva posición Y
   520                                  
   521                                          ; Calcular la dirección de memoria para la siguiente posición Y
   522 00000344 4D89C2                          mov r10, r8
   523 00000347 4981C2[000A0000]                add r10, board
   524 0000034E 4C89C9                          mov rcx, r9
   525 00000351 B850000000                      mov rax, column_cells + 2
   526 00000356 48F7E9                          imul rcx
   527 00000359 4901C2                          add r10, rax
   528                                  
   529                                          ; Verificar si hay una X en la siguiente posición Y
   530 0000035C 418A02                          mov al, [r10]
   531 0000035F 3C58                            cmp al, 'X'
   532 00000361 7509                            jne .check_block_y
   533 00000363 48F71D(67140000)                neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una X
   534 0000036A EB3C                            jmp .end
   535                                  
   536                                      .check_block_y:
   537                                          ; Verificar colisión con bloques en Y
   538 0000036C 4150                            push r8     ; Guardar registros que usa check_block_collision
   539 0000036E 4151                            push r9
   540 00000370 4152                            push r10
   541 00000372 E8AD050000                      call check_block_collision
   542 00000377 415A                            pop r10
   543 00000379 4159                            pop r9
   544 0000037B 4158                            pop r8
   545 0000037D 4885C0                          test rax, rax
   546 00000380 7409                            jz .check_paddle_y      ; Si no hay colisión, verificar paleta
   547 00000382 48F71D(67140000)                neg qword [ball_direction_y]  ; Si hay colisión, rebotar
   548 00000389 EB1D                            jmp .end
   549                                  
   550                                      .check_paddle_y:
   551                                      ; Verificar si hay una paleta (=) en la siguiente posición Y
   552 0000038B 41803A3D                    cmp byte [r10], char_equal
   553 0000038F 7509                        jne .update_position
   554 00000391 48F71D(67140000)            neg qword [ball_direction_y]  ; Cambiar dirección Y si hay una paleta
   555 00000398 EB0E                        jmp .end
   556                                  
   557                                  
   558                                      .update_position:
   559 0000039A 4C8905(4F140000)                mov [ball_x_pos], r8
   560 000003A1 4C890D(57140000)                mov [ball_y_pos], r9
   561                                  
   562                                      .end:
   563 000003A8 C3                              ret
   564                                  
   565                                  ; Función para inicializar el nivel
   566                                  ; Función para inicializar el nivel
   567                                  ; Función para mostrar el número de nivel
   568                                  display_level_number:
   569 000003A9 55                          push rbp
   570 000003AA 4889E5                      mov rbp, rsp
   571                                      
   572                                      ; Limpiar la pantalla primero
   573                                      print clear, clear_length
    82 000003AD B801000000          <1>  mov eax, sys_write
    83 000003B2 BF01000000          <1>  mov edi, 1
    84 000003B7 48BE-               <1>  mov rsi, %1
    84 000003B9 [1000000000000000]  <1>
    85 000003C1 BA07000000          <1>  mov edx, %2
    86 000003C6 0F05                <1>  syscall
   574                                      
   575                                      ; Calcular la posición central para el mensaje
   576                                      ; Para el mensaje "NIVEL X", necesitamos centrar 7 caracteres
   577 000003C8 B84E000000                  mov rax, column_cells
   578 000003CD 4883E807                    sub rax, 7                  ; longitud de "NIVEL X"
   579 000003D1 48D1E8                      shr rax, 1                  ; dividir por 2 para centrar
   580                                      
   581                                      ; Calcular la fila central
   582 000003D4 BB20000000                  mov rbx, row_cells
   583 000003D9 48D1EB                      shr rbx, 1                  ; dividir por 2 para obtener la fila central
   584                                      
   585                                      ; Calcular el offset en el buffer
   586 000003DC B950000000                  mov rcx, column_cells + 2   ; ancho total de una línea incluyendo newline
   587 000003E1 48F7E3                      mul rbx                     ; multiplicar por la fila central
   588 000003E4 4801D8                      add rax, rbx                ; añadir el offset horizontal
   589                                      
   590                                      ; Escribir "NIVEL " en la posición calculada
   591 000003E7 488DB8[000A0000]            lea rdi, [board + rax]
   592 000003EE 48BE-                       mov rsi, level_msg
   592 000003F0 [2414000000000000] 
   593 000003F8 B906000000                  mov rcx, level_msg_len
   594 000003FD F3A4                        rep movsb
   595                                      
   596                                      ; Escribir el número del nivel
   597 000003FF 8A05(A4140000)              mov al, [current_level]
   598 00000405 0430                        add al, '0'                 ; convertir a ASCII
   599 00000407 8807                        mov [rdi], al
   600                                      
   601                                      ; Mostrar el board con el mensaje
   602                                      print board, board_size
    82 00000409 B801000000          <1>  mov eax, sys_write
    83 0000040E BF01000000          <1>  mov edi, 1
    84 00000413 48BE-               <1>  mov rsi, %1
    84 00000415 [000A000000000000]  <1>
    85 0000041D BA000A0000          <1>  mov edx, %2
    86 00000422 0F05                <1>  syscall
   603                                      
   604                                      ; Esperar un segundo
   605 00000424 B823000000                  mov rax, sys_nanosleep
   606 00000429 48BF-                       mov rdi, level_display_time
   606 0000042B [2F14000000000000] 
   607 00000433 4831F6                      xor rsi, rsi
   608 00000436 0F05                        syscall
   609                                      
   610 00000438 5D                          pop rbp
   611 00000439 C3                          ret
   612                                  
   613                                  ; Función para inicializar un tablero vacío
   614                                  init_empty_board:
   615 0000043A 56                          push rsi
   616 0000043B 57                          push rdi
   617 0000043C 51                          push rcx
   618 0000043D 50                          push rax
   619                                  
   620 0000043E 488D35(00000000)            lea rsi, [board_template]   ; Copiar la plantilla del tablero
   621 00000445 488D3D(000A0000)            lea rdi, [board]            ; Destino: el tablero actual
   622 0000044C B9000A0000                  mov rcx, board_template_size
   623 00000451 F3A4                        rep movsb                   ; Copiar el tablero
   624                                  
   625 00000453 58                          pop rax
   626 00000454 59                          pop rcx
   627 00000455 5F                          pop rdi
   628 00000456 5E                          pop rsi
   629 00000457 C3                          ret
   630                                  
   631                                  
   632                                  init_level:
   633                                      ; 1) Copiamos board_template en board para que quede "virgen"
   634 00000458 C605(2E150000)00            mov byte [destroyed_blocks], 0 
   635 0000045F E8D6FFFFFF                  call init_empty_board
   636 00000464 E840FFFFFF                  call display_level_number
   637 00000469 E8B5050000                  call init_enemies
   638                                      
   639 0000046E 56                          push rsi
   640 0000046F 57                          push rdi
   641 00000470 51                          push rcx
   642 00000471 50                          push rax
   643                                  
   644 00000472 488D35(00000000)            lea rsi, [board_template]
   645 00000479 488D3D(000A0000)            lea rdi, [board]
   646 00000480 B9000A0000                  mov rcx, board_template_size
   647 00000485 F3A4                        rep movsb                 ; Copiamos la plantilla a board
   648                                  
   649 00000487 58                          pop rax
   650 00000488 59                          pop rcx
   651 00000489 5F                          pop rdi
   652 0000048A 5E                          pop rsi
   653                                  
   654 0000048B B90A000000                  mov rcx, 10
   655 00000490 4831C0                      xor rax, rax
   656 00000493 488D3D(D1150000)            lea rdi, [enemy_spawns_triggered]
   657 0000049A F3AA                        rep stosb      
   658                                  
   659                                      ; Verificar el nivel actual y cargar los bloques correspondientes
   660 0000049C 803D(A4140000)01            cmp byte [current_level], 1
   661 000004A3 7431                        je .level1
   662 000004A5 803D(A4140000)02            cmp byte [current_level], 2
   663 000004AC 7454                        je .level2
   664 000004AE 803D(A4140000)03            cmp byte [current_level], 3
   665 000004B5 7477                        je .level3
   666 000004B7 803D(A4140000)04            cmp byte [current_level], 4
   667 000004BE 0F8492000000                je .level4
   668 000004C4 803D(A4140000)05            cmp byte [current_level], 5
   669 000004CB 0F84AD000000                je .level5
   670 000004D1 E9D0000000                  jmp .done
   671                                  
   672                                  
   673                                  
   674                                      .level1:
   675 000004D6 C605(A5140000)03                mov byte [blocks_remaining], level1_blocks_count
   676 000004DD 4831C9                          xor rcx, rcx             
   677                                          .init_loop1:
   678 000004E0 4883F903                            cmp rcx, level1_blocks_count
   679 000004E4 0F8DBC000000                        jge .done
   680 000004EA 4889C8                              mov rax, rcx         
   681 000004ED 48C1E002                            shl rax, 2          
   682 000004F1 8A90[A9140000]                      mov dl, byte [level1_blocks + rax + 3]  
   683 000004F7 8891[C2140000]                      mov byte [block_states + rcx], dl
   684 000004FD 48FFC1                              inc rcx
   685 00000500 EBDE                                jmp .init_loop1
   686                                  
   687                                      .level2:
   688 00000502 C605(A5140000)01                mov byte [blocks_remaining], level2_blocks_count
   689 00000509 4831C9                          xor rcx, rcx             
   690                                          .init_loop2:
   691 0000050C 4883F901                            cmp rcx, level2_blocks_count
   692 00000510 0F8D90000000                        jge .done
   693 00000516 4889C8                              mov rax, rcx         
   694 00000519 48C1E002                            shl rax, 2          
   695 0000051D 8A90[B5140000]                      mov dl, byte [level2_blocks + rax + 3]  
   696 00000523 8891[C2140000]                      mov byte [block_states + rcx], dl
   697 00000529 48FFC1                              inc rcx
   698 0000052C EBDE                                jmp .init_loop2
   699                                      .level3:
   700 0000052E C605(A5140000)01                mov byte [blocks_remaining], level3_blocks_count
   701 00000535 4831C9                          xor rcx, rcx             
   702                                          .init_loop3:
   703 00000538 4883F901                            cmp rcx, level3_blocks_count
   704 0000053C 7D68                                jge .done
   705 0000053E 4889C8                              mov rax, rcx         
   706 00000541 48C1E002                            shl rax, 2          
   707 00000545 8A90[B9140000]                      mov dl, byte [level3_blocks + rax + 3]  
   708 0000054B 8891[C2140000]                      mov byte [block_states + rcx], dl
   709 00000551 48FFC1                              inc rcx
   710 00000554 EBE2                                jmp .init_loop3
   711                                  
   712                                      .level4:
   713 00000556 C605(A5140000)01                mov byte [blocks_remaining], level4_blocks_count
   714 0000055D 4831C9                          xor rcx, rcx             
   715                                          .init_loop4:
   716 00000560 4883F901                            cmp rcx, level4_blocks_count
   717 00000564 7D40                                jge .done
   718 00000566 4889C8                              mov rax, rcx         
   719 00000569 48C1E002                            shl rax, 2          
   720 0000056D 8A90[BD140000]                      mov dl, byte [level4_blocks + rax + 3]  
   721 00000573 8891[C2140000]                      mov byte [block_states + rcx], dl
   722 00000579 48FFC1                              inc rcx
   723 0000057C EBE2                                jmp .init_loop4
   724                                  
   725                                      .level5:
   726 0000057E C605(A5140000)01                mov byte [blocks_remaining], level5_blocks_count
   727 00000585 4831C9                          xor rcx, rcx             
   728                                          .init_loop5:
   729 00000588 4883F901                            cmp rcx, level5_blocks_count
   730 0000058C 7D18                                jge .done
   731 0000058E 4889C8                              mov rax, rcx         
   732 00000591 48C1E002                            shl rax, 2          
   733 00000595 8A90[C1140000]                      mov dl, byte [level5_blocks + rax + 3]  
   734 0000059B 8891[C2140000]                      mov byte [block_states + rcx], dl
   735 000005A1 48FFC1                              inc rcx
   736 000005A4 EBE2                                jmp .init_loop5
   737                                      .done:
   738 000005A6 C3                              ret
   739                                  
   740                                  
   741                                  ; Función para verificar y manejar la transición de nivel
   742                                  check_level_complete:
   743                                      ; Verificar si quedan bloques
   744 000005A7 803D(A5140000)00            cmp byte [blocks_remaining], 0
   745 000005AE 753C                        jne .not_complete
   746                                      
   747                                      ; Incrementar el nivel
   748 000005B0 FE05(A4140000)              inc byte [current_level]
   749                                      
   750                                      ; Verificar si hemos completado todos los niveles (asumiendo 2 niveles por ahora)
   751 000005B6 803D(A4140000)06            cmp byte [current_level], 6
   752 000005BD 742E                        je game_win
   753                                      
   754                                      ; Reinicializar el juego para el siguiente nivel
   755 000005BF E894FEFFFF                  call init_level
   756                                      
   757                                      ; Reinicializar la posición de la bola y la paleta
   758 000005C4 48C705(4F140000)28-         mov qword [ball_x_pos], 40
   758 000005CC 000000             
   759 000005CF 48C705(57140000)1C-         mov qword [ball_y_pos], 28
   759 000005D7 000000             
   760 000005DA C605(6F140000)00            mov byte [ball_moving], 0
   761 000005E1 48C705(3F140000)-           mov qword [pallet_position], board + 40 + 29 * (column_cells + 2)
   761 000005E8 [38130000]         
   762                                      
   763                                      .not_complete:
   764 000005EC C3                              ret
   765                                  
   766                                      ; Nueva función para manejar la victoria del juego
   767                                  game_win:
   768                                      ; Limpiar la pantalla primero
   769                                      print clear, clear_length
    82 000005ED B801000000          <1>  mov eax, sys_write
    83 000005F2 BF01000000          <1>  mov edi, 1
    84 000005F7 48BE-               <1>  mov rsi, %1
    84 000005F9 [1000000000000000]  <1>
    85 00000601 BA07000000          <1>  mov edx, %2
    86 00000606 0F05                <1>  syscall
   770                                      
   771                                      ; Mensaje de victoria
   772 00000608 488B05(26150000)            mov rax, [current_score]    ; Obtener el puntaje final
   773 0000060F 48BF-                       mov rdi, number_buffer      ; Convertir a string
   773 00000611 [2F15000000000000] 
   774 00000619 E8AE010000                  call number_to_string
   775                                      
   776                                      ; Definir mensaje de victoria
   777                                      section .data
   778 0000160D C2A146656C69636964-             win_msg: db "¡Felicidades! ¡Has ganado!", 0xA, 0xD
   778 00001616 616465732120C2A148-
   778 0000161F 61732067616E61646F-
   778 00001628 210A0D             
   779                                          win_msg_len: equ $ - win_msg
   780 0000162B 50756E74616A652066-             score_msg: db "Puntaje final: "
   780 00001634 696E616C3A20       
   781                                          score_msg_len: equ $ - score_msg
   782                                      section .text
   783                                      
   784                                      ; Imprimir mensajes
   785                                      print win_msg, win_msg_len
    82 0000061E B801000000          <1>  mov eax, sys_write
    83 00000623 BF01000000          <1>  mov edi, 1
    84 00000628 48BE-               <1>  mov rsi, %1
    84 0000062A [0D16000000000000]  <1>
    85 00000632 BA1E000000          <1>  mov edx, %2
    86 00000637 0F05                <1>  syscall
   786                                      print score_msg, score_msg_len
    82 00000639 B801000000          <1>  mov eax, sys_write
    83 0000063E BF01000000          <1>  mov edi, 1
    84 00000643 48BE-               <1>  mov rsi, %1
    84 00000645 [2B16000000000000]  <1>
    85 0000064D BA0F000000          <1>  mov edx, %2
    86 00000652 0F05                <1>  syscall
   787                                      print number_buffer, 20
    82 00000654 B801000000          <1>  mov eax, sys_write
    83 00000659 BF01000000          <1>  mov edi, 1
    84 0000065E 48BE-               <1>  mov rsi, %1
    84 00000660 [2F15000000000000]  <1>
    85 00000668 BA14000000          <1>  mov edx, %2
    86 0000066D 0F05                <1>  syscall
   788                                      
   789                                      ; Esperar un momento antes de salir
   790 0000066F 48C70586F9FFFF0200-         mov qword [timespec + 0], 2    ; 2 segundos
   790 00000678 0000               
   791 0000067A 48C70583F9FFFF0000-         mov qword [timespec + 8], 0    ; 0 nanosegundos
   791 00000683 0000               
   792                                      sleeptime
    98 00000685 B823000000          <1>  mov eax, sys_nanosleep
    99 0000068A 48BF-               <1>  mov rdi, timespec
    99 0000068C [0000000000000000]  <1>
   100 00000694 31F6                <1>  xor esi, esi
   101 00000696 0F05                <1>  syscall
   793                                      
   794 00000698 E9CF080000                  jmp exit
   795                                  
   796                                  ; Función para imprimir los bloques
   797                                  ; Función modificada para imprimir bloques
   798                                  
   799                                  ; Primero, agreguemos una función para obtener el puntero a los bloques del nivel actual
   800                                  get_current_level_blocks:
   801 0000069D 803D(A4140000)01            cmp byte [current_level], 1
   802 000006A4 7428                        je .level1
   803 000006A6 803D(A4140000)02            cmp byte [current_level], 2
   804 000006AD 7427                        je .level2
   805 000006AF 803D(A4140000)03            cmp byte [current_level], 3
   806 000006B6 7426                        je .level3
   807 000006B8 803D(A4140000)04            cmp byte [current_level], 4
   808 000006BF 7425                        je .level4
   809 000006C1 803D(A4140000)05            cmp byte [current_level], 5
   810 000006C8 7424                        je .level5
   811                                      ; Si llegamos aquí, hay un error en el nivel
   812 000006CA 4831C0                      xor rax, rax
   813 000006CD C3                          ret
   814                                  
   815                                      .level1:
   816 000006CE 488D05(A6140000)                lea rax, [level1_blocks]
   817 000006D5 C3                              ret
   818                                      .level2:
   819 000006D6 488D05(B2140000)                lea rax, [level2_blocks]
   820 000006DD C3                              ret
   821                                      .level3:
   822 000006DE 488D05(B6140000)                lea rax, [level3_blocks]
   823 000006E5 C3                              ret
   824                                      .level4:
   825 000006E6 488D05(BA140000)                lea rax, [level4_blocks]
   826 000006ED C3                              ret
   827                                      .level5:
   828 000006EE 488D05(BE140000)                lea rax, [level5_blocks]
   829 000006F5 C3                              ret
   830                                  ; Función para obtener la cantidad de bloques del nivel actual
   831                                  get_current_level_count:
   832 000006F6 803D(A4140000)01            cmp byte [current_level], 1
   833 000006FD 7428                        je .level1
   834 000006FF 803D(A4140000)02            cmp byte [current_level], 2
   835 00000706 7425                        je .level2
   836 00000708 803D(A4140000)03            cmp byte [current_level], 3
   837 0000070F 7422                        je .level3
   838 00000711 803D(A4140000)04            cmp byte [current_level], 4
   839 00000718 741F                        je .level4
   840 0000071A 803D(A4140000)05            cmp byte [current_level], 5
   841 00000721 741C                        je .level5
   842                                      ; Si llegamos aquí, hay un error en el nivel
   843 00000723 4831C0                      xor rax, rax
   844 00000726 C3                          ret
   845                                  
   846                                      .level1:
   847 00000727 B803000000                      mov rax, level1_blocks_count
   848 0000072C C3                              ret
   849                                      .level2:
   850 0000072D B801000000                      mov rax, level2_blocks_count
   851 00000732 C3                              ret
   852                                      .level3:
   853 00000733 B801000000                      mov rax, level3_blocks_count
   854 00000738 C3                              ret
   855                                      .level4:
   856 00000739 B801000000                      mov rax, level4_blocks_count
   857 0000073E C3                              ret
   858                                      .level5:
   859 0000073F B801000000                      mov rax, level5_blocks_count
   860 00000744 C3                              ret
   861                                  
   862                                  
   863                                  print_blocks:
   864 00000745 55                          push rbp
   865 00000746 4889E5                      mov rbp, rsp
   866                                      
   867                                      ; Obtener puntero a los bloques del nivel actual
   868 00000749 E84FFFFFFF                  call get_current_level_blocks
   869 0000074E 4989C5                      mov r13, rax                  ; Guardar puntero a los bloques en r13
   870                                      
   871                                      ; Obtener cantidad de bloques del nivel actual
   872 00000751 E8A0FFFFFF                  call get_current_level_count
   873 00000756 4989C6                      mov r14, rax                  ; Guardar cantidad de bloques en r14
   874                                      
   875 00000759 4D31E4                      xor r12, r12                  ; Índice del bloque actual
   876                                      
   877                                      .print_loop:
   878 0000075C 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
   879 0000075F 7D69                            jge .end
   880                                          
   881                                          ; Verificar si el bloque está activo
   882 00000761 490FB68424-                     movzx rax, byte [block_states + r12]
   882 00000766 [C2140000]         
   883 0000076A 4885C0                          test rax, rax
   884 0000076D 7456                            jz .next_block
   885                                          
   886                                          ; Obtener posición y tipo del bloque usando r13
   887 0000076F 478A44A500                      mov r8b, [r13 + r12 * 4]      ; X position
   888 00000774 478A4CA501                      mov r9b, [r13 + r12 * 4 + 1]  ; Y position
   889 00000779 478A54A502                      mov r10b, [r13 + r12 * 4 + 2] ; Tipo de bloque
   890                                          
   891                                          ; El resto de la lógica de impresión permanece igual
   892 0000077E 4D0FB6C0                        movzx r8, r8b
   893 00000782 4D0FB6C9                        movzx r9, r9b
   894 00000786 4981C0[000A0000]                add r8, board
   895 0000078D B850000000                      mov rax, column_cells + 2
   896 00000792 49F7E1                          mul r9
   897 00000795 4901C0                          add r8, rax
   898                                          
   899 00000798 B906000000                      mov rcx, block_length
   900 0000079D 48BE-                           mov rsi, block_type_1
   900 0000079F [8014000000000000] 
   901 000007A7 490FB6C2                        movzx rax, r10b
   902 000007AB 48FFC8                          dec rax
   903 000007AE 486BC006                        imul rax, block_length
   904 000007B2 4801C6                          add rsi, rax
   905                                          
   906                                      .print_block_chars:
   907 000007B5 8A06                            mov al, [rsi]
   908 000007B7 418800                          mov [r8], al
   909 000007BA 48FFC6                          inc rsi
   910 000007BD 49FFC0                          inc r8
   911 000007C0 48FFC9                          dec rcx
   912 000007C3 75F0                            jnz .print_block_chars
   913                                          
   914                                      .next_block:
   915 000007C5 49FFC4                          inc r12
   916 000007C8 EB92                            jmp .print_loop
   917                                          
   918                                      .end:
   919 000007CA 5D                              pop rbp
   920 000007CB C3                              ret
   921                                  
   922                                  ; Función para convertir número a string
   923                                  ; Input: RAX = número a convertir
   924                                  ; RDI = buffer donde escribir el string
   925                                  number_to_string:
   926 000007CC 53                          push rbx
   927 000007CD 52                          push rdx
   928 000007CE 56                          push rsi
   929 000007CF BB0A000000                  mov rbx, 10          ; Divisor
   930 000007D4 B900000000                  mov rcx, 0          ; Contador de dígitos
   931                                      
   932                                      ; Si el número es 0, manejarlo especialmente
   933 000007D9 4885C0                      test rax, rax
   934 000007DC 7509                        jnz .convert_loop
   935 000007DE C60730                      mov byte [rdi], '0'
   936 000007E1 C6470100                    mov byte [rdi + 1], 0
   937 000007E5 EB20                        jmp .end
   938                                      
   939                                      .convert_loop:
   940 000007E7 4831D2                          xor rdx, rdx    ; Limpiar RDX para la división
   941 000007EA 48F7F3                          div rbx         ; RAX/10, cociente en RAX, residuo en RDX
   942 000007ED 80C230                          add dl, '0'     ; Convertir a ASCII
   943 000007F0 52                              push rdx        ; Guardar el dígito
   944 000007F1 48FFC1                          inc rcx         ; Incrementar contador
   945 000007F4 4885C0                          test rax, rax   ; Verificar si quedan más dígitos
   946 000007F7 75EE                            jnz .convert_loop
   947                                          
   948                                      .write_loop:
   949 000007F9 5A                              pop rdx         ; Obtener dígito
   950 000007FA 8817                            mov [rdi], dl   ; Escribir al buffer
   951 000007FC 48FFC7                          inc rdi         ; Siguiente posición
   952 000007FF 48FFC9                          dec rcx         ; Decrementar contador
   953 00000802 75F5                            jnz .write_loop
   954                                          
   955 00000804 C60700                      mov byte [rdi], 0   ; Null terminator
   956                                      
   957                                      .end:
   958 00000807 5E                          pop rsi
   959 00000808 5A                          pop rdx
   960 00000809 5B                          pop rbx
   961 0000080A C3                          ret
   962                                  
   963                                  ; Función para imprimir los labels
   964                                  print_labels:
   965 0000080B 55                          push rbp
   966 0000080C 4889E5                      mov rbp, rsp
   967                                  
   968                                      ; Crear buffer temporal
   969 0000080F 4883EC20                    sub rsp, 32
   970                                  
   971                                      ; Copiar labels a buffer temporal
   972 00000813 4889E7                      mov rdi, rsp
   973 00000816 488D35(DB150000)            lea rsi, [score_label]
   974 0000081D B917000000                  mov rcx, score_label_len
   975 00000822 F3A4                        rep movsb
   976                                  
   977                                      ; Convertir score a string
   978 00000824 488B05(26150000)            mov rax, [current_score]
   979 0000082B 48BF-                       mov rdi, number_buffer
   979 0000082D [2F15000000000000] 
   980 00000835 E892FFFFFF                  call number_to_string
   981                                  
   982                                      ; Calcular longitud del número
   983 0000083A B900000000                  mov rcx, 0
   984 0000083F 48BF-                       mov rdi, number_buffer
   984 00000841 [2F15000000000000] 
   985                                      .count_loop:
   986 00000849 803C0F00                        cmp byte [rdi + rcx], 0
   987 0000084D 7405                            je .count_done
   988 0000084F 48FFC1                          inc rcx
   989 00000852 EBF5                            jmp .count_loop
   990                                      .count_done:
   991                                  
   992                                      ; Insertar el número en la posición correcta, alineado a la derecha
   993 00000854 4889E7                      mov rdi, rsp
   994 00000857 4883C70A                    add rdi, score_pos           ; Moverse a la posición del número
   995 0000085B BE0A000000                  mov rsi, 10                  ; Espacio reservado para el número
   996 00000860 4829CE                      sub rsi, rcx                 ; Calcular padding necesario
   997                                      .pad_loop:
   998 00000863 4885F6                          test rsi, rsi
   999 00000866 740B                            jz .pad_done
  1000 00000868 C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  1001 0000086B 48FFC7                          inc rdi
  1002 0000086E 48FFCE                          dec rsi
  1003 00000871 EBF0                            jmp .pad_loop
  1004                                      .pad_done:
  1005                                  
  1006                                      ; Copiar el número
  1007 00000873 48BE-                       mov rsi, number_buffer
  1007 00000875 [2F15000000000000] 
  1008 0000087D F3A4                        rep movsb
  1009                                  
  1010                                      ; Imprimir el buffer completo
  1011                                      print rsp, score_label_len
    82 0000087F B801000000          <1>  mov eax, sys_write
    83 00000884 BF01000000          <1>  mov edi, 1
    84 00000889 4889E6              <1>  mov rsi, %1
    85 0000088C BA17000000          <1>  mov edx, %2
    86 00000891 0F05                <1>  syscall
  1012                                  
  1013                                      ; Repetir proceso para bloques destruidos
  1014 00000893 4889E7                      mov rdi, rsp
  1015 00000896 488D35(F2150000)            lea rsi, [blocks_label]
  1016 0000089D B91B000000                  mov rcx, blocks_label_len
  1017 000008A2 F3A4                        rep movsb
  1018                                  
  1019                                      ; Verificar que el `[` esté en su posición correcta
  1020 000008A4 4889E7                      mov rdi, rsp
  1021 000008A7 4883C713                    add rdi, blocks_pos - 1  ; Posición exacta donde debe ir el '['
  1022 000008AB C6075B                      mov byte [rdi], '['      ; Garantizar que el `[` esté presente
  1023                                  
  1024                                      ; Convertir bloques destruidos a string
  1025 000008AE 480FB605(2E150000)          movzx rax, byte [destroyed_blocks]
  1026 000008B6 48BF-                       mov rdi, number_buffer
  1026 000008B8 [2F15000000000000] 
  1027 000008C0 E807FFFFFF                  call number_to_string
  1028                                  
  1029                                      ; Calcular longitud del número
  1030 000008C5 B900000000                  mov rcx, 0
  1031 000008CA 48BF-                       mov rdi, number_buffer
  1031 000008CC [2F15000000000000] 
  1032                                      .count_loop2:
  1033 000008D4 803C0F00                        cmp byte [rdi + rcx], 0
  1034 000008D8 7405                            je .count_done2
  1035 000008DA 48FFC1                          inc rcx
  1036 000008DD EBF5                            jmp .count_loop2
  1037                                      .count_done2:
  1038                                  
  1039                                      ; Insertar el número en la posición correcta, alineado a la derecha
  1040 000008DF 4889E7                      mov rdi, rsp
  1041 000008E2 4883C714                    add rdi, blocks_pos         ; Moverse a la posición del número
  1042 000008E6 BE03000000                  mov rsi, 3                  ; Espacio reservado para el número
  1043 000008EB 4829CE                      sub rsi, rcx                ; Calcular padding necesario
  1044                                      .pad_loop2:
  1045 000008EE 4885F6                          test rsi, rsi
  1046 000008F1 740B                            jz .pad_done2
  1047 000008F3 C60720                          mov byte [rdi], ' '      ; Añadir espacio de padding
  1048 000008F6 48FFC7                          inc rdi
  1049 000008F9 48FFCE                          dec rsi
  1050 000008FC EBF0                            jmp .pad_loop2
  1051                                      .pad_done2:
  1052                                  
  1053                                      ; Copiar el número
  1054 000008FE 48BE-                       mov rsi, number_buffer
  1054 00000900 [2F15000000000000] 
  1055 00000908 F3A4                        rep movsb
  1056                                  
  1057                                      ; Imprimir el buffer completo
  1058                                      print rsp, blocks_label_len
    82 0000090A B801000000          <1>  mov eax, sys_write
    83 0000090F BF01000000          <1>  mov edi, 1
    84 00000914 4889E6              <1>  mov rsi, %1
    85 00000917 BA1B000000          <1>  mov edx, %2
    86 0000091C 0F05                <1>  syscall
  1059                                  
  1060                                      ; Restaurar stack
  1061 0000091E 4883C420                    add rsp, 32
  1062 00000922 5D                          pop rbp
  1063 00000923 C3                          ret
  1064                                  
  1065                                  
  1066                                  ; Función modificada para detectar colisión
  1067                                  ; Función mejorada para detectar colisión y manejar la física
  1068                                  ; Función corregida para manejar colisiones con bloques completos
  1069                                  ;---------------------------------------------------------
  1070                                  ; check_block_collision:
  1071                                  ;   Detecta si en la posición r10 (que apunta a board[])
  1072                                  ;   hay un bloque ("UUUU","OOOO","DDDD","LLLL","VVVV","8888").
  1073                                  ;   De ser así, localiza qué bloque es, lo "destruye" y
  1074                                  ;   retorna 1 para indicar colisión. Si no encuentra bloque,
  1075                                  ;   retorna 0.
  1076                                  ;---------------------------------------------------------
  1077                                  ;--------------------------------------
  1078                                  ; check_block_collision
  1079                                  ;--------------------------------------
  1080                                  ; Actualizar check_block_collision para usar el nivel actual
  1081                                  check_block_collision:
  1082 00000924 55                          push rbp
  1083 00000925 4889E5                      mov rbp, rsp
  1084                                  
  1085 00000928 418A02                      mov al, [r10]
  1086                                  
  1087                                      ; Verificación de caracteres igual que antes...
  1088 0000092B 3C55                        cmp al, 'U'  
  1089 0000092D 7419                        je .possible
  1090 0000092F 3C4F                        cmp al, 'O'  
  1091 00000931 7415                        je .possible
  1092 00000933 3C44                        cmp al, 'D'  
  1093 00000935 7411                        je .possible
  1094 00000937 3C4C                        cmp al, 'L'  
  1095 00000939 740D                        je .possible
  1096 0000093B 3C56                        cmp al, 'V'  
  1097 0000093D 7409                        je .possible
  1098 0000093F 3C38                        cmp al, '8'  
  1099 00000941 7405                        je .possible
  1100                                  
  1101 00000943 4831C0                      xor rax, rax
  1102 00000946 5D                          pop rbp
  1103 00000947 C3                          ret
  1104                                  
  1105                                      .possible:
  1106 00000948 53                              push rbx
  1107 00000949 57                              push rdi
  1108 0000094A 56                              push rsi
  1109 0000094B 4154                            push r12
  1110                                  
  1111                                          ; Obtener puntero a los bloques del nivel actual
  1112 0000094D E84BFDFFFF                      call get_current_level_blocks
  1113 00000952 4989C5                          mov r13, rax                  ; Guardar puntero a los bloques
  1114                                          
  1115                                          ; Obtener cantidad de bloques del nivel actual
  1116 00000955 E89CFDFFFF                      call get_current_level_count
  1117 0000095A 4989C6                          mov r14, rax                  ; Guardar cantidad de bloques
  1118                                  
  1119 0000095D 4D31E4                          xor r12, r12
  1120                                      .find_block_loop:
  1121 00000960 4D39F4                          cmp r12, r14                  ; Usar r14 en lugar de level1_blocks_count
  1122 00000963 0F8DB0000000                    jge .no_block_found
  1123                                  
  1124                                          ; El resto de la lógica de verificación de colisiones...
  1125 00000969 418A9C24[C2140000]              mov bl, [block_states + r12]
  1126 00000971 84DB                            test bl, bl
  1127 00000973 0F8498000000                    jz .next_block
  1128                                  
  1129                                          ; Usar r13 para acceder a los bloques del nivel actual
  1130 00000979 4C89E8                          mov rax, r13
  1131 0000097C 4D6BE404                        imul r12, 4
  1132 00000980 4C01E0                          add rax, r12
  1133 00000983 8A10                            mov dl, [rax]       ; x
  1134 00000985 8A4801                          mov cl, [rax+1]     ; y
  1135                                  
  1136                                          ; Revertir r12
  1137 00000988 4D89E4                          mov r12, r12
  1138 0000098B 49C1EC02                        shr r12, 2
  1139                                  
  1140                                          ; La misma lógica de detección de colisiones...
  1141 0000098F 488D3D(000A0000)                lea rdi, [board]
  1142 00000996 4831C0                          xor rax, rax
  1143 00000999 B850000000                      mov rax, column_cells + 2
  1144 0000099E 480FB6C9                        movzx rcx, cl
  1145 000009A2 480FAFC1                        imul rax, rcx
  1146 000009A6 4801C7                          add rdi, rax
  1147 000009A9 480FB6C2                        movzx rax, dl
  1148 000009AD 4801C7                          add rdi, rax
  1149                                  
  1150 000009B0 4939FA                          cmp r10, rdi
  1151 000009B3 725C                            jb .next_block
  1152 000009B5 488D5F06                        lea rbx, [rdi + 6]
  1153 000009B9 4939DA                          cmp r10, rbx
  1154 000009BC 7353                            jae .next_block
  1155                                  
  1156                                          ; Manejo de colisión igual que antes...
  1157 000009BE 41FE8C24[C2140000]              dec byte [block_states + r12]
  1158 000009C6 418A9C24[C2140000]              mov bl, [block_states + r12]
  1159 000009CE 84DB                            test bl, bl
  1160 000009D0 7533                            jnz .still_alive
  1161                                  
  1162 000009D2 B906000000                      mov rcx, block_length
  1163                                      .erase_block_chars:
  1164 000009D7 C60720                          mov byte [rdi], char_space
  1165 000009DA 48FFC7                          inc rdi
  1166 000009DD E2F8                            loop .erase_block_chars
  1167                                  
  1168 000009DF FE0D(A5140000)                  dec byte [blocks_remaining]
  1169 000009E5 FE05(2E150000)                  inc byte [destroyed_blocks]     ; Incrementar contador de bloques destruidos
  1170                                      
  1171                                          ; Calcular puntos basado en la durabilidad original del bloque
  1172 000009EB 4C89E0                          mov rax, r12                    ; Índice del bloque
  1173 000009EE 486BC004                        imul rax, 4                     ; Multiplicar por 4 (tamaño de cada entrada)
  1174 000009F2 4C01E8                          add rax, r13                    ; Agregar base de los bloques
  1175 000009F5 480FB64002                      movzx rax, byte [rax + 2]       ; Obtener tipo de bloque (durabilidad original)
  1176 000009FA 486BC00A                        imul rax, 10                    ; Multiplicar por 10
  1177 000009FE 480105(26150000)                add [current_score], rax        ; Agregar al score total
  1178                                  
  1179                                      .still_alive:
  1180 00000A05 B801000000                      mov rax, 1
  1181 00000A0A 415C                            pop r12
  1182 00000A0C 5E                              pop rsi
  1183 00000A0D 5F                              pop rdi
  1184 00000A0E 5B                              pop rbx
  1185 00000A0F 5D                              pop rbp
  1186 00000A10 C3                              ret
  1187                                  
  1188                                      .next_block:
  1189 00000A11 49FFC4                          inc r12
  1190 00000A14 E947FFFFFF                      jmp .find_block_loop
  1191                                  
  1192                                      .no_block_found:
  1193 00000A19 4831C0                          xor rax, rax
  1194 00000A1C 415C                            pop r12
  1195 00000A1E 5E                              pop rsi
  1196 00000A1F 5F                              pop rdi
  1197 00000A20 5B                              pop rbx
  1198 00000A21 5D                              pop rbp
  1199 00000A22 C3                              ret
  1200                                  
  1201                                  init_enemies:
  1202 00000A23 55                          push rbp
  1203 00000A24 4889E5                      mov rbp, rsp
  1204                                      ; Reiniciar contadores de movimiento
  1205 00000A27 C605(71150000)00            mov byte [enemy_move_total], 0
  1206 00000A2E C605(72150000)00            mov byte [enemy_target], 0 ; Inicialmente persigue la bola
  1207                                      ; Limpiar estado previo de enemigos
  1208 00000A35 B90A000000                  mov rcx, 10 ; Máximo 10 enemigos
  1209 00000A3A 488D3D(48150000)            lea rdi, [enemies]
  1210 00000A41 30C0                        xor al, al
  1211 00000A43 F3AA                        rep stosb ; Limpiar datos de enemigos
  1212                                      
  1213                                      ; Marcar todos los enemigos como inactivos
  1214 00000A45 488D3D(D1150000)            lea rdi, [enemy_spawns_triggered]
  1215 00000A4C 30C0                        xor al, al
  1216 00000A4E B90A000000                  mov rcx, 10
  1217 00000A53 F3AA                        rep stosb ; Todos los enemigos no han sido activados aún
  1218                                  
  1219 00000A55 5D                          pop rbp
  1220 00000A56 C3                          ret
  1221                                  
  1222                                  
  1223                                  ; Función para mover enemigos
  1224                                  move_enemies:
  1225 00000A57 55                          push rbp
  1226 00000A58 4889E5                      mov rbp, rsp
  1227                                      
  1228                                      ; Incrementar contador de movimiento
  1229 00000A5B FE05(6F150000)              inc byte [enemy_move_counter]
  1230 00000A61 480FB605(6F150000)          movzx rax, byte [enemy_move_counter]
  1231 00000A69 3A05(70150000)              cmp al, [enemy_move_delay]
  1232 00000A6F 0F85AA010000                jne .end
  1233                                      
  1234                                      ; Resetear contador
  1235 00000A75 C605(6F150000)00            mov byte [enemy_move_counter], 0
  1236                                      
  1237 00000A7C 4D31E4                      xor r12, r12                    ; Índice del enemigo
  1238                                      
  1239                                      .enemy_loop:
  1240 00000A7F 4983FC0A                        cmp r12, 10                     ; Máximo 10 enemigos
  1241 00000A83 0F8D96010000                    jge .end
  1242                                          
  1243                                          ; Calcular offset del enemigo actual
  1244 00000A89 4C89E0                          mov rax, r12
  1245 00000A8C 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  1246 00000A90 488DB0[48150000]                lea rsi, [enemies + rax]
  1247                                          
  1248                                          ; Verificar si el enemigo está activo
  1249 00000A97 807E0201                        cmp byte [rsi + 2], 1
  1250 00000A9B 0F8576010000                    jne .next_enemy
  1251                                          
  1252                                          ; Obtener posición actual
  1253 00000AA1 4C0FB606                        movzx r8, byte [rsi]            ; X
  1254 00000AA5 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  1255                                          
  1256                                          ; Limpiar posición actual antes de mover
  1257 00000AAA 4150                            push r8
  1258 00000AAC 4151                            push r9
  1259 00000AAE B84E000000                      mov rax, column_cells
  1260 00000AB3 4883C002                        add rax, 2
  1261 00000AB7 49F7E1                          mul r9
  1262 00000ABA 4C01C0                          add rax, r8
  1263 00000ABD 488DB8[000A0000]                lea rdi, [board + rax]
  1264 00000AC4 C60720                          mov byte [rdi], ' '         ; Limpiar rastro
  1265 00000AC7 4159                            pop r9
  1266 00000AC9 4158                            pop r8
  1267                                  
  1268                                          ; Determinar comportamiento basado en índice
  1269 00000ACB 4C89E0                          mov rax, r12
  1270 00000ACE 4883E001                        and rax, 1                      ; 0 para índices pares, 1 para impares
  1271 00000AD2 4885C0                          test rax, rax
  1272 00000AD5 7402                            jz .chase_ball
  1273 00000AD7 EB31                            jmp .chase_paddle             ; Si es 1, perseguir paleta
  1274                                          
  1275                                          ; Perseguir bola (comportamiento original)
  1276                                      .chase_ball:
  1277 00000AD9 4C8B15(4F140000)                mov r10, [ball_x_pos]
  1278 00000AE0 4D39D0                          cmp r8, r10
  1279 00000AE3 0F8F96000000                    jg .move_left
  1280 00000AE9 0F8C95000000                    jl .move_right
  1281                                          
  1282 00000AEF 4C8B15(57140000)                mov r10, [ball_y_pos]
  1283 00000AF6 4D39D1                          cmp r9, r10
  1284 00000AF9 0F8F8A000000                    jg .move_up
  1285 00000AFF 0F8C89000000                    jl .move_down
  1286 00000B05 E9A5000000                      jmp .check_collision
  1287                                          
  1288                                      .chase_paddle:
  1289                                          ; Obtener la posición X actual de la paleta
  1290 00000B0A 4C8B15(3F140000)                mov r10, [pallet_position]
  1291 00000B11 4981EA[000A0000]                sub r10, board              ; Convertir a offset relativo
  1292                                          
  1293                                          ; Calcular la posición X real de la paleta
  1294 00000B18 4C89D0                          mov rax, r10
  1295 00000B1B BB4E000000                      mov rbx, column_cells
  1296 00000B20 4883C302                        add rbx, 2                  ; Añadir newline chars
  1297 00000B24 4831D2                          xor rdx, rdx
  1298 00000B27 48F7F3                          div rbx                     ; rax = y, rdx = x
  1299                                          
  1300                                          ; rdx ahora contiene la posición X de la paleta
  1301                                          ; Añadir la mitad del tamaño de la paleta para apuntar al centro
  1302 00000B2A 488B0D(47140000)                mov rcx, [pallet_size]
  1303 00000B31 48D1E9                          shr rcx, 1                  ; Dividir por 2
  1304 00000B34 4801CA                          add rdx, rcx
  1305                                          
  1306                                          ; Comparar con posición X del enemigo y mover gradualmente
  1307 00000B37 4939D0                          cmp r8, rdx
  1308 00000B3A 7404                            je .check_y_paddle          ; Si está en la misma X, verificar Y
  1309 00000B3C 7F41                            jg .move_left              ; Si está a la derecha, mover izquierda
  1310 00000B3E 7C44                            jl .move_right             ; Si está a la izquierda, mover derecha
  1311                                  
  1312                                      .check_y_paddle:
  1313                                          ; La Y de la paleta siempre es row_cells - 2
  1314 00000B40 41BA20000000                    mov r10, row_cells
  1315 00000B46 4983EA02                        sub r10, 2
  1316                                          
  1317                                          ; Comparar con posición Y del enemigo y mover gradualmente
  1318 00000B4A 4D39D1                          cmp r9, r10
  1319 00000B4D 7404                            je .no_movement            ; Si está en la misma Y, no mover
  1320 00000B4F 7F38                            jg .move_up               ; Si está abajo, mover arriba
  1321 00000B51 7C3B                            jl .move_down             ; Si está arriba, mover abajo
  1322                                          
  1323                                      .no_movement:
  1324 00000B53 EB5A                            jmp .check_collision
  1325                                  
  1326                                      ; También agregar una nueva sección para el movimiento suave
  1327                                      .smooth_transition:
  1328                                          ; Si el enemigo está muy lejos de su objetivo, limitar el movimiento
  1329 00000B55 8A05(72150000)                  mov al, [enemy_target]
  1330 00000B5B 84C0                            test al, al
  1331 00000B5D 7450                            jz .check_collision        ; Si persigue la bola, movimiento normal
  1332                                          
  1333                                          ; Verificar distancia en X
  1334 00000B5F 4989D2                          mov r10, rdx              ; Posición X objetivo
  1335 00000B62 4D29C2                          sub r10, r8               ; Calcular diferencia
  1336 00000B65 4983FA05                        cmp r10, 5               ; Si la diferencia es mayor a 5
  1337 00000B69 7F08                            jg .limit_right_movement  ; Limitar movimiento a la derecha
  1338 00000B6B 4983FAFB                        cmp r10, -5              ; Si la diferencia es menor a -5
  1339 00000B6F 7C08                            jl .limit_left_movement   ; Limitar movimiento a la izquierda
  1340 00000B71 EB3C                            jmp .check_collision
  1341                                          
  1342                                      .limit_right_movement:
  1343 00000B73 4983C002                        add r8, 2                ; Mover solo 2 unidades a la derecha
  1344 00000B77 EB36                            jmp .check_collision
  1345                                          
  1346                                      .limit_left_movement:
  1347 00000B79 4983E802                        sub r8, 2                ; Mover solo 2 unidades a la izquierda
  1348 00000B7D EB30                            jmp .check_collision
  1349                                      .move_left:
  1350 00000B7F 49FFC8                          dec r8
  1351 00000B82 EB0F                            jmp .check_vertical
  1352                                          
  1353                                      .move_right:
  1354 00000B84 49FFC0                          inc r8
  1355 00000B87 EB0A                            jmp .check_vertical
  1356                                          
  1357                                      .move_up:
  1358 00000B89 49FFC9                          dec r9
  1359 00000B8C EB21                            jmp .check_collision
  1360                                          
  1361                                      .move_down:
  1362 00000B8E 49FFC1                          inc r9
  1363 00000B91 EB1C                            jmp .check_collision
  1364                                          
  1365                                      .check_vertical:
  1366 00000B93 8A05(72150000)                  mov al, [enemy_target]
  1367 00000B99 84C0                            test al, al
  1368 00000B9B 0F8569FFFFFF                    jnz .chase_paddle         ; Si persigue paleta, volver a su lógica
  1369 00000BA1 4C8B15(57140000)                mov r10, [ball_y_pos]     ; Si no, seguir persiguiendo la bola
  1370 00000BA8 4D39D1                          cmp r9, r10
  1371 00000BAB 7FDC                            jg .move_up
  1372 00000BAD 7CDF                            jl .move_down
  1373                                          
  1374                                      .check_collision:
  1375                                          ; Verificar colisión con bordes
  1376 00000BAF 4983F801                        cmp r8, 1                       ; Borde izquierdo
  1377 00000BB3 7E62                            jle .next_enemy
  1378 00000BB5 4983F84E                        cmp r8, column_cells
  1379 00000BB9 7D5C                            jge .next_enemy
  1380 00000BBB 4983F901                        cmp r9, 1                       ; Borde superior
  1381 00000BBF 7E56                            jle .next_enemy
  1382 00000BC1 4983F920                        cmp r9, row_cells
  1383 00000BC5 7D50                            jge .next_enemy
  1384                                          
  1385                                          ; Verificar colisión con bloques antes de moverse
  1386 00000BC7 4150                            push r8
  1387 00000BC9 4151                            push r9
  1388 00000BCB 4152                            push r10
  1389                                          
  1390                                          ; Calcular posición en el tablero para verificar
  1391 00000BCD B84E000000                      mov rax, column_cells
  1392 00000BD2 4883C002                        add rax, 2
  1393 00000BD6 49F7E1                          mul r9
  1394 00000BD9 4C01C0                          add rax, r8
  1395 00000BDC 4C8D90[000A0000]                lea r10, [board + rax]
  1396                                          
  1397                                          ; Verificar si hay un bloque en la nueva posición
  1398 00000BE3 418A02                          mov al, [r10]
  1399 00000BE6 3C55                            cmp al, 'U'
  1400 00000BE8 7427                            je .invalid_move
  1401 00000BEA 3C4F                            cmp al, 'O'
  1402 00000BEC 7423                            je .invalid_move
  1403 00000BEE 3C44                            cmp al, 'D'
  1404 00000BF0 741F                            je .invalid_move
  1405 00000BF2 3C4C                            cmp al, 'L'
  1406 00000BF4 741B                            je .invalid_move
  1407 00000BF6 3C56                            cmp al, 'V'
  1408 00000BF8 7417                            je .invalid_move
  1409 00000BFA 3C38                            cmp al, '8'
  1410 00000BFC 7413                            je .invalid_move
  1411 00000BFE 3C58                            cmp al, 'X'
  1412 00000C00 740F                            je .invalid_move
  1413                                          
  1414 00000C02 415A                            pop r10
  1415 00000C04 4159                            pop r9
  1416 00000C06 4158                            pop r8
  1417                                          
  1418                                          ; Guardar nueva posición si es válida
  1419 00000C08 448806                          mov [rsi], r8b
  1420 00000C0B 44884E01                        mov [rsi + 1], r9b
  1421 00000C0F EB06                            jmp .next_enemy
  1422                                          
  1423                                      .invalid_move:
  1424 00000C11 415A                            pop r10
  1425 00000C13 4159                            pop r9
  1426 00000C15 4158                            pop r8
  1427                                          
  1428                                      .next_enemy:
  1429 00000C17 49FFC4                          inc r12
  1430 00000C1A E960FEFFFF                      jmp .enemy_loop
  1431                                          
  1432                                      .end:
  1433 00000C1F 5D                              pop rbp
  1434 00000C20 C3                              ret
  1435                                  
  1436                                  get_current_spawn_points:
  1437 00000C21 55                          push rbp
  1438 00000C22 4889E5                      mov rbp, rsp
  1439                                      
  1440 00000C25 480FB605(A4140000)          movzx rax, byte [current_level]
  1441 00000C2D 48FFC8                      dec rax                         ; Ajustar para índice base 0
  1442 00000C30 488B04C5[A6150000]          mov rax, [spawn_points_table + rax * 8]
  1443                                      
  1444 00000C38 5D                          pop rbp
  1445 00000C39 C3                          ret
  1446                                  
  1447                                  ; Función para verificar si debe aparecer un nuevo enemigo
  1448                                  check_enemy_spawn:
  1449 00000C3A 55                          push rbp
  1450 00000C3B 4889E5                      mov rbp, rsp
  1451                                      
  1452                                      ; Obtener spawn points del nivel actual
  1453 00000C3E E8DEFFFFFF                  call get_current_spawn_points
  1454 00000C43 4989C4                      mov r12, rax                    ; r12 = puntero a spawn points
  1455                                      
  1456                                      ; Obtener cantidad de bloques destruidos
  1457 00000C46 4C0FB62D(2E150000)          movzx r13, byte [destroyed_blocks]
  1458                                      
  1459                                      ; Verificar cada punto de spawn
  1460 00000C4E 4831C9                      xor rcx, rcx                    ; Índice del enemigo
  1461                                      
  1462                                      .check_loop:
  1463 00000C51 4883F90A                        cmp rcx, 10                     ; Máximo 10 enemigos
  1464 00000C55 7D4B                            jge .end
  1465                                          
  1466                                          ; Verificar si este spawn point ya fue usado
  1467 00000C57 80B9[D1150000]01                cmp byte [enemy_spawns_triggered + rcx], 1
  1468 00000C5E 743D                            je .next_enemy
  1469                                          
  1470                                          ; Verificar si este enemigo ya está activo
  1471 00000C60 4889C8                          mov rax, rcx
  1472 00000C63 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  1473 00000C67 488DB0[48150000]                lea rsi, [enemies + rax]
  1474 00000C6E 807E0201                        cmp byte [rsi + 2], 1          ; Verificar si está activo
  1475 00000C72 7429                            je .next_enemy
  1476                                          
  1477                                          ; Verificar si debemos spawnear este enemigo
  1478 00000C74 490FB6040C                      movzx rax, byte [r12 + rcx]    ; Obtener punto de spawn
  1479 00000C79 4939C5                          cmp r13, rax                   ; Comparar con bloques destruidos
  1480 00000C7C 751F                            jne .next_enemy
  1481                                          
  1482                                          ; Marcar este spawn point como usado
  1483 00000C7E C681[D1150000]01                mov byte [enemy_spawns_triggered + rcx], 1
  1484                                          
  1485                                          ; Spawner nuevo enemigo
  1486 00000C85 C60628                          mov byte [rsi], 40             ; X inicial
  1487 00000C88 C6460102                        mov byte [rsi + 1], 2          ; Y inicial
  1488 00000C8C C6460201                        mov byte [rsi + 2], 1          ; Activar enemigo
  1489                                          
  1490                                          ; Inicializar comportamiento
  1491 00000C90 4889C8                          mov rax, rcx
  1492 00000C93 4883E001                        and rax, 1                     ; Alternar comportamiento basado en índice par/impar
  1493 00000C97 8805(D0150000)                  mov [current_behavior], al      ; 0 = persigue bola, 1 = persigue paleta
  1494                                          
  1495                                      .next_enemy:
  1496 00000C9D 48FFC1                          inc rcx
  1497 00000CA0 EBAF                            jmp .check_loop
  1498                                          
  1499                                      .end:
  1500 00000CA2 5D                              pop rbp
  1501 00000CA3 C3                              ret
  1502                                  
  1503                                  
  1504                                  ; Función para dibujar enemigos
  1505                                  print_enemies:
  1506 00000CA4 55                          push rbp
  1507 00000CA5 4889E5                      mov rbp, rsp
  1508                                      
  1509 00000CA8 4D31E4                      xor r12, r12                    ; Índice del enemigo
  1510                                      
  1511                                      .print_loop:
  1512 00000CAB 4983FC0A                        cmp r12, 10                      ; Máximo 5 enemigos
  1513 00000CAF 7D4B                            jge .end
  1514                                          
  1515                                          ; Calcular offset del enemigo actual
  1516 00000CB1 4C89E0                          mov rax, r12
  1517 00000CB4 486BC003                        imul rax, 3                     ; Cada enemigo ocupa 3 bytes
  1518 00000CB8 488DB0[48150000]                lea rsi, [enemies + rax]
  1519                                          
  1520                                          ; Verificar si el enemigo está activo
  1521 00000CBF 807E0201                        cmp byte [rsi + 2], 1
  1522 00000CC3 7532                            jne .next_enemy
  1523                                          
  1524                                          ; Calcular posición en el tablero
  1525 00000CC5 4C0FB606                        movzx r8, byte [rsi]            ; X
  1526 00000CC9 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y
  1527                                          
  1528                                          ; Calcular offset en el tablero
  1529 00000CCE B84E000000                      mov rax, column_cells
  1530 00000CD3 4883C002                        add rax, 2                      ; Incluir caracteres de nueva línea
  1531 00000CD7 49F7E1                          mul r9
  1532 00000CDA 4C01C0                          add rax, r8
  1533 00000CDD 488DB8[000A0000]                lea rdi, [board + rax]
  1534                                          
  1535                                          ; Obtener carácter del enemigo según el nivel
  1536 00000CE4 480FB605(A4140000)              movzx rax, byte [current_level]
  1537 00000CEC 48FFC8                          dec rax                         ; Ajustar para índice base 0
  1538 00000CEF 8A80[43150000]                  mov al, [enemy_chars + rax]
  1539                                          
  1540                                          ; Dibujar enemigo
  1541 00000CF5 8807                            mov [rdi], al
  1542                                          
  1543                                      .next_enemy:
  1544 00000CF7 49FFC4                          inc r12
  1545 00000CFA EBAF                            jmp .print_loop
  1546                                          
  1547                                      .end:
  1548 00000CFC 5D                              pop rbp
  1549 00000CFD C3                              ret
  1550                                  
  1551                                  ; Función para verificar colisión con enemigos
  1552                                  ; Función para verificar colisión con enemigos
  1553                                  check_enemy_collision:
  1554 00000CFE 55                          push rbp
  1555 00000CFF 4889E5                      mov rbp, rsp
  1556                                      
  1557 00000D02 4D31E4                      xor r12, r12                    ; Índice del enemigo
  1558 00000D05 4831C0                      xor rax, rax                    ; Valor de retorno (0 = no colisión)
  1559                                      
  1560                                      .check_loop:
  1561 00000D08 4983FC05                        cmp r12, 5                      ; Máximo 5 enemigos
  1562 00000D0C 0F8DE9000000                    jge .end
  1563                                          
  1564                                          ; Calcular offset del enemigo actual
  1565 00000D12 4C89E1                          mov rcx, r12
  1566 00000D15 486BC903                        imul rcx, 3                     ; Cada enemigo ocupa 3 bytes
  1567 00000D19 488DB1[48150000]                lea rsi, [enemies + rcx]
  1568                                          
  1569                                          ; Verificar si el enemigo está activo
  1570 00000D20 807E0201                        cmp byte [rsi + 2], 1
  1571 00000D24 0F85C9000000                    jne .next_enemy
  1572                                          
  1573                                          ; Verificar colisión con la bola
  1574 00000D2A 4C0FB606                        movzx r8, byte [rsi]            ; X enemigo
  1575 00000D2E 4C0FB64E01                      movzx r9, byte [rsi + 1]        ; Y enemigo
  1576                                          
  1577                                          ; Verificar si la bola está en el rango del enemigo (considerando el enemigo como un área)
  1578 00000D33 4C8B15(4F140000)                mov r10, [ball_x_pos]
  1579 00000D3A 4C8B1D(57140000)                mov r11, [ball_y_pos]
  1580                                          
  1581                                          ; Comprobar colisión vertical (misma columna)
  1582 00000D41 4D39C2                          cmp r10, r8
  1583 00000D44 7525                            jne .check_horizontal
  1584 00000D46 4D29CB                          sub r11, r9
  1585 00000D49 4983FB01                        cmp r11, 1
  1586 00000D4D 7F1C                            jg .check_horizontal
  1587 00000D4F 4983FBFF                        cmp r11, -1
  1588 00000D53 7C16                            jl .check_horizontal
  1589                                          
  1590                                          ; Colisión vertical detectada
  1591 00000D55 E8A3000000                      call destroy_enemy
  1592 00000D5A 48F71D(67140000)                neg qword [ball_direction_y]    ; Invertir dirección vertical
  1593 00000D61 B801000000                      mov rax, 1
  1594 00000D66 E990000000                      jmp .end
  1595                                          
  1596                                      .check_horizontal:
  1597                                          ; Comprobar colisión horizontal (misma fila)
  1598 00000D6B 4C8B15(4F140000)                mov r10, [ball_x_pos]
  1599 00000D72 4C8B1D(57140000)                mov r11, [ball_y_pos]
  1600 00000D79 4D39CB                          cmp r11, r9
  1601 00000D7C 7522                            jne .check_paddle
  1602 00000D7E 4D29C2                          sub r10, r8
  1603 00000D81 4983FA01                        cmp r10, 1
  1604 00000D85 7F19                            jg .check_paddle
  1605 00000D87 4983FAFF                        cmp r10, -1
  1606 00000D8B 7C13                            jl .check_paddle
  1607                                          
  1608                                          ; Colisión horizontal detectada
  1609 00000D8D E86B000000                      call destroy_enemy
  1610 00000D92 48F71D(5F140000)                neg qword [ball_direction_x]    ; Invertir dirección horizontal
  1611 00000D99 B801000000                      mov rax, 1
  1612 00000D9E EB5B                            jmp .end
  1613                                          
  1614                                      .check_paddle:
  1615                                          ; Verificar colisión con la paleta
  1616 00000DA0 4C8B15(3F140000)                mov r10, [pallet_position]
  1617 00000DA7 4981EA[000A0000]                sub r10, board
  1618 00000DAE 4C89D0                          mov rax, r10
  1619 00000DB1 41BB4E000000                    mov r11, column_cells
  1620 00000DB7 4983C302                        add r11, 2
  1621 00000DBB 4831D2                          xor rdx, rdx
  1622 00000DBE 49F7F3                          div r11                     ; División para obtener la posición Y
  1623 00000DC1 4989D3                          mov r11, rdx               ; X de la paleta en r11
  1624                                          
  1625 00000DC4 488B0D(47140000)                mov rcx, [pallet_size]     ; Obtener el tamaño de la paleta
  1626                                          
  1627                                          ; Verificar si el enemigo está en la misma fila que la paleta
  1628 00000DCB 41BD20000000                    mov r13, row_cells
  1629 00000DD1 4983ED02                        sub r13, 2                 ; Y de la paleta
  1630 00000DD5 4D39E9                          cmp r9, r13               ; Comparar Y del enemigo con Y de la paleta
  1631 00000DD8 7519                            jne .next_enemy
  1632                                          
  1633                                          ; Verificar si el enemigo está dentro del rango X de la paleta
  1634 00000DDA 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X inicial de la paleta
  1635 00000DDD 7C14                            jl .next_enemy
  1636                                          
  1637 00000DDF 4901CB                          add r11, rcx              ; Añadir el tamaño de la paleta
  1638 00000DE2 4D39D8                          cmp r8, r11               ; Comparar X del enemigo con X final de la paleta
  1639 00000DE5 7F0C                            jg .next_enemy
  1640                                          
  1641                                          ; Si llegamos aquí, hay colisión con la paleta
  1642 00000DE7 E811000000                      call destroy_enemy        ; Destruir el enemigo
  1643 00000DEC B801000000                      mov rax, 1                ; Indicar que hubo colisión
  1644 00000DF1 EB08                            jmp .end
  1645                                          
  1646                                      .next_enemy:
  1647 00000DF3 49FFC4                          inc r12
  1648 00000DF6 E90DFFFFFF                      jmp .check_loop
  1649                                          
  1650                                      .end:
  1651 00000DFB 5D                              pop rbp
  1652 00000DFC C3                              ret
  1653                                  
  1654                                  ; Función para destruir un enemigo
  1655                                  destroy_enemy:
  1656                                      ; Desactivar enemigo
  1657 00000DFD C6460200                    mov byte [rsi + 2], 0   ; Marcar enemigo como inactivo
  1658                                  
  1659                                      ; Sumar puntos por destruir enemigo
  1660 00000E01 488B05(67150000)            mov rax, [enemy_points]
  1661 00000E08 480105(26150000)            add [current_score], rax
  1662                                  
  1663                                      ; No tocar bloques destruidos aquí
  1664 00000E0F C3                          ret
  1665                                  
  1666                                  
  1667                                  _start:
  1668 00000E10 E816F3FFFF              	call canonical_off
  1669 00000E15 E8DF000000              	call start_screen
  1670 00000E1A E839F6FFFF                  call init_level
  1671 00000E1F E8FFFBFFFF                  call init_enemies
  1672 00000E24 EB00                    	jmp .main_loop
  1673                                  	
  1674                                  
  1675                                  	.main_loop:
  1676 00000E26 E8E0F9FFFF                      call print_labels
  1677 00000E2B E8D5F3FFFF              		call print_pallet
  1678 00000E30 E860F4FFFF                      call move_ball
  1679 00000E35 E80BF9FFFF                      call print_blocks
  1680 00000E3A E868F7FFFF                      call check_level_complete
  1681 00000E3F E8F6FDFFFF                      call check_enemy_spawn
  1682 00000E44 E80EFCFFFF                      call move_enemies
  1683 00000E49 E8B0FEFFFF                      call check_enemy_collision
  1684 00000E4E E851FEFFFF                      call print_enemies
  1685 00000E53 E885F3FFFF              		call print_ball
  1686                                  		print board, board_size				
    82 00000E58 B801000000          <1>  mov eax, sys_write
    83 00000E5D BF01000000          <1>  mov edi, 1
    84 00000E62 48BE-               <1>  mov rsi, %1
    84 00000E64 [000A000000000000]  <1>
    85 00000E6C BA000A0000          <1>  mov edx, %2
    86 00000E71 0F05                <1>  syscall
  1687                                  		;setnonblocking	
  1688                                  	.read_more:	
  1689                                  		getchar	
    90 00000E73 B800000000          <1>  mov rax, sys_read
    91 00000E78 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 00000E7D 48BE-               <1>  mov rsi, input_char
    92 00000E7F [0000000000000000]  <1>
    93 00000E87 BA01000000          <1>  mov rdx, 1
    94 00000E8C 0F05                <1>  syscall
  1690                                  		
  1691 00000E8E 4883F801                		cmp rax, 1
  1692 00000E92 7532                        	jne .done
  1693                                  		
  1694 00000E94 8A05(00000000)          		mov al,[input_char]
  1695                                  
  1696 00000E9A 3C61                    		cmp al, 'a'
  1697 00000E9C 750E                    	    jne .not_left
  1698 00000E9E 48C7C7FFFFFFFF          	    mov rdi, left_direction
  1699 00000EA5 E876F3FFFF              		call move_pallet
  1700 00000EAA EB1A                    	    jmp .done
  1701                                  		
  1702                                  		.not_left:
  1703 00000EAC 3C64                    		 	cmp al, 'd'
  1704 00000EAE 750C                    	    	jne .not_right
  1705 00000EB0 BF01000000              			mov rdi, right_direction
  1706 00000EB5 E866F3FFFF              	    	call move_pallet
  1707 00000EBA EB0A                        		jmp .done		
  1708                                  
  1709                                  		.not_right:
  1710                                  
  1711 00000EBC 3C71                        		cmp al, 'q'
  1712 00000EBE 0F84A8000000                		je exit
  1713                                  
  1714 00000EC4 EBAD                    			jmp .read_more
  1715                                  		
  1716                                  		.done:	
  1717                                  			;unsetnonblocking		
  1718                                  			sleeptime	
    98 00000EC6 B823000000          <1>  mov eax, sys_nanosleep
    99 00000ECB 48BF-               <1>  mov rdi, timespec
    99 00000ECD [0000000000000000]  <1>
   100 00000ED5 31F6                <1>  xor esi, esi
   101 00000ED7 0F05                <1>  syscall
  1719                                  			print clear, clear_length
    82 00000ED9 B801000000          <1>  mov eax, sys_write
    83 00000EDE BF01000000          <1>  mov edi, 1
    84 00000EE3 48BE-               <1>  mov rsi, %1
    84 00000EE5 [1000000000000000]  <1>
    85 00000EED BA07000000          <1>  mov edx, %2
    86 00000EF2 0F05                <1>  syscall
  1720 00000EF4 E92DFFFFFF                  		jmp .main_loop
  1721                                  
  1722                                  
  1723                                  
  1724                                  start_screen:
  1725                                      print clear, clear_length    ; Limpiamos la pantalla primero
    82 00000EF9 B801000000          <1>  mov eax, sys_write
    83 00000EFE BF01000000          <1>  mov edi, 1
    84 00000F03 48BE-               <1>  mov rsi, %1
    84 00000F05 [1000000000000000]  <1>
    85 00000F0D BA07000000          <1>  mov edx, %2
    86 00000F12 0F05                <1>  syscall
  1726                                      print msg1, msg1_length
    82 00000F14 B801000000          <1>  mov eax, sys_write
    83 00000F19 BF01000000          <1>  mov edi, 1
    84 00000F1E 48BE-               <1>  mov rsi, %1
    84 00000F20 [1700000000000000]  <1>
    85 00000F28 BA14010000          <1>  mov edx, %2
    86 00000F2D 0F05                <1>  syscall
  1727                                      
  1728                                      .wait_for_key:              ; Agregamos una etiqueta para esperar la tecla
  1729                                          getchar                 ; Esperamos una tecla
    90 00000F2F B800000000          <1>  mov rax, sys_read
    91 00000F34 BF00000000          <1>  mov rdi, STDIN_FILENO
    92 00000F39 48BE-               <1>  mov rsi, input_char
    92 00000F3B [0000000000000000]  <1>
    93 00000F43 BA01000000          <1>  mov rdx, 1
    94 00000F48 0F05                <1>  syscall
  1730 00000F4A 4883F801                        cmp rax, 1             ; Verificamos si se leyó un carácter
  1731 00000F4E 75DF                            jne .wait_for_key      ; Si no se leyó, seguimos esperando
  1732                                          
  1733                                      print clear, clear_length   ; Limpiamos la pantalla antes de salir
    82 00000F50 B801000000          <1>  mov eax, sys_write
    83 00000F55 BF01000000          <1>  mov edi, 1
    84 00000F5A 48BE-               <1>  mov rsi, %1
    84 00000F5C [1000000000000000]  <1>
    85 00000F64 BA07000000          <1>  mov edx, %2
    86 00000F69 0F05                <1>  syscall
  1734 00000F6B C3                          ret
  1735                                  
  1736                                  exit: 
  1737 00000F6C E8FCF1FFFF              	call canonical_on
  1738 00000F71 B83C000000              	mov    rax, 60
  1739 00000F76 BF00000000                  mov    rdi, 0
  1740 00000F7B 0F05                        syscall
  1741                                  
